:start
Mock
implementation
of
the
javaxportletClientDataRequest
interface
:end
:start
Create
a
new
MockClientDataRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockClientDataRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockClientDataRequest
:end
:start
Mock
implementation
of
the
javaxportletEvent
interface
:end
:start
Create
a
new
MockEvent
with
the
given
name
:end
:start
Create
a
new
MockEvent
with
the
given
name
and
value
:end
:start
Create
a
new
MockEvent
with
the
given
name
:end
:start
Create
a
new
MockEvent
with
the
given
name
and
value
:end
:start
Mock
implementation
of
the
javaxportletEventRequest
interface
:end
:start
Create
a
new
MockEventRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockEventRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockEventRequest
:end
:start
Mock
implementation
of
the
javaxportletEventResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletMimeResponse
interface
:end
:start
Create
a
new
MockMimeResponse
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockMimeResponse
:end
:start
Create
a
new
MockMimeResponse
:end
:start
Mock
implementation
of
the
orgspringframeworkwebportletmultipartMultipartActionRequest
interface
<p>Useful
for
testing
application
controllers
that
access
multipart
uploads
The
orgspringframeworkmockwebMockMultipartFile
can
be
used
to
populate
these
mock
requests
with
files
:end
:start
Add
a
file
to
this
request
The
parameter
name
from
the
multipart
form
is
taken
from
the
orgspringframeworkwebmultipartMultipartFile#getName()
:end
:start
Mock
implementation
of
the
javaxportletPortalContext
interface
:end
:start
Create
a
new
MockPortalContext
with
default
PortletModes
(VIEW,
EDIT,
HELP)
and
default
WindowStates
(NORMAL,
MAXIMIZED,
MINIMIZED)
:end
:start
Create
a
new
MockPortalContext
with
the
given
PortletModes
and
WindowStates
:end
:start
Mock
implementation
of
the
javaxportletPortletConfig
interface
:end
:start
Create
a
new
MockPortletConfig
with
a
default
MockPortletContext
:end
:start
Create
a
new
MockPortletConfig
with
a
default
MockPortletContext
:end
:start
Create
a
new
MockPortletConfig
:end
:start
Create
a
new
MockPortletConfig
:end
:start
Mock
implementation
of
the
javaxportletPortletContext
interface
:end
:start
Create
a
new
MockPortletContext
with
no
base
path
and
a
DefaultResourceLoader
(ie
the
classpath
root
as
WAR
root)
:end
:start
Create
a
new
MockPortletContext
using
a
DefaultResourceLoader
:end
:start
Create
a
new
MockPortletContext,
using
the
specified
ResourceLoader
and
no
base
path
:end
:start
Create
a
new
MockPortletContext
:end
:start
Build
a
full
resource
location
for
the
given
path,
prepending
the
resource
base
path
of
this
MockPortletContext
:end
:start
Mock
implementation
of
the
javaxportletPortletPreferences
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletRequest
interface
:end
:start
Create
a
new
MockPortletRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockPortletRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockPortletRequest
:end
:start
Return
the
Portlet
20
lifecycle
id
for
the
current
phase
:end
:start
Return
whether
this
request
is
still
active
(that
is,
not
completed
yet)
:end
:start
Mark
this
request
as
completed
:end
:start
Check
whether
this
request
is
still
active
(that
is,
not
completed
yet),
throwing
an
IllegalStateException
if
not
active
anymore
:end
:start
Set
a
single
value
for
the
specified
property
<p>
If
there
are
already
one
or
more
values
registered
for
the
given
property
key,
they
will
be
replaced
:end
:start
Add
a
single
value
for
the
specified
property
<p>
If
there
are
already
one
or
more
values
registered
for
the
given
property
key,
the
given
value
will
be
added
to
the
end
of
the
list
:end
:start
Mock
implementation
of
the
javaxportletPortletRequestDispatcher
interface
:end
:start
Create
a
new
MockPortletRequestDispatcher
for
the
given
URL
:end
:start
Mock
implementation
of
the
javaxportletPortletResponse
interface
:end
:start
Create
a
new
MockPortletResponse
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockPortletResponse
:end
:start
Return
the
PortalContext
that
this
MockPortletResponse
runs
in,
defining
the
supported
PortletModes
and
WindowStates
:end
:start
Mock
implementation
of
the
javaxportletPortletSession
interface
:end
:start
Create
a
new
MockPortletSession
with
a
default
MockPortletContext
:end
:start
Create
a
new
MockPortletSession
:end
:start
Clear
all
of
this
session's
attributes
:end
:start
Mock
implementation
of
the
javaxportletPortletURL
interface
:end
:start
Create
a
new
MockPortletURL
for
the
given
URL
type
:end
:start
Mock
implementation
of
the
javaxportletRenderRequest
interface
:end
:start
Create
a
new
MockRenderRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockRenderRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockRenderRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockRenderRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockRenderRequest
:end
:start
Mock
implementation
of
the
javaxportletRenderResponse
interface
:end
:start
Create
a
new
MockRenderResponse
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockRenderResponse
:end
:start
Create
a
new
MockRenderResponse
:end
:start
Mock
implementation
of
the
javaxportletResourceRequest
interface
:end
:start
Create
a
new
MockResourceRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockResourceRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockResourceRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockResourceRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockResourceRequest
:end
:start
Mock
implementation
of
the
javaxportletResourceResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletResourceURL
interface
:end
:start
Mock
implementation
of
the
javaxportletStateAwareResponse
interface
:end
:start
Create
a
new
MockActionResponse
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockActionResponse
:end
:start
Mock
implementation
of
the
javaxportletPortletContext
interface,
wrapping
an
underlying
javaxservletServletContext
:end
:start
Create
a
new
PortletContext
wrapping
the
given
ServletContext
:end
:start
Return
the
underlying
ServletContext
that
this
PortletContext
wraps
:end
:start
Test
annotation
which
indicates
that
the
orgspringframeworkcontextApplicationContext
ApplicationContext
associated
with
a
test
is
<em>dirty</em>
and
should
be
closed:
<ul>
<li>after
the
current
test,
when
declared
at
the
method
level</li>
<li>after
each
test
method
in
the
current
test
class,
when
declared
at
the
class
level
with
class
mode
set
to
ClassMode#AFTER_EACH_TEST_METHOD
AFTER_EACH_TEST_METHOD</li>
<li>after
the
current
test
class,
when
declared
at
the
class
level
with
class
mode
set
to
ClassMode#AFTER_CLASS
AFTER_CLASS</li>
</ul>
<p>Use
this
annotation
if
a
test
has
modified
the
context
&mdash;
for
example,
by
replacing
a
bean
definition
or
changing
the
state
of
a
singleton
bean
Subsequent
tests
will
be
supplied
a
new
context
<p>{@code
@DirtiesContext
may
be
used
as
a
class-level
and
method-level
annotation
within
the
same
class
In
such
scenarios,
the
ApplicationContext
will
be
marked
as
<em>dirty</em>
after
any
such
annotated
method
as
well
as
after
the
entire
class
If
the
ClassMode
is
set
to
ClassMode#AFTER_EACH_TEST_METHOD
AFTER_EACH_TEST_METHOD,
the
context
will
be
marked
dirty
after
each
test
method
in
the
class
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
The
<i>mode</i>
to
use
when
a
test
class
is
annotated
with
@DirtiesContext
<p>Defaults
to
ClassMode#AFTER_CLASS
AFTER_CLASS
<p>Note:
Setting
the
class
mode
on
an
annotated
test
method
has
no
meaning,
since
the
mere
presence
of
the
@DirtiesContext
annotation
on
a
test
method
is
sufficient
:end
:start
The
context
cache
clearing
<em>mode</em>
to
use
when
a
context
is
configured
as
part
of
a
hierarchy
via
orgspringframeworktestcontextContextHierarchy
@ContextHierarchy
<p>Defaults
to
HierarchyMode#EXHAUSTIVE
EXHAUSTIVE
:end
:start
Defines
<i>modes</i>
which
determine
how
@DirtiesContext
is
interpreted
when
used
to
annotate
a
test
class
:end
:start
The
associated
ApplicationContext
will
be
marked
as
<em>dirty</em>
after
the
test
class
:end
:start
The
associated
ApplicationContext
will
be
marked
as
<em>dirty</em>
after
each
test
method
in
the
class
:end
:start
Defines
<i>modes</i>
which
determine
how
the
context
cache
is
cleared
when
@DirtiesContext
is
used
in
a
test
whose
context
is
configured
as
part
of
a
hierarchy
via
orgspringframeworktestcontextContextHierarchy
@ContextHierarchy
:end
:start
The
context
cache
will
be
cleared
using
an
<em>exhaustive</em>
algorithm
that
includes
not
only
the
HierarchyMode#CURRENT_LEVEL
current
level
but
also
all
other
context
hierarchies
that
share
an
ancestor
context
common
to
the
current
test
<p>All
ApplicationContexts
that
reside
in
a
subhierarchy
of
the
common
ancestor
context
will
be
removed
from
the
context
cache
and
closed
:end
:start
The
ApplicationContext
for
the
<em>current
level</em>
in
the
context
hierarchy
and
all
contexts
in
subhierarchies
of
the
current
level
will
be
removed
from
the
context
cache
and
closed
<p>The
<em>current
level</em>
refers
to
the
ApplicationContext
at
the
lowest
level
in
the
context
hierarchy
that
is
visible
from
the
current
test
:end
:start
Defines
<i>modes</i>
which
determine
how
@DirtiesContext
is
interpreted
when
used
to
annotate
a
test
class
:end
:start
The
associated
ApplicationContext
will
be
marked
as
<em>dirty</em>
after
the
test
class
:end
:start
The
associated
ApplicationContext
will
be
marked
as
<em>dirty</em>
after
each
test
method
in
the
class
:end
:start
Defines
<i>modes</i>
which
determine
how
the
context
cache
is
cleared
when
@DirtiesContext
is
used
in
a
test
whose
context
is
configured
as
part
of
a
hierarchy
via
orgspringframeworktestcontextContextHierarchy
@ContextHierarchy
:end
:start
The
context
cache
will
be
cleared
using
an
<em>exhaustive</em>
algorithm
that
includes
not
only
the
HierarchyMode#CURRENT_LEVEL
current
level
but
also
all
other
context
hierarchies
that
share
an
ancestor
context
common
to
the
current
test
<p>All
ApplicationContexts
that
reside
in
a
subhierarchy
of
the
common
ancestor
context
will
be
removed
from
the
context
cache
and
closed
:end
:start
The
ApplicationContext
for
the
<em>current
level</em>
in
the
context
hierarchy
and
all
contexts
in
subhierarchies
of
the
current
level
will
be
removed
from
the
context
cache
and
closed
<p>The
<em>current
level</em>
refers
to
the
ApplicationContext
at
the
lowest
level
in
the
context
hierarchy
that
is
visible
from
the
current
test
:end
:start
<p>
Test
annotation
to
indicate
that
a
test
is
enabled
for
a
specific
testing
profile
or
environment
If
the
configured
ProfileValueSource
returns
a
matching
#value
for
the
provided
#name,
the
test
will
be
enabled
</p>
<p>
Note:
@IfProfileValue
can
be
applied
at
the
class
level,
the
method
level,
or
both
@IfProfileValue
at
the
class
level
overrides
method-level
usage
of
@IfProfileValue
for
any
methods
within
that
class
</p>
<h3>Examples</h3>
<p>
When
using
SystemProfileValueSource
as
the
ProfileValueSource
implementation,
you
can
configure
a
test
method
to
run
only
on
Java
VMs
from
Sun
Microsystems
as
follows:
</p>
<pre
class="code">
&#064;IfProfileValue(name
=
&quot;javavendor&quot;,
value
=
&quot;Sun
Microsystems
Inc&quot;)
public
void
testSomething()
//


</pre>
<p>
You
can
alternatively
configure
@IfProfileValue
with
<em>OR</em>
semantics
for
multiple
#values()
values
as
follows
(assuming
a
ProfileValueSource
has
been
appropriately
configured
for
the
&quot;test-groups&quot;
name):
</p>
<pre
class="code">
&#064;IfProfileValue(name
=
&quot;test-groups&quot;,
values
=
&quot;unit-tests&quot;,
&quot;integration-tests&quot;
)
public
void
testWhichRunsForUnitOrIntegrationTestGroups()
//


</pre>
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
The
name
of
the
<em>profile
value</em>
against
which
to
test
:end
:start
A
single,
permissible
value
of
the
<em>profile
value</em>
for
the
given
#name()
name
<p>
Note:
Assigning
values
to
both
#value()
and
#values()
will
lead
to
a
configuration
conflict
:end
:start
A
list
of
all
permissible
values
of
the
<em>profile
value</em>
for
the
given
#name()
name
<p>
Note:
Assigning
values
to
both
#value()
and
#values()
will
lead
to
a
configuration
conflict
:end
:start
<p>
Strategy
interface
for
retrieving
<em>profile
values</em>
for
a
given
testing
environment
</p>
<p>
Concrete
implementations
must
provide
a
public
no-args
constructor
</p>
<p>
Spring
provides
the
following
out-of-the-box
implementations:
</p>
<ul>
<li>{@link
SystemProfileValueSource</li>
</ul>
:end
:start
Get
the
<em>profile
value</em>
indicated
by
the
specified
key
:end
:start
<p>{@code
ProfileValueSourceConfiguration
is
a
class-level
annotation
which
is
used
to
specify
what
type
of
ProfileValueSource
to
use
when
retrieving
<em>profile
values</em>
configured
via
the
IfProfileValue
&#064;IfProfileValue
annotation
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
<p>
The
type
of
ProfileValueSource
to
use
when
retrieving
<em>profile
values</em>
</p>
:end
:start
General
utility
methods
for
working
with
<em>profile
values</em>
:end
:start
Retrieves
the
ProfileValueSource
type
for
the
specified
Class
test
class
as
configured
via
the
ProfileValueSourceConfiguration
&#064;ProfileValueSourceConfiguration
annotation
and
instantiates
a
new
instance
of
that
type
<p>
If
ProfileValueSourceConfiguration
&#064;ProfileValueSourceConfiguration
is
not
present
on
the
specified
class
or
if
a
custom
ProfileValueSource
is
not
declared,
the
default
SystemProfileValueSource
will
be
returned
instead
:end
:start
Determine
if
the
supplied
testClass
is
<em>enabled</em>
in
the
current
environment,
as
specified
by
the
IfProfileValue
&#064;IfProfileValue
annotation
at
the
class
level
<p>
Defaults
to
true
if
no
IfProfileValue
&#064;IfProfileValue
annotation
is
declared
:end
:start
Determine
if
the
supplied
testMethod
is
<em>enabled</em>
in
the
current
environment,
as
specified
by
the
IfProfileValue
&#064;IfProfileValue
annotation,
which
may
be
declared
on
the
test
method
itself
or
at
the
class
level
Class-level
usage
overrides
method-level
usage
<p>
Defaults
to
true
if
no
IfProfileValue
&#064;IfProfileValue
annotation
is
declared
:end
:start
Determine
if
the
supplied
testMethod
is
<em>enabled</em>
in
the
current
environment,
as
specified
by
the
IfProfileValue
&#064;IfProfileValue
annotation,
which
may
be
declared
on
the
test
method
itself
or
at
the
class
level
Class-level
usage
overrides
method-level
usage
<p>
Defaults
to
true
if
no
IfProfileValue
&#064;IfProfileValue
annotation
is
declared
:end
:start
Test
annotation
to
indicate
that
a
test
method
should
be
invoked
repeatedly
<p>Note
that
the
scope
of
execution
to
be
repeated
includes
execution
of
the
test
method
itself
as
well
as
any
<em>set
up</em>
or
<em>tear
down</em>
of
the
test
fixture
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
Test
annotation
used
to
indicate
whether
or
not
the
transaction
for
the
annotated
test
method
should
be
<em>rolled
back</em>
after
the
test
method
has
completed
If
true,
the
transaction
will
be
rolled
back;
otherwise,
the
transaction
will
be
committed
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
Whether
or
not
the
transaction
for
the
annotated
method
should
be
rolled
back
after
the
method
has
completed
:end
:start
Implementation
of
ProfileValueSource
which
uses
system
properties
as
the
underlying
source
:end
:start
Obtain
the
canonical
instance
of
this
ProfileValueSource
:end
:start
Get
the
<em>profile
value</em>
indicated
by
the
specified
key
from
the
system
properties
:end
:start
Test-specific
annotation
to
indicate
that
a
test
method
has
to
finish
execution
in
a
#millis()
specified
time
period
<p>If
the
text
execution
takes
longer
than
the
specified
time
period,
then
the
test
is
to
be
considered
failed
<p>Note
that
the
time
period
includes
execution
of
the
test
method
itself,
any
Repeat
repetitions
of
the
test,
and
any
<em>set
up</em>
or
<em>tear
down</em>
of
the
test
fixture
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
The
maximum
amount
of
time
(in
milliseconds)
that
a
test
execution
can
take
without
being
marked
as
failed
due
to
taking
too
long
:end
:start
Simple
method
object
encapsulation
of
the
'test-for-Exception'
scenario
(for
JUnit)
<p>Used
like
so:
<pre
class="code">
//
the
class
under
test
public
class
Foo
public
void
someBusinessLogic(String
name)
if
(name
==
null)
throw
new
IllegalArgumentException("The
'name'
argument
is
required");

//
rest
of
business
logic
here

</pre>
The
test
for
the
above
bad
argument
path
can
be
expressed
using
the
AssertThrows
class
like
so:
<pre
class="code">
public
class
FooTest
public
void
testSomeBusinessLogicBadArgumentPath()
new
AssertThrows(IllegalArgumentExceptionclass)
public
void
test()
new
Foo()someBusinessLogic(null);

runTest();

</pre>
This
will
result
in
the
test
passing
if
the
FoosomeBusinessLogic()
method
threw
an
IllegalArgumentException;
if
it
did
not,
the
test
would
fail
with
the
following
message:
<pre
class="code">
"Must
have
thrown
a
[class
javalangIllegalArgumentException]"</pre>
If
the
<b>wrong</b>
type
of
Exception
was
thrown,
the
test
will
also
fail,
this
time
with
a
message
similar
to
the
following:
<pre
class="code">
"javalangAssertionError:
Was
expecting
a
[class
javalangUnsupportedOperationException]
to
be
thrown,
but
instead
a
[class
javalangIllegalArgumentException]
was
thrown"</pre>
The
test
for
the
correct
Exception
respects
polymorphism,
so
you
can
test
that
any
old
Exception
is
thrown
like
so:
<pre
class="code">
public
class
FooTest
public
void
testSomeBusinessLogicBadArgumentPath()
//
any
Exception
will
do
new
AssertThrows(Exceptionclass)
public
void
test()
new
Foo()someBusinessLogic(null);

runTest();

</pre>
Intended
for
use
with
JUnit
4
and
TestNG
(as
of
Spring
30)
You
might
want
to
compare
this
class
with
the
junitextensionsExceptionTestCase
class
:end
:start
Create
a
new
instance
of
the
AssertThrows
class
:end
:start
Create
a
new
instance
of
the
AssertThrows
class
:end
:start
Return
the
javalangException
expected
to
be
thrown
during
the
execution
of
the
surrounding
test
:end
:start
Set
the
extra,
contextual
failure
message
that
will
be
included
in
the
failure
text
if
the
text
fails
:end
:start
Return
the
extra,
contextual
failure
message
that
will
be
included
in
the
failure
text
if
the
text
fails
:end
:start
Subclass
must
override
this
abstract
method
and
provide
the
test
logic
:end
:start
The
main
template
method
that
drives
the
running
of
the
#test()
test
logic
and
the
#checkExceptionExpectations(Exception)
checking
of
the
resulting
(expected)
javalangException
:end
:start
Template
method
called
when
the
test
fails;
ie
the
expected
javalangException
is
<b>not</b>
thrown
<p>The
default
implementation
simply
fails
the
test
via
a
call
to
orgjunitAssert#fail(String)
<p>If
you
want
to
customize
the
failure
message,
consider
overriding
#createMessageForNoExceptionThrown(),
and
/
or
supplying
an
extra,
contextual
failure
message
via
the
appropriate
constructor
overload
:end
:start
Creates
the
failure
message
used
if
the
test
fails
(ie
the
expected
exception
is
not
thrown
in
the
body
of
the
test)
:end
:start
Does
the
donkey
work
of
checking
(verifying)
that
the
Exception
that
was
thrown
in
the
body
of
a
test
is
an
instance
of
the
#getExpectedException()
class
(or
an
instance
of
a
subclass)
<p>If
you
want
to
customize
the
failure
message,
consider
overriding
#createMessageForWrongThrownExceptionType(Exception)
:end
:start
Creates
the
failure
message
used
if
the
wrong
type
of
javalangException
is
thrown
in
the
body
of
the
test
:end
:start
Expose
the
actual
exception
thrown
from
#test,
if
any
:end
:start
ActiveProfiles
is
a
class-level
annotation
that
is
used
to
declare
which
<em>active
bean
definition
profiles</em>
should
be
used
when
loading
an
orgspringframeworkcontextApplicationContext
ApplicationContext
for
test
classes
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
Alias
for
#profiles
<p>This
attribute
may
<strong>not</strong>
be
used
in
conjunction
with
#profiles
or
#resolver,
but
it
may
be
used
<em>instead</em>
of
them
:end
:start
The
bean
definition
profiles
to
activate
<p>This
attribute
may
<strong>not</strong>
be
used
in
conjunction
with
#value
or
#resolver,
but
it
may
be
used
<em>instead</em>
of
them
:end
:start
The
type
of
ActiveProfilesResolver
to
use
for
resolving
the
active
bean
definition
profiles
programmatically
<p>This
attribute
may
<strong>not</strong>
be
used
in
conjunction
with
#profiles
or
#value,
but
it
may
be
used
<em>instead</em>
of
them
in
order
to
resolve
the
active
profiles
programmatically
:end
:start
Whether
or
not
bean
definition
profiles
from
superclasses
should
be
<em>inherited</em>
<p>The
default
value
is
true,
which
means
that
a
test
class
will
<em>inherit</em>
bean
definition
profiles
defined
by
a
test
superclass
Specifically,
the
bean
definition
profiles
for
a
test
class
will
be
appended
to
the
list
of
bean
definition
profiles
defined
by
a
test
superclass
Thus,
subclasses
have
the
option
of
<em>extending</em>
the
list
of
bean
definition
profiles
<p>If
inheritProfiles
is
set
to
false,
the
bean
definition
profiles
for
the
test
class
will
<em>shadow</em>
and
effectively
replace
any
bean
definition
profiles
defined
by
a
superclass
<p>In
the
following
example,
the
ApplicationContext
for
BaseTest
will
be
loaded
using
only
the
&quot;base&quot;
bean
definition
profile;
beans
defined
in
the
&quot;extended&quot;
profile
will
therefore
not
be
loaded
In
contrast,
the
ApplicationContext
for
ExtendedTest
will
be
loaded
using
the
&quot;base&quot;
<strong>and</strong>
&quot;extended&quot;
bean
definition
profiles
<pre
class="code">
&#064;ActiveProfiles(&quot;base&quot;)
&#064;ContextConfiguration
public
class
BaseTest
//


&#064;ActiveProfiles(&quot;extended&quot;)
&#064;ContextConfiguration
public
class
ExtendedTest
extends
BaseTest
//


</pre>
<p>Note:
@ActiveProfiles
can
be
used
when
loading
an
ApplicationContext
from
path-based
resource
locations
or
annotated
classes
:end
:start
Strategy
interface
for
programmatically
resolving
which
<em>active
bean
definition
profiles</em>
should
be
used
when
loading
an
orgspringframeworkcontextApplicationContext
ApplicationContext
for
a
test
class
<p>A
custom
ActiveProfilesResolver
can
be
registered
via
the
ActiveProfiles#resolver
resolver
attribute
of
@ActiveProfiles
<p>Concrete
implementations
must
provide
a
public
no-args
constructor
:end
:start
Resolve
the
<em>bean
definition
profiles</em>
to
use
when
loading
an
ApplicationContext
for
the
given
Class
test
class
:end
:start
CacheAwareContextLoaderDelegate
loads
application
contexts
from
MergedContextConfiguration
by
delegating
to
the
ContextLoader
configured
in
the
MergedContextConfiguration
and
interacting
transparently
with
the
ContextCache
behind
the
scenes
<p>Note:
CacheAwareContextLoaderDelegate
does
not
implement
the
ContextLoader
or
SmartContextLoader
interface
:end
:start
Load
the
ApplicationContext
application
context
for
the
supplied
merged
context
configuration
<p>If
the
context
is
present
in
the
cache
it
will
simply
be
returned;
otherwise,
it
will
be
loaded,
stored
in
the
cache,
and
returned
:end
:start
@ContextConfiguration
defines
class-level
metadata
that
is
used
to
determine
how
to
load
and
configure
an
orgspringframeworkcontextApplicationContext
ApplicationContext
for
integration
tests
<h3>Supported
Resource
Types</h3>
<p>Prior
to
Spring
31,
only
path-based
resource
locations
were
supported
As
of
Spring
31,
#loader
context
loaders
may
choose
to
support
<em>either</em>
path-based
<em>or</em>
class-based
resources
As
of
Spring
404,
#loader
context
loaders
may
choose
to
support
path-based
<em>and</em>
class-based
resources
simultaneously
Consequently
@ContextConfiguration
can
be
used
to
declare
either
path-based
resource
locations
(via
the
#locations
or
#value
attribute)
<em>or</em>
annotated
classes
(via
the
#classes
attribute)
Note,
however,
that
most
implementations
of
SmartContextLoader
only
support
a
single
resource
type
<h3>Annotated
Classes</h3>
<p>The
term
<em>annotated
class</em>
can
refer
to
any
of
the
following
<ul>
<li>A
class
annotated
with
orgspringframeworkcontextannotationConfiguration
@Configuration</li>
<li>A
component
(ie,
a
class
annotated
with
orgspringframeworkstereotypeComponent
@Component,
orgspringframeworkstereotypeService
@Service,
orgspringframeworkstereotypeRepository
@Repository,
etc)</li>
<li>A
JSR-330
compliant
class
that
is
annotated
with
javaxinject
annotations</li>
<li>Any
other
class
that
contains
orgspringframeworkcontextannotationBean
@Bean-methods</li>
</ul>
<p>Consult
the
Javadoc
for
orgspringframeworkcontextannotationConfiguration
@Configuration
and
orgspringframeworkcontextannotationBean
@Bean
for
further
information
regarding
the
configuration
and
semantics
of
<em>annotated
classes</em>
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
Alias
for
#locations
<p>This
attribute
may
<strong>not</strong>
be
used
in
conjunction
with
#locations,
but
it
may
be
used
instead
of
#locations
:end
:start
The
resource
locations
to
use
for
loading
an
orgspringframeworkcontextApplicationContext
ApplicationContext
<p>Check
out
the
Javadoc
for
orgspringframeworktestcontextsupportAbstractContextLoader#modifyLocations
AbstractContextLoadermodifyLocations()
for
details
on
how
a
location
String
will
be
interpreted
at
runtime,
in
particular
in
case
of
a
relative
path
Also,
check
out
the
documentation
on
orgspringframeworktestcontextsupportAbstractContextLoader#generateDefaultLocations
AbstractContextLoadergenerateDefaultLocations()
for
details
on
the
default
locations
that
are
going
to
be
used
if
none
are
specified
<p>Note
that
the
above-mentioned
default
rules
only
apply
for
a
standard
orgspringframeworktestcontextsupportAbstractContextLoader
AbstractContextLoader
subclass
such
as
orgspringframeworktestcontextsupportGenericXmlContextLoader
GenericXmlContextLoader
which
is
the
effective
default
implementation
used
at
runtime
if
locations
are
configured
See
the
documentation
for
#loader
for
further
details
regarding
default
loaders
<p>This
attribute
may
<strong>not</strong>
be
used
in
conjunction
with
#value,
but
it
may
be
used
instead
of
#value
:end
:start
The
<em>annotated
classes</em>
to
use
for
loading
an
orgspringframeworkcontextApplicationContext
ApplicationContext
<p>Check
out
the
Javadoc
for
orgspringframeworktestcontextsupportAnnotationConfigContextLoader#detectDefaultConfigurationClasses
AnnotationConfigContextLoaderdetectDefaultConfigurationClasses()
for
details
on
how
default
configuration
classes
will
be
detected
if
no
<em>annotated
classes</em>
are
specified
See
the
documentation
for
#loader
for
further
details
regarding
default
loaders
:end
:start
The
application
context
<em>initializer
classes</em>
to
use
for
initializing
a
ConfigurableApplicationContext
<p>The
concrete
ConfigurableApplicationContext
type
supported
by
each
declared
initializer
must
be
compatible
with
the
type
of
ApplicationContext
created
by
the
SmartContextLoader
in
use
<p>{@code
SmartContextLoader
implementations
typically
detect
whether
Spring's
orgspringframeworkcoreOrdered
Ordered
interface
has
been
implemented
or
if
the
@{@link
orgspringframeworkcoreannotationOrder
Order
annotation
is
present
and
sort
instances
accordingly
prior
to
invoking
them
:end
:start
Whether
or
not
#locations
resource
locations
or
<em>annotated
classes</em>
from
test
superclasses
should
be
<em>inherited</em>
<p>The
default
value
is
true
This
means
that
an
annotated
class
will
<em>inherit</em>
the
resource
locations
or
annotated
classes
defined
by
test
superclasses
Specifically,
the
resource
locations
or
annotated
classes
for
a
given
test
class
will
be
appended
to
the
list
of
resource
locations
or
annotated
classes
defined
by
test
superclasses
Thus,
subclasses
have
the
option
of
<em>extending</em>
the
list
of
resource
locations
or
annotated
classes
<p>If
inheritLocations
is
set
to
false,
the
resource
locations
or
annotated
classes
for
the
annotated
class
will
<em>shadow</em>
and
effectively
replace
any
resource
locations
or
annotated
classes
defined
by
superclasses
<p>In
the
following
example
that
uses
path-based
resource
locations,
the
orgspringframeworkcontextApplicationContext
ApplicationContext
for
ExtendedTest
will
be
loaded
from
&quot;base-contextxml&quot;
<strong>and</strong>
&quot;extended-contextxml&quot;,
in
that
order
Beans
defined
in
&quot;extended-contextxml&quot;
may
therefore
override
those
defined
in
&quot;base-contextxml&quot;
<pre
class="code">
&#064;ContextConfiguration(&quot;base-contextxml&quot;)
public
class
BaseTest
//


&#064;ContextConfiguration(&quot;extended-contextxml&quot;)
public
class
ExtendedTest
extends
BaseTest
//


</pre>
<p>Similarly,
in
the
following
example
that
uses
annotated
classes,
the
orgspringframeworkcontextApplicationContext
ApplicationContext
for
ExtendedTest
will
be
loaded
from
the
BaseConfig
<strong>and</strong>
ExtendedConfig
configuration
classes,
in
that
order
Beans
defined
in
ExtendedConfig
may
therefore
override
those
defined
in
BaseConfig
<pre
class="code">
&#064;ContextConfiguration(classes=BaseConfigclass)
public
class
BaseTest
//


&#064;ContextConfiguration(classes=ExtendedConfigclass)
public
class
ExtendedTest
extends
BaseTest
//


</pre>
:end
:start
Whether
or
not
#initializers
context
initializers
from
test
superclasses
should
be
<em>inherited</em>
<p>The
default
value
is
true
This
means
that
an
annotated
class
will
<em>inherit</em>
the
application
context
initializers
defined
by
test
superclasses
Specifically,
the
initializers
for
a
given
test
class
will
be
added
to
the
set
of
initializers
defined
by
test
superclasses
Thus,
subclasses
have
the
option
of
<em>extending</em>
the
set
of
initializers
<p>If
inheritInitializers
is
set
to
false,
the
initializers
for
the
annotated
class
will
<em>shadow</em>
and
effectively
replace
any
initializers
defined
by
superclasses
<p>In
the
following
example,
the
orgspringframeworkcontextApplicationContext
ApplicationContext
for
ExtendedTest
will
be
initialized
using
BaseInitializer
<strong>and</strong>
ExtendedInitializer
Note,
however,
that
the
order
in
which
the
initializers
are
invoked
depends
on
whether
they
implement
orgspringframeworkcoreOrdered
Ordered
or
are
annotated
with
orgspringframeworkcoreannotationOrder
&#064;Order
<pre
class="code">
&#064;ContextConfiguration(initializers
=
BaseInitializerclass)
public
class
BaseTest
//


&#064;ContextConfiguration(initializers
=
ExtendedInitializerclass)
public
class
ExtendedTest
extends
BaseTest
//


</pre>
:end
:start
The
type
of
SmartContextLoader
(or
ContextLoader)
to
use
for
loading
an
orgspringframeworkcontextApplicationContext
ApplicationContext
<p>If
not
specified,
the
loader
will
be
inherited
from
the
first
superclass
that
is
annotated
with
@ContextConfiguration
and
specifies
an
explicit
loader
If
no
class
in
the
hierarchy
specifies
an
explicit
loader,
a
default
loader
will
be
used
instead
<p>The
default
concrete
implementation
chosen
at
runtime
will
be
either
orgspringframeworktestcontextsupportDelegatingSmartContextLoader
DelegatingSmartContextLoader
or
orgspringframeworktestcontextwebWebDelegatingSmartContextLoader
WebDelegatingSmartContextLoader
depending
on
the
absence
or
presence
of
orgspringframeworktestcontextwebWebAppConfiguration
&#064;WebAppConfiguration
For
further
details
on
the
default
behavior
of
various
concrete
SmartContextLoaders,
check
out
the
Javadoc
for
orgspringframeworktestcontextsupportAbstractContextLoader
AbstractContextLoader,
orgspringframeworktestcontextsupportGenericXmlContextLoader
GenericXmlContextLoader,
orgspringframeworktestcontextsupportAnnotationConfigContextLoader
AnnotationConfigContextLoader,
orgspringframeworktestcontextwebGenericXmlWebContextLoader
GenericXmlWebContextLoader,
and
orgspringframeworktestcontextwebAnnotationConfigWebContextLoader
AnnotationConfigWebContextLoader
:end
:start
The
name
of
the
context
hierarchy
level
represented
by
this
configuration
<p>If
not
specified
the
name
will
be
inferred
based
on
the
numerical
level
within
all
declared
contexts
within
the
hierarchy
<p>This
attribute
is
only
applicable
when
used
within
a
test
class
hierarchy
that
is
configured
using
@ContextHierarchy,
in
which
case
the
name
can
be
used
for
<em>merging</em>
or
<em>overriding</em>
this
configuration
with
configuration
of
the
same
name
in
hierarchy
levels
defined
in
superclasses
See
the
Javadoc
for
ContextHierarchy
@ContextHierarchy
for
details
:end
:start
ContextConfigurationAttributes
encapsulates
the
context
configuration
attributes
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Construct
a
new
ContextConfigurationAttributes
instance
for
the
supplied
ContextConfiguration
@ContextConfiguration
annotation
and
the
Class
test
class
that
declared
it
:end
:start
Construct
a
new
ContextConfigurationAttributes
instance
for
the
supplied
AnnotationAttributes
(parsed
from
a
ContextConfiguration
@ContextConfiguration
annotation)
and
the
Class
test
class
that
declared
them
:end
:start
Construct
a
new
ContextConfigurationAttributes
instance
for
the
Class
test
class
that
declared
the
ContextConfiguration
@ContextConfiguration
annotation
and
its
corresponding
attributes
:end
:start
Construct
a
new
ContextConfigurationAttributes
instance
for
the
Class
test
class
that
declared
the
ContextConfiguration
@ContextConfiguration
annotation
and
its
corresponding
attributes
:end
:start
Construct
a
new
ContextConfigurationAttributes
instance
for
the
Class
test
class
that
declared
the
ContextConfiguration
@ContextConfiguration
annotation
and
its
corresponding
attributes
:end
:start
Get
the
Class
class
that
declared
the
ContextConfiguration
@ContextConfiguration
annotation
:end
:start
Get
the
resource
locations
that
were
declared
via
ContextConfiguration
@ContextConfiguration
<p>Note:
this
is
a
mutable
property
The
returned
value
may
therefore
represent
a
<em>processed</em>
value
that
does
not
match
the
original
value
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Set
the
<em>processed</em>
resource
locations,
effectively
overriding
the
original
value
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Get
the
annotated
classes
that
were
declared
via
ContextConfiguration
@ContextConfiguration
<p>Note:
this
is
a
mutable
property
The
returned
value
may
therefore
represent
a
<em>processed</em>
value
that
does
not
match
the
original
value
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Set
the
<em>processed</em>
annotated
classes,
effectively
overriding
the
original
value
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Determine
if
this
ContextConfigurationAttributes
instance
has
path-based
resource
locations
:end
:start
Determine
if
this
ContextConfigurationAttributes
instance
has
class-based
resources
:end
:start
Determine
if
this
ContextConfigurationAttributes
instance
has
either
path-based
resource
locations
or
class-based
resources
:end
:start
Get
the
inheritLocations
flag
that
was
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Get
the
ApplicationContextInitializer
classes
that
were
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Get
the
inheritInitializers
flag
that
was
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Get
the
ContextLoader
class
that
was
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Get
the
name
of
the
context
hierarchy
level
that
was
declared
via
ContextConfiguration
@ContextConfiguration
:end
:start
Generate
a
unique
hash
code
for
all
properties
of
this
ContextConfigurationAttributes
instance
excluding
the
#getName()
name
:end
:start
Determine
if
the
supplied
object
is
equal
to
this
ContextConfigurationAttributes
instance
by
comparing
both
object's
#getDeclaringClass()
declaring
class,
#getLocations()
locations,
#getClasses()
annotated
classes,
#isInheritLocations()
inheritLocations
flag,
#getInitializers()
context
initializer
classes,
#isInheritInitializers()
inheritInitializers
flag,
and
the
#getContextLoaderClass()
ContextLoader
class
:end
:start
Provide
a
String
representation
of
the
context
configuration
attributes
and
declaring
class
:end
:start
@ContextHierarchy
is
a
class-level
annotation
that
is
used
to
define
a
hierarchy
of
orgspringframeworkcontextApplicationContext
ApplicationContexts
for
integration
tests
<h3>Examples</h3>
<p>The
following
JUnit-based
examples
demonstrate
common
configuration
scenarios
for
integration
tests
that
require
the
use
of
context
hierarchies
<h4>Single
Test
Class
with
Context
Hierarchy</h4>
<p>{@code
ControllerIntegrationTests
represents
a
typical
integration
testing
scenario
for
a
Spring
MVC
web
application
by
declaring
a
context
hierarchy
consisting
of
two
levels,
one
for
the
<em>root</em>
WebApplicationContext
(with
TestAppConfig)
and
one
for
the
<em>dispatcher
servlet</em>
WebApplicationContext
(with
WebConfig)
The
WebApplicationContext
that
is
<em>autowired</em>
into
the
test
instance
is
the
one
for
the
child
context
(ie,
the
lowest
context
in
the
hierarchy)
<pre
class="code">
&#064;RunWith(SpringJUnit4ClassRunnerclass)
&#064;WebAppConfiguration
&#064;ContextHierarchy({
&#064;ContextConfiguration(classes
=
TestAppConfigclass),
&#064;ContextConfiguration(classes
=
WebConfigclass)
)
public
class
ControllerIntegrationTests
&#064;Autowired
private
WebApplicationContext
wac;
//

</pre>
<h4>Class
Hierarchy
with
Implicit
Parent
Context</h4>
<p>The
following
test
classes
define
a
context
hierarchy
within
a
test
class
hierarchy
AbstractWebTests
declares
the
configuration
for
a
root
WebApplicationContext
in
a
Spring-powered
web
application
Note,
however,
that
AbstractWebTests
does
not
declare
@ContextHierarchy;
consequently,
subclasses
of
AbstractWebTests
can
optionally
participate
in
a
context
hierarchy
or
follow
the
standard
semantics
for
@ContextConfiguration
SoapWebServiceTests
and
RestWebServiceTests
both
extend
AbstractWebTests
and
define
a
context
hierarchy
via
@ContextHierarchy
The
result
is
that
three
application
contexts
will
be
loaded
(one
for
each
declaration
of
@ContextConfiguration,
and
the
application
context
loaded
based
on
the
configuration
in
AbstractWebTests
will
be
set
as
the
parent
context
for
each
of
the
contexts
loaded
for
the
concrete
subclasses
<pre
class="code">
&#064;RunWith(SpringJUnit4ClassRunnerclass)
&#064;WebAppConfiguration
&#064;ContextConfiguration("file:src/main/webapp/WEB-INF/applicationContextxml")
public
abstract
class
AbstractWebTests
&#064;ContextHierarchy(&#064;ContextConfiguration("/spring/soap-ws-configxml")
public
class
SoapWebServiceTests
extends
AbstractWebTests
&#064;ContextHierarchy(&#064;ContextConfiguration("/spring/rest-ws-configxml")
public
class
RestWebServiceTests
extends
AbstractWebTests
<h4>Class
Hierarchy
with
Merged
Context
Hierarchy
Configuration</h4>
<p>The
following
classes
demonstrate
the
use
of
<em>named</em>
hierarchy
levels
in
order
to
<em>merge</em>
the
configuration
for
specific
levels
in
a
context
hierarchy
BaseTests
defines
two
levels
in
the
hierarchy,
parent
and
child
ExtendedTests
extends
BaseTests
and
instructs
the
Spring
TestContext
Framework
to
merge
the
context
configuration
for
the
child
hierarchy
level,
simply
by
ensuring
that
the
names
declared
via
ContextConfiguration#name
are
both
"child"
The
result
is
that
three
application
contexts
will
be
loaded:
one
for
"/app-configxml",
one
for
"/user-configxml",
and
one
for
<code>{"/user-configxml",
"/order-configxml"</code>
As
with
the
previous
example,
the
application
context
loaded
from
"/app-configxml"
will
be
set
as
the
parent
context
for
the
contexts
loaded
from
"/user-configxml"
and
<code>{"/user-configxml",
"/order-configxml"</code>
<pre
class="code">
&#064;RunWith(SpringJUnit4ClassRunnerclass)
&#064;ContextHierarchy({
&#064;ContextConfiguration(name
=
"parent",
locations
=
"/app-configxml"),
&#064;ContextConfiguration(name
=
"child",
locations
=
"/user-configxml")
)
public
class
BaseTests
&#064;ContextHierarchy(
&#064;ContextConfiguration(name
=
"child",
locations
=
"/order-configxml")
)
public
class
ExtendedTests
extends
BaseTests
<h4>Class
Hierarchy
with
Overridden
Context
Hierarchy
Configuration</h4>
<p>In
contrast
to
the
previous
example,
this
example
demonstrates
how
to
<em>override</em>
the
configuration
for
a
given
named
level
in
a
context
hierarchy
by
setting
the
ContextConfiguration#inheritLocations
flag
to
false
Consequently,
the
application
context
for
ExtendedTests
will
be
loaded
only
from
"/test-user-configxml"
and
will
have
its
parent
set
to
the
context
loaded
from
"/app-configxml"
<pre
class="code">
&#064;RunWith(SpringJUnit4ClassRunnerclass)
&#064;ContextHierarchy({
&#064;ContextConfiguration(name
=
"parent",
locations
=
"/app-configxml"),
&#064;ContextConfiguration(name
=
"child",
locations
=
"/user-configxml")
)
public
class
BaseTests
&#064;ContextHierarchy(
&#064;ContextConfiguration(name
=
"child",
locations
=
"/test-user-configxml",
inheritLocations=false)
)
public
class
ExtendedTests
extends
BaseTests
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
A
list
of
ContextConfiguration
@ContextConfiguration
instances,
each
of
which
defines
a
level
in
the
context
hierarchy
<p>If
you
need
to
merge
or
override
the
configuration
for
a
given
level
of
the
context
hierarchy
within
a
test
class
hierarchy,
you
must
explicitly
name
that
level
by
supplying
the
same
value
to
the
ContextConfiguration#name
name
attribute
in
@ContextConfiguration
at
each
level
in
the
class
hierarchy
See
the
class-level
Javadoc
for
examples
:end
:start
Strategy
interface
for
loading
an
ApplicationContext
application
context
for
an
integration
test
managed
by
the
Spring
TestContext
Framework
<p><b>Note</b>:
as
of
Spring
31,
implement
SmartContextLoader
instead
of
this
interface
in
order
to
provide
support
for
annotated
classes,
active
bean
definition
profiles,
and
application
context
initializers
<p>Clients
of
a
ContextLoader
should
call
#processLocations(Class,
String)
processLocations()
prior
to
calling
#loadContext(String)
loadContext()
in
case
the
ContextLoader
provides
custom
support
for
modifying
or
generating
locations
The
results
of
#processLocations(Class,
String)
processLocations()
should
then
be
supplied
to
#loadContext(String)
loadContext()
<p>Concrete
implementations
must
provide
a
public
no-args
constructor
<p>Spring
provides
the
following
out-of-the-box
implementations:
<ul>
<li>{@link
orgspringframeworktestcontextsupportGenericXmlContextLoader
GenericXmlContextLoader</li>
<li>{@link
orgspringframeworktestcontextsupportGenericPropertiesContextLoader
GenericPropertiesContextLoader</li>
</ul>
:end
:start
Processes
application
context
resource
locations
for
a
specified
class
<p>Concrete
implementations
may
choose
to
modify
the
supplied
locations,
generate
new
locations,
or
simply
return
the
supplied
locations
unchanged
:end
:start
Loads
a
new
ApplicationContext
context
based
on
the
supplied
locations,
configures
the
context,
and
finally
returns
the
context
in
fully
<em>refreshed</em>
state
<p>Configuration
locations
are
generally
considered
to
be
classpath
resources
by
default
<p>Concrete
implementations
should
register
annotation
configuration
processors
with
bean
factories
of
ApplicationContext
application
contexts
loaded
by
this
ContextLoader
Beans
will
therefore
automatically
be
candidates
for
annotation-based
dependency
injection
using
orgspringframeworkbeansfactoryannotationAutowired
@Autowired,
javaxannotationResource
@Resource,
and
javaxinjectInject
@Inject
<p>Any
ApplicationContext
loaded
by
a
ContextLoader
<strong>must</strong>
register
a
JVM
shutdown
hook
for
itself
Unless
the
context
gets
closed
early,
all
context
instances
will
be
automatically
closed
on
JVM
shutdown
This
allows
for
freeing
external
resources
held
by
beans
within
the
context,
eg
temporary
files
:end
:start
<p>
SpringJUnit4ClassRunner
is
a
custom
extension
of
BlockJUnit4ClassRunner
which
provides
functionality
of
the
<em>Spring
TestContext
Framework</em>
to
standard
JUnit
45+
tests
by
means
of
the
TestContextManager
and
associated
support
classes
and
annotations
</p>
<p>
The
following
list
constitutes
all
annotations
currently
supported
directly
by
SpringJUnit4ClassRunner
<em>(Note
that
additional
annotations
may
be
supported
by
various
orgspringframeworktestcontextTestExecutionListener
TestExecutionListeners)</em>
</p>
<ul>
<li>{@link
Test#expected()
&#064;Test(expected=)</li>
<li>{@link
Test#timeout()
&#064;Test(timeout=)</li>
<li>{@link
Timed
&#064;Timed</li>
<li>{@link
Repeat
&#064;Repeat</li>
<li>{@link
Ignore
&#064;Ignore</li>
<li>
orgspringframeworktestannotationProfileValueSourceConfiguration
&#064;ProfileValueSourceConfiguration</li>
<li>{@link
orgspringframeworktestannotationIfProfileValue
&#064;IfProfileValue</li>
</ul>
<p>
<b>NOTE:</b>
As
of
Spring
30,
SpringJUnit4ClassRunner
requires
JUnit
45+
</p>
:end
:start
Constructs
a
new
SpringJUnit4ClassRunner
and
initializes
a
TestContextManager
to
provide
Spring
testing
functionality
to
standard
JUnit
tests
:end
:start
Creates
a
new
TestContextManager
for
the
supplied
test
class
and
the
configured
<em>default
ContextLoader
class
name</em>
Can
be
overridden
by
subclasses
:end
:start
Get
the
TestContextManager
associated
with
this
runner
:end
:start
Get
the
name
of
the
default
ContextLoader
class
to
use
for
the
supplied
test
class
The
named
class
will
be
used
if
the
test
class
does
not
explicitly
declare
a
ContextLoader
class
via
the
@ContextConfiguration
annotation
<p>The
default
implementation
returns
null,
thus
implying
use
of
the
<em>standard</em>
default
ContextLoader
class
name
Can
be
overridden
by
subclasses
:end
:start
Returns
a
description
suitable
for
an
ignored
test
class
if
the
test
is
disabled
via
@IfProfileValue
at
the
class-level,
and
otherwise
delegates
to
the
parent
implementation
:end
:start
Check
whether
the
test
is
enabled
in
the
first
place
This
prevents
classes
with
a
non-matching
@IfProfileValue
annotation
from
running
altogether,
even
skipping
the
execution
of
prepareTestInstance()
TestExecutionListener
methods
:end
:start
Wraps
the
Statement
returned
by
the
parent
implementation
with
a
RunBeforeTestClassCallbacks
statement,
thus
preserving
the
default
functionality
but
adding
support
for
the
Spring
TestContext
Framework
:end
:start
Wraps
the
Statement
returned
by
the
parent
implementation
with
a
RunAfterTestClassCallbacks
statement,
thus
preserving
the
default
functionality
but
adding
support
for
the
Spring
TestContext
Framework
:end
:start
Delegates
to
the
parent
implementation
for
creating
the
test
instance
and
then
allows
the
#getTestContextManager()
TestContextManager
to
prepare
the
test
instance
before
returning
it
:end
:start
Performs
the
same
logic
as
BlockJUnit4ClassRunner#runChild(FrameworkMethod,
RunNotifier),
except
that
tests
are
determined
to
be
<em>ignored</em>
by
#isTestMethodIgnored(FrameworkMethod)
:end
:start
Augments
the
default
JUnit
behavior
#withPotentialRepeat(FrameworkMethod,
Object,
Statement)
with
potential
repeats
of
the
entire
execution
chain
<p>Furthermore,
support
for
timeouts
has
been
moved
down
the
execution
chain
in
order
to
include
execution
of
orgjunitBefore
&#064;Before
and
orgjunitAfter
&#064;After
methods
within
the
timed
execution
Note
that
this
differs
from
the
default
JUnit
behavior
of
executing
@Before
and
@After
methods
in
the
main
thread
while
executing
the
actual
test
method
in
a
separate
thread
Thus,
the
end
effect
is
that
@Before
and
@After
methods
will
be
executed
in
the
same
thread
as
the
test
method
As
a
consequence,
JUnit-specified
timeouts
will
work
fine
in
combination
with
Spring
transactions
Note
that
JUnit-specific
timeouts
still
differ
from
Spring-specific
timeouts
in
that
the
former
execute
in
a
separate
thread
while
the
latter
simply
execute
in
the
main
thread
(like
regular
tests)
:end
:start
Returns
true
if
Ignore
&#064;Ignore
is
present
for
the
supplied
FrameworkMethod
test
method
or
if
the
test
method
is
disabled
via
@IfProfileValue
:end
:start
Performs
the
same
logic
as
BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod,
Object,
Statement)
except
that
the
<em>expected
exception</em>
is
retrieved
using
#getExpectedException(FrameworkMethod)
:end
:start
Get
the
exception
that
the
supplied
FrameworkMethod
test
method
is
expected
to
throw
<p>Supports
JUnit's
Test#expected()
@Test(expected=)
annotation
:end
:start
Supports
both
Spring's
Timed
&#064;Timed
and
JUnit's
Test#timeout()
&#064;Test(timeout=)
annotations,
but
not
both
simultaneously
Returns
either
a
SpringFailOnTimeout,
a
FailOnTimeout,
or
the
unmodified,
supplied
Statement
as
appropriate
:end
:start
Retrieves
the
configured
JUnit
timeout
from
the
Test
&#064;Test
annotation
on
the
supplied
FrameworkMethod
test
method
:end
:start
Retrieves
the
configured
Spring-specific
timeout
from
the
Timed
&#064;Timed
annotation
on
the
supplied
FrameworkMethod
test
method
:end
:start
Wraps
the
Statement
returned
by
the
parent
implementation
with
a
RunBeforeTestMethodCallbacks
statement,
thus
preserving
the
default
functionality
but
adding
support
for
the
Spring
TestContext
Framework
:end
:start
Wraps
the
Statement
returned
by
the
parent
implementation
with
a
RunAfterTestMethodCallbacks
statement,
thus
preserving
the
default
functionality
but
adding
support
for
the
Spring
TestContext
Framework
:end
:start
Supports
Spring's
Repeat
&#064;Repeat
annotation
by
returning
a
SpringRepeat
statement
initialized
with
the
configured
repeat
count
or
1
if
no
repeat
count
is
configured
:end
:start
SpringFailOnTimeout
is
a
custom
JUnit
45+
Statement
which
adds
support
for
Spring's
Timed
@Timed
annotation
by
throwing
an
exception
if
the
next
statement
in
the
execution
chain
takes
more
than
the
specified
number
of
milliseconds
:end
:start
Constructs
a
new
SpringFailOnTimeout
statement
:end
:start
Invokes
the
next
Statement
statement
in
the
execution
chain
(typically
an
instance
of
orgjunitinternalrunnersstatementsInvokeMethod
InvokeMethod
or
orgjunitinternalrunnersstatementsExpectException
ExpectException)
and
throws
an
exception
if
the
next
statement
takes
more
than
the
specified
timeout

:end
:start
SpringRepeat
is
a
custom
JUnit
45+
Statement
which
adds
support
for
Spring's
Repeat
&#064;Repeat
annotation
by
repeating
the
test
for
the
specified
number
of
times
:end
:start
Constructs
a
new
SpringRepeat
statement
:end
:start
Invokes
the
next
Statement
statement
in
the
execution
chain
for
the
specified
repeat
count
:end
:start
MergedContextConfiguration
encapsulates
the
<em>merged</em>
context
configuration
declared
on
a
test
class
and
all
of
its
superclasses
via
ContextConfiguration
@ContextConfiguration
and
ActiveProfiles
@ActiveProfiles
<p>Merged
resource
locations,
annotated
classes,
and
active
profiles
represent
all
declared
values
in
the
test
class
hierarchy
taking
into
consideration
the
semantics
of
the
ContextConfiguration#inheritLocations
inheritLocations
and
ActiveProfiles#inheritProfiles
inheritProfiles
flags
in
@ContextConfiguration
and
@ActiveProfiles,
respectively
<p>A
SmartContextLoader
uses
MergedContextConfiguration
to
load
an
orgspringframeworkcontextApplicationContext
ApplicationContext
<p>{@code
MergedContextConfiguration
is
also
used
by
the
TestContext
as
the
context
cache
key
for
caching
an
orgspringframeworkcontextApplicationContext
ApplicationContext
that
was
loaded
using
properties
of
this
MergedContextConfiguration
:end
:start
Create
a
new
MergedContextConfiguration
instance
for
the
supplied
test
class,
resource
locations,
annotated
classes,
active
profiles,
and
ContextLoader
<p>If
a
null
value
is
supplied
for
locations,
classes,
or
activeProfiles
an
empty
array
will
be
stored
instead
Furthermore,
active
profiles
will
be
sorted,
and
duplicate
profiles
will
be
removed
:end
:start
Create
a
new
MergedContextConfiguration
instance
for
the
supplied
test
class,
resource
locations,
annotated
classes,
context
initializers,
active
profiles,
and
ContextLoader
<p>If
a
null
value
is
supplied
for
locations,
classes,
or
activeProfiles
an
empty
array
will
be
stored
instead
If
a
null
value
is
supplied
for
the
contextInitializerClasses
an
empty
set
will
be
stored
instead
Furthermore,
active
profiles
will
be
sorted,
and
duplicate
profiles
will
be
removed
:end
:start
Create
a
new
MergedContextConfiguration
instance
for
the
supplied
test
class,
resource
locations,
annotated
classes,
context
initializers,
active
profiles,
ContextLoader,
and
parent
configuration
<p>If
a
null
value
is
supplied
for
locations,
classes,
or
activeProfiles
an
empty
array
will
be
stored
instead
If
a
null
value
is
supplied
for
the
contextInitializerClasses
an
empty
set
will
be
stored
instead
Furthermore,
active
profiles
will
be
sorted,
and
duplicate
profiles
will
be
removed
:end
:start
Generate
a
null-safe
String
representation
of
the
supplied
ContextLoader
based
solely
on
the
fully
qualified
name
of
the
loader
or
&quot;null&quot;
if
the
supplied
loaded
is
null
:end
:start
Get
the
Class
test
class
associated
with
this
MergedContextConfiguration
:end
:start
Get
the
merged
resource
locations
for
the
#getTestClass()
test
class
:end
:start
Get
the
merged
annotated
classes
for
the
#getTestClass()
test
class
:end
:start
Determine
if
this
MergedContextConfiguration
instance
has
path-based
resource
locations
:end
:start
Determine
if
this
MergedContextConfiguration
instance
has
class-based
resources
:end
:start
Determine
if
this
MergedContextConfiguration
instance
has
either
path-based
resource
locations
or
class-based
resources
:end
:start
Get
the
merged
ApplicationContextInitializer
classes
for
the
#getTestClass()
test
class
:end
:start
Get
the
merged
active
bean
definition
profiles
for
the
#getTestClass()
test
class
:end
:start
Get
the
resolved
ContextLoader
for
the
#getTestClass()
test
class
:end
:start
Get
the
MergedContextConfiguration
for
the
parent
application
context
in
a
context
hierarchy
:end
:start
Get
the
parent
ApplicationContext
for
the
context
defined
by
this
MergedContextConfiguration
from
the
context
cache
<p>
If
the
parent
context
has
not
yet
been
loaded,
it
will
be
loaded,
stored
in
the
cache,
and
then
returned
:end
:start
Generate
a
unique
hash
code
for
all
properties
of
this
MergedContextConfiguration
excluding
the
#getTestClass()
test
class
:end
:start
Determine
if
the
supplied
object
is
equal
to
this
MergedContextConfiguration
instance
by
comparing
both
object's
#getLocations()
locations,
#getClasses()
annotated
classes,
#getContextInitializerClasses()
context
initializer
classes,
#getActiveProfiles()
active
profiles,
#getParent()
parents,
and
the
fully
qualified
names
of
their
#getContextLoader()
ContextLoaders
:end
:start
Provide
a
String
representation
of
the
#getTestClass()
test
class,
#getLocations()
locations,
#getClasses()
annotated
classes,
#getContextInitializerClasses()
context
initializer
classes,
#getActiveProfiles()
active
profiles,
the
name
of
the
#getContextLoader()
ContextLoader,
and
the
#getParent()
parent
configuration
:end
:start
Strategy
interface
for
loading
an
ApplicationContext
application
context
for
an
integration
test
managed
by
the
Spring
TestContext
Framework
<p>The
SmartContextLoader
SPI
supersedes
the
ContextLoader
SPI
introduced
in
Spring
25:
a
SmartContextLoader
can
choose
to
process
either
resource
locations
or
annotated
classes
Furthermore,
a
SmartContextLoader
can
set
active
bean
definition
profiles
in
the
context
that
it
loads
(see
MergedContextConfiguration#getActiveProfiles()
and
#loadContext(MergedContextConfiguration))
<p>See
the
Javadoc
for
ContextConfiguration
@ContextConfiguration
for
a
definition
of
<em>annotated
class</em>
<p>Clients
of
a
SmartContextLoader
should
call
#processContextConfiguration(ContextConfigurationAttributes)
processContextConfiguration()
prior
to
calling
#loadContext(MergedContextConfiguration)
loadContext()
This
gives
a
SmartContextLoader
the
opportunity
to
provide
custom
support
for
modifying
resource
locations
or
detecting
default
resource
locations
or
default
configuration
classes
The
results
of
#processContextConfiguration(ContextConfigurationAttributes)
processContextConfiguration()
should
be
merged
for
all
classes
in
the
hierarchy
of
the
root
test
class
and
then
supplied
to
#loadContext(MergedContextConfiguration)
loadContext()
<p>Even
though
SmartContextLoader
extends
ContextLoader,
clients
should
favor
SmartContextLoader-specific
methods
over
those
defined
in
ContextLoader,
particularly
because
a
SmartContextLoader
may
choose
not
to
support
methods
defined
in
the
ContextLoader
SPI
<p>Concrete
implementations
must
provide
a
public
no-args
constructor
<p>Spring
provides
the
following
out-of-the-box
implementations:
<ul>
<li>{@link
orgspringframeworktestcontextsupportDelegatingSmartContextLoader
DelegatingSmartContextLoader</li>
<li>{@link
orgspringframeworktestcontextsupportAnnotationConfigContextLoader
AnnotationConfigContextLoader</li>
<li>{@link
orgspringframeworktestcontextsupportGenericXmlContextLoader
GenericXmlContextLoader</li>
<li>{@link
orgspringframeworktestcontextsupportGenericPropertiesContextLoader
GenericPropertiesContextLoader</li>
<li>{@link
orgspringframeworktestcontextwebWebDelegatingSmartContextLoader
WebDelegatingSmartContextLoader</li>
<li>{@link
orgspringframeworktestcontextwebAnnotationConfigWebContextLoader
AnnotationConfigWebContextLoader</li>
<li>{@link
orgspringframeworktestcontextwebGenericXmlWebContextLoader
GenericXmlWebContextLoader</li>
</ul>
:end
:start
Processes
the
ContextConfigurationAttributes
for
a
given
test
class
<p>Concrete
implementations
may
choose
to
<em>modify</em>
the
locations
or
classes
in
the
supplied
ContextConfigurationAttributes,
<em>generate</em>
default
configuration
locations,
or
<em>detect</em>
default
configuration
classes
if
the
supplied
values
are
null
or
empty
<p><b>Note</b>:
in
contrast
to
a
standard
ContextLoader,
a
SmartContextLoader
<b>must</b>
<em>preemptively</em>
verify
that
a
generated
or
detected
default
actually
exists
before
setting
the
corresponding
locations
or
classes
property
in
the
supplied
ContextConfigurationAttributes
Consequently,
leaving
the
locations
or
classes
property
empty
signals
that
this
SmartContextLoader
was
not
able
to
generate
or
detect
defaults
:end
:start
Loads
a
new
ApplicationContext
context
based
on
the
supplied
MergedContextConfiguration
merged
context
configuration,
configures
the
context,
and
finally
returns
the
context
in
a
fully
<em>refreshed</em>
state
<p>Concrete
implementations
should
register
annotation
configuration
processors
with
bean
factories
of
ApplicationContext
application
contexts
loaded
by
this
SmartContextLoader
Beans
will
therefore
automatically
be
candidates
for
annotation-based
dependency
injection
using
orgspringframeworkbeansfactoryannotationAutowired
@Autowired,
javaxannotationResource
@Resource,
and
javaxinjectInject
@Inject
In
addition,
concrete
implementations
should
set
the
active
bean
definition
profiles
in
the
context's
orgspringframeworkcoreenvEnvironment
Environment
<p>Any
ApplicationContext
loaded
by
a
SmartContextLoader
<strong>must</strong>
register
a
JVM
shutdown
hook
for
itself
Unless
the
context
gets
closed
early,
all
context
instances
will
be
automatically
closed
on
JVM
shutdown
This
allows
for
freeing
of
external
resources
held
by
beans
within
the
context
(eg,
temporary
files)
:end
:start
Abstract
application
context
loader
that
provides
a
basis
for
all
concrete
implementations
of
the
ContextLoader
SPI
Provides
a
<em>Template
Method</em>
based
approach
for
#processLocations
processing
resource
locations
<p>As
of
Spring
31,
AbstractContextLoader
also
provides
a
basis
for
all
concrete
implementations
of
the
SmartContextLoader
SPI
For
backwards
compatibility
with
the
ContextLoader
SPI,
#processContextConfiguration(ContextConfigurationAttributes)
delegates
to
#processLocations(Class,
String)
:end
:start
For
backwards
compatibility
with
the
ContextLoader
SPI,
the
default
implementation
simply
delegates
to
#processLocations(Class,
String),
passing
it
the
ContextConfigurationAttributes#getDeclaringClass()
declaring
class
and
ContextConfigurationAttributes#getLocations()
resource
locations
retrieved
from
the
supplied
ContextConfigurationAttributes
configuration
attributes
The
processed
locations
are
then
ContextConfigurationAttributes#setLocations(String[])
set
in
the
supplied
configuration
attributes
<p>Can
be
overridden
in
subclasses
&mdash;
for
example,
to
process
annotated
classes
instead
of
resource
locations
:end
:start
Prepare
the
ConfigurableApplicationContext
created
by
this
SmartContextLoader
<i>before</i>
bean
definitions
are
read
<p>The
default
implementation:
<ul>
<li>Sets
the
<em>active
bean
definition
profiles</em>
from
the
supplied
MergedContextConfiguration
in
the
orgspringframeworkcoreenvEnvironment
Environment
of
the
context</li>
<li>Determines
what
(if
any)
context
initializer
classes
have
been
supplied
via
the
MergedContextConfiguration
and
ApplicationContextInitializer#initialize
invokes
each
with
the
given
application
context</li>
</ul>
<p>Any
ApplicationContextInitializers
implementing
orgspringframeworkcoreOrdered
Ordered
or
marked
with
orgspringframeworkcoreannotationOrder
@Order
will
be
sorted
appropriately
:end
:start
If
the
supplied
locations
are
null
or
<em>empty</em>
and
#isGenerateDefaultLocations()
returns
true,
default
locations
will
be
#generateDefaultLocations(Class)
generated
for
the
specified
Class
class
and
the
configured
#getResourceSuffix()
resource
suffix;
otherwise,
the
supplied
locations
will
be
#modifyLocations
modified
if
necessary
and
returned
:end
:start
Generate
the
default
classpath
resource
locations
array
based
on
the
supplied
class
<p>For
example,
if
the
supplied
class
is
comexampleMyTest,
the
generated
locations
will
contain
a
single
string
with
a
value
of
&quot;classpath:/com/example/MyTest{@code
<suffix>&quot;,
where
<suffix>
is
the
value
of
the
#getResourceSuffix()
resource
suffix
string
<p>As
of
Spring
31,
the
implementation
of
this
method
adheres
to
the
contract
defined
in
the
SmartContextLoader
SPI
Specifically,
this
method
will
<em>preemptively</em>
verify
that
the
generated
default
location
actually
exists
If
it
does
not
exist,
this
method
will
log
a
warning
and
return
an
empty
array
<p>Subclasses
can
override
this
method
to
implement
a
different
<em>default
location
generation</em>
strategy
:end
:start
Generate
a
modified
version
of
the
supplied
locations
array
and
return
it
<p>A
plain
path
&mdash;
for
example,
&quot;contextxml&quot;
&mdash;
will
be
treated
as
a
classpath
resource
that
is
relative
to
the
package
in
which
the
specified
class
is
defined
A
path
starting
with
a
slash
is
treated
as
an
absolute
classpath
location,
for
example:
&quot;/org/springframework/whatever/fooxml&quot;
A
path
which
references
a
URL
(eg,
a
path
prefixed
with
ResourceUtils#CLASSPATH_URL_PREFIX
classpath:,
ResourceUtils#FILE_URL_PREFIX
file:,
http:,
etc)
will
be
added
to
the
results
unchanged
<p>Subclasses
can
override
this
method
to
implement
a
different
<em>location
modification</em>
strategy
:end
:start
Determine
whether
or
not
<em>default</em>
resource
locations
should
be
generated
if
the
locations
provided
to
#processLocations(Class,
String)
are
null
or
empty
<p>As
of
Spring
31,
the
semantics
of
this
method
have
been
overloaded
to
include
detection
of
either
default
resource
locations
or
default
configuration
classes
Consequently,
this
method
can
also
be
used
to
determine
whether
or
not
<em>default</em>
configuration
classes
should
be
detected
if
the
classes
present
in
the
ContextConfigurationAttributes
configuration
attributes
supplied
to
#processContextConfiguration(ContextConfigurationAttributes)
are
null
or
empty
<p>Can
be
overridden
by
subclasses
to
change
the
default
behavior
:end
:start
Get
the
suffix
to
append
to
ApplicationContext
resource
locations
when
generating
default
locations
<p>Must
be
implemented
by
subclasses
:end
:start
AbstractDelegatingSmartContextLoader
serves
as
an
abstract
base
class
for
implementations
of
the
SmartContextLoader
SPI
that
delegate
to
a
set
of
<em>candidate</em>
SmartContextLoaders
(ie,
one
that
supports
XML
configuration
files
and
one
that
supports
annotated
classes)
to
determine
which
context
loader
is
appropriate
for
a
given
test
class's
configuration
Each
candidate
is
given
a
chance
to
#processContextConfiguration
process
the
ContextConfigurationAttributes
for
each
class
in
the
test
class
hierarchy
that
is
annotated
with
ContextConfiguration
@ContextConfiguration,
and
the
candidate
that
supports
the
merged,
processed
configuration
will
be
used
to
actually
#loadContext
load
the
context
<p>Placing
an
empty
@ContextConfiguration
annotation
on
a
test
class
signals
that
default
resource
locations
(ie,
XML
configuration
files)
or
default
orgspringframeworkcontextannotationConfiguration
configuration
classes
should
be
detected
Furthermore,
if
a
specific
ContextLoader
or
SmartContextLoader
is
not
explicitly
declared
via
@ContextConfiguration,
a
concrete
subclass
of
AbstractDelegatingSmartContextLoader
will
be
used
as
the
default
loader,
thus
providing
automatic
support
for
either
XML
configuration
files
or
annotated
classes,
but
not
both
simultaneously
<p>As
of
Spring
32,
a
test
class
may
optionally
declare
neither
XML
configuration
files
nor
annotated
classes
and
instead
declare
only
ContextConfiguration#initializers
application
context
initializers
In
such
cases,
an
attempt
will
still
be
made
to
detect
defaults,
but
their
absence
will
not
result
in
an
exception
:end
:start
Get
the
delegate
SmartContextLoader
that
supports
XML
configuration
files
:end
:start
Get
the
delegate
SmartContextLoader
that
supports
annotated
classes
:end
:start
Delegates
to
candidate
SmartContextLoaders
to
process
the
supplied
ContextConfigurationAttributes
<p>Delegation
is
based
on
explicit
knowledge
of
the
implementations
of
the
default
loaders
for
#getXmlLoader()
XML
configuration
files
and
#getAnnotationConfigLoader()
annotated
classes
Specifically,
the
delegation
algorithm
is
as
follows:
<ul>
<li>If
the
resource
locations
or
annotated
classes
in
the
supplied
ContextConfigurationAttributes
are
not
empty,
the
appropriate
candidate
loader
will
be
allowed
to
process
the
configuration
<em>as
is</em>,
without
any
checks
for
detection
of
defaults</li>
<li>Otherwise,
the
XML-based
loader
will
be
allowed
to
process
the
configuration
in
order
to
detect
default
resource
locations
If
the
XML-based
loader
detects
default
resource
locations,
an
info
message
will
be
logged</li>
<li>Subsequently,
the
annotation-based
loader
will
be
allowed
to
process
the
configuration
in
order
to
detect
default
configuration
classes
If
the
annotation-based
loader
detects
default
configuration
classes,
an
info
message
will
be
logged</li>
</ul>
:end
:start
Delegates
to
an
appropriate
candidate
SmartContextLoader
to
load
an
ApplicationContext
<p>Delegation
is
based
on
explicit
knowledge
of
the
implementations
of
the
default
loaders
for
#getXmlLoader()
XML
configuration
files
and
#getAnnotationConfigLoader()
annotated
classes
Specifically,
the
delegation
algorithm
is
as
follows:
<ul>
<li>If
the
resource
locations
in
the
supplied
MergedContextConfiguration
are
not
empty
and
the
annotated
classes
are
empty,
the
XML-based
loader
will
load
the
ApplicationContext</li>
<li>If
the
annotated
classes
in
the
supplied
MergedContextConfiguration
are
not
empty
and
the
resource
locations
are
empty,
the
annotation-based
loader
will
load
the
ApplicationContext</li>
</ul>
:end
:start
AbstractDelegatingSmartContextLoader
does
not
support
the
ContextLoader#processLocations(Class,
String)
method
Call
#processContextConfiguration(ContextConfigurationAttributes)
instead
:end
:start
AbstractDelegatingSmartContextLoader
does
not
support
the
ContextLoader#loadContext(String)

method
Call
#loadContext(MergedContextConfiguration)
instead
:end
:start
Abstract,
generic
extension
of
AbstractContextLoader
that
loads
a
GenericApplicationContext
<ul>
<li>If
instances
of
concrete
subclasses
are
invoked
via
the
orgspringframeworktestcontextContextLoader
ContextLoader
SPI,
the
context
will
be
loaded
from
the
<em>locations</em>
provided
to
#loadContext(String)</li>
<li>If
instances
of
concrete
subclasses
are
invoked
via
the
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader
SPI,
the
context
will
be
loaded
from
the
MergedContextConfiguration
provided
to
#loadContext(MergedContextConfiguration)
In
such
cases,
a
SmartContextLoader
will
decide
whether
to
load
the
context
from
<em>locations</em>
or
<em>annotated
classes</em></li>
</ul>
<p>Concrete
subclasses
must
provide
an
appropriate
implementation
of
#createBeanDefinitionReader
createBeanDefinitionReader(),
potentially
overriding
#loadBeanDefinitions
loadBeanDefinitions()
as
well
:end
:start
Load
a
Spring
ApplicationContext
from
the
supplied
MergedContextConfiguration
<p>Implementation
details:
<ul>
<li>Calls
#validateMergedContextConfiguration(MergedContextConfiguration)
to
allow
subclasses
to
validate
the
supplied
configuration
before
proceeding</li>
<li>Creates
a
GenericApplicationContext
instance</li>
<li>If
the
supplied
MergedContextConfiguration
references
a
MergedContextConfiguration#getParent()
parent
configuration,
the
corresponding
MergedContextConfiguration#getParentApplicationContext()
ApplicationContext
will
be
retrieved
and
GenericApplicationContext#setParent(ApplicationContext)
set
as
the
parent
for
the
context
created
by
this
method</li>
<li>Calls
#prepareContext(GenericApplicationContext)
for
backwards
compatibility
with
the
orgspringframeworktestcontextContextLoader
ContextLoader
SPI</li>
<li>Calls
#prepareContext(ConfigurableApplicationContext,
MergedContextConfiguration)
to
allow
for
customizing
the
context
before
bean
definitions
are
loaded</li>
<li>Calls
#customizeBeanFactory(DefaultListableBeanFactory)
to
allow
for
customizing
the
context's
DefaultListableBeanFactory</li>
<li>Delegates
to
#loadBeanDefinitions(GenericApplicationContext,
MergedContextConfiguration)
to
populate
the
context
from
the
locations
or
classes
in
the
supplied
MergedContextConfiguration</li>
<li>Delegates
to
AnnotationConfigUtils
for
AnnotationConfigUtils#registerAnnotationConfigProcessors
registering
annotation
configuration
processors</li>
<li>Calls
#customizeContext(GenericApplicationContext)
to
allow
for
customizing
the
context
before
it
is
refreshed</li>
<li>{@link
ConfigurableApplicationContext#refresh
Refreshes
the
context
and
registers
a
JVM
shutdown
hook
for
it</li>
</ul>
:end
:start
Validate
the
supplied
MergedContextConfiguration
with
respect
to
what
this
context
loader
supports
<p>The
default
implementation
is
a
<em>no-op</em>
but
can
be
overridden
by
subclasses
as
appropriate
:end
:start
Load
a
Spring
ApplicationContext
from
the
supplied
locations
<p>Implementation
details:
<ul>
<li>Creates
a
GenericApplicationContext
instance</li>
<li>Calls
#prepareContext(GenericApplicationContext)
to
allow
for
customizing
the
context
before
bean
definitions
are
loaded</li>
<li>Calls
#customizeBeanFactory(DefaultListableBeanFactory)
to
allow
for
customizing
the
context's
DefaultListableBeanFactory</li>
<li>Delegates
to
#createBeanDefinitionReader(GenericApplicationContext)
to
create
a
BeanDefinitionReader
which
is
then
used
to
populate
the
context
from
the
specified
locations</li>
<li>Delegates
to
AnnotationConfigUtils
for
AnnotationConfigUtils#registerAnnotationConfigProcessors
registering
annotation
configuration
processors</li>
<li>Calls
#customizeContext(GenericApplicationContext)
to
allow
for
customizing
the
context
before
it
is
refreshed</li>
<li>{@link
ConfigurableApplicationContext#refresh
Refreshes
the
context
and
registers
a
JVM
shutdown
hook
for
it</li>
</ul>
<p><b>Note</b>:
this
method
does
not
provide
a
means
to
set
active
bean
definition
profiles
for
the
loaded
context
See
#loadContext(MergedContextConfiguration)
and
AbstractContextLoader#prepareContext(ConfigurableApplicationContext,
MergedContextConfiguration)
for
an
alternative
:end
:start
Prepare
the
GenericApplicationContext
created
by
this
ContextLoader
Called
<i>before</i>
bean
definitions
are
read
<p>The
default
implementation
is
empty
Can
be
overridden
in
subclasses
to
customize
GenericApplicationContext's
standard
settings
:end
:start
Customize
the
internal
bean
factory
of
the
ApplicationContext
created
by
this
ContextLoader
<p>The
default
implementation
is
empty
but
can
be
overridden
in
subclasses
to
customize
DefaultListableBeanFactory's
standard
settings
:end
:start
Load
bean
definitions
into
the
supplied
GenericApplicationContext
context
from
the
locations
or
classes
in
the
supplied
MergedContextConfiguration
<p>The
default
implementation
delegates
to
the
BeanDefinitionReader
returned
by
#createBeanDefinitionReader(GenericApplicationContext)
to
BeanDefinitionReader#loadBeanDefinitions(String)
load
the
bean
definitions
<p>Subclasses
must
provide
an
appropriate
implementation
of
#createBeanDefinitionReader(GenericApplicationContext)
Alternatively
subclasses
may
provide
a
<em>no-op</em>
implementation
of
createBeanDefinitionReader()
and
override
this
method
to
provide
a
custom
strategy
for
loading
or
registering
bean
definitions
:end
:start
Factory
method
for
creating
a
new
BeanDefinitionReader
for
loading
bean
definitions
into
the
supplied
GenericApplicationContext
context
:end
:start
Customize
the
GenericApplicationContext
created
by
this
ContextLoader
<i>after</i>
bean
definitions
have
been
loaded
into
the
context
but
<i>before</i>
the
context
is
refreshed
<p>The
default
implementation
is
empty
but
can
be
overridden
in
subclasses
to
customize
the
application
context
:end
:start
Concrete
implementation
of
AbstractGenericContextLoader
that
loads
bean
definitions
from
annotated
classes
<p>See
the
Javadoc
for
orgspringframeworktestcontextContextConfiguration
@ContextConfiguration
for
a
definition
of
<em>annotated
class</em>
<p>Note:
AnnotationConfigContextLoader
supports
<em>annotated
classes</em>
rather
than
the
String-based
resource
locations
defined
by
the
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
API
Thus,
although
AnnotationConfigContextLoader
extends
AbstractGenericContextLoader,
AnnotationConfigContextLoader
does
<em>not</em>
support
any
String-based
methods
defined
by
AbstractContextLoader
or
AbstractGenericContextLoader
Consequently,
AnnotationConfigContextLoader
should
chiefly
be
considered
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader
rather
than
a
orgspringframeworktestcontextContextLoader
ContextLoader
:end
:start
Process
<em>annotated
classes</em>
in
the
supplied
ContextConfigurationAttributes
<p>If
the
<em>annotated
classes</em>
are
null
or
empty
and
#isGenerateDefaultLocations()
returns
true,
this
SmartContextLoader
will
attempt
to
#detectDefaultConfigurationClasses
detect
default
configuration
classes
If
defaults
are
detected
they
will
be
ContextConfigurationAttributes#setClasses(Class[])
set
in
the
supplied
configuration
attributes
Otherwise,
properties
in
the
supplied
configuration
attributes
will
not
be
modified
:end
:start
Detect
the
default
configuration
classes
for
the
supplied
test
class
<p>The
default
implementation
simply
delegates
to
AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)
:end
:start
AnnotationConfigContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
AnnotationConfigContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
AnnotationConfigContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
Ensure
that
the
supplied
MergedContextConfiguration
does
not
contain
MergedContextConfiguration#getLocations()
locations
:end
:start
Register
classes
in
the
supplied
GenericApplicationContext
context
from
the
classes
in
the
supplied
MergedContextConfiguration
<p>Each
class
must
represent
an
<em>annotated
class</em>
An
AnnotatedBeanDefinitionReader
is
used
to
register
the
appropriate
bean
definitions
<p>Note
that
this
method
does
not
call
#createBeanDefinitionReader
since
AnnotatedBeanDefinitionReader
is
not
an
instance
of
BeanDefinitionReader
:end
:start
AnnotationConfigContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
Utility
methods
for
SmartContextLoader
SmartContextLoaders
that
deal
with
annotated
classes
(eg,
Configuration
@Configuration
classes)
:end
:start
Detect
the
default
configuration
classes
for
the
supplied
test
class
<p>The
returned
class
array
will
contain
all
static
inner
classes
of
the
supplied
class
that
meet
the
requirements
for
@Configuration
class
implementations
as
specified
in
the
documentation
for
Configuration
@Configuration
<p>The
implementation
of
this
method
adheres
to
the
contract
defined
in
the
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader
SPI
Specifically,
this
method
uses
introspection
to
detect
default
configuration
classes
that
comply
with
the
constraints
required
of
@Configuration
class
implementations
If
a
potential
candidate
configuration
class
does
not
meet
these
requirements,
this
method
will
log
a
debug
message,
and
the
potential
candidate
class
will
be
ignored
:end
:start
DelegatingSmartContextLoader
is
a
concrete
implementation
of
AbstractDelegatingSmartContextLoader
that
delegates
to
a
GenericXmlContextLoader
and
an
AnnotationConfigContextLoader
:end
:start
Concrete
implementation
of
AbstractGenericContextLoader
that
reads
bean
definitions
from
Java
Properties
resources
:end
:start
Creates
a
new
PropertiesBeanDefinitionReader
:end
:start
Returns
&quot;{@code
-contextproperties&quot;
:end
:start
Ensure
that
the
supplied
MergedContextConfiguration
does
not
contain
MergedContextConfiguration#getClasses()
classes
:end
:start
Concrete
implementation
of
AbstractGenericContextLoader
that
reads
bean
definitions
from
XML
resources
:end
:start
Create
a
new
XmlBeanDefinitionReader
:end
:start
Returns
&quot;{@code
-contextxml&quot;
:end
:start
Ensure
that
the
supplied
MergedContextConfiguration
does
not
contain
MergedContextConfiguration#getClasses()
classes
:end
:start
<p>Test
annotation
to
indicate
that
the
annotated
public
void
method
should
be
executed
<em>after</em>
a
transaction
is
ended
for
a
test
method
configured
to
run
within
a
transaction
via
the
@Transactional
annotation
<p>The
@AfterTransaction
methods
of
superclasses
will
be
executed
after
those
of
the
current
class
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
<p>Test
annotation
to
indicate
that
the
annotated
public
void
method
should
be
executed
<em>before</em>
a
transaction
is
started
for
a
test
method
configured
to
run
within
a
transaction
via
the
@Transactional
annotation
<p>The
@BeforeTransaction
methods
of
superclasses
will
be
executed
before
those
of
the
current
class
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
TransactionConfiguration
defines
class-level
metadata
for
configuring
transactional
tests
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
The
bean
name
of
the
orgspringframeworktransactionPlatformTransactionManager
PlatformTransactionManager
that
should
be
used
to
drive
transactions
<p>This
attribute
is
not
required
and
only
needs
to
be
declared
if
there
are
multiple
beans
of
type
PlatformTransactionManager
in
the
test's
ApplicationContext
<em>and</em>
if
one
of
the
following
is
true
<ul>
<li>the
bean
name
of
the
desired
PlatformTransactionManager
is
not
"transactionManager"</li>
<li>{@link
orgspringframeworktransactionannotationTransactionManagementConfigurer
TransactionManagementConfigurer
was
not
implemented
to
specify
which
PlatformTransactionManager
bean
should
be
used
for
annotation-driven
transaction
management
</ul>
<p><b>NOTE:</b>
The
XML
<tx:annotation-driven>
element
also
refers
to
a
bean
named
"transactionManager"
by
default
If
you
are
using
both
features
in
combination,
make
sure
to
point
to
the
same
transaction
manager
bean
-
here
in
@TransactionConfiguration
and
also
in
<tx:annotation-driven
transaction-manager="">
:end
:start
Should
transactions
be
rolled
back
by
default?
:end
:start
Configuration
attributes
for
configuring
transactional
tests
:end
:start
Construct
a
new
TransactionConfigurationAttributes
instance
from
the
supplied
arguments
:end
:start
Get
the
bean
name
of
the
PlatformTransactionManager
that
is
to
be
used
to
drive
transactions
:end
:start
Whether
or
not
transactions
should
be
rolled
back
by
default
:end
:start
Abstract,
generic
extension
of
AbstractContextLoader
that
loads
a
GenericWebApplicationContext
<p>If
instances
of
concrete
subclasses
are
invoked
via
the
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader
SPI,
the
context
will
be
loaded
from
the
MergedContextConfiguration
provided
to
#loadContext(MergedContextConfiguration)
In
such
cases,
a
SmartContextLoader
will
decide
whether
to
load
the
context
from
<em>locations</em>
or
<em>annotated
classes</em>
Note
that
AbstractGenericWebContextLoader
does
not
support
the
loadContext(String
locations)
method
from
the
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
SPI
<p>Concrete
subclasses
must
provide
an
appropriate
implementation
of
#loadBeanDefinitions
:end
:start
Load
a
Spring
WebApplicationContext
from
the
supplied
MergedContextConfiguration
<p>Implementation
details:
<ul>
<li>Calls
#validateMergedContextConfiguration(WebMergedContextConfiguration)
to
allow
subclasses
to
validate
the
supplied
configuration
before
proceeding</li>
<li>Creates
a
GenericWebApplicationContext
instance</li>
<li>If
the
supplied
MergedContextConfiguration
references
a
MergedContextConfiguration#getParent()
parent
configuration,
the
corresponding
MergedContextConfiguration#getParentApplicationContext()
ApplicationContext
will
be
retrieved
and
GenericWebApplicationContext#setParent(ApplicationContext)
set
as
the
parent
for
the
context
created
by
this
method</li>
<li>Delegates
to
#configureWebResources
to
create
the
MockServletContext
and
set
it
in
the
WebApplicationContext</li>
<li>Calls
#prepareContext
to
allow
for
customizing
the
context
before
bean
definitions
are
loaded</li>
<li>Calls
#customizeBeanFactory
to
allow
for
customizing
the
context's
DefaultListableBeanFactory</li>
<li>Delegates
to
#loadBeanDefinitions
to
populate
the
context
from
the
locations
or
classes
in
the
supplied
MergedContextConfiguration</li>
<li>Delegates
to
AnnotationConfigUtils
for
AnnotationConfigUtils#registerAnnotationConfigProcessors
registering
annotation
configuration
processors</li>
<li>Calls
#customizeContext
to
allow
for
customizing
the
context
before
it
is
refreshed</li>
<li>{@link
ConfigurableApplicationContext#refresh
Refreshes
the
context
and
registers
a
JVM
shutdown
hook
for
it</li>
</ul>
:end
:start
Validate
the
supplied
WebMergedContextConfiguration
with
respect
to
what
this
context
loader
supports
<p>The
default
implementation
is
a
<em>no-op</em>
but
can
be
overridden
by
subclasses
as
appropriate
:end
:start
Configures
web
resources
for
the
supplied
web
application
context
(WAC)
<h4>Implementation
Details</h4>
<p>If
the
supplied
WAC
has
no
parent
or
its
parent
is
not
a
WAC,
the
supplied
WAC
will
be
configured
as
the
Root
WAC
(see
"<em>Root
WAC
Configuration</em>"
below)
<p>Otherwise
the
context
hierarchy
of
the
supplied
WAC
will
be
traversed
to
find
the
top-most
WAC
(ie,
the
root);
and
the
ServletContext
of
the
Root
WAC
will
be
set
as
the
ServletContext
for
the
supplied
WAC
<h4>Root
WAC
Configuration</h4>
<ul>
<li>The
resource
base
path
is
retrieved
from
the
supplied
WebMergedContextConfiguration</li>
<li>A
ResourceLoader
is
instantiated
for
the
MockServletContext:
if
the
resource
base
path
is
prefixed
with
"{@code
classpath:",
a
DefaultResourceLoader
will
be
used;
otherwise,
a
FileSystemResourceLoader
will
be
used</li>
<li>A
MockServletContext
will
be
created
using
the
resource
base
path
and
resource
loader</li>
<li>The
supplied
GenericWebApplicationContext
is
then
stored
in
the
MockServletContext
under
the
WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
key</li>
<li>Finally,
the
MockServletContext
is
set
in
the
WebApplicationContext</li>
:end
:start
Customize
the
internal
bean
factory
of
the
WebApplicationContext
created
by
this
context
loader
<p>The
default
implementation
is
empty
but
can
be
overridden
in
subclasses
to
customize
DefaultListableBeanFactory's
standard
settings
:end
:start
Load
bean
definitions
into
the
supplied
GenericWebApplicationContext
context
from
the
locations
or
classes
in
the
supplied
WebMergedContextConfiguration
<p>Concrete
subclasses
must
provide
an
appropriate
implementation
:end
:start
Customize
the
GenericWebApplicationContext
created
by
this
context
loader
<i>after</i>
bean
definitions
have
been
loaded
into
the
context
but
<i>before</i>
the
context
is
refreshed
<p>The
default
implementation
is
empty
but
can
be
overridden
in
subclasses
to
customize
the
web
application
context
:end
:start
AbstractGenericWebContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
Concrete
implementation
of
AbstractGenericWebContextLoader
that
loads
bean
definitions
from
annotated
classes
<p>See
the
Javadoc
for
orgspringframeworktestcontextContextConfiguration
@ContextConfiguration
for
a
definition
of
<em>annotated
class</em>
<p>Note:
AnnotationConfigWebContextLoader
supports
<em>annotated
classes</em>
rather
than
the
String-based
resource
locations
defined
by
the
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
API
Thus,
although
AnnotationConfigWebContextLoader
extends
AbstractGenericWebContextLoader,
AnnotationConfigWebContextLoader
does
<em>not</em>
support
any
String-based
methods
defined
by
orgspringframeworktestcontextsupportAbstractContextLoader
AbstractContextLoader
or
AbstractGenericWebContextLoader
Consequently,
AnnotationConfigWebContextLoader
should
chiefly
be
considered
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader
rather
than
a
orgspringframeworktestcontextContextLoader
ContextLoader
:end
:start
Process
<em>annotated
classes</em>
in
the
supplied
ContextConfigurationAttributes
<p>If
the
<em>annotated
classes</em>
are
null
or
empty
and
#isGenerateDefaultLocations()
returns
true,
this
SmartContextLoader
will
attempt
to
#detectDefaultConfigurationClasses
detect
default
configuration
classes
If
defaults
are
detected
they
will
be
ContextConfigurationAttributes#setClasses(Class[])
set
in
the
supplied
configuration
attributes
Otherwise,
properties
in
the
supplied
configuration
attributes
will
not
be
modified
:end
:start
Detect
the
default
configuration
classes
for
the
supplied
test
class
<p>The
default
implementation
simply
delegates
to
AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)
:end
:start
AnnotationConfigWebContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
AnnotationConfigWebContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
AnnotationConfigWebContextLoader
should
be
used
as
a
orgspringframeworktestcontextSmartContextLoader
SmartContextLoader,
not
as
a
legacy
orgspringframeworktestcontextContextLoader
ContextLoader
Consequently,
this
method
is
not
supported
:end
:start
Register
classes
in
the
supplied
GenericWebApplicationContext
context
from
the
classes
in
the
supplied
WebMergedContextConfiguration
<p>Each
class
must
represent
an
<em>annotated
class</em>
An
AnnotatedBeanDefinitionReader
is
used
to
register
the
appropriate
bean
definitions
:end
:start
Ensure
that
the
supplied
WebMergedContextConfiguration
does
not
contain
MergedContextConfiguration#getLocations()
locations
:end
:start
Concrete
implementation
of
AbstractGenericWebContextLoader
that
loads
bean
definitions
from
XML
resources
:end
:start
Loads
bean
definitions
using
an
XmlBeanDefinitionReader
:end
:start
Returns
&quot;{@code
-contextxml&quot;
:end
:start
Ensure
that
the
supplied
WebMergedContextConfiguration
does
not
contain
MergedContextConfiguration#getClasses()
classes
:end
:start
@WebAppConfiguration
is
a
class-level
annotation
that
is
used
to
declare
that
the
ApplicationContext
loaded
for
an
integration
test
should
be
a
orgspringframeworkwebcontextWebApplicationContext
WebApplicationContext
<p>The
mere
presence
of
@WebAppConfiguration
on
a
test
class
ensures
that
a
WebApplicationContext
will
be
loaded
for
the
test
using
a
default
for
the
path
to
the
root
of
the
web
application
To
override
the
default,
specify
an
explicit
resource
path
via
the
#value
attribute
<p>Note
that
@WebAppConfiguration
must
be
used
in
conjunction
with
orgspringframeworktestcontextContextConfiguration
@ContextConfiguration,
either
within
a
single
test
class
or
within
a
test
class
hierarchy
<p>As
of
Spring
Framework
40,
this
annotation
may
be
used
as
a
<em>meta-annotation</em>
to
create
custom
<em>composed
annotations</em>
:end
:start
The
resource
path
to
the
root
directory
of
the
web
application
<p>A
path
that
does
not
include
a
Spring
resource
prefix
(eg,
classpath:,
file:,
etc)
will
be
interpreted
as
a
file
system
resource,
and
a
path
should
not
end
with
a
slash
<p>Defaults
to
"src/main/webapp"
as
a
file
system
resource
Note
that
this
is
the
standard
directory
for
the
root
of
a
web
application
in
a
project
that
follows
the
standard
Maven
project
layout
for
a
WAR
:end
:start
WebDelegatingSmartContextLoader
is
a
concrete
implementation
of
AbstractDelegatingSmartContextLoader
that
delegates
to
a
GenericXmlWebContextLoader
and
an
AnnotationConfigWebContextLoader
:end
:start
WebMergedContextConfiguration
encapsulates
the
<em>merged</em>
context
configuration
declared
on
a
test
class
and
all
of
its
superclasses
via
orgspringframeworktestcontextContextConfiguration
@ContextConfiguration,
WebAppConfiguration
@WebAppConfiguration,
and
orgspringframeworktestcontextActiveProfiles
@ActiveProfiles
<p>{@code
WebMergedContextConfiguration
extends
the
contract
of
MergedContextConfiguration
by
adding
support
for
the
#getResourceBasePath()
resource
base
path
configured
via
@WebAppConfiguration
This
allows
the
orgspringframeworktestcontextTestContext
TestContext
to
properly
cache
the
corresponding
orgspringframeworkwebcontextWebApplicationContext
WebApplicationContext
that
was
loaded
using
properties
of
this
WebMergedContextConfiguration
:end
:start
Create
a
new
WebMergedContextConfiguration
instance
for
the
supplied
test
class,
resource
locations,
annotated
classes,
context
initializers,
active
profiles,
resource
base
path,
and
ContextLoader
<p>If
a
null
value
is
supplied
for
locations,
classes,
or
activeProfiles
an
empty
array
will
be
stored
instead
If
a
null
value
is
supplied
for
the
contextInitializerClasses
an
empty
set
will
be
stored
instead
If
an
<em>empty</em>
value
is
supplied
for
the
resourceBasePath
an
empty
string
will
be
used
Furthermore,
active
profiles
will
be
sorted,
and
duplicate
profiles
will
be
removed
:end
:start
Create
a
new
WebMergedContextConfiguration
instance
for
the
supplied
test
class,
resource
locations,
annotated
classes,
context
initializers,
active
profiles,
resource
base
path,
and
ContextLoader
<p>If
a
null
value
is
supplied
for
locations,
classes,
or
activeProfiles
an
empty
array
will
be
stored
instead
If
a
null
value
is
supplied
for
the
contextInitializerClasses
an
empty
set
will
be
stored
instead
If
an
<em>empty</em>
value
is
supplied
for
the
resourceBasePath
an
empty
string
will
be
used
Furthermore,
active
profiles
will
be
sorted,
and
duplicate
profiles
will
be
removed
:end
:start
Get
the
resource
path
to
the
root
directory
of
the
web
application
for
the
#getTestClass()
test
class,
configured
via
@WebAppConfiguration
:end
:start
Generate
a
unique
hash
code
for
all
properties
of
this
WebMergedContextConfiguration
excluding
the
#getTestClass()
test
class
:end
:start
Determine
if
the
supplied
object
is
equal
to
this
WebMergedContextConfiguration
instance
by
comparing
both
object's
#getLocations()
locations,
#getClasses()
annotated
classes,
#getContextInitializerClasses()
context
initializer
classes,
#getActiveProfiles()
active
profiles,
#getResourceBasePath()
resource
base
path,
#getParent()
parents,
and
the
fully
qualified
names
of
their
#getContextLoader()
ContextLoaders
:end
:start
Provide
a
String
representation
of
the
#getTestClass()
test
class,
#getLocations()
locations,
#getClasses()
annotated
classes,
#getContextInitializerClasses()
context
initializer
classes,
#getActiveProfiles()
active
profiles,
#getResourceBasePath()
resource
base
path,
the
name
of
the
#getContextLoader()
ContextLoader,
and
the
#getParent()
parent
configuration
:end
:start
JUnit
independent
assertion
class
:end
:start
Fails
a
test
with
the
given
message
:end
:start
Fails
a
test
with
the
given
message
passing
along
expected
and
actual
values
to
be
added
to
the
message
<p>For
example
given:
<pre
class="code">
assertEquals("Response
header
["
+
name
+
"]",
actual,
expected);
</pre>
<p>The
resulting
message
is:
<pre
class="code">
Response
header
[Accept]
expected:&lt;application/json&gt;
but
was:&lt;text/plain&gt;
</pre>
:end
:start
Assert
the
given
condition
is
true
and
raise
an
AssertionError
if
it
is
not
:end
:start
Assert
two
objects
are
equal
raise
an
AssertionError
if
not
<p>For
example:
<pre
class="code">
assertEquals("Response
header
["
+
name
+
"]",
actual,
expected);
</pre>
:end
:start
A
helper
class
for
applying
assertions
via
JSONPath
expressions
:end
:start
Class
constructor
:end
:start
Evaluate
the
JSONPath
and
assert
the
resulting
value
with
the
given
Matcher
:end
:start
Apply
the
JSONPath
and
assert
the
resulting
value
:end
:start
Apply
the
JSONPath
and
assert
the
resulting
value
is
an
array
:end
:start
Evaluate
the
JSON
path
and
assert
the
resulting
content
exists
:end
:start
Evaluate
the
JSON
path
and
assert
it
doesn't
point
to
any
content
:end
:start
A
replacement
of
orghamcrestMatcherAssert
that
removes
the
need
to
depend
on
"hamcrest-all"
when
using
Hamcrest
11
and
also
maintains
backward
compatibility
with
Hamcrest
11
(also
embedded
in
JUnit
44
through
48)
:end
:start
Asserts
that
the
given
matcher
matches
the
actual
value
:end
:start
Asserts
that
the
given
matcher
matches
the
actual
value
:end
:start
A
helper
class
for
assertions
on
XML
content
:end
:start
Parse
the
content
as
Node
and
apply
a
Matcher
:end
:start
Parse
the
content
as
DOMSource
and
apply
a
Matcher
:end
:start
Parse
the
expected
and
actual
content
strings
as
XML
and
assert
that
the
two
are
"similar"
--
ie
they
contain
the
same
elements
and
attributes
regardless
of
order
<p>Use
of
this
method
assumes
the
<a
href="http://xmlunitsourceforgenet/">XMLUnit<a/>
library
is
available
:end
:start
A
helper
class
for
applying
assertions
via
XPath
expressions
:end
:start
Class
constructor
:end
:start
Parse
the
content,
evaluate
the
XPath
expression
as
a
Node,
and
assert
it
with
the
given
Matcher<Node>
:end
:start
Parse
the
given
XML
content
to
a
Document
:end
:start
Apply
the
XPath
expression
to
given
document
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
exists
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
does
not
exist
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
with
the
given
Hamcrest
matcher
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
with
the
given
Hamcrest
matcher
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
with
the
given
Hamcrest
matcher
:end
:start
Apply
the
XPath
expression
and
assert
the
resulting
content
as
a
Boolean
:end
:start
Factory
for
request
content
RequestMatcher's
An
instance
of
this
class
is
typically
accessed
via
MockRestRequestMatchers#content()
:end
:start
Class
constructor,
not
for
direct
instantiation
Use
MockRestRequestMatchers#content()
:end
:start
Assert
the
request
content
type
as
a
String
:end
:start
Assert
the
request
content
type
as
a
MediaType
:end
:start
Assert
the
request
content
type
is
compatible
with
the
given
content
type
as
defined
by
MediaType#isCompatibleWith(MediaType)
:end
:start
Assert
the
request
content
type
is
compatible
with
the
given
content
type
as
defined
by
MediaType#isCompatibleWith(MediaType)
:end
:start
Get
the
body
of
the
request
as
a
UTF-8
string
and
appply
the
given
Matcher
:end
:start
Compare
the
body
of
the
request
to
the
given
byte
array
:end
:start
Parse
the
request
body
and
the
given
String
as
XML
and
assert
that
the
two
are
"similar"
-
ie
they
contain
the
same
elements
and
attributes
regardless
of
order
<p>Use
of
this
matcher
assumes
the
<a
href="http://xmlunitsourceforgenet/">XMLUnit<a/>
library
is
available
:end
:start
Parse
the
request
content
as
Node
and
apply
the
given
Matcher
:end
:start
Parse
the
request
content
as
DOMSource
and
apply
the
given
Matcher
:end
:start
Factory
methods
for
request
content
RequestMatcher's
using
a
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expression
An
instance
of
this
class
is
typically
accessed
via
RequestMatchersjsonPath()
:end
:start
Class
constructor,
not
for
direct
instantiation
Use
MockRestRequestMatchers#jsonPath(String,
Matcher)
or
MockRestRequestMatchers#jsonPath(String,
Object)
:end
:start
Evaluate
the
JSONPath
and
assert
the
resulting
value
with
the
given
Matcher
:end
:start
Apply
the
JSONPath
and
assert
the
resulting
value
:end
:start
Apply
the
JSONPath
and
assert
the
resulting
value
:end
:start
Evaluate
the
JSON
path
and
assert
the
resulting
content
exists
:end
:start
Assert
the
content
at
the
given
JSONPath
is
an
array
:end
:start
Static,
factory
methods
for
RequestMatcher
classes
Typically
used
to
provide
input
for
MockRestServiceServer#expect(RequestMatcher)
<p><strong>Eclipse
users:</strong>
consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
Match
to
any
request
:end
:start
Assert
the
request
URI
string
with
the
given
matcher
:end
:start
Assert
the
HttpMethod
of
the
request
:end
:start
Assert
request
header
values
with
the
given
Hamcrest
matcher
:end
:start
Access
to
request
body
matchers
:end
:start
Access
to
request
body
matchers
using
a
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expression
to
inspect
a
specific
subset
of
the
body
The
JSON
path
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Access
to
request
body
matchers
using
a
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expression
to
inspect
a
specific
subset
of
the
body
and
a
Hamcrest
match
for
asserting
the
value
found
at
the
JSON
path
:end
:start
Access
to
request
body
matchers
using
an
XPath
to
inspect
a
specific
subset
of
the
body
The
XPath
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Access
to
response
body
matchers
using
an
XPath
to
inspect
a
specific
subset
of
the
body
The
XPath
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Factory
methods
for
request
content
RequestMatcher's
using
an
XPath
expression
An
instance
of
this
class
is
typically
accessed
via
RequestMatchersxpath()
:end
:start
Class
constructor,
not
for
direct
instantiation
Use
MockRestRequestMatchers#xpath(String,
Object)
or
MockRestRequestMatchers#xpath(String,
Map,
Object)
:end
:start
Apply
the
XPath
and
assert
it
with
the
given
Matcher<Node>
:end
:start
Assert
that
content
exists
at
the
given
XPath
:end
:start
Assert
that
content
does
not
exist
at
the
given
XPath
:end
:start
Apply
the
XPath
and
assert
the
number
of
nodes
found
with
the
given
Matcher<Integer>
:end
:start
Apply
the
XPath
and
assert
the
String
content
found
with
the
given
matcher
:end
:start
Apply
the
XPath
and
assert
the
String
content
found
:end
:start
Apply
the
XPath
and
assert
the
number
found
with
the
given
matcher
:end
:start
Apply
the
XPath
and
assert
the
number
of
nodes
found
:end
:start
Apply
the
XPath
and
assert
the
boolean
value
found
:end
:start
A
ClientHttpRequestFactory
for
requests
executed
via
MockMvc
:end
:start
<strong>Main
entry
point
for
client-side
REST
testing</strong>
Used
for
tests
that
involve
direct
or
indirect
(through
client
code)
use
of
the
RestTemplate
Provides
a
way
to
set
up
fine-grained
expectations
on
the
requests
that
will
be
performed
through
the
RestTemplate
and
a
way
to
define
the
responses
to
send
back
removing
the
need
for
an
actual
running
server
<p>Below
is
an
example:
<pre
class="code">
RestTemplate
restTemplate
=
new
RestTemplate()
MockRestServiceServer
mockServer
=
MockRestServiceServercreateServer(restTemplate);
mockServerexpect(requestTo("/hotels/42"))andExpect(method(HttpMethodGET))
andRespond(withSuccess("{
\"id\"
:
\"42\",
\"name\"
:
\"Holiday
Inn\"",
MediaTypeAPPLICATION_JSON));
Hotel
hotel
=
restTemplategetForObject("/hotels/{id",
Hotelclass,
42);
&#47;&#47;
Use
the
hotel
instance
mockSerververify();
</pre>
<p>To
create
an
instance
of
this
class,
use
#createServer(RestTemplate)
and
provide
the
RestTemplate
to
set
up
for
the
mock
testing
<p>After
that
use
#expect(RequestMatcher)
and
fluent
API
methods
ResponseActions#andExpect(RequestMatcher)
andExpect(RequestMatcher)
and
ResponseActions#andRespond(ResponseCreator)
andRespond(ResponseCreator)
to
set
up
request
expectations
and
responses,
most
likely
relying
on
the
default
RequestMatcher
implementations
provided
in
MockRestRequestMatchers
and
the
ResponseCreator
implementations
provided
in
MockRestResponseCreators
both
of
which
can
be
statically
imported
<p>At
the
end
of
the
test
use
#verify()
to
ensure
all
expected
requests
were
actually
performed
<p>Note
that
because
of
the
fluent
API
offered
by
this
class
(and
related
classes),
you
can
typically
use
the
Code
Completion
features
(ie
ctrl-space)
in
your
IDE
to
set
up
the
mocks
<p><strong>Credits:</strong>
The
client-side
REST
testing
support
was
inspired
by
and
initially
based
on
similar
code
in
the
Spring
WS
project
for
client-side
tests
involving
the
WebServiceTemplate
:end
:start
Create
a
MockRestServiceServer
and
set
up
the
given
RestTemplate
with
a
mock
ClientHttpRequestFactory
:end
:start
Create
a
MockRestServiceServer
and
set
up
the
given
RestGatewaySupport
with
a
mock
ClientHttpRequestFactory
:end
:start
Set
up
a
new
HTTP
request
expectation
The
returned
ResponseActions
is
used
to
set
up
further
expectations
and
to
define
the
response
<p>This
method
may
be
invoked
multiple
times
before
starting
the
test,
ie
before
using
the
RestTemplate,
to
set
up
expectations
for
multiple
requests
:end
:start
Verify
that
all
expected
requests
set
up
via
#expect(RequestMatcher)
were
indeed
performed
:end
:start
A
contract
for
matching
requests
to
expectations
:end
:start
Match
the
given
request
against
some
expectations
:end
:start
A
ResponseCreator
with
builder-style
methods
for
adding
response
details
:end
:start
Protected
constructor
Use
static
factory
methods
in
MockRestResponseCreators
:end
:start
Set
the
body
as
a
UTF-8
String
:end
:start
Set
the
body
as
a
byte
array
:end
:start
Set
the
body
as
a
Resource
:end
:start
Set
the
Content-Type
header
:end
:start
Set
the
Location
header
:end
:start
Copy
all
given
headers
:end
:start
Static
factory
methods
for
obtaining
a
ResponseCreator
instance
<p><strong>Eclipse
users:</strong>
consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
ResponseCreator
for
a
200
response
(OK)
:end
:start
ResponseCreator
for
a
200
response
(OK)
with
String
body
:end
:start
ResponseCreator
for
a
200
response
(OK)
with
byte[]
body
:end
:start
ResponseCreator
for
a
200
response
(OK)
content
with
Resource-based
body
:end
:start
ResponseCreator
for
a
201
response
(CREATED)
with
a
'Location'
header
:end
:start
ResponseCreator
for
a
204
response
(NO_CONTENT)
:end
:start
ResponseCreator
for
a
400
response
(BAD_REQUEST)
:end
:start
ResponseCreator
for
a
401
response
(UNAUTHORIZED)
:end
:start
ResponseCreator
for
a
500
response
(SERVER_ERROR)
:end
:start
ResponseCreator
with
a
specific
HTTP
status
:end
:start
A
contract
for
setting
up
request
expectations
and
defining
a
response
Implementations
can
be
obtained
through
MockRestServiceServer#expect(RequestMatcher)
:end
:start
Add
a
request
expectation
:end
:start
Define
the
response
:end
:start
A
contract
for
creating
a
ClientHttpResponse
Implementations
can
be
obtained
via
MockRestResponseCreators
:end
:start
Create
a
response
for
the
given
request
:end
:start
A
collection
of
assertions
intended
to
simplify
testing
scenarios
dealing
with
Spring
Web
MVC
orgspringframeworkwebservletModelAndView
ModelAndView
objects
<p>
Intended
for
use
with
JUnit
4
and
TestNG
All
assert*()
methods
throw
AssertionErrors
:end
:start
Checks
whether
the
model
value
under
the
given
modelName
exists
and
checks
it
type,
based
on
the
expectedType
If
the
model
entry
exists
and
the
type
matches,
the
model
value
is
returned
:end
:start
Compare
each
individual
entry
in
a
list,
without
first
sorting
the
lists
:end
:start
Assert
whether
or
not
a
model
attribute
is
available
:end
:start
Compare
a
given
expectedValue
to
the
value
from
the
model
bound
under
the
given
modelName
:end
:start
Inspect
the
expectedModel
to
see
if
all
elements
in
the
model
appear
and
are
equal
:end
:start
Compare
each
individual
entry
in
a
list
after
having
sorted
both
lists
(optionally
using
a
comparator)
:end
:start
Check
to
see
if
the
view
name
in
the
ModelAndView
matches
the
given
expectedName
:end
:start
<strong>Main
entry
point
for
server-side
Spring
MVC
test
support</strong>
<p>Below
is
an
example:
<pre
class="code">
static
imports:
MockMvcBuilders*,
MockMvcRequestBuilders*,
MockMvcResultMatchers*
WebApplicationContext
wac
=
;
MockMvc
mockMvc
=
webAppContextSetup(wac)build();
mockMvcperform(get("/form"))
andExpect(status()isOk())
andExpect(content()mimeType("text/html"))
andExpect(forwardedUrl("/WEB-INF/layouts/mainjsp"));
</pre>
:end
:start
Perform
a
request
and
return
a
type
that
allows
chaining
further
actions,
such
as
asserting
expectations,
on
the
result
:end
:start
Builds
a
MockMvc
<p>See
static,
factory
methods
in
orgspringframeworktestwebserversetupMockMvcBuilders
:end
:start
Build
a
MockMvc
instance
:end
:start
Base
class
for
MockMvc
builder
implementations,
providing
the
capability
to
create
a
MockMvc
instance
<p>{@link
orgspringframeworktestwebservletsetupDefaultMockMvcBuilder,
which
derives
from
this
class,
provides
a
concrete
build
method,
and
delegates
to
abstract
methods
to
obtain
a
WebApplicationContext
:end
:start
Provides
access
to
the
result
of
an
executed
request
:end
:start
Return
the
performed
request
:end
:start
Return
the
resulting
response
:end
:start
Return
the
executed
handler
:end
:start
Return
interceptors
around
the
handler
:end
:start
Return
the
ModelAndView
prepared
by
the
handler
:end
:start
Return
any
exception
raised
by
a
handler
and
successfully
resolved
through
a
HandlerExceptionResolver
:end
:start
Return
the
"output"
flash
attributes
saved
during
request
processing
:end
:start
Get
the
result
of
async
execution
This
method
will
wait
for
the
async
result
to
be
set
for
up
to
the
amount
of
time
configured
on
the
async
request,
ie
orgspringframeworkmockwebMockAsyncContext#getTimeout()
:end
:start
Get
the
result
of
async
execution
This
method
will
wait
for
the
async
result
to
be
set
for
up
to
the
specified
amount
of
time
:end
:start
Default
builder
for
MockHttpServletRequest
required
as
input
to
perform
request
in
MockMvc
<p>Application
tests
will
typically
access
this
builder
through
the
static
factory
methods
in
MockMvcBuilders
:end
:start
Add
a
request
parameter
to
the
MockHttpServletRequest
If
called
more
than
once,
the
new
values
are
added
:end
:start
Add
a
header
to
the
request
Values
are
always
added
:end
:start
Add
all
headers
to
the
request
Values
are
always
added
:end
:start
Set
the
'Content-Type'
header
of
the
request
:end
:start
Set
the
'Accept'
header
to
the
given
media
type(s)
:end
:start
Set
the
'Accept'
header
to
the
given
media
type(s)
:end
:start
Set
the
request
body
:end
:start
Set
the
request
body
as
a
UTF-8
String
:end
:start
Add
the
given
cookies
to
the
request
Cookies
are
always
added
:end
:start
Set
the
locale
of
the
request
:end
:start
Set
the
character
encoding
of
the
request
:end
:start
Set
a
request
attribute
:end
:start
Set
a
session
attribute
:end
:start
Set
session
attributes
:end
:start
Set
an
"input"
flash
attribute
:end
:start
Set
flash
attributes
:end
:start
Set
the
HTTP
session
to
use,
possibly
re-used
across
requests
<p>Individual
attributes
provided
via
#sessionAttr(String,
Object)
override
the
content
of
the
session
provided
here
:end
:start
Set
the
principal
of
the
request
:end
:start
Specify
the
portion
of
the
requestURI
that
represents
the
context
path
The
context
path,
if
specified,
must
match
to
the
start
of
the
request
URI
<p>In
most
cases,
tests
can
be
written
by
omitting
the
context
path
from
the
requestURI
This
is
because
most
applications
don't
actually
depend
on
the
name
under
which
they're
deployed
If
specified
here,
the
context
path
must
start
with
a
"/"
and
must
not
end
with
a
"/"
:end
:start
Specify
the
portion
of
the
requestURI
that
represents
the
path
to
which
the
Servlet
is
mapped
This
is
typically
a
portion
of
the
requestURI
after
the
context
path
<p>In
most
cases,
tests
can
be
written
by
omitting
the
servlet
path
from
the
requestURI
This
is
because
most
applications
don't
actually
depend
on
the
prefix
to
which
a
servlet
is
mapped
For
example
if
a
Servlet
is
mapped
to
"/main/*",
tests
can
be
written
with
the
requestURI
"/accounts/1"
as
opposed
to
"/main/accounts/1"
If
specified
here,
the
servletPath
must
start
with
a
"/"
and
must
not
end
with
a
"/"
:end
:start
Specify
the
portion
of
the
requestURI
that
represents
the
pathInfo
<p>If
left
unspecified
(recommended),
the
pathInfo
will
be
automatically
derived
by
removing
the
contextPath
and
the
servletPath
from
the
requestURI
and
using
any
remaining
part
If
specified
here,
the
pathInfo
must
start
with
a
"/"
<p>If
specified,
the
pathInfo
will
be
used
as
is
:end
:start
Set
the
secure
property
of
the
ServletRequest
indicating
use
of
a
secure
channel,
such
as
HTTPS
:end
:start
An
extension
point
for
further
initialization
of
MockHttpServletRequest
in
ways
not
built
directly
into
the
MockHttpServletRequestBuilder
Implementation
of
this
interface
can
have
builder-style
methods
themselves
and
be
made
accessible
through
static
factory
methods
:end
:start
:end
:start
Merges
the
properties
of
the
"parent"
RequestBuilder
accepting
values
only
if
not
already
set
in
"this"
instance
:end
:start
Build
a
MockHttpServletRequest
:end
:start
Create
a
new
MockHttpServletRequest
based
on
the
given
ServletContext
Can
be
overridden
in
subclasses
:end
:start
Default
builder
for
MockMultipartHttpServletRequest
:end
:start
Create
a
new
MockMultipartFile
with
the
given
content
:end
:start
Add
the
given
MockMultipartFile
:end
:start
Static
factory
methods
for
RequestBuilders
<p><strong>Eclipse
users:</strong>
Consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
GET
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
GET
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
POST
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
POST
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
PUT
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
PUT
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
PATCH
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
PATCH
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
DELETE
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
DELETE
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
an
OPTIONS
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
an
OPTIONS
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
request
with
the
given
HTTP
method
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
request
with
the
given
HTTP
method
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
multipart
request
:end
:start
Create
a
MockHttpServletRequestBuilder
for
a
multipart
request
:end
:start
Create
a
RequestBuilder
for
an
async
dispatch
from
the
MvcResult
of
the
request
that
started
async
processing
<p>Usage
involves
performing
one
request
first
that
starts
async
processing:
<pre
class="code">
MvcResult
mvcResult
=
thismockMvcperform(get("/1"))
andExpect(request()asyncStarted())
andReturn();
</pre>
<p>And
then
performing
the
async
dispatch
re-using
the
MvcResult:
<pre
class="code">
thismockMvcperform(asyncDispatch(mvcResult))
andExpect(status()isOk())
andExpect(content()contentType(MediaTypeAPPLICATION_JSON))
andExpect(content()string("{\"name\":\"Joe\",\"someDouble\":00,\"someBoolean\":false"));
</pre>
:end
:start
Extension
point
for
applications
or
3rd
party
libraries
that
wish
to
further
initialize
a
MockHttpServletRequest
instance
after
it
has
been
built
by
MockHttpServletRequestBuilder
or
its
subclass
MockMultipartHttpServletRequestBuilder
<p>Implementations
of
this
interface
can
be
provided
to
MockHttpServletRequestBuilder#with(RequestPostProcessor)
at
the
time
when
a
request
is
about
to
be
constructed
:end
:start
Post-process
the
given
MockHttpServletRequest
after
its
creation
and
initialization
through
a
MockHttpServletRequestBuilder
:end
:start
Builds
a
MockHttpServletRequest
<p>See
static,
factory
methods
in
orgspringframeworktestwebserverrequestMockMvcRequestBuilders
:end
:start
Build
the
request
:end
:start
Factory
for
response
content
assertions
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#content()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#content()
:end
:start
Assert
the
ServletResponse
content
type
The
given
content
type
must
fully
match
including
type,
sub-type,
and
parameters
For
checking
only
the
type
and
sub-type
see
#contentTypeCompatibleWith(String)
:end
:start
Assert
the
ServletResponse
content
type
after
parsing
it
as
a
MediaType
The
given
content
type
must
fully
match
including
type,
sub-type,
and
parameters
For
checking
only
the
type
and
sub-type
see
#contentTypeCompatibleWith(MediaType)
:end
:start
Assert
the
ServletResponse
content
type
is
compatible
with
the
given
content
type
as
defined
by
MediaType#isCompatibleWith(MediaType)
:end
:start
Assert
the
ServletResponse
content
type
is
compatible
with
the
given
content
type
as
defined
by
MediaType#isCompatibleWith(MediaType)
:end
:start
Assert
the
character
encoding
in
the
ServletResponse
:end
:start
Assert
the
response
body
content
with
a
Hamcrest
Matcher
<pre
class="code">
mockMvcperform(get("/path"))
andExpect(content(containsString("text")));
</pre>
:end
:start
Assert
the
response
body
content
as
a
byte
array
:end
:start
Parse
the
response
content
and
the
given
string
as
XML
and
assert
the
two
are
"similar"
-
ie
they
contain
the
same
elements
and
attributes
regardless
of
order
<p>Use
of
this
matcher
requires
the
<a
href="http://xmlunitsourceforgenet/">XMLUnit<a/>
library
:end
:start
Parse
the
response
content
as
Node
and
apply
the
given
Hamcrest
Matcher
:end
:start
Parse
the
response
content
as
DOMSource
and
apply
the
given
Hamcrest
Matcher
:end
:start
Factory
for
response
cookie
assertions
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#cookie()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#cookie()
:end
:start
Assert
a
cookie
value
with
the
given
Hamcrest
Matcher
:end
:start
Assert
a
cookie
exists
The
existence
check
is
irrespective
of
whether
max
age
is
0
(ie
expired)
:end
:start
Assert
a
cookie
does
not
exist
Note
that
the
existence
check
is
irrespective
of
whether
max
age
is
0,
ie
expired
:end
:start
Assert
a
cookie's
maxAge
with
a
Hamcrest
Matcher
:end
:start
Assert
a
cookie
path
with
a
Hamcrest
Matcher
:end
:start
Assert
a
cookie's
domain
with
a
Hamcrest
Matcher
:end
:start
Assert
a
cookie's
comment
with
a
Hamcrest
Matcher
:end
:start
Assert
a
cookie's
version
with
a
Hamcrest
Matcher
:end
:start
Assert
whether
the
cookie
must
be
sent
over
a
secure
protocol
or
not
:end
:start
Factory
for
"output"
flash
attribute
assertions
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#flash()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#flash()
:end
:start
Assert
a
flash
attribute's
value
with
the
given
Hamcrest
Matcher
:end
:start
Assert
the
existence
of
the
given
flash
attributes
:end
:start
Assert
the
number
of
flash
attributes
:end
:start
Factory
for
assertions
on
the
selected
handler
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#handler()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#handler()
:end
:start
Assert
the
type
of
the
handler
that
processed
the
request
:end
:start
Assert
the
name
of
the
controller
method
that
processed
the
request
with
the
given
Hamcrest
Matcher
<p>Use
of
this
method
implies
annotated
controllers
are
processed
with
RequestMappingHandlerMapping
and
RequestMappingHandlerAdapter
:end
:start
Assert
the
controller
method
that
processed
the
request
<p>Use
of
this
method
implies
annotated
controllers
are
processed
with
RequestMappingHandlerMapping
and
RequestMappingHandlerAdapter
:end
:start
Factory
for
response
header
assertions
An
instance
of
this
class
is
usually
accessed
via
MockMvcResultMatchers#header()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#header()
:end
:start
Assert
the
primary
value
of
the
named
response
header
with
the
given
Hamcrest
Matcher
:end
:start
Assert
that
the
named
response
header
does
not
exist
:end
:start
Assert
the
primary
value
of
the
named
response
header
as
a
long
<p>The
ResultMatcher
returned
by
this
method
throws
an
AssertionError
if
the
response
does
not
contain
the
specified
header,
or
if
the
supplied
value
does
not
match
the
primary
value
:end
:start
Factory
for
assertions
on
the
response
content
using
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expressions
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#jsonPath
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#jsonPath(String,
Object)
or
MockMvcResultMatchers#jsonPath(String,
Matcher)
:end
:start
Evaluate
the
JSONPath
and
assert
the
value
of
the
content
found
with
the
given
Hamcrest
Matcher
:end
:start
Evaluate
the
JSONPath
and
assert
the
value
of
the
content
found
:end
:start
Evaluate
the
JSONPath
and
assert
that
content
exists
:end
:start
Evaluate
the
JSON
path
and
assert
not
content
was
found
:end
:start
Evluate
the
JSON
path
and
assert
the
content
found
is
an
array
:end
:start
Static,
factory
methods
for
ResultHandler-based
result
actions
<p><strong>Eclipse
users:</strong>
consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
Print
MvcResult
details
to
the
"standard"
output
stream
:end
:start
Static,
factory
methods
for
ResultMatcher-based
result
actions
<p><strong>Eclipse
users:</strong>
consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
Access
to
request-related
assertions
:end
:start
Access
to
assertions
for
the
handler
that
handled
the
request
:end
:start
Access
to
model-related
assertions
:end
:start
Access
to
assertions
on
the
selected
view
:end
:start
Access
to
flash
attribute
assertions
:end
:start
Asserts
the
request
was
forwarded
to
the
given
URL
This
methods
accepts
only
exact
matches
:end
:start
Asserts
the
request
was
forwarded
to
the
given
URL
This
methods
accepts
orgspringframeworkutilAntPathMatcher
expressions
:end
:start
Asserts
the
request
was
redirected
to
the
given
URL
This
methods
accepts
only
exact
matches
:end
:start
Asserts
the
request
was
redirected
to
the
given
URL
This
methods
accepts
orgspringframeworkutilAntPathMatcher
expressions
:end
:start
Access
to
response
status
assertions
:end
:start
Access
to
response
header
assertions
:end
:start
Access
to
response
body
assertions
:end
:start
Access
to
response
body
assertions
using
a
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expression
to
inspect
a
specific
subset
of
the
body
The
JSON
path
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Access
to
response
body
assertions
using
a
<a
href="http://goessnernet/articles/JsonPath/">JSONPath</a>
expression
to
inspect
a
specific
subset
of
the
body
and
a
Hamcrest
match
for
asserting
the
value
found
at
the
JSON
path
:end
:start
Access
to
response
body
assertions
using
an
XPath
to
inspect
a
specific
subset
of
the
body
The
XPath
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Access
to
response
body
assertions
using
an
XPath
to
inspect
a
specific
subset
of
the
body
The
XPath
expression
can
be
a
parameterized
string
using
formatting
specifiers
as
defined
in
String#format(String,
Object)
:end
:start
Access
to
response
cookie
assertions
:end
:start
Factory
for
assertions
on
the
model
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#model()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#model()
:end
:start
Assert
a
model
attribute
value
with
the
given
Hamcrest
Matcher
:end
:start
Assert
a
model
attribute
value
:end
:start
Assert
the
given
model
attributes
exist
:end
:start
Assert
the
given
model
attributes
do
not
exist
:end
:start
Assert
the
given
model
attribute(s)
have
errors
:end
:start
Assert
the
given
model
attribute(s)
have
errors
:end
:start
Assert
the
given
model
attribute(s)
do
not
have
errors
:end
:start
Assert
the
given
model
attribute
field(s)
have
errors
:end
:start
Assert
the
total
number
of
errors
in
the
model
:end
:start
Assert
the
model
has
errors
:end
:start
Assert
the
model
has
no
errors
:end
:start
Assert
the
number
of
model
attributes
:end
:start
Result
handler
that
prints
MvcResult
details
to
the
"standard"
output
stream
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultHandlers#print()
:end
:start
Protected
constructor
:end
:start
Print
MvcResult
details
to
the
"standard"
output
stream
:end
:start
Print
the
request
:end
:start
Print
the
handler
:end
:start
Print
exceptions
resolved
through
a
HandlerExceptionResolver
:end
:start
Print
the
ModelAndView
:end
:start
Print
"output"
flash
attributes
:end
:start
Print
the
response
:end
:start
A
contract
for
how
to
actually
write
result
information
:end
:start
A
contract
for
how
to
actually
write
result
information
:end
:start
Factory
for
assertions
on
the
request
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#request()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#request()
:end
:start
Assert
a
request
attribute
value
with
the
given
Hamcrest
Matcher
Whether
asynchronous
processing
started,
usually
as
a
result
of
a
controller
method
returning
Callable
or
DeferredResult
The
test
will
await
the
completion
of
a
Callable
so
that
#asyncResult(Matcher)
can
be
used
to
assert
the
resulting
value
Neither
a
Callable
nor
a
DeferredResult
will
complete
processing
all
the
way
since
a
MockHttpServletRequest
does
not
perform
asynchronous
dispatches
:end
:start
Assert
that
asynchronous
processing
was
not
start
:end
:start
Assert
the
result
from
asynchronous
processing
with
the
given
matcher
:end
:start
Assert
a
request
attribute
value
with
the
given
Hamcrest
Matcher
:end
:start
Assert
a
session
attribute
value
with
the
given
Hamcrest
Matcher
:end
:start
Factory
for
assertions
on
the
response
status
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#status()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#status()
:end
:start
Assert
the
response
status
code
with
the
given
Hamcrest
Matcher
:end
:start
Assert
the
response
status
code
is
in
the
1xx
range
:end
:start
Assert
the
response
status
code
is
in
the
2xx
range
:end
:start
Assert
the
response
status
code
is
in
the
3xx
range
:end
:start
Assert
the
response
status
code
is
in
the
4xx
range
:end
:start
Assert
the
response
status
code
is
in
the
5xx
range
:end
:start
Assert
the
Servlet
response
error
message
with
the
given
Hamcrest
Matcher
:end
:start
Assert
the
response
status
code
is
HttpStatusCONTINUE
(100)
:end
:start
Assert
the
response
status
code
is
HttpStatusSWITCHING_PROTOCOLS
(101)
:end
:start
Assert
the
response
status
code
is
HttpStatusPROCESSING
(102)
:end
:start
Assert
the
response
status
code
is
HttpStatusCHECKPOINT
(103)
:end
:start
Assert
the
response
status
code
is
HttpStatusOK
(200)
:end
:start
Assert
the
response
status
code
is
HttpStatusCREATED
(201)
:end
:start
Assert
the
response
status
code
is
HttpStatusACCEPTED
(202)
:end
:start
Assert
the
response
status
code
is
HttpStatusNON_AUTHORITATIVE_INFORMATION
(203)
:end
:start
Assert
the
response
status
code
is
HttpStatusNO_CONTENT
(204)
:end
:start
Assert
the
response
status
code
is
HttpStatusRESET_CONTENT
(205)
:end
:start
Assert
the
response
status
code
is
HttpStatusPARTIAL_CONTENT
(206)
:end
:start
Assert
the
response
status
code
is
HttpStatusMULTI_STATUS
(207)
:end
:start
Assert
the
response
status
code
is
HttpStatusALREADY_REPORTED
(208)
:end
:start
Assert
the
response
status
code
is
HttpStatusIM_USED
(226)
:end
:start
Assert
the
response
status
code
is
HttpStatusMULTIPLE_CHOICES
(300)
:end
:start
Assert
the
response
status
code
is
HttpStatusMOVED_PERMANENTLY
(301)
:end
:start
Assert
the
response
status
code
is
HttpStatusFOUND
(302)
:end
:start
Assert
the
response
status
code
is
HttpStatusMOVED_TEMPORARILY
(302)
:end
:start
Assert
the
response
status
code
is
HttpStatusSEE_OTHER
(303)
:end
:start
Assert
the
response
status
code
is
HttpStatusNOT_MODIFIED
(304)
:end
:start
Assert
the
response
status
code
is
HttpStatusUSE_PROXY
(305)
:end
:start
Assert
the
response
status
code
is
HttpStatusTEMPORARY_REDIRECT
(307)
:end
:start
Assert
the
response
status
code
is
HttpStatusRESUME_INCOMPLETE
(308)
:end
:start
Assert
the
response
status
code
is
HttpStatusBAD_REQUEST
(400)
:end
:start
Assert
the
response
status
code
is
HttpStatusUNAUTHORIZED
(401)
:end
:start
Assert
the
response
status
code
is
HttpStatusPAYMENT_REQUIRED
(402)
:end
:start
Assert
the
response
status
code
is
HttpStatusFORBIDDEN
(403)
:end
:start
Assert
the
response
status
code
is
HttpStatusNOT_FOUND
(404)
:end
:start
Assert
the
response
status
code
is
HttpStatusMETHOD_NOT_ALLOWED
(405)
:end
:start
Assert
the
response
status
code
is
HttpStatusNOT_ACCEPTABLE
(406)
:end
:start
Assert
the
response
status
code
is
HttpStatusPROXY_AUTHENTICATION_REQUIRED
(407)
:end
:start
Assert
the
response
status
code
is
HttpStatusREQUEST_TIMEOUT
(408)
:end
:start
Assert
the
response
status
code
is
HttpStatusCONFLICT
(409)
:end
:start
Assert
the
response
status
code
is
HttpStatusGONE
(410)
:end
:start
Assert
the
response
status
code
is
HttpStatusLENGTH_REQUIRED
(411)
:end
:start
Assert
the
response
status
code
is
HttpStatusPRECONDITION_FAILED
(412)
:end
:start
Assert
the
response
status
code
is
HttpStatusREQUEST_ENTITY_TOO_LARGE
(413)
:end
:start
Assert
the
response
status
code
is
HttpStatusREQUEST_URI_TOO_LONG
(414)
:end
:start
Assert
the
response
status
code
is
HttpStatusUNSUPPORTED_MEDIA_TYPE
(415)
:end
:start
Assert
the
response
status
code
is
HttpStatusREQUESTED_RANGE_NOT_SATISFIABLE
(416)
:end
:start
Assert
the
response
status
code
is
HttpStatusEXPECTATION_FAILED
(417)
:end
:start
Assert
the
response
status
code
is
HttpStatusI_AM_A_TEAPOT
(418)
:end
:start
Assert
the
response
status
code
is
HttpStatusINSUFFICIENT_SPACE_ON_RESOURCE
(419)
:end
:start
Assert
the
response
status
code
is
HttpStatusMETHOD_FAILURE
(420)
:end
:start
Assert
the
response
status
code
is
HttpStatusDESTINATION_LOCKED
(421)
:end
:start
Assert
the
response
status
code
is
HttpStatusUNPROCESSABLE_ENTITY
(422)
:end
:start
Assert
the
response
status
code
is
HttpStatusLOCKED
(423)
:end
:start
Assert
the
response
status
code
is
HttpStatusFAILED_DEPENDENCY
(424)
:end
:start
Assert
the
response
status
code
is
HttpStatusUPGRADE_REQUIRED
(426)
:end
:start
Assert
the
response
status
code
is
HttpStatusPRECONDITION_REQUIRED
(428)
:end
:start
Assert
the
response
status
code
is
HttpStatusTOO_MANY_REQUESTS
(429)
:end
:start
Assert
the
response
status
code
is
HttpStatusREQUEST_HEADER_FIELDS_TOO_LARGE
(431)
:end
:start
Assert
the
response
status
code
is
HttpStatusINTERNAL_SERVER_ERROR
(500)
:end
:start
Assert
the
response
status
code
is
HttpStatusNOT_IMPLEMENTED
(501)
:end
:start
Assert
the
response
status
code
is
HttpStatusBAD_GATEWAY
(502)
:end
:start
Assert
the
response
status
code
is
HttpStatusSERVICE_UNAVAILABLE
(503)
:end
:start
Assert
the
response
status
code
is
HttpStatusGATEWAY_TIMEOUT
(504)
:end
:start
Assert
the
response
status
code
is
HttpStatusHTTP_VERSION_NOT_SUPPORTED
(505)
:end
:start
Assert
the
response
status
code
is
HttpStatusVARIANT_ALSO_NEGOTIATES
(506)
:end
:start
Assert
the
response
status
code
is
HttpStatusINSUFFICIENT_STORAGE
(507)
:end
:start
Assert
the
response
status
code
is
HttpStatusLOOP_DETECTED
(508)
:end
:start
Assert
the
response
status
code
is
HttpStatusBANDWIDTH_LIMIT_EXCEEDED
(509)
:end
:start
Assert
the
response
status
code
is
HttpStatusNOT_EXTENDED
(510)
:end
:start
Assert
the
response
status
code
is
HttpStatusNETWORK_AUTHENTICATION_REQUIRED
(511)
:end
:start
Factory
for
assertions
on
the
selected
view
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#view()
:end
:start
Protected
constructor
Use
MockMvcResultMatchers#view()
:end
:start
Assert
the
selected
view
name
with
the
given
Hamcrest
Matcher
:end
:start
Factory
for
response
content
ResultMatcher's
using
an
XPath
expression
An
instance
of
this
class
is
typically
accessed
via
MockMvcResultMatchers#xpath
:end
:start
Protected
constructor,
not
for
direct
instantiation
Use
MockMvcResultMatchers#xpath(String,
Object)
or
MockMvcResultMatchers#xpath(String,
Map,
Object)
:end
:start
Evaluate
the
XPath
and
assert
the
Node
content
found
with
the
given
Hamcrest
Matcher
:end
:start
Evaluate
the
XPath
and
assert
that
content
exists
:end
:start
Evaluate
the
XPath
and
assert
that
content
doesn't
exist
:end
:start
Evaluate
the
XPath
and
assert
the
number
of
nodes
found
with
the
given
Hamcrest
Matcher
:end
:start
Apply
the
XPath
and
assert
the
String
value
found
with
the
given
Hamcrest
Matcher
:end
:start
Evaluate
the
XPath
and
assert
the
Double
value
found
with
the
given
Hamcrest
Matcher
:end
:start
Evaluate
the
XPath
and
assert
the
Boolean
value
found
:end
:start
Allows
applying
actions,
such
as
expectations,
on
the
result
of
an
executed
request
<p>See
static
factory
methods
in
orgspringframeworktestwebserverresultMockMvcResultMatchers
orgspringframeworktestwebserverresultMockMvcResultHandlers
:end
:start
Provide
an
expectation
For
example:
<pre
class="code">
static
imports:
MockMvcRequestBuilders*,
MockMvcResultMatchers*
mockMvcperform(get("/person/1"))
andExpect(statusisOk())
andExpect(content()contentType(MediaTypeAPPLICATION_JSON))
andExpect(jsonPath("$personname")value("Jason"));
mockMvcperform(post("/form"))
andExpect(statusisOk())
andExpect(redirectedUrl("/person/1"))
andExpect(model()size(1))
andExpect(model()attributeExists("person"))
andExpect(flash()attributeCount(1))
andExpect(flash()attribute("message",
"success!"));
</pre>
:end
:start
Provide
a
general
action
For
example:
<pre
class="code">
static
imports:
MockMvcRequestBuilders*,
MockMvcResultMatchers*
mockMvcperform(get("/form"))andDo(print());
</pre>
:end
:start
Return
the
result
of
the
executed
request
for
direct
access
to
the
results
:end
:start
Executes
a
generic
action
(eg
printing
debug
information)
on
the
result
of
an
executed
request
<p>See
static
factory
methods
in
orgspringframeworktestwebserverresultMockMvcResultHandlers
<p>Example:
<pre
class="code">
static
imports:
MockMvcRequestBuilders*,
MockMvcResultHandlers*
mockMvcperform(get("/form"))andDo(print());
</pre>
:end
:start
Apply
the
action
on
the
given
result
:end
:start
Matches
the
result
of
an
executed
request
against
some
expectation
<p>See
static
factory
methods
in
orgspringframeworktestwebserverresultMockMvcResultMatchers
<p>Example:
<pre
class="code">
static
imports:
MockMvcRequestBuilders*,
MockMvcResultMatchers*
mockMvcperform(get("/form"))
andExpect(statusisOk())
andExpect(content()mimeType(MediaTypeAPPLICATION_JSON));
</pre>
:end
:start
Assert
the
result
of
an
executed
request
:end
:start
An
abstract
implementation
of
orgspringframeworktestwebservletMockMvcBuilder
with
common
methods
for
configuring
filters,
default
request
properties,
global
expectations
and
global
result
actions
<p>
Sub-classes
can
use
different
strategies
to
prepare
a
WebApplicationContext
to
pass
to
the
DispatcherServlet
:end
:start
Add
filters
mapped
to
any
request
(ie
"/*")
For
example:
<pre
class="code">
mockMvcBuilderaddFilters(springSecurityFilterChain);
</pre>
<p>is
the
equivalent
of
the
following
webxml
configuration:
<pre
class="code">
&lt;filter-mapping&gt;
&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</pre>
<p>Filters
will
be
invoked
in
the
order
in
which
they
are
provided
:end
:start
Add
a
filter
mapped
to
a
specific
set
of
patterns
For
example:
<pre
class="code">
mockMvcBuilderaddFilters(myResourceFilter,
"/resources/*");
</pre>
<p>is
the
equivalent
of:
<pre
class="code">
&lt;filter-mapping&gt;
&lt;filter-name&gt;myResourceFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;/resources/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</pre>
<p>Filters
will
be
invoked
in
the
order
in
which
they
are
provided
:end
:start
Define
default
request
properties
that
should
be
merged
into
all
performed
requests
In
effect
this
provides
a
mechanism
for
defining
common
initialization
for
all
requests
such
as
the
content
type,
request
parameters,
session
attributes,
and
any
other
request
property
<p>Properties
specified
at
the
time
of
performing
a
request
override
the
default
properties
defined
here
:end
:start
Define
a
global
expectation
that
should
<em>always</em>
be
applied
to
every
response
For
example,
status
code
200
(OK),
content
type
"application/json",
etc
:end
:start
Define
a
global
action
that
should
<em>always</em>
be
applied
to
every
response
For
example,
writing
detailed
information
about
the
performed
request
and
resulting
response
to
Systemout
:end
:start
Should
the
orgspringframeworkwebservletDispatcherServlet
dispatch
OPTIONS
request
to
controllers
:end
:start
Build
a
orgspringframeworktestwebservletMockMvc
instance
:end
:start
A
method
to
obtain
the
WebApplicationContext
to
be
passed
to
the
DispatcherServlet
Invoked
from
#build()
before
the
orgspringframeworktestwebservletMockMvc
instance
is
created
:end
:start
An
concrete
implementation
of
AbstractMockMvcBuilder
that
simply
provides
the
WebApplicationContext
given
to
it
as
a
constructor
argument
:end
:start
Protected
constructor
Not
intended
for
direct
instantiation
:end
:start
The
main
class
to
import
to
access
all
available
MockMvcBuilders
<p><strong>Eclipse
users:</strong>
consider
adding
this
class
as
a
Java
editor
favorite
To
navigate,
open
the
Preferences
and
type
"favorites"
:end
:start
Build
a
MockMvc
using
the
given,
fully
initialized,
ie
refreshed,
WebApplicationContext
The
DispatcherServlet
will
use
the
context
to
discover
Spring
MVC
infrastructure
and
application
controllers
in
it
The
context
must
have
been
configured
with
a
ServletContext
:end
:start
Build
a
MockMvc
by
registering
one
or
more
@Controller's
instances
and
configuring
Spring
MVC
infrastructure
programmatically
This
allows
full
control
over
the
instantiation
and
initialization
of
controllers,
and
their
dependencies,
similar
to
plain
unit
tests
while
also
making
it
possible
to
test
one
controller
at
a
time
<p>When
this
option
is
used,
the
minimum
infrastructure
required
by
the
DispatcherServlet
to
serve
requests
with
annotated
controllers
is
automatically
created,
and
can
be
customized,
resulting
in
configuration
that
is
equivalent
to
what
the
MVC
Java
configuration
provides
except
using
builder
style
methods
<p>If
the
Spring
MVC
configuration
of
an
application
is
relatively
straight-forward,
for
example
when
using
the
MVC
namespace
or
the
MVC
Java
config,
then
using
this
builder
might
be
a
good
option
for
testing
a
majority
of
controllers
A
much
smaller
number
of
tests
can
be
used
to
focus
on
testing
and
verifying
the
actual
Spring
MVC
configuration
:end
:start
A
MockMvcBuilder
that
accepts
@Controller
registrations
thus
allowing
full
control
over
the
instantiation
and
the
initialization
of
controllers
and
their
dependencies
similar
to
plain
unit
tests,
and
also
making
it
possible
to
test
one
controller
at
a
time
<p>This
builder
creates
the
minimum
infrastructure
required
by
the
DispatcherServlet
to
serve
requests
with
annotated
controllers
and
also
provides
methods
to
customize
it
The
resulting
configuration
and
customizations
possible
are
equivalent
to
using
the
MVC
Java
config
except
using
builder
style
methods
<p>To
configure
view
resolution,
either
select
a
"fixed"
view
to
use
for
every
performed
request
(see
#setSingleView(View))
or
provide
a
list
of
ViewResolver's,
see
#setViewResolvers(ViewResolver)
:end
:start
Protected
constructor
Not
intended
for
direct
instantiation
:end
:start
Set
the
message
converters
to
use
in
argument
resolvers
and
in
return
value
handlers,
which
support
reading
and/or
writing
to
the
body
of
the
request
and
response
If
no
message
converters
are
added
to
the
list,
a
default
list
of
converters
is
added
instead
:end
:start
Provide
a
custom
Validator
instead
of
the
one
created
by
default
The
default
implementation
used,
assuming
JSR-303
is
on
the
classpath,
is
orgspringframeworkvalidationbeanvalidationLocalValidatorFactoryBean
:end
:start
Provide
a
conversion
service
with
custom
formatters
and
converters
If
not
set,
a
DefaultFormattingConversionService
is
used
by
default
:end
:start
Add
interceptors
mapped
to
all
incoming
requests
:end
:start
Add
interceptors
mapped
to
a
set
of
path
patterns
:end
:start
Set
a
ContentNegotiationManager
:end
:start
Specify
the
timeout
value
for
async
execution
In
Spring
MVC
Test,
this
value
is
used
to
determine
how
to
long
to
wait
for
async
execution
to
complete
so
that
a
test
can
verify
the
results
synchronously
:end
:start
Provide
custom
resolvers
for
controller
method
arguments
:end
:start
Provide
custom
handlers
for
controller
method
return
values
:end
:start
Set
the
HandlerExceptionResolver
types
to
use
as
a
list
:end
:start
Set
the
HandlerExceptionResolver
types
to
use
as
an
array
:end
:start
Set
up
view
resolution
with
the
given
ViewResolvers
If
not
set,
an
InternalResourceViewResolver
is
used
by
default
:end
:start
Sets
up
a
single
ViewResolver
that
always
returns
the
provided
view
instance
This
is
a
convenient
shortcut
if
you
need
to
use
one
View
instance
only
--
eg
rendering
generated
content
(JSON,
XML,
Atom)
:end
:start
Provide
a
LocaleResolver
instance
If
not
provided,
the
default
one
used
is
AcceptHeaderLocaleResolver
:end
:start
Provide
a
custom
FlashMapManager
instance
If
not
provided,
SessionFlashMapManager
is
used
by
default
:end
:start
Whether
to
use
suffix
pattern
match
("*")
when
matching
patterns
to
requests
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users*"
<p>The
default
value
is
true
:end
:start
Whether
to
match
to
URLs
irrespective
of
the
presence
of
a
trailing
slash
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users/"
<p>The
default
value
is
true
:end
:start
Set
if
";"
(semicolon)
content
should
be
stripped
from
the
request
URI
The
value,
if
provided,
is
in
turn
set
on
AbstractHandlerMapping#setRemoveSemicolonContent(boolean)
:end
:start
In
a
standalone
setup
there
is
no
support
for
placeholder
values
embedded
in
request
mappings
This
method
allows
manually
provided
placeholder
values
so
they
can
be
resolved
Alternatively
consider
creating
a
test
that
initializes
a
WebApplicationContext
:end
:start
Custom
context
hierarchy
configuration
annotation
:end
:start
Custom
context
hierarchy
configuration
annotation
that
is
itself
meta-annotated
with
MetaContextHierarchyConfig
@MetaContextHierarchyConfig
:end
:start
Custom
configuration
annotation
with
meta-annotation
attribute
overrides
for
ContextConfiguration#classes
and
ActiveProfiles#resolver
and
with
default
configuration
local
to
the
composed
annotation
:end
:start
Custom
configuration
annotation
with
meta-annotation
attribute
overrides
for
ContextConfiguration#classes
and
ActiveProfiles#profiles
and
<strong>no</strong>
default
configuration
local
to
the
composed
annotation
:end
:start
Custom
configuration
annotation
with
meta-annotation
attribute
overrides
for
ContextConfiguration#classes
and
ActiveProfiles#profiles
and
with
default
configuration
local
to
the
composed
annotation
:end
:start
Custom
configuration
annotation
that
is
itself
meta-annotated
with
ConfigClassesAndProfilesWithCustomDefaultsMetaConfig
and
ActiveProfiles
:end
:start
ApplicationContext
configuration
class
for
various
integration
tests
<p>The
beans
defined
in
this
configuration
class
map
directly
to
the
beans
defined
in
SpringJUnit4ClassRunnerAppCtxTests-contextxml
Consequently,
the
application
contexts
loaded
from
these
two
sources
should
be
identical
with
regard
to
bean
definitions
:end
:start
Hybrid
SmartContextLoader
that
supports
path-based
and
class-based
resources
simultaneously
<p>This
test
loader
is
inspired
by
Spring
Boot
<p>Detects
defaults
for
XML
configuration
and
annotated
classes
<p>Beans
from
XML
configuration
always
override
those
from
annotated
classes
:end
:start
DriversLicense
POJO
:end
:start
Person
POJO
:end
:start
Hibernate
implementation
of
the
PersonRepository
API
:end
:start
Person
Repository
API
:end
:start
Standard
implementation
of
the
PersonService
API
:end
:start
Person
Service
API
:end
:start
Simple
POJO
that
contains
lifecycle
callbacks
:end
:start
Simple
RunListener
which
tracks
how
many
times
certain
JUnit
callback
methods
were
called:
only
intended
for
the
integration
test
suite
:end
:start
Introduced
to
investigate
claims
in
SPR-11145
:end
:start
Simple
POJO
representing
a
<em>component</em>;
intended
for
use
in
unit
tests
:end
:start
A
<em>legacy
entity</em>
whose
#toString()
method
has
side
effects;
intended
for
use
in
unit
tests
:end
:start
Abstract
base
class
for
<em>persistent
entities</em>;
intended
for
use
in
unit
tests
:end
:start
Concrete
subclass
of
PersistentEntity
representing
a
<em>person</em>
entity;
intended
for
use
in
unit
tests
:end
:start
A
stub
implementation
of
the
MvcResult
contract
:end
:start
Spring
AOP
exception
translation
aspect
for
use
at
Repository
or
DAO
layer
level
Translates
native
persistence
exceptions
into
Spring's
DataAccessException
hierarchy,
based
on
a
given
PersistenceExceptionTranslator
:end
:start
Create
a
new
PersistenceExceptionTranslationAdvisor
:end
:start
Bean
post-processor
that
automatically
applies
persistence
exception
translation
to
any
bean
marked
with
Spring's
@{@link
orgspringframeworkstereotypeRepository
Repository
annotation,
adding
a
corresponding
PersistenceExceptionTranslationAdvisor
to
the
exposed
proxy
(either
an
existing
AOP
proxy
or
a
newly
generated
proxy
that
implements
all
of
the
target's
interfaces)
<p>Translates
native
resource
exceptions
to
Spring's
orgspringframeworkdaoDataAccessException
DataAccessException
hierarchy
Autodetects
beans
that
implement
the
orgspringframeworkdaosupportPersistenceExceptionTranslator
PersistenceExceptionTranslator
interface,
which
are
subsequently
asked
to
translate
candidate
exceptions
<p>All
of
Spring's
applicable
resource
factories
(eg
orgspringframeworkormjpaLocalContainerEntityManagerFactoryBean)
implement
the
PersistenceExceptionTranslator
interface
out
of
the
box
As
a
consequence,
all
that
is
usually
needed
to
enable
automatic
exception
translation
is
marking
all
affected
beans
(such
as
Repositories
or
DAOs)
with
the
@Repository
annotation,
along
with
defining
this
post-processor
as
a
bean
in
the
application
context
:end
:start
Set
the
'repository'
annotation
type
The
default
repository
annotation
type
is
the
Repository
annotation
<p>This
setter
property
exists
so
that
developers
can
provide
their
own
(non-Spring-specific)
annotation
type
to
indicate
that
a
class
has
a
repository
role
:end
:start
Exception
thrown
on
failure
to
aquire
a
lock
during
an
update,
for
example
during
a
"select
for
update"
statement
:end
:start
Constructor
for
CannotAcquireLockException
:end
:start
Constructor
for
CannotAcquireLockException
:end
:start
Exception
thrown
on
failure
to
complete
a
transaction
in
serialized
mode
due
to
update
conflicts
:end
:start
Constructor
for
CannotSerializeTransactionException
:end
:start
Constructor
for
CannotSerializeTransactionException
:end
:start
Exception
thrown
when
we
couldn't
cleanup
after
a
data
access
operation,
but
the
actual
operation
went
OK
<p>For
example,
this
exception
or
a
subclass
might
be
thrown
if
a
JDBC
Connection
couldn't
be
closed
after
it
had
been
used
successfully
<p>Note
that
data
access
code
might
perform
resources
cleanup
in
a
finally
block
and
therefore
log
cleanup
failure
rather
than
rethrow
it,
to
keep
the
original
data
access
exception,
if
any
:end
:start
Constructor
for
CleanupFailureDataAccessException
:end
:start
Exception
thrown
on
concurrency
failure
<p>This
exception
should
be
subclassed
to
indicate
the
type
of
failure:
optimistic
locking,
failure
to
acquire
lock,
etc
:end
:start
Constructor
for
ConcurrencyFailureException
:end
:start
Constructor
for
ConcurrencyFailureException
:end
:start
Root
of
the
hierarchy
of
data
access
exceptions
discussed
in
<a
href="http://wwwamazoncom/exec/obidos/tg/detail/-/0764543857/">Expert
One-On-One
J2EE
Design
and
Development</a>
Please
see
Chapter
9
of
this
book
for
detailed
discussion
of
the
motivation
for
this
package
<p>This
exception
hierarchy
aims
to
let
user
code
find
and
handle
the
kind
of
error
encountered
without
knowing
the
details
of
the
particular
data
access
API
in
use
(eg
JDBC)
Thus
it
is
possible
to
react
to
an
optimistic
locking
failure
without
knowing
that
JDBC
is
being
used
<p>As
this
class
is
a
runtime
exception,
there
is
no
need
for
user
code
to
catch
it
or
subclasses
if
any
error
is
to
be
considered
fatal
(the
usual
case)
:end
:start
Constructor
for
DataAccessException
:end
:start
Constructor
for
DataAccessException
:end
:start
Data
access
exception
thrown
when
a
resource
fails
completely:
for
example,
if
we
can't
connect
to
a
database
using
JDBC
:end
:start
Constructor
for
DataAccessResourceFailureException
:end
:start
Constructor
for
DataAccessResourceFailureException
:end
:start
Exception
thrown
when
an
attempt
to
insert
or
update
data
results
in
violation
of
an
integrity
constraint
Note
that
this
is
not
purely
a
relational
concept;
unique
primary
keys
are
required
by
most
database
types
:end
:start
Constructor
for
DataIntegrityViolationException
:end
:start
Constructor
for
DataIntegrityViolationException
:end
:start
Exception
thrown
if
certain
expected
data
could
not
be
retrieved,
eg
when
looking
up
specific
data
via
a
known
identifier
This
exception
will
be
thrown
either
by
O/R
mapping
tools
or
by
DAO
implementations
:end
:start
Constructor
for
DataRetrievalFailureException
:end
:start
Constructor
for
DataRetrievalFailureException
:end
:start
Generic
exception
thrown
when
the
current
process
was
a
deadlock
loser,
and
its
transaction
rolled
back
:end
:start
Constructor
for
DeadlockLoserDataAccessException
:end
:start
Exception
thrown
when
an
attempt
to
insert
or
update
data
results
in
violation
of
an
primary
key
or
unique
constraint
Note
that
this
is
not
necessarily
a
purely
relational
concept;
unique
primary
keys
are
required
by
most
database
types
:end
:start
Constructor
for
DuplicateKeyException
:end
:start
Constructor
for
DuplicateKeyException
:end
:start
Data
access
exception
thrown
when
a
result
was
expected
to
have
at
least
one
row
(or
element)
but
zero
rows
(or
elements)
were
actually
returned
:end
:start
Constructor
for
EmptyResultDataAccessException
:end
:start
Constructor
for
EmptyResultDataAccessException
:end
:start
Constructor
for
EmptyResultDataAccessException
:end
:start
Data
access
exception
thrown
when
a
result
was
not
of
the
expected
size,
for
example
when
expecting
a
single
row
but
getting
0
or
more
than
1
rows
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Constructor
for
IncorrectResultSizeDataAccessException
:end
:start
Return
the
expected
result
size
:end
:start
Return
the
actual
result
size
(or
-1
if
unknown)
:end
:start
Data
access
exception
thrown
when
something
unintended
appears
to
have
happened
with
an
update,
but
the
transaction
hasn't
already
been
rolled
back
Thrown,
for
example,
when
we
wanted
to
update
1
row
in
an
RDBMS
but
actually
updated
3
:end
:start
Constructor
for
IncorrectUpdateSemanticsDataAccessException
:end
:start
Constructor
for
IncorrectUpdateSemanticsDataAccessException
:end
:start
Return
whether
data
was
updated
If
this
method
returns
false,
there's
nothing
to
roll
back
<p>The
default
implementation
always
returns
true
This
can
be
overridden
in
subclasses
:end
:start
Exception
thrown
on
incorrect
usage
of
the
API,
such
as
failing
to
"compile"
a
query
object
that
needed
compilation
before
execution
<p>This
represents
a
problem
in
our
Java
data
access
framework,
not
the
underlying
data
access
infrastructure
:end
:start
Constructor
for
InvalidDataAccessApiUsageException
:end
:start
Constructor
for
InvalidDataAccessApiUsageException
:end
:start
Root
for
exceptions
thrown
when
we
use
a
data
access
resource
incorrectly
Thrown
for
example
on
specifying
bad
SQL
when
using
a
RDBMS
Resource-specific
subclasses
are
supplied
by
concrete
data
access
packages
:end
:start
Constructor
for
InvalidDataAccessResourceUsageException
:end
:start
Constructor
for
InvalidDataAccessResourceUsageException
:end
:start
Root
of
the
hierarchy
of
data
access
exceptions
that
are
considered
non-transient
-
where
a
retry
of
the
same
operation
would
fail
unless
the
cause
of
the
Exception
is
corrected
:end
:start
Constructor
for
NonTransientDataAccessException
:end
:start
Constructor
for
NonTransientDataAccessException
:end
:start
Data
access
exception
thrown
when
a
resource
fails
completely
and
the
failure
is
permanent
:end
:start
Constructor
for
NonTransientDataAccessResourceException
:end
:start
Constructor
for
NonTransientDataAccessResourceException
:end
:start
Exception
thrown
on
an
optimistic
locking
violation
<p>This
exception
will
be
thrown
either
by
O/R
mapping
tools
or
by
custom
DAO
implementations
Optimistic
locking
failure
is
typically
<i>not</i>
detected
by
the
database
itself
:end
:start
Constructor
for
OptimisticLockingFailureException
:end
:start
Constructor
for
OptimisticLockingFailureException
:end
:start
Exception
thrown
when
the
underlying
resource
denied
a
permission
to
access
a
specific
element,
such
as
a
specific
database
table
:end
:start
Constructor
for
PermissionDeniedDataAccessException
:end
:start
Exception
thrown
on
a
pessimistic
locking
violation
Thrown
by
Spring's
SQLException
translation
mechanism
if
a
corresponding
database
error
is
encountered
<p>Serves
as
superclass
for
more
specific
exceptions,
like
CannotAcquireLockException
and
DeadlockLoserDataAccessException
:end
:start
Constructor
for
PessimisticLockingFailureException
:end
:start
Constructor
for
PessimisticLockingFailureException
:end
:start
Exception
to
be
thrown
on
a
query
timeout
This
could
have
different
causes
depending
on
the
database
API
in
use
but
most
likely
thrown
after
the
database
interrupts
or
stops
the
processing
of
a
query
before
it
has
completed
<p>This
exception
can
be
thrown
by
user
code
trapping
the
native
database
exception
or
by
exception
translation
:end
:start
Constructor
for
QueryTimeoutException
:end
:start
Constructor
for
QueryTimeoutException
:end
:start
Data
access
exception
thrown
when
a
previously
failed
operation
might
be
able
to
succeed
if
the
application
performs
some
recovery
steps
and
retries
the
entire
transaction
or
in
the
case
of
a
distributed
transaction,
the
transaction
branch
At
a
minimum,
the
recovery
operation
must
include
closing
the
current
connection
and
getting
a
new
connection
:end
:start
Constructor
for
RecoverableDataAccessException
:end
:start
Constructor
for
RecoverableDataAccessException
:end
:start
Implementation
of
PersistenceExceptionTranslator
that
supports
chaining,
allowing
the
addition
of
PersistenceExceptionTranslator
instances
in
order
Returns
non-null
on
the
first
(if
any)
match
:end
:start
Add
a
PersistenceExceptionTranslator
to
the
chained
delegate
list
:end
:start
Return
all
registered
PersistenceExceptionTranslator
delegates
(as
array)
:end
:start
Generic
base
class
for
DAOs,
defining
template
methods
for
DAO
initialization
<p>Extended
by
Spring's
specific
DAO
support
classes,
such
as:
JdbcDaoSupport,
JdoDaoSupport,
etc
:end
:start
Logger
available
to
subclasses
:end
:start
Abstract
subclasses
must
override
this
to
check
their
configuration
<p>Implementors
should
be
marked
as
final
if
concrete
subclasses
are
not
supposed
to
override
this
template
method
themselves
:end
:start
Concrete
subclasses
can
override
this
for
custom
initialization
behavior
Gets
called
after
population
of
this
instance's
bean
properties
:end
:start
Miscellaneous
utility
methods
for
DAO
implementations
Useful
with
any
data
access
technology
:end
:start
Return
a
single
result
object
from
the
given
Collection
<p>Returns
null
if
0
result
objects
found;
throws
an
exception
if
more
than
1
element
found
:end
:start
Return
a
single
result
object
from
the
given
Collection
<p>Throws
an
exception
if
0
or
more
than
1
element
found
:end
:start
Return
a
unique
result
object
from
the
given
Collection
<p>Returns
null
if
0
result
objects
found;
throws
an
exception
if
more
than
1
instance
found
:end
:start
Return
a
unique
result
object
from
the
given
Collection
<p>Throws
an
exception
if
0
or
more
than
1
instance
found
:end
:start
Return
a
unique
result
object
from
the
given
Collection
Throws
an
exception
if
0
or
more
than
1
result
objects
found,
of
if
the
unique
result
object
is
not
convertable
to
the
specified
required
type
:end
:start
Return
a
unique
int
result
from
the
given
Collection
Throws
an
exception
if
0
or
more
than
1
result
objects
found,
of
if
the
unique
result
object
is
not
convertable
to
an
int
:end
:start
Return
a
unique
long
result
from
the
given
Collection
Throws
an
exception
if
0
or
more
than
1
result
objects
found,
of
if
the
unique
result
object
is
not
convertable
to
a
long
:end
:start
Return
a
translated
exception
if
this
is
appropriate,
otherwise
return
the
input
exception
:end
:start
AOP
Alliance
MethodInterceptor
that
provides
persistence
exception
translation
based
on
a
given
PersistenceExceptionTranslator
<p>Delegates
to
the
given
PersistenceExceptionTranslator
to
translate
a
RuntimeException
thrown
into
Spring's
DataAccessException
hierarchy
(if
appropriate)
If
the
RuntimeException
in
question
is
declared
on
the
target
method,
it
is
always
propagated
as-is
(with
no
translation
applied)
:end
:start
Create
a
new
PersistenceExceptionTranslationInterceptor
Needs
to
be
configured
with
a
PersistenceExceptionTranslator
afterwards
:end
:start
Create
a
new
PersistenceExceptionTranslationInterceptor
for
the
given
PersistenceExceptionTranslator
:end
:start
Create
a
new
PersistenceExceptionTranslationInterceptor,
autodetecting
PersistenceExceptionTranslators
in
the
given
BeanFactory
:end
:start
Specify
the
PersistenceExceptionTranslator
to
use
<p>Default
is
to
autodetect
all
PersistenceExceptionTranslators
in
the
containing
BeanFactory,
using
them
in
a
chain
:end
:start
Specify
whether
to
always
translate
the
exception
("true"),
or
whether
throw
the
raw
exception
when
declared,
ie
when
the
originating
method
signature's
exception
declarations
allow
for
the
raw
exception
to
be
thrown
("false")
<p>Default
is
"false"
Switch
this
flag
to
"true"
in
order
to
always
translate
applicable
exceptions,
independent
from
the
originating
method
signature
<p>Note
that
the
originating
method
does
not
have
to
declare
the
specific
exception
Any
base
class
will
do
as
well,
even
throws
Exception:
As
long
as
the
originating
method
does
explicitly
declare
compatible
exceptions,
the
raw
exception
will
be
rethrown
If
you
would
like
to
avoid
throwing
raw
exceptions
in
any
case,
switch
this
flag
to
"true"
:end
:start
Detect
all
PersistenceExceptionTranslators
in
the
given
BeanFactory
:end
:start
Interface
implemented
by
Spring
integrations
with
data
access
technologies
that
throw
runtime
exceptions,
such
as
JPA,
TopLink,
JDO
and
Hibernate
<p>This
allows
consistent
usage
of
combined
exception
translation
functionality,
without
forcing
a
single
translator
to
understand
every
single
possible
type
of
exception
:end
:start
Translate
the
given
runtime
exception
thrown
by
a
persistence
framework
to
a
corresponding
exception
from
Spring's
generic
DataAccessException
hierarchy,
if
possible
<p>Do
not
translate
exceptions
that
are
not
understand
by
this
translator:
for
example,
if
coming
from
another
persistence
framework,
or
resulting
from
user
code
and
unrelated
to
persistence
<p>Of
particular
importance
is
the
correct
translation
to
DataIntegrityViolationException,
for
example
on
constraint
violation
Implementations
may
use
Spring
JDBC's
sophisticated
exception
translation
to
provide
further
information
in
the
event
of
SQLException
as
a
root
cause
:end
:start
Root
of
the
hierarchy
of
data
access
exceptions
that
are
considered
transient
-
where
a
previously
failed
operation
might
be
able
to
succeed
when
the
operation
is
retried
without
any
intervention
by
application-level
functionality
:end
:start
Constructor
for
TransientDataAccessException
:end
:start
Constructor
for
TransientDataAccessException
:end
:start
Data
access
exception
thrown
when
a
resource
fails
temporarily
and
the
operation
can
be
retried
:end
:start
Constructor
for
TransientDataAccessResourceException
:end
:start
Constructor
for
TransientDataAccessResourceException
:end
:start
Exception
thrown
on
mismatch
between
Java
type
and
database
type:
for
example
on
an
attempt
to
set
an
object
of
the
wrong
type
in
an
RDBMS
column
:end
:start
Constructor
for
TypeMismatchDataAccessException
:end
:start
Constructor
for
TypeMismatchDataAccessException
:end
:start
Normal
superclass
when
we
can't
distinguish
anything
more
specific
than
"something
went
wrong
with
the
underlying
resource":
for
example,
a
SQLException
from
JDBC
we
can't
pinpoint
more
precisely
:end
:start
Constructor
for
UncategorizedDataAccessException
:end
:start
Exception
thrown
when
the
creating
of
a
CCI
Record
failed
for
connector-internal
reasons
:end
:start
Constructor
for
CannotCreateRecordException
:end
:start
Fatal
exception
thrown
when
we
can't
connect
to
an
EIS
using
CCI
:end
:start
Constructor
for
CannotGetCciConnectionException
:end
:start
Exception
thrown
when
the
connector
doesn't
support
a
specific
CCI
operation
:end
:start
Constructor
for
CciOperationNotSupportedException
:end
:start
orgspringframeworktransactionPlatformTransactionManager
implementation
that
manages
local
transactions
for
a
single
CCI
ConnectionFactory
Binds
a
CCI
Connection
from
the
specified
ConnectionFactory
to
the
thread,
potentially
allowing
for
one
thread-bound
Connection
per
ConnectionFactory
<p>Application
code
is
required
to
retrieve
the
CCI
Connection
via
ConnectionFactoryUtils#getConnection(ConnectionFactory)
instead
of
a
standard
J2EE-style
ConnectionFactory#getConnection()
call
Spring
classes
such
as
orgspringframeworkjcaccicoreCciTemplate
use
this
strategy
implicitly
If
not
used
in
combination
with
this
transaction
manager,
the
ConnectionFactoryUtils
lookup
strategy
behaves
exactly
like
the
native
DataSource
lookup;
it
can
thus
be
used
in
a
portable
fashion
<p>Alternatively,
you
can
allow
application
code
to
work
with
the
standard
J2EE
lookup
pattern
ConnectionFactory#getConnection(),
for
example
for
legacy
code
that
is
not
aware
of
Spring
at
all
In
that
case,
define
a
TransactionAwareConnectionFactoryProxy
for
your
target
ConnectionFactory,
which
will
automatically
participate
in
Spring-managed
transactions
:end
:start
Create
a
new
CciLocalTransactionManager
instance
A
ConnectionFactory
has
to
be
set
to
be
able
to
use
it
:end
:start
Create
a
new
CciLocalTransactionManager
instance
:end
:start
Set
the
CCI
ConnectionFactory
that
this
instance
should
manage
local
transactions
for
:end
:start
Return
the
CCI
ConnectionFactory
that
this
instance
manages
local
transactions
for
:end
:start
Helper
class
that
provides
static
methods
for
obtaining
CCI
Connections
from
a
javaxresourcecciConnectionFactory
Includes
special
support
for
Spring-managed
transactional
Connections,
eg
managed
by
CciLocalTransactionManager
or
orgspringframeworktransactionjtaJtaTransactionManager
<p>Used
internally
by
orgspringframeworkjcaccicoreCciTemplate,
Spring's
CCI
operation
objects
and
the
CciLocalTransactionManager
Can
also
be
used
directly
in
application
code
:end
:start
Obtain
a
Connection
from
the
given
ConnectionFactory
Translates
ResourceExceptions
into
the
Spring
hierarchy
of
unchecked
generic
data
access
exceptions,
simplifying
calling
code
and
making
any
exception
that
is
thrown
more
meaningful
<p>Is
aware
of
a
corresponding
Connection
bound
to
the
current
thread,
for
example
when
using
CciLocalTransactionManager
Will
bind
a
Connection
to
the
thread
if
transaction
synchronization
is
active
(eg
if
in
a
JTA
transaction)
:end
:start
Obtain
a
Connection
from
the
given
ConnectionFactory
Translates
ResourceExceptions
into
the
Spring
hierarchy
of
unchecked
generic
data
access
exceptions,
simplifying
calling
code
and
making
any
exception
that
is
thrown
more
meaningful
<p>Is
aware
of
a
corresponding
Connection
bound
to
the
current
thread,
for
example
when
using
CciLocalTransactionManager
Will
bind
a
Connection
to
the
thread
if
transaction
synchronization
is
active
(eg
if
in
a
JTA
transaction)
:end
:start
Actually
obtain
a
CCI
Connection
from
the
given
ConnectionFactory
Same
as
#getConnection,
but
throwing
the
original
ResourceException
<p>Is
aware
of
a
corresponding
Connection
bound
to
the
current
thread,
for
example
when
using
CciLocalTransactionManager
Will
bind
a
Connection
to
the
thread
if
transaction
synchronization
is
active
(eg
if
in
a
JTA
transaction)
<p>Directly
accessed
by
TransactionAwareConnectionFactoryProxy
:end
:start
Determine
whether
the
given
JCA
CCI
Connection
is
transactional,
that
is,
bound
to
the
current
thread
by
Spring's
transaction
facilities
:end
:start
Close
the
given
Connection,
obtained
from
the
given
ConnectionFactory,
if
it
is
not
managed
externally
(that
is,
not
bound
to
the
thread)
:end
:start
Actually
close
the
given
Connection,
obtained
from
the
given
ConnectionFactory
Same
as
#releaseConnection,
but
throwing
the
original
ResourceException
<p>Directly
accessed
by
TransactionAwareConnectionFactoryProxy
:end
:start
Connection
holder,
wrapping
a
CCI
Connection
<p>CciLocalTransactionManager
binds
instances
of
this
class
to
the
thread,
for
a
given
ConnectionFactory
<p>Note:
This
is
an
SPI
class,
not
intended
to
be
used
by
applications
:end
:start
An
adapter
for
a
target
CCI
javaxresourcecciConnectionFactory,
applying
the
given
ConnectionSpec
to
every
standard
getConnection()
call,
that
is,
implicitly
invoking
getConnection(ConnectionSpec)
on
the
target
All
other
methods
simply
delegate
to
the
corresponding
methods
of
the
target
ConnectionFactory
<p>Can
be
used
to
proxy
a
target
JNDI
ConnectionFactory
that
does
not
have
a
ConnectionSpec
configured
Client
code
can
work
with
the
ConnectionFactory
without
passing
in
a
ConnectionSpec
on
every
getConnection()
call
<p>In
the
following
example,
client
code
can
simply
transparently
work
with
the
preconfigured
"myConnectionFactory",
implicitly
accessing
"myTargetConnectionFactory"
with
the
specified
user
credentials
<pre
class="code">
&lt;bean
id="myTargetConnectionFactory"
class="orgspringframeworkjndiJndiObjectFactoryBean"&gt;
&lt;property
name="jndiName"
value="java:comp/env/cci/mycf"/&gt;
&lt;/bean>
&lt;bean
id="myConnectionFactory"
class="orgspringframeworkjcacciconnectionConnectionSpecConnectionFactoryAdapter"&gt;
&lt;property
name="targetConnectionFactory"
ref="myTargetConnectionFactory"/&gt;
&lt;property
name="connectionSpec"&gt;
&lt;bean
class="yourresourceadapterConnectionSpecImpl"&gt;
&lt;property
name="username"
value="myusername"/&gt;
&lt;property
name="password"
value="mypassword"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
<p>If
the
"connectionSpec"
is
empty,
this
proxy
will
simply
delegate
to
the
standard
getConnection()
method
of
the
target
ConnectionFactory
This
can
be
used
to
keep
a
UserCredentialsConnectionFactoryAdapter
bean
definition
just
for
the
<i>option</i>
of
implicitly
passing
in
a
ConnectionSpec
if
the
particular
target
ConnectionFactory
requires
it
:end
:start
Set
the
ConnectionSpec
that
this
adapter
should
use
for
retrieving
Connections
Default
is
none
:end
:start
Set
a
ConnectionSpec
for
this
proxy
and
the
current
thread
The
given
ConnectionSpec
will
be
applied
to
all
subsequent
getConnection()
calls
on
this
ConnectionFactory
proxy
<p>This
will
override
any
statically
specified
"connectionSpec"
property
:end
:start
Remove
any
ConnectionSpec
for
this
proxy
from
the
current
thread
A
statically
specified
ConnectionSpec
applies
again
afterwards
:end
:start
Determine
whether
there
is
currently
a
thread-bound
ConnectionSpec,
using
it
if
available,
falling
back
to
the
statically
specified
"connectionSpec"
property
else
:end
:start
This
implementation
delegates
to
the
getConnection(ConnectionSpec)
method
of
the
target
ConnectionFactory,
passing
in
the
specified
user
credentials
If
the
specified
username
is
empty,
it
will
simply
delegate
to
the
standard
getConnection()
method
of
the
target
ConnectionFactory
:end
:start
CCI
ConnectionFactory
implementation
that
delegates
all
calls
to
a
given
target
ConnectionFactory
<p>This
class
is
meant
to
be
subclassed,
with
subclasses
overriding
only
those
methods
(such
as
#getConnection())
that
should
not
simply
delegate
to
the
target
ConnectionFactory
:end
:start
Set
the
target
ConnectionFactory
that
this
ConnectionFactory
should
delegate
to
:end
:start
Return
the
target
ConnectionFactory
that
this
ConnectionFactory
should
delegate
to
:end
:start
Implementation
of
the
CCI
RecordFactory
interface
that
always
throws
NotSupportedException
<p>Useful
as
a
placeholder
for
a
RecordFactory
argument
(for
example
as
defined
by
the
RecordCreator
callback),
in
particular
when
the
connector's
ConnectionFactorygetRecordFactory()
implementation
happens
to
throw
NotSupportedException
early
rather
than
throwing
the
exception
from
RecordFactory's
methods
:end
:start
A
CCI
ConnectionFactory
adapter
that
returns
the
same
Connection
on
all
getConnection
calls,
and
ignores
calls
to
Connectionclose()
<p>Useful
for
testing
and
standalone
environments,
to
keep
using
the
same
Connection
for
multiple
CciTemplate
calls,
without
having
a
pooling
ConnectionFactory,
also
spanning
any
number
of
transactions
<p>You
can
either
pass
in
a
CCI
Connection
directly,
or
let
this
factory
lazily
create
a
Connection
via
a
given
target
ConnectionFactory
:end
:start
Create
a
new
SingleConnectionFactory
for
bean-style
usage
:end
:start
Create
a
new
SingleConnectionFactory
that
always
returns
the
given
Connection
:end
:start
Create
a
new
SingleConnectionFactory
that
always
returns
a
single
Connection
which
it
will
lazily
create
via
the
given
target
ConnectionFactory
:end
:start
Make
sure
a
Connection
or
ConnectionFactory
has
been
set
:end
:start
Close
the
underlying
Connection
The
provider
of
this
ConnectionFactory
needs
to
care
for
proper
shutdown
<p>As
this
bean
implements
DisposableBean,
a
bean
factory
will
automatically
invoke
this
on
destruction
of
its
cached
singletons
:end
:start
Initialize
the
single
underlying
Connection
<p>Closes
and
reinitializes
the
Connection
if
an
underlying
Connection
is
present
already
:end
:start
Reset
the
underlying
shared
Connection,
to
be
reinitialized
on
next
access
:end
:start
Create
a
CCI
Connection
via
this
template's
ConnectionFactory
:end
:start
Prepare
the
given
Connection
before
it
is
exposed
<p>The
default
implementation
is
empty
Can
be
overridden
in
subclasses
:end
:start
Close
the
given
Connection
:end
:start
Wrap
the
given
Connection
with
a
proxy
that
delegates
every
method
call
to
it
but
suppresses
close
calls
This
is
useful
for
allowing
application
code
to
handle
a
special
framework
Connection
just
like
an
ordinary
Connection
from
a
CCI
ConnectionFactory
:end
:start
Proxy
for
a
target
CCI
javaxresourcecciConnectionFactory,
adding
awareness
of
Spring-managed
transactions
Similar
to
a
transactional
JNDI
ConnectionFactory
as
provided
by
a
J2EE
server
<p>Data
access
code
that
should
remain
unaware
of
Spring's
data
access
support
can
work
with
this
proxy
to
seamlessly
participate
in
Spring-managed
transactions
Note
that
the
transaction
manager,
for
example
the
CciLocalTransactionManager,
still
needs
to
work
with
underlying
ConnectionFactory,
<i>not</i>
with
this
proxy
<p><b>Make
sure
that
TransactionAwareConnectionFactoryProxy
is
the
outermost
ConnectionFactory
of
a
chain
of
ConnectionFactory
proxies/adapters</b>
TransactionAwareConnectionFactoryProxy
can
delegate
either
directly
to
the
target
connection
pool
or
to
some
intermediate
proxy/adapter
like
ConnectionSpecConnectionFactoryAdapter
<p>Delegates
to
ConnectionFactoryUtils
for
automatically
participating
in
thread-bound
transactions,
for
example
managed
by
CciLocalTransactionManager
getConnection
calls
and
close
calls
on
returned
Connections
will
behave
properly
within
a
transaction,
ie
always
operate
on
the
transactional
Connection
If
not
within
a
transaction,
normal
ConnectionFactory
behavior
applies
<p>This
proxy
allows
data
access
code
to
work
with
the
plain
JCA
CCI
API
and
still
participate
in
Spring-managed
transactions,
similar
to
CCI
code
in
a
J2EE/JTA
environment
However,
if
possible,
use
Spring's
ConnectionFactoryUtils,
CciTemplate
or
CCI
operation
objects
to
get
transaction
participation
even
without
a
proxy
for
the
target
ConnectionFactory,
avoiding
the
need
to
define
such
a
proxy
in
the
first
place
<p><b>NOTE:</b>
This
ConnectionFactory
proxy
needs
to
return
wrapped
Connections
in
order
to
handle
close
calls
properly
Therefore,
the
returned
Connections
cannot
be
cast
to
a
native
CCI
Connection
type
or
to
a
connection
pool
implementation
type
:end
:start
Create
a
new
TransactionAwareConnectionFactoryProxy
:end
:start
Create
a
new
TransactionAwareConnectionFactoryProxy
:end
:start
Delegate
to
ConnectionFactoryUtils
for
automatically
participating
in
Spring-managed
transactions
Throws
the
original
ResourceException,
if
any
:end
:start
Wrap
the
given
Connection
with
a
proxy
that
delegates
every
method
call
to
it
but
delegates
close
calls
to
ConnectionFactoryUtils
:end
:start
Interface
that
specifies
a
basic
set
of
CCI
operations
on
an
EIS
Implemented
by
CciTemplate
Not
often
used,
but
a
useful
option
to
enhance
testability,
as
it
can
easily
be
mocked
or
stubbed
<p>Alternatively,
the
standard
CCI
infrastructure
can
be
mocked
However,
mocking
this
interface
constitutes
significantly
less
work
:end
:start
Execute
a
request
on
an
EIS
with
CCI,
implemented
as
callback
action
working
on
a
CCI
Connection
This
allows
for
implementing
arbitrary
data
access
operations,
within
Spring's
managed
CCI
environment:
that
is,
participating
in
Spring-managed
transactions
and
converting
JCA
ResourceExceptions
into
Spring's
DataAccessException
hierarchy
<p>The
callback
action
can
return
a
result
object,
for
example
a
domain
object
or
a
collection
of
domain
objects
:end
:start
Execute
a
request
on
an
EIS
with
CCI,
implemented
as
callback
action
working
on
a
CCI
Interaction
This
allows
for
implementing
arbitrary
data
access
operations
on
a
single
Interaction,
within
Spring's
managed
CCI
environment:
that
is,
participating
in
Spring-managed
transactions
and
converting
JCA
ResourceExceptions
into
Spring's
DataAccessException
hierarchy
<p>The
callback
action
can
return
a
result
object,
for
example
a
domain
object
or
a
collection
of
domain
objects
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
:end
:start
<b>This
is
the
central
class
in
the
CCI
core
package</b>
It
simplifies
the
use
of
CCI
and
helps
to
avoid
common
errors
It
executes
core
CCI
workflow,
leaving
application
code
to
provide
parameters
to
CCI
and
extract
results
This
class
executes
EIS
queries
or
updates,
catching
ResourceExceptions
and
translating
them
to
the
generic
exception
hierarchy
defined
in
the
orgspringframeworkdao
package
<p>Code
using
this
class
can
pass
in
and
receive
javaxresourcecciRecord
instances,
or
alternatively
implement
callback
interfaces
for
creating
input
Records
and
extracting
result
objects
from
output
Records
(or
CCI
ResultSets)
<p>Can
be
used
within
a
service
implementation
via
direct
instantiation
with
a
ConnectionFactory
reference,
or
get
prepared
in
an
application
context
and
given
to
services
as
bean
reference
Note:
The
ConnectionFactory
should
always
be
configured
as
a
bean
in
the
application
context,
in
the
first
case
given
to
the
service
directly,
in
the
second
case
to
the
prepared
template
:end
:start
Construct
a
new
CciTemplate
for
bean
usage
<p>Note:
The
ConnectionFactory
has
to
be
set
before
using
the
instance
:end
:start
Construct
a
new
CciTemplate,
given
a
ConnectionFactory
to
obtain
Connections
from
Note:
This
will
trigger
eager
initialization
of
the
exception
translator
:end
:start
Construct
a
new
CciTemplate,
given
a
ConnectionFactory
to
obtain
Connections
from
Note:
This
will
trigger
eager
initialization
of
the
exception
translator
:end
:start
Set
the
CCI
ConnectionFactory
to
obtain
Connections
from
:end
:start
Return
the
CCI
ConnectionFactory
used
by
this
template
:end
:start
Set
the
CCI
ConnectionSpec
that
this
template
instance
is
supposed
to
obtain
Connections
for
:end
:start
Return
the
CCI
ConnectionSpec
used
by
this
template,
if
any
:end
:start
Set
a
RecordCreator
that
should
be
used
for
creating
default
output
Records
<p>Default
is
none:
When
no
explicit
output
Record
gets
passed
into
an
execute
method,
CCI's
Interactionexecute
variant
that
returns
an
output
Record
will
be
called
<p>Specify
a
RecordCreator
here
if
you
always
need
to
call
CCI's
Interactionexecute
variant
with
a
passed-in
output
Record
Unless
there
is
an
explicitly
specified
output
Record,
CciTemplate
will
then
invoke
this
RecordCreator
to
create
a
default
output
Record
instance
:end
:start
Return
a
RecordCreator
that
should
be
used
for
creating
default
output
Records
:end
:start
Create
a
template
derived
from
this
template
instance,
inheriting
the
ConnectionFactory
and
other
settings
but
overriding
the
ConnectionSpec
used
for
obtaining
Connections
:end
:start
Execute
the
specified
interaction
on
an
EIS
with
CCI
All
other
interaction
execution
methods
go
through
this
:end
:start
Create
an
indexed
Record
through
the
ConnectionFactory's
RecordFactory
:end
:start
Create
a
mapped
Record
from
the
ConnectionFactory's
RecordFactory
:end
:start
Invoke
the
given
RecordCreator,
converting
JCA
ResourceExceptions
to
Spring's
DataAccessException
hierarchy
:end
:start
Return
a
RecordFactory
for
the
given
ConnectionFactory
<p>Default
implementation
returns
the
connector's
RecordFactory
if
available,
falling
back
to
a
NotSupportedRecordFactory
placeholder
This
allows
to
invoke
a
RecordCreator
callback
with
a
non-null
RecordFactory
reference
in
any
case
:end
:start
Generic
callback
interface
for
code
that
operates
on
a
CCI
Connection
Allows
to
execute
any
number
of
operations
on
a
single
Connection,
using
any
type
and
number
of
Interaction
<p>This
is
particularly
useful
for
delegating
to
existing
data
access
code
that
expects
a
Connection
to
work
on
and
throws
ResourceException
For
newly
written
code,
it
is
strongly
recommended
to
use
CciTemplate's
more
specific
execute
variants
:end
:start
Gets
called
by
CciTemplateexecute
with
an
active
CCI
Connection
Does
not
need
to
care
about
activating
or
closing
the
Connection,
or
handling
transactions
<p>If
called
without
a
thread-bound
CCI
transaction
(initiated
by
CciLocalTransactionManager),
the
code
will
simply
get
executed
on
the
CCI
Connection
with
its
transactional
semantics
If
CciTemplate
is
configured
to
use
a
JTA-aware
ConnectionFactory,
the
CCI
Connection
and
thus
the
callback
code
will
be
transactional
if
a
JTA
transaction
is
active
<p>Allows
for
returning
a
result
object
created
within
the
callback,
ie
a
domain
object
or
a
collection
of
domain
objects
Note
that
there's
special
support
for
single
step
actions:
see
the
CciTemplateexecute
variants
A
thrown
RuntimeException
is
treated
as
application
exception:
it
gets
propagated
to
the
caller
of
the
template
:end
:start
Generic
callback
interface
for
code
that
operates
on
a
CCI
Interaction
Allows
to
execute
any
number
of
operations
on
a
single
Interaction,
for
example
a
single
execute
call
or
repeated
execute
calls
with
varying
parameters
<p>This
is
particularly
useful
for
delegating
to
existing
data
access
code
that
expects
an
Interaction
to
work
on
and
throws
ResourceException
For
newly
written
code,
it
is
strongly
recommended
to
use
CciTemplate's
more
specific
execute
variants
:end
:start
Gets
called
by
CciTemplateexecute
with
an
active
CCI
Interaction
Does
not
need
to
care
about
activating
or
closing
the
Interaction,
or
handling
transactions
<p>If
called
without
a
thread-bound
CCI
transaction
(initiated
by
CciLocalTransactionManager),
the
code
will
simply
get
executed
on
the
CCI
Interaction
with
its
transactional
semantics
If
CciTemplate
is
configured
to
use
a
JTA-aware
ConnectionFactory,
the
CCI
Interaction
and
thus
the
callback
code
will
be
transactional
if
a
JTA
transaction
is
active
<p>Allows
for
returning
a
result
object
created
within
the
callback,
ie
a
domain
object
or
a
collection
of
domain
objects
Note
that
there's
special
support
for
single
step
actions:
see
the
CciTemplateexecute
variants
A
thrown
RuntimeException
is
treated
as
application
exception:
it
gets
propagated
to
the
caller
of
the
template
:end
:start
Callback
interface
for
creating
a
CCI
Record
instance,
usually
based
on
the
passed-in
CCI
RecordFactory
<p>Used
for
input
Record
creation
in
CciTemplate
Alternatively,
Record
instances
can
be
passed
into
CciTemplate's
corresponding
execute
methods
directly,
either
instantiated
manually
or
created
through
CciTemplate's
Record
factory
methods
<P>Also
used
for
creating
default
output
Records
in
CciTemplate
This
is
useful
when
the
JCA
connector
needs
an
explicit
output
Record
instance,
but
no
output
Records
should
be
passed
into
CciTemplate's
execute
methods
:end
:start
Create
a
CCI
Record
instance,
usually
based
on
the
passed-in
CCI
RecordFactory
<p>For
use
as
<i>input</i>
creator
with
CciTemplate's
execute
methods,
this
method
should
create
a
<i>populated</i>
Record
instance
For
use
as
<i>output</i>
Record
creator,
it
should
return
an
<i>empty</i>
Record
instance
:end
:start
Callback
interface
for
extracting
a
result
object
from
a
CCI
Record
instance
<p>Used
for
output
object
creation
in
CciTemplate
Alternatively,
output
Records
can
also
be
returned
to
client
code
as-is
In
case
of
a
CCI
ResultSet
as
execution
result,
you
will
almost
always
want
to
implement
a
RecordExtractor,
to
be
able
to
read
the
ResultSet
in
a
managed
fashion,
with
the
CCI
Connection
still
open
while
reading
the
ResultSet
<p>Implementations
of
this
interface
perform
the
actual
work
of
extracting
results,
but
don't
need
to
worry
about
exception
handling
ResourceExceptions
will
be
caught
and
handled
correctly
by
the
CciTemplate
class
:end
:start
Process
the
data
in
the
given
Record,
creating
a
corresponding
result
object
:end
:start
Convenient
super
class
for
CCI-based
data
access
objects
<p>Requires
a
javaxresourcecciConnectionFactory
to
be
set,
providing
a
orgspringframeworkjcaccicoreCciTemplate
based
on
it
to
subclasses
through
the
#getCciTemplate()
method
<p>This
base
class
is
mainly
intended
for
CciTemplate
usage
but
can
also
be
used
when
working
with
a
Connection
directly
or
when
using
orgspringframeworkjcacciobject
classes
:end
:start
Set
the
ConnectionFactory
to
be
used
by
this
DAO
:end
:start
Create
a
CciTemplate
for
the
given
ConnectionFactory
Only
invoked
if
populating
the
DAO
with
a
ConnectionFactory
reference!
<p>Can
be
overridden
in
subclasses
to
provide
a
CciTemplate
instance
with
different
configuration,
or
a
custom
CciTemplate
subclass
:end
:start
Return
the
ConnectionFactory
used
by
this
DAO
:end
:start
Set
the
CciTemplate
for
this
DAO
explicitly,
as
an
alternative
to
specifying
a
ConnectionFactory
:end
:start
Return
the
CciTemplate
for
this
DAO,
pre-initialized
with
the
ConnectionFactory
or
set
explicitly
:end
:start
Obtain
a
CciTemplate
derived
from
the
main
template
instance,
inheriting
the
ConnectionFactory
and
other
settings
but
overriding
the
ConnectionSpec
used
for
obtaining
Connections
:end
:start
Get
a
CCI
Connection,
either
from
the
current
transaction
or
a
new
one
:end
:start
Close
the
given
CCI
Connection,
created
via
this
bean's
ConnectionFactory,
if
it
isn't
bound
to
the
thread
:end
:start
CCI
Record
implementation
for
a
COMMAREA,
holding
a
byte
array
:end
:start
Create
a
new
CommAreaRecord
:end
:start
Create
a
new
CommAreaRecord
:end
:start
Exception
thrown
when
a
ResultSet
has
been
accessed
in
an
invalid
fashion
Such
exceptions
always
have
a
javasqlSQLException
root
cause
<p>This
typically
happens
when
an
invalid
ResultSet
column
index
or
name
has
been
specified
:end
:start
Constructor
for
InvalidResultSetAccessException
:end
:start
Base
class
for
EIS
operation
objects
that
work
with
the
CCI
API
Encapsulates
a
CCI
ConnectionFactory
and
a
CCI
InteractionSpec
<p>Works
with
a
CciTemplate
instance
underneath
EIS
operation
objects
are
an
alternative
to
working
with
a
CciTemplate
directly
:end
:start
Set
the
CciTemplate
to
be
used
by
this
operation
Alternatively,
specify
a
CCI
ConnectionFactory
:end
:start
Return
the
CciTemplate
used
by
this
operation
:end
:start
Set
the
CCI
ConnectionFactory
to
be
used
by
this
operation
:end
:start
Set
the
CCI
InteractionSpec
for
this
operation
:end
:start
Return
the
CCI
InteractionSpec
for
this
operation
:end
:start
EIS
operation
object
for
access
to
COMMAREA
records
Subclass
of
the
generic
MappingRecordOperation
class
:end
:start
Create
a
new
MappingCommAreaQuery
:end
:start
Create
a
new
MappingCommAreaQuery
:end
:start
Method
used
to
convert
an
object
into
COMMAREA
bytes
:end
:start
Method
used
to
convert
the
COMMAREA's
bytes
to
an
object
:end
:start
EIS
operation
object
that
expects
mapped
input
and
output
objects,
converting
to
and
from
CCI
Records
<p>Concrete
subclasses
must
implement
the
abstract
createInputRecord(RecordFactory,
Object)
and
extractOutputData(Record)
methods,
to
create
an
input
Record
from
an
object
and
to
convert
an
output
Record
into
an
object,
respectively
:end
:start
Constructor
that
allows
use
as
a
JavaBean
:end
:start
Convenient
constructor
with
ConnectionFactory
and
specifications
(connection
and
interaction)
:end
:start
Set
a
RecordCreator
that
should
be
used
for
creating
default
output
Records
<p>Default
is
none:
CCI's
Interactionexecute
variant
that
returns
an
output
Record
will
be
called
<p>Specify
a
RecordCreator
here
if
you
always
need
to
call
CCI's
Interactionexecute
variant
with
a
passed-in
output
Record
This
RecordCreator
will
then
be
invoked
to
create
a
default
output
Record
instance
:end
:start
Execute
the
interaction
encapsulated
by
this
operation
object
:end
:start
Subclasses
must
implement
this
method
to
generate
an
input
Record
from
an
input
object
passed
into
the
execute
method
:end
:start
Subclasses
must
implement
this
method
to
convert
the
Record
returned
by
CCI
execution
into
a
result
object
for
the
execute
method
:end
:start
Implementation
of
RecordCreator
that
calls
the
enclosing
class's
createInputRecord
method
:end
:start
Implementation
of
RecordExtractor
that
calls
the
enclosing
class's
extractOutputData
method
:end
:start
Implementation
of
RecordCreator
that
calls
the
enclosing
class's
createInputRecord
method
:end
:start
Implementation
of
RecordExtractor
that
calls
the
enclosing
class's
extractOutputData
method
:end
:start
EIS
operation
object
that
accepts
a
passed-in
CCI
input
Record
and
returns
a
corresponding
CCI
output
Record
:end
:start
Constructor
that
allows
use
as
a
JavaBean
:end
:start
Convenient
constructor
with
ConnectionFactory
and
specifications
(connection
and
interaction)
:end
:start
Execute
the
CCI
interaction
encapsulated
by
this
operation
object
<p>This
method
will
call
CCI's
Interactionexecute
variant
that
returns
an
output
Record
:end
:start
Execute
the
CCI
interaction
encapsulated
by
this
operation
object
<p>This
method
will
call
CCI's
Interactionexecute
variant
with
a
passed-in
output
Record
:end
:start
Exception
thrown
when
the
creating
of
a
CCI
Record
failed
because
the
connector
doesn't
support
the
desired
CCI
Record
type
:end
:start
Constructor
for
RecordTypeNotSupportedException
:end
:start
Interface
to
be
implemented
by
any
object
that
wishes
to
be
notified
of
the
BootstrapContext
(typically
determined
by
the
ResourceAdapterApplicationContext)
that
it
runs
in
:end
:start
Set
the
BootstrapContext
that
this
object
runs
in
<p>Invoked
after
population
of
normal
bean
properties
but
before
an
init
callback
like
InitializingBean's
afterPropertiesSet
or
a
custom
init-method
Invoked
after
ApplicationContextAware's
setApplicationContext
:end
:start
orgspringframeworkcontextApplicationContext
implementation
for
a
JCA
ResourceAdapter
Needs
to
be
initialized
with
the
JCA
javaxresourcespiBootstrapContext,
passing
it
on
to
Spring-managed
beans
that
implement
BootstrapContextAware
:end
:start
Create
a
new
ResourceAdapterApplicationContext
for
the
given
BootstrapContext
:end
:start
JCA
15
javaxresourcespiResourceAdapter
implementation
that
loads
a
Spring
orgspringframeworkcontextApplicationContext,
starting
and
stopping
Spring-managed
beans
as
part
of
the
ResourceAdapter's
lifecycle
<p>Ideal
for
application
contexts
that
do
not
need
any
HTTP
entry
points
but
rather
just
consist
of
message
endpoints
and
scheduled
jobs
etc
Beans
in
such
a
context
may
use
application
server
resources
such
as
the
JTA
transaction
manager
and
JNDI-bound
JDBC
DataSources
and
JMS
ConnectionFactory
instances,
and
may
also
register
with
the
platform's
JMX
server
-
all
through
Spring's
standard
transaction
management
and
JNDI
and
JMX
support
facilities
<p>If
the
need
for
scheduling
asynchronous
work
arises,
consider
using
Spring's
orgspringframeworkjcaworkWorkManagerTaskExecutor
as
a
standard
bean
definition,
to
be
injected
into
application
beans
through
dependency
injection
This
WorkManagerTaskExecutor
will
automatically
use
the
JCA
WorkManager
from
the
BootstrapContext
that
has
been
provided
to
this
ResourceAdapter
<p>The
JCA
javaxresourcespiBootstrapContext
may
also
be
accessed
directly,
through
application
components
that
implement
the
BootstrapContextAware
interface
When
deployed
using
this
ResourceAdapter,
the
BootstrapContext
is
guaranteed
to
be
passed
on
to
such
components
<p>This
ResourceAdapter
is
to
be
defined
in
a
"META-INF/raxml"
file
within
a
J2EE
"rar"
deployment
unit
like
as
follows:
<pre
class="code">
&lt;?xml
version="10"
encoding="UTF-8"?&gt;
&lt;connector
xmlns="http://javasuncom/xml/ns/j2ee"
xmlns:xsi="http://wwww3org/2001/XMLSchema-instance"
xsi:schemaLocation="http://javasuncom/xml/ns/j2ee
http://javasuncom/xml/ns/j2ee/connector_1_5xsd"
version="15"&gt;
&lt;vendor-name&gt;Spring
Framework&lt;/vendor-name&gt;
&lt;eis-type&gt;Spring
Connector&lt;/eis-type&gt;
&lt;resourceadapter-version&gt;10&lt;/resourceadapter-version&gt;
&lt;resourceadapter&gt;
&lt;resourceadapter-class&gt;orgspringframeworkjcacontextSpringContextResourceAdapter&lt;/resourceadapter-class&gt;
&lt;config-property&gt;
&lt;config-property-name&gt;ContextConfigLocation&lt;/config-property-name&gt;
&lt;config-property-type&gt;javalangString&lt;/config-property-type&gt;
&lt;config-property-value&gt;META-INF/applicationContextxml&lt;/config-property-value&gt;
&lt;/config-property&gt;
&lt;/resourceadapter&gt;
&lt;/connector&gt;</pre>
Note
that
"META-INF/applicationContextxml"
is
the
default
context
config
location,
so
it
doesn't
have
to
specified
unless
you
intend
to
specify
different/additional
config
files
So
in
the
default
case,
you
may
remove
the
entire
config-property
section
above
<p><b>For
simple
deployment
needs,
all
you
need
to
do
is
the
following:</b>
Package
all
application
classes
into
a
RAR
file
(which
is
just
a
standard
JAR
file
with
a
different
file
extension),
add
all
required
library
jars
into
the
root
of
the
RAR
archive,
add
a
"META-INF/raxml"
deployment
descriptor
as
shown
above
as
well
as
the
corresponding
Spring
XML
bean
definition
file(s)
(typically
"META-INF/applicationContextxml"),
and
drop
the
resulting
RAR
file
into
your
application
server's
deployment
directory!
:end
:start
Any
number
of
these
characters
are
considered
delimiters
between
multiple
context
config
paths
in
a
single
String
value
:end
:start
Set
the
location
of
the
context
configuration
files,
within
the
resource
adapter's
deployment
unit
This
can
be
a
delimited
String
that
consists
of
multiple
resource
location,
separated
by
commas,
semicolons,
whitespace,
or
line
breaks
<p>This
can
be
specified
as
"ContextConfigLocation"
config
property
in
the
raxml
deployment
descriptor
<p>The
default
is
"classpath:META-INF/applicationContextxml"
:end
:start
Return
the
specified
context
configuration
files
:end
:start
Return
a
new
StandardEnvironment
<p>Subclasses
may
override
this
method
in
order
to
supply
a
custom
ConfigurableEnvironment
implementation
:end
:start
This
implementation
loads
a
Spring
ApplicationContext
through
the
#createApplicationContext
template
method
:end
:start
Build
a
Spring
ApplicationContext
for
the
given
JCA
BootstrapContext
<p>The
default
implementation
builds
a
ResourceAdapterApplicationContext
and
delegates
to
#loadBeanDefinitions
for
actually
parsing
the
specified
configuration
files
:end
:start
Load
the
bean
definitions
into
the
given
registry,
based
on
the
specified
configuration
files
:end
:start
This
implementation
closes
the
Spring
ApplicationContext
:end
:start
This
implementation
always
throws
a
NotSupportedException
:end
:start
This
implementation
does
nothing
:end
:start
This
implementation
always
returns
null
:end
:start
Abstract
base
implementation
of
the
JCA
15/16/17
javaxresourcespiendpointMessageEndpointFactory
interface,
providing
transaction
management
capabilities
as
well
as
ClassLoader
exposure
for
endpoint
invocations
:end
:start
Logger
available
to
subclasses
:end
:start
Set
the
the
XA
transaction
manager
to
use
for
wrapping
endpoint
invocations,
enlisting
the
endpoint
resource
in
each
such
transaction
<p>The
passed-in
object
may
be
a
transaction
manager
which
implements
Spring's
orgspringframeworktransactionjtaTransactionFactory
interface,
or
a
plain
javaxtransactionTransactionManager
<p>If
no
transaction
manager
is
specified,
the
endpoint
invocation
will
simply
not
be
wrapped
in
an
XA
transaction
Check
out
your
resource
provider's
ActivationSpec
documentation
for
local
transaction
options
of
your
particular
provider
:end
:start
Set
the
Spring
TransactionFactory
to
use
for
wrapping
endpoint
invocations,
enlisting
the
endpoint
resource
in
each
such
transaction
<p>Alternatively,
specify
an
appropriate
transaction
manager
through
the
#setTransactionManager
"transactionManager"
property
<p>If
no
transaction
factory
is
specified,
the
endpoint
invocation
will
simply
not
be
wrapped
in
an
XA
transaction
Check
out
your
resource
provider's
ActivationSpec
documentation
for
local
transaction
options
of
your
particular
provider
:end
:start
Specify
the
name
of
the
transaction,
if
any
<p>Default
is
none
A
specified
name
will
be
passed
on
to
the
transaction
manager,
allowing
to
identify
the
transaction
in
a
transaction
monitor
:end
:start
Specify
the
transaction
timeout,
if
any
<p>Default
is
-1:
rely
on
the
transaction
manager's
default
timeout
Specify
a
concrete
timeout
to
restrict
the
maximum
duration
of
each
endpoint
invocation
:end
:start
Set
the
name
of
this
message
endpoint
Populated
with
the
bean
name
automatically
when
defined
within
Spring's
bean
factory
:end
:start
Implementation
of
the
JCA
17
#getActivationName()
method,
returning
the
bean
name
as
set
on
this
MessageEndpointFactory
:end
:start
This
implementation
returns
true
if
a
transaction
manager
has
been
specified;
false
otherwise
:end
:start
The
standard
JCA
15
version
of
createEndpoint
<p>This
implementation
delegates
to
#createEndpointInternal(),
initializing
the
endpoint's
XAResource
before
the
endpoint
gets
invoked
:end
:start
The
alternative
JCA
16
version
of
createEndpoint
<p>This
implementation
delegates
to
#createEndpointInternal(),
ignoring
the
specified
timeout
It
is
only
here
for
JCA
16
compliance
:end
:start
Create
the
actual
endpoint
instance,
as
a
subclass
of
the
AbstractMessageEndpoint
inner
class
of
this
factory
:end
:start
Inner
class
for
actual
endpoint
implementations,
based
on
template
method
to
allow
for
any
kind
of
concrete
endpoint
implementation
:end
:start
This
beforeDelivery
implementation
starts
a
transaction,
if
necessary,
and
exposes
the
endpoint
ClassLoader
as
current
thread
context
ClassLoader
<p>Note
that
the
JCA
15
specification
does
not
require
a
ResourceAdapter
to
call
this
method
before
invoking
the
concrete
endpoint
If
this
method
has
not
been
called
(check
#hasBeforeDeliveryBeenCalled()),
the
concrete
endpoint
method
should
call
beforeDelivery
and
its
sibling
#afterDelivery()
explicitly,
as
part
of
its
own
processing
:end
:start
Template
method
for
exposing
the
endpoint's
ClassLoader
(typically
the
ClassLoader
that
the
message
listener
class
has
been
loaded
with)
:end
:start
Return
whether
the
#beforeDelivery
method
of
this
endpoint
has
already
been
called
:end
:start
Callback
method
for
notifying
the
endpoint
base
class
that
the
concrete
endpoint
invocation
led
to
an
exception
<p>To
be
invoked
by
subclasses
in
case
of
the
concrete
endpoint
throwing
an
exception
:end
:start
This
afterDelivery
implementation
resets
the
thread
context
ClassLoader
and
completes
the
transaction,
if
any
<p>Note
that
the
JCA
15
specification
does
not
require
a
ResourceAdapter
to
call
this
method
after
invoking
the
concrete
endpoint
See
the
explanation
in
#beforeDelivery's
javadoc
:end
:start
Inner
class
for
actual
endpoint
implementations,
based
on
template
method
to
allow
for
any
kind
of
concrete
endpoint
implementation
:end
:start
This
beforeDelivery
implementation
starts
a
transaction,
if
necessary,
and
exposes
the
endpoint
ClassLoader
as
current
thread
context
ClassLoader
<p>Note
that
the
JCA
15
specification
does
not
require
a
ResourceAdapter
to
call
this
method
before
invoking
the
concrete
endpoint
If
this
method
has
not
been
called
(check
#hasBeforeDeliveryBeenCalled()),
the
concrete
endpoint
method
should
call
beforeDelivery
and
its
sibling
#afterDelivery()
explicitly,
as
part
of
its
own
processing
:end
:start
Template
method
for
exposing
the
endpoint's
ClassLoader
(typically
the
ClassLoader
that
the
message
listener
class
has
been
loaded
with)
:end
:start
Return
whether
the
#beforeDelivery
method
of
this
endpoint
has
already
been
called
:end
:start
Callback
method
for
notifying
the
endpoint
base
class
that
the
concrete
endpoint
invocation
led
to
an
exception
<p>To
be
invoked
by
subclasses
in
case
of
the
concrete
endpoint
throwing
an
exception
:end
:start
This
afterDelivery
implementation
resets
the
thread
context
ClassLoader
and
completes
the
transaction,
if
any
<p>Note
that
the
JCA
15
specification
does
not
require
a
ResourceAdapter
to
call
this
method
after
invoking
the
concrete
endpoint
See
the
explanation
in
#beforeDelivery's
javadoc
:end
:start
Generic
implementation
of
the
JCA
15
javaxresourcespiendpointMessageEndpointFactory
interface,
providing
transaction
management
capabilities
for
any
kind
of
message
listener
object
(eg
javaxjmsMessageListener
objects
or
javaxresourcecciMessageListener
objects
<p>Uses
AOP
proxies
for
concrete
endpoint
instances,
simply
wrapping
the
specified
message
listener
object
and
exposing
all
of
its
implemented
interfaces
on
the
endpoint
instance
<p>Typically
used
with
Spring's
GenericMessageEndpointManager,
but
not
tied
to
it
As
a
consequence,
this
endpoint
factory
could
also
be
used
with
programmatic
endpoint
management
on
a
native
javaxresourcespiResourceAdapter
instance
:end
:start
Specify
the
message
listener
object
that
the
endpoint
should
expose
(eg
a
javaxjmsMessageListener
objects
or
javaxresourcecciMessageListener
implementation)
:end
:start
Wrap
each
concrete
endpoint
instance
with
an
AOP
proxy,
exposing
the
message
listener's
interfaces
as
well
as
the
endpoint
SPI
through
an
AOP
introduction
:end
:start
Creates
a
concrete
generic
message
endpoint,
internal
to
this
factory
:end
:start
Internal
exception
thrown
when
a
ResourceException
has
been
encountered
during
the
endpoint
invocation
<p>Will
only
be
used
if
the
ResourceAdapter
does
not
invoke
the
endpoint's
beforeDelivery
and
afterDelivery
directly,
leaving
it
up
to
the
concrete
endpoint
to
apply
those
-
and
to
handle
any
ResourceExceptions
thrown
from
them
:end
:start
Internal
exception
thrown
when
a
ResourceException
has
been
encountered
during
the
endpoint
invocation
<p>Will
only
be
used
if
the
ResourceAdapter
does
not
invoke
the
endpoint's
beforeDelivery
and
afterDelivery
directly,
leaving
it
up
to
the
concrete
endpoint
to
apply
those
-
and
to
handle
any
ResourceExceptions
thrown
from
them
:end
:start
Generic
bean
that
manages
JCA
15
message
endpoints
within
a
Spring
application
context,
activating
and
deactivating
the
endpoint
as
part
of
the
application
context's
lifecycle
<p>This
class
is
completely
generic
in
that
it
may
work
with
any
ResourceAdapter,
any
MessageEndpointFactory,
and
any
ActivationSpec
It
can
be
configured
in
standard
bean
style,
for
example
through
Spring's
XML
bean
definition
format,
as
follows:
<pre
class="code">
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointManager"&gt;
&lt;property
name="resourceAdapter"
ref="resourceAdapter"/&gt;
&lt;property
name="messageEndpointFactory"&gt;
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointFactory"&gt;
&lt;property
name="messageListener"
ref="messageListener"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;property
name="activationSpec"&gt;
&lt;bean
class="orgapacheactivemqraActiveMQActivationSpec"&gt;
&lt;property
name="destination"
value="myQueue"/&gt;
&lt;property
name="destinationType"
value="javaxjmsQueue"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
In
this
example,
Spring's
own
GenericMessageEndpointFactory
is
used
to
point
to
a
standard
message
listener
object
that
happens
to
be
supported
by
the
specified
target
ResourceAdapter:
in
this
case,
a
JMS
javaxjmsMessageListener
object
as
supported
by
the
ActiveMQ
message
broker,
defined
as
a
Spring
bean:
<pre
class="code">
&lt;bean
id="messageListener"
class="commyorgmessagingmyMessageListener"&gt;

&lt;/bean&gt;</pre>
The
target
ResourceAdapter
may
be
configured
as
a
local
Spring
bean
as
well
(the
typical
case)
or
obtained
from
JNDI
(eg
on
WebLogic)
For
the
example
above,
a
local
ResourceAdapter
bean
could
be
defined
as
follows
(matching
the
"resourceAdapter"
bean
reference
above):
<pre
class="code">
&lt;bean
id="resourceAdapter"
class="orgspringframeworkjcasupportResourceAdapterFactoryBean"&gt;
&lt;property
name="resourceAdapter"&gt;
&lt;bean
class="orgapacheactivemqraActiveMQResourceAdapter"&gt;
&lt;property
name="serverUrl"
value="tcp://localhost:61616"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;property
name="workManager"&gt;
&lt;bean
class="orgspringframeworkjcaworkSimpleTaskWorkManager"/&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
For
a
different
target
resource,
the
configuration
would
simply
point
to
a
different
ResourceAdapter
and
a
different
ActivationSpec
object
(which
are
both
specific
to
the
resource
provider),
and
possibly
a
different
message
listener
(eg
a
CCI
javaxresourcecciMessageListener
for
a
resource
adapter
which
is
based
on
the
JCA
Common
Client
Interface)
<p>The
asynchronous
execution
strategy
can
be
customized
through
the
"workManager"
property
on
the
ResourceAdapterFactoryBean
(as
shown
above)
Check
out
orgspringframeworkjcaworkSimpleTaskWorkManager's
javadoc
for
its
configuration
options;
alternatively,
any
other
JCA-compliant
WorkManager
can
be
used
(eg
Geronimo's)
<p>Transactional
execution
is
a
responsibility
of
the
concrete
message
endpoint,
as
built
by
the
specified
MessageEndpointFactory
GenericMessageEndpointFactory
supports
XA
transaction
participation
through
its
"transactionManager"
property,
typically
with
a
Spring
orgspringframeworktransactionjtaJtaTransactionManager
or
a
plain
javaxtransactionTransactionManager
implementation
specified
there
<pre
class="code">
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointManager"&gt;
&lt;property
name="resourceAdapter"
ref="resourceAdapter"/&gt;
&lt;property
name="messageEndpointFactory"&gt;
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointFactory"&gt;
&lt;property
name="messageListener"
ref="messageListener"/&gt;
&lt;property
name="transactionManager"
ref="transactionManager"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;property
name="activationSpec"&gt;
&lt;bean
class="orgapacheactivemqraActiveMQActivationSpec"&gt;
&lt;property
name="destination"
value="myQueue"/&gt;
&lt;property
name="destinationType"
value="javaxjmsQueue"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;/bean&gt;
&lt;bean
id="transactionManager"
class="orgspringframeworktransactionjtaJtaTransactionManager"/&gt;</pre>
Alternatively,
check
out
your
resource
provider's
ActivationSpec
object,
which
should
support
local
transactions
through
a
provider-specific
config
flag,
eg
ActiveMQActivationSpec's
"useRAManagedTransaction"
bean
property
<pre
class="code">
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointManager"&gt;
&lt;property
name="resourceAdapter"
ref="resourceAdapter"/&gt;
&lt;property
name="messageEndpointFactory"&gt;
&lt;bean
class="orgspringframeworkjcaendpointGenericMessageEndpointFactory"&gt;
&lt;property
name="messageListener"
ref="messageListener"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;property
name="activationSpec"&gt;
&lt;bean
class="orgapacheactivemqraActiveMQActivationSpec"&gt;
&lt;property
name="destination"
value="myQueue"/&gt;
&lt;property
name="destinationType"
value="javaxjmsQueue"/&gt;
&lt;property
name="useRAManagedTransaction"
value="true"/&gt;
&lt;/bean&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
:end
:start
Set
the
JCA
ResourceAdapter
to
manage
endpoints
for
:end
:start
Return
the
JCA
ResourceAdapter
to
manage
endpoints
for
:end
:start
Set
the
JCA
MessageEndpointFactory
to
activate,
pointing
to
a
MessageListener
object
that
the
endpoints
will
delegate
to
<p>A
MessageEndpointFactory
instance
may
be
shared
across
multiple
endpoints
(ie
multiple
GenericMessageEndpointManager
instances),
with
different
#setActivationSpec
ActivationSpec
objects
applied
:end
:start
Return
the
JCA
MessageEndpointFactory
to
activate
:end
:start
Set
the
JCA
ActivationSpec
to
use
for
activating
the
endpoint
<p>Note
that
this
ActivationSpec
instance
should
not
be
shared
across
multiple
ResourceAdapter
instances
:end
:start
Return
the
JCA
ActivationSpec
to
use
for
activating
the
endpoint
:end
:start
Set
whether
to
auto-start
the
endpoint
activation
after
this
endpoint
manager
has
been
initialized
and
the
context
has
been
refreshed
<p>Default
is
"true"
Turn
this
flag
off
to
defer
the
endpoint
activation
until
an
explicit
call
:end
:start
Return
the
value
for
the
'autoStartup'
property
If
"true",
this
endpoint
manager
will
start
upon
a
ContextRefreshedEvent
:end
:start
Specify
the
phase
in
which
this
endpoint
manager
should
be
started
and
stopped
The
startup
order
proceeds
from
lowest
to
highest,
and
the
shutdown
order
is
the
reverse
of
that
By
default
this
value
is
IntegerMAX_VALUE
meaning
that
this
endpoint
manager
starts
as
late
as
possible
and
stops
as
soon
as
possible
:end
:start
Return
the
phase
in
which
this
endpoint
manager
will
be
started
and
stopped
:end
:start
Prepares
the
message
endpoint,
and
automatically
activates
it
if
the
"autoStartup"
flag
is
set
to
"true"
:end
:start
Activates
the
configured
message
endpoint
:end
:start
Deactivates
the
configured
message
endpoint
:end
:start
Return
whether
the
configured
message
endpoint
is
currently
active
:end
:start
Deactivates
the
message
endpoint,
preparing
it
for
shutdown
:end
:start
orgspringframeworkbeansfactoryFactoryBean
that
creates
a
local
JCA
connection
factory
in
"non-managed"
mode
(as
defined
by
the
Java
Connector
Architecture
specification)
This
is
a
direct
alternative
to
a
orgspringframeworkjndiJndiObjectFactoryBean
definition
that
obtains
a
connection
factory
handle
from
a
J2EE
server's
naming
environment
<p>The
type
of
the
connection
factory
is
dependent
on
the
actual
connector:
the
connector
can
either
expose
its
native
API
(such
as
a
JDBC
javaxsqlDataSource
or
a
JMS
javaxjmsConnectionFactory)
or
follow
the
standard
Common
Client
Interface
(CCI),
as
defined
by
the
JCA
spec
The
exposed
interface
in
the
CCI
case
is
javaxresourcecciConnectionFactory
<p>In
order
to
use
this
FactoryBean,
you
must
specify
the
connector's
#setManagedConnectionFactory
"managedConnectionFactory"
(usually
configured
as
separate
JavaBean),
which
will
be
used
to
create
the
actual
connection
factory
reference
as
exposed
to
the
application
Optionally,
you
can
also
specify
a
#setConnectionManager
"connectionManager",
in
order
to
use
a
custom
ConnectionManager
instead
of
the
connector's
default
<p><b>NOTE:</b>
In
non-managed
mode,
a
connector
is
not
deployed
on
an
application
server,
or
more
specificially
not
interacting
with
an
application
server
Consequently,
it
cannot
use
a
J2EE
server's
system
contracts:
connection
management,
transaction
management,
and
security
management
A
custom
ConnectionManager
implementation
has
to
be
used
for
applying
those
services
in
conjunction
with
a
standalone
transaction
coordinator
etc
<p>The
connector
will
use
a
local
ConnectionManager
(included
in
the
connector)
by
default,
which
cannot
participate
in
global
transactions
due
to
the
lack
of
XA
enlistment
You
need
to
specify
an
XA-capable
ConnectionManager
in
order
to
make
the
connector
interact
with
an
XA
transaction
coordinator
Alternatively,
simply
use
the
native
local
transaction
facilities
of
the
exposed
API
(eg
CCI
local
transactions),
or
use
a
corresponding
implementation
of
Spring's
PlatformTransactionManager
SPI
(eg
orgspringframeworkjcacciconnectionCciLocalTransactionManager)
to
drive
local
transactions
:end
:start
Set
the
JCA
ManagerConnectionFactory
that
should
be
used
to
create
the
desired
connection
factory
<p>The
ManagerConnectionFactory
will
usually
be
set
up
as
separate
bean
(potentially
as
inner
bean),
populated
with
JavaBean
properties:
a
ManagerConnectionFactory
is
encouraged
to
follow
the
JavaBean
pattern
by
the
JCA
specification,
analogous
to
a
JDBC
DataSource
and
a
JDO
PersistenceManagerFactory
<p>Note
that
the
ManagerConnectionFactory
implementation
might
expect
a
reference
to
its
JCA
15
ResourceAdapter,
expressed
through
the
javaxresourcespiResourceAdapterAssociation
interface
Simply
inject
the
corresponding
ResourceAdapter
instance
into
its
"resourceAdapter"
bean
property
in
this
case,
before
passing
the
ManagerConnectionFactory
into
this
LocalConnectionFactoryBean
:end
:start
Set
the
JCA
ConnectionManager
that
should
be
used
to
create
the
desired
connection
factory
<p>A
ConnectionManager
implementation
for
local
usage
is
often
included
with
a
JCA
connector
Such
an
included
ConnectionManager
might
be
set
as
default,
with
no
need
to
explicitly
specify
one
:end
:start
orgspringframeworkbeansfactoryFactoryBean
that
bootstraps
the
specified
JCA
15
javaxresourcespiResourceAdapter,
starting
it
with
a
local
javaxresourcespiBootstrapContext
and
exposing
it
for
bean
references
It
will
also
stop
the
ResourceAdapter
on
context
shutdown
This
corresponds
to
'non-managed'
bootstrap
in
a
local
environment,
according
to
the
JCA
15
specification
<p>This
is
essentially
an
adapter
for
bean-style
bootstrapping
of
a
JCA
ResourceAdapter,
allowing
the
BootstrapContext
or
its
elements
(such
as
the
JCA
WorkManager)
to
be
specified
through
bean
properties
:end
:start
Specify
the
target
JCA
ResourceAdapter
as
class,
to
be
instantiated
with
its
default
configuration
<p>Alternatively,
specify
a
pre-configured
ResourceAdapter
instance
through
the
"resourceAdapter"
property
:end
:start
Specify
the
target
JCA
ResourceAdapter,
passed
in
as
configured
instance
which
hasn't
been
started
yet
This
will
typically
happen
as
an
inner
bean
definition,
configuring
the
ResourceAdapter
instance
through
its
vendor-specific
bean
properties
:end
:start
Specify
the
JCA
BootstrapContext
to
use
for
starting
the
ResourceAdapter
<p>Alternatively,
you
can
specify
the
individual
parts
(such
as
the
JCA
WorkManager)
as
individual
references
:end
:start
Specify
the
JCA
WorkManager
to
use
for
bootstrapping
the
ResourceAdapter
:end
:start
Specify
the
JCA
XATerminator
to
use
for
bootstrapping
the
ResourceAdapter
:end
:start
Builds
the
BootstrapContext
and
starts
the
ResourceAdapter
with
it
:end
:start
Stops
the
ResourceAdapter
:end
:start
Simple
implementation
of
the
JCA
15
javaxresourcespiBootstrapContext
interface,
used
for
bootstrapping
a
JCA
ResourceAdapter
in
a
local
environment
<p>Delegates
to
the
given
WorkManager
and
XATerminator,
if
any
Creates
simple
local
instances
of
javautilTimer
:end
:start
Create
a
new
SimpleBootstrapContext
for
the
given
WorkManager,
with
no
XATerminator
available
:end
:start
Create
a
new
SimpleBootstrapContext
for
the
given
WorkManager
and
XATerminator
:end
:start
Simple
Work
adapter
that
delegates
to
a
given
Runnable
:end
:start
Create
a
new
DelegatingWork
:end
:start
Return
the
wrapped
Runnable
implementation
:end
:start
Delegates
execution
to
the
underlying
Runnable
:end
:start
This
implementation
is
empty,
since
we
expect
the
Runnable
to
terminate
based
on
some
specific
shutdown
signal
:end
:start
Spring
TaskExecutor
adapter
for
the
GlassFish
JCA
WorkManager
Can
be
defined
in
web
applications
to
make
a
TaskExecutor
reference
available,
talking
to
the
GlassFish
WorkManager
(thread
pool)
underneath
<p>This
is
the
GlassFish
equivalent
of
the
CommonJ
orgspringframeworkschedulingcommonjWorkManagerTaskExecutor
adapter
for
WebLogic
and
WebSphere
<p>Note:
On
GlassFish
4
and
higher,
a
orgspringframeworkschedulingconcurrentDefaultManagedTaskExecutor
should
be
preferred,
following
JSR-236
support
in
Java
EE
7
:end
:start
Identify
a
specific
GlassFish
thread
pool
to
talk
to
<p>The
thread
pool
name
matches
the
resource
adapter
name
in
default
RAR
deployment
scenarios
:end
:start
Obtains
GlassFish's
default
thread
pool
:end
:start
Spring
TaskExecutor
adapter
for
the
JBoss
JCA
WorkManager
Can
be
defined
in
web
applications
to
make
a
TaskExecutor
reference
available,
talking
to
the
JBoss
WorkManager
(thread
pool)
underneath
<p>This
is
the
JBoss
equivalent
of
the
CommonJ
orgspringframeworkschedulingcommonjWorkManagerTaskExecutor
adapter
for
WebLogic
and
WebSphere
<p>This
class
does
not
work
on
JBoss
7
or
higher
There
is
no
known
immediate
replacement,
since
JBoss
does
not
want
its
JCA
WorkManager
to
be
exposed
anymore
As
of
JBoss/WildFly
8,
a
orgspringframeworkschedulingconcurrentDefaultManagedTaskExecutor
may
be
used,
following
JSR-236
support
in
Java
EE
7
:end
:start
Identify
a
specific
JBossWorkManagerMBean
to
talk
to,
through
its
JMX
object
name
<p>The
default
MBean
name
is
"jbossjca:service=WorkManager"
:end
:start
Obtains
the
default
JBoss
JCA
WorkManager
through
a
JMX
lookup
for
the
JBossWorkManagerMBean
:end
:start
Utility
class
for
obtaining
the
JBoss
JCA
WorkManager,
typically
for
use
in
web
applications
:end
:start
Obtain
the
default
JBoss
JCA
WorkManager
through
a
JMX
lookup
for
the
default
JBossWorkManagerMBean
:end
:start
Obtain
the
default
JBoss
JCA
WorkManager
through
a
JMX
lookup
for
the
JBossWorkManagerMBean
:end
:start
Simple
JCA
15
javaxresourcespiworkWorkManager
implementation
that
delegates
to
a
Spring
orgspringframeworkcoretaskTaskExecutor
Provides
simple
task
execution
including
start
timeouts,
but
without
support
for
a
JCA
ExecutionContext
(ie
without
support
for
imported
transactions)
<p>Uses
a
orgspringframeworkcoretaskSyncTaskExecutor
for
#doWork
calls
and
a
orgspringframeworkcoretaskSimpleAsyncTaskExecutor
for
#startWork
and
#scheduleWork
calls,
by
default
These
default
task
executors
can
be
overridden
through
configuration
<p><b>NOTE:
This
WorkManager
does
not
provide
thread
pooling
by
default!</b>
Specify
a
orgspringframeworkschedulingconcurrentThreadPoolTaskExecutor
(or
any
other
thread-pooling
TaskExecutor)
as
"asyncTaskExecutor"
in
order
to
achieve
actual
thread
pooling
<p>This
WorkManager
automatically
detects
a
specified
orgspringframeworkcoretaskAsyncTaskExecutor
implementation
and
uses
its
extended
timeout
functionality
where
appropriate
JCA
WorkListeners
are
fully
supported
in
any
case
:end
:start
Specify
the
TaskExecutor
to
use
for
<i>synchronous</i>
work
execution
(ie
#doWork
calls)
<p>Default
is
a
orgspringframeworkcoretaskSyncTaskExecutor
:end
:start
Specify
the
TaskExecutor
to
use
for
<i>asynchronous</i>
work
execution
(ie
#startWork
and
#scheduleWork
calls)
<p>This
will
typically
(but
not
necessarily)
be
an
orgspringframeworkcoretaskAsyncTaskExecutor
implementation
Default
is
a
orgspringframeworkcoretaskSimpleAsyncTaskExecutor
:end
:start
Execute
the
given
Work
on
the
specified
TaskExecutor
:end
:start
orgspringframeworkcoretaskTaskExecutor
implementation
that
delegates
to
a
JCA
15
WorkManager,
implementing
the
javaxresourcespiworkWorkManager
interface
<p>This
is
mainly
intended
for
use
within
a
JCA
ResourceAdapter
implementation,
but
may
also
be
used
in
a
standalone
environment,
delegating
to
a
locally
embedded
WorkManager
implementation
(such
as
Geronimo's)
<p>Also
implements
the
JCA
15
WorkManager
interface
itself,
delegating
all
calls
to
the
target
WorkManager
Hence,
a
caller
can
choose
whether
it
wants
to
talk
to
this
executor
through
the
Spring
TaskExecutor
interface
or
the
JCA
15
WorkManager
interface
<p>This
adapter
is
also
capable
of
obtaining
a
JCA
WorkManager
from
JNDI
This
is
for
example
appropriate
on
the
Geronimo
application
server,
where
WorkManager
GBeans
(eg
Geronimo's
default
"DefaultWorkManager"
GBean)
can
be
linked
into
the
J2EE
environment
through
"gbean-ref"
entries
in
the
geronimo-webxml
deployment
descriptor
<p><b>On
JBoss
and
GlassFish,
obtaining
the
default
JCA
WorkManager
requires
special
lookup
steps</b>
See
the
orgspringframeworkjcaworkjbossJBossWorkManagerTaskExecutor
orgspringframeworkjcaworkglassfishGlassFishWorkManagerTaskExecutor
classes
which
are
the
direct
equivalent
of
this
generic
JCA
adapter
class
:end
:start
Create
a
new
WorkManagerTaskExecutor,
expecting
bean-style
configuration
:end
:start
Create
a
new
WorkManagerTaskExecutor
for
the
given
WorkManager
:end
:start
Specify
the
JCA
WorkManager
instance
to
delegate
to
:end
:start
Set
the
JNDI
name
of
the
JCA
WorkManager
<p>This
can
either
be
a
fully
qualified
JNDI
name,
or
the
JNDI
name
relative
to
the
current
environment
naming
context
if
"resourceRef"
is
set
to
"true"
:end
:start
Specify
the
JCA
BootstrapContext
that
contains
the
WorkManager
to
delegate
to
:end
:start
Set
whether
to
let
#execute
block
until
the
work
has
been
actually
started
<p>Uses
the
JCA
startWork
operation
underneath,
instead
of
the
default
scheduleWork
:end
:start
Set
whether
to
let
#execute
block
until
the
work
has
been
completed
<p>Uses
the
JCA
doWork
operation
underneath,
instead
of
the
default
scheduleWork
:end
:start
Specify
a
JCA
15
WorkListener
to
apply,
if
any
<p>This
shared
WorkListener
instance
will
be
passed
on
to
the
WorkManager
by
all
#execute
calls
on
this
TaskExecutor
:end
:start
Obtain
a
default
WorkManager
to
delegate
to
Called
if
no
explicit
WorkManager
or
WorkManager
JNDI
name
has
been
specified
<p>The
default
implementation
returns
a
SimpleTaskWorkManager
Can
be
overridden
in
subclasses
:end
:start
This
task
executor
prefers
short-lived
work
units
:end
:start
Abstract
base
@Configuration
class
providing
common
structure
for
enabling
Spring's
annotation-driven
transaction
management
capability
:end
:start
Implementation
of
the
orgspringframeworktransactioninterceptorTransactionAttributeSource
interface
for
working
with
transaction
metadata
in
JDK
15+
annotation
format
<p>This
class
reads
Spring's
JDK
15+
Transactional
annotation
and
exposes
corresponding
transaction
attributes
to
Spring's
transaction
infrastructure
Also
supports
JTA
12's
javaxtransactionTransactional
and
EJB3's
javaxejbTransactionAttribute
annotation
(if
present)
This
class
may
also
serve
as
base
class
for
a
custom
TransactionAttributeSource,
or
get
customized
through
TransactionAnnotationParser
strategies
:end
:start
Create
a
default
AnnotationTransactionAttributeSource,
supporting
public
methods
that
carry
the
Transactional
annotation
or
the
EJB3
javaxejbTransactionAttribute
annotation
:end
:start
Create
a
custom
AnnotationTransactionAttributeSource,
supporting
public
methods
that
carry
the
Transactional
annotation
or
the
EJB3
javaxejbTransactionAttribute
annotation
:end
:start
Create
a
custom
AnnotationTransactionAttributeSource
:end
:start
Create
a
custom
AnnotationTransactionAttributeSource
:end
:start
Create
a
custom
AnnotationTransactionAttributeSource
:end
:start
Determine
the
transaction
attribute
for
the
given
method
or
class
<p>This
implementation
delegates
to
configured
TransactionAnnotationParser
TransactionAnnotationParsers
for
parsing
known
annotations
into
Spring's
metadata
attribute
class
Returns
null
if
it's
not
transactional
<p>Can
be
overridden
to
support
custom
annotations
that
carry
transaction
metadata
:end
:start
By
default,
only
public
methods
can
be
made
transactional
:end
:start
Strategy
implementation
for
parsing
EJB3's
javaxejbTransactionAttribute
annotation
:end
:start
Enables
Spring's
annotation-driven
transaction
management
capability,
similar
to
the
support
found
in
Spring's
<tx:*>
XML
namespace
To
be
used
on
@{@link
orgspringframeworkcontextannotationConfiguration
Configuration
classes
as
follows:
<pre
class="code">
&#064;Configuration
&#064;EnableTransactionManagement
public
class
AppConfig
&#064;Bean
public
FooRepository
fooRepository()
//
configure
and
return
a
class
having
&#064;Transactional
methods
return
new
JdbcFooRepository(dataSource());

&#064;Bean
public
DataSource
dataSource()
//
configure
and
return
the
necessary
JDBC
DataSource

&#064;Bean
public
PlatformTransactionManager
txManager()
return
new
DataSourceTransactionManager(dataSource());

</pre>
<p>For
reference,
the
example
above
can
be
compared
to
the
following
Spring
XML
configuration:
<pre
class="code">
<beans>
<tx:annotation-driven/>
<bean
id="fooRepository"
class="comfooJdbcFooRepository">
<constructor-arg
ref="dataSource"/>
</bean>
<bean
id="dataSource"
class="comvendorVendorDataSource"/>
<bean
id="transactionManager"
class="orgsfwkDataSourceTransactionManager">
<constructor-arg
ref="dataSource"/>
</bean>
</beans>
</pre>
In
both
of
the
scenarios
above,
@EnableTransactionManagement
and
<tx:annotation-driven/>
are
responsible
for
registering
the
necessary
Spring
components
that
power
annotation-driven
transaction
management,
such
as
the
TransactionInterceptor
and
the
proxy-
or
AspectJ-based
advice
that
weave
the
interceptor
into
the
call
stack
when
JdbcFooRepository's
@Transactional
methods
are
invoked
<p>A
minor
difference
between
the
two
examples
lies
in
the
naming
of
the
PlatformTransactionManager
bean:
In
the
@Bean
case,
the
name
is
<em>"txManager"</em>
(per
the
name
of
the
method);
in
the
XML
case,
the
name
is
<em>"transactionManager"</em>
The
<tx:annotation-driven/>
is
hard-wired
to
look
for
a
bean
named
"transactionManager"
by
default,
however
@EnableTransactionManagement
is
more
flexible;
it
will
fall
back
to
a
by-type
lookup
for
any
PlatformTransactionManager
bean
in
the
container
Thus
the
name
can
be
"txManager",
"transactionManager",
or
"tm":
it
simply
does
not
matter
<p>For
those
that
wish
to
establish
a
more
direct
relationship
between
@EnableTransactionManagement
and
the
exact
transaction
manager
bean
to
be
used,
the
TransactionManagementConfigurer
callback
interface
may
be
implemented
-
notice
the
implements
clause
and
the
@Override-annotated
method
below:
<pre
class="code">
&#064;Configuration
&#064;EnableTransactionManagement
public
class
AppConfig
implements
TransactionManagementConfigurer
&#064;Bean
public
FooRepository
fooRepository()
//
configure
and
return
a
class
having
&#064;Transactional
methods
return
new
JdbcFooRepository(dataSource());

&#064;Bean
public
DataSource
dataSource()
//
configure
and
return
the
necessary
JDBC
DataSource

&#064;Bean
public
PlatformTransactionManager
txManager()
return
new
DataSourceTransactionManager(dataSource());

&#064;Override
public
PlatformTransactionManager
annotationDrivenTransactionManager()
return
txManager();

</pre>
This
approach
may
be
desirable
simply
because
it
is
more
explicit,
or
it
may
be
necessary
in
order
to
distinguish
between
two
PlatformTransactionManager
beans
present
in
the
same
container
As
the
name
suggests,
the
annotationDrivenTransactionManager()
will
be
the
one
used
for
processing
@Transactional
methods
See
TransactionManagementConfigurer
Javadoc
for
further
details
<p>The
#mode()
attribute
controls
how
advice
is
applied;
if
the
mode
is
AdviceMode#PROXY
(the
default),
then
the
other
attributes
control
the
behavior
of
the
proxying
<p>If
the
#mode
is
set
to
AdviceMode#ASPECTJ,
then
the
#proxyTargetClass()
attribute
is
obsolete
Note
also
that
in
this
case
the
spring-aspects
module
JAR
must
be
present
on
the
classpath
:end
:start
Indicate
whether
subclass-based
(CGLIB)
proxies
are
to
be
created
({@code
true)
as
opposed
to
standard
Java
interface-based
proxies
({@code
false)
The
default
is
false
<strong>Applicable
only
if
#mode()
is
set
to
AdviceMode#PROXY</strong>
<p>Note
that
setting
this
attribute
to
true
will
affect
<em>all</em>
Spring-managed
beans
requiring
proxying,
not
just
those
marked
with
@Transactional
For
example,
other
beans
marked
with
Spring's
@Async
annotation
will
be
upgraded
to
subclass
proxying
at
the
same
time
This
approach
has
no
negative
impact
in
practice
unless
one
is
explicitly
expecting
one
type
of
proxy
vs
another,
eg
in
tests
:end
:start
Indicate
how
transactional
advice
should
be
applied
The
default
is
AdviceMode#PROXY
:end
:start
Indicate
the
ordering
of
the
execution
of
the
transaction
advisor
when
multiple
advices
are
applied
at
a
specific
joinpoint
The
default
is
Ordered#LOWEST_PRECEDENCE
:end
:start
Enumeration
that
represents
transaction
isolation
levels
for
use
with
the
Transactional
annotation,
corresponding
to
the
TransactionDefinition
interface
:end
:start
Use
the
default
isolation
level
of
the
underlying
datastore
All
other
levels
correspond
to
the
JDBC
isolation
levels
:end
:start
A
constant
indicating
that
dirty
reads,
non-repeatable
reads
and
phantom
reads
can
occur
This
level
allows
a
row
changed
by
one
transaction
to
be
read
by
another
transaction
before
any
changes
in
that
row
have
been
committed
(a
"dirty
read")
If
any
of
the
changes
are
rolled
back,
the
second
transaction
will
have
retrieved
an
invalid
row
:end
:start
A
constant
indicating
that
dirty
reads
are
prevented;
non-repeatable
reads
and
phantom
reads
can
occur
This
level
only
prohibits
a
transaction
from
reading
a
row
with
uncommitted
changes
in
it
:end
:start
A
constant
indicating
that
dirty
reads
and
non-repeatable
reads
are
prevented;
phantom
reads
can
occur
This
level
prohibits
a
transaction
from
reading
a
row
with
uncommitted
changes
in
it,
and
it
also
prohibits
the
situation
where
one
transaction
reads
a
row,
a
second
transaction
alters
the
row,
and
the
first
transaction
rereads
the
row,
getting
different
values
the
second
time
(a
"non-repeatable
read")
:end
:start
A
constant
indicating
that
dirty
reads,
non-repeatable
reads
and
phantom
reads
are
prevented
This
level
includes
the
prohibitions
in
ISOLATION_REPEATABLE_READ
and
further
prohibits
the
situation
where
one
transaction
reads
all
rows
that
satisfy
a
WHERE
condition,
a
second
transaction
inserts
a
row
that
satisfies
that
WHERE
condition,
and
the
first
transaction
rereads
for
the
same
condition,
retrieving
the
additional
"phantom"
row
in
the
second
read
:end
:start
Strategy
implementation
for
parsing
JTA
12's
javaxtransactionTransactional
annotation
:end
:start
Enumeration
that
represents
transaction
propagation
behaviors
for
use
with
the
Transactional
annotation,
corresponding
to
the
TransactionDefinition
interface
:end
:start
Support
a
current
transaction,
create
a
new
one
if
none
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
<p>This
is
the
default
setting
of
a
transaction
annotation
:end
:start
Support
a
current
transaction,
execute
non-transactionally
if
none
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
<p>Note:
For
transaction
managers
with
transaction
synchronization,
PROPAGATION_SUPPORTS
is
slightly
different
from
no
transaction
at
all,
as
it
defines
a
transaction
scope
that
synchronization
will
apply
for
As
a
consequence,
the
same
resources
(JDBC
Connection,
Hibernate
Session,
etc)
will
be
shared
for
the
entire
specified
scope
Note
that
this
depends
on
the
actual
synchronization
configuration
of
the
transaction
manager
:end
:start
Support
a
current
transaction,
throw
an
exception
if
none
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
:end
:start
Create
a
new
transaction,
suspend
the
current
transaction
if
one
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
<p>Note:
Actual
transaction
suspension
will
not
work
on
out-of-the-box
on
all
transaction
managers
This
in
particular
applies
to
JtaTransactionManager,
which
requires
the
javaxtransactionTransactionManager
to
be
made
available
it
to
it
(which
is
server-specific
in
standard
J2EE)
:end
:start
Execute
non-transactionally,
suspend
the
current
transaction
if
one
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
<p>Note:
Actual
transaction
suspension
will
not
work
on
out-of-the-box
on
all
transaction
managers
This
in
particular
applies
to
JtaTransactionManager,
which
requires
the
javaxtransactionTransactionManager
to
be
made
available
it
to
it
(which
is
server-specific
in
standard
J2EE)
:end
:start
Execute
non-transactionally,
throw
an
exception
if
a
transaction
exists
Analogous
to
EJB
transaction
attribute
of
the
same
name
:end
:start
Execute
within
a
nested
transaction
if
a
current
transaction
exists,
behave
like
PROPAGATION_REQUIRED
else
There
is
no
analogous
feature
in
EJB
<p>Note:
Actual
creation
of
a
nested
transaction
will
only
work
on
specific
transaction
managers
Out
of
the
box,
this
only
applies
to
the
JDBC
DataSourceTransactionManager
when
working
on
a
JDBC
30
driver
Some
JTA
providers
might
support
nested
transactions
as
well
:end
:start
@Configuration
class
that
registers
the
Spring
infrastructure
beans
necessary
to
enable
proxy-based
annotation-driven
transaction
management
:end
:start
Strategy
implementation
for
parsing
Spring's
Transactional
annotation
:end
:start
Describes
transaction
attributes
on
a
method
or
class
<p>This
annotation
type
is
generally
directly
comparable
to
Spring's
orgspringframeworktransactioninterceptorRuleBasedTransactionAttribute
class,
and
in
fact
AnnotationTransactionAttributeSource
will
directly
convert
the
data
to
the
latter
class,
so
that
Spring's
transaction
support
code
does
not
have
to
know
about
annotations
If
no
rules
are
relevant
to
the
exception,
it
will
be
treated
like
orgspringframeworktransactioninterceptorDefaultTransactionAttribute
(rolling
back
on
runtime
exceptions)
<p>For
specific
information
about
the
semantics
of
this
annotation's
attributes,
consider
the
orgspringframeworktransactionTransactionDefinition
and
orgspringframeworktransactioninterceptorTransactionAttribute
javadocs
:end
:start
A
qualifier
value
for
the
specified
transaction
<p>May
be
used
to
determine
the
target
transaction
manager,
matching
the
qualifier
value
(or
the
bean
name)
of
a
specific
orgspringframeworktransactionPlatformTransactionManager
bean
definition
:end
:start
The
transaction
propagation
type
Defaults
to
Propagation#REQUIRED
:end
:start
The
transaction
isolation
level
Defaults
to
Isolation#DEFAULT
:end
:start
The
timeout
for
this
transaction
Defaults
to
the
default
timeout
of
the
underlying
transaction
system
:end
:start
true
if
the
transaction
is
read-only
Defaults
to
false
<p>This
just
serves
as
a
hint
for
the
actual
transaction
subsystem;
it
will
<i>not
necessarily</i>
cause
failure
of
write
access
attempts
A
transaction
manager
which
cannot
interpret
the
read-only
hint
will
<i>not</i>
throw
an
exception
when
asked
for
a
read-only
transaction
:end
:start
Defines
zero
(0)
or
more
exception
Class
classes,
which
must
be
a
subclass
of
Throwable,
indicating
which
exception
types
must
cause
a
transaction
rollback
<p>This
is
the
preferred
way
to
construct
a
rollback
rule,
matching
the
exception
class
and
subclasses
<p>Similar
to
orgspringframeworktransactioninterceptorRollbackRuleAttribute#RollbackRuleAttribute(Class
clazz)
:end
:start
Defines
zero
(0)
or
more
exception
names
(for
exceptions
which
must
be
a
subclass
of
Throwable),
indicating
which
exception
types
must
cause
a
transaction
rollback
<p>This
can
be
a
substring,
with
no
wildcard
support
at
present
A
value
of
"ServletException"
would
match
javaxservletServletException
and
subclasses,
for
example
<p><b>NB:
</b>Consider
carefully
how
specific
the
pattern
is,
and
whether
to
include
package
information
(which
isn't
mandatory)
For
example,
"Exception"
will
match
nearly
anything,
and
will
probably
hide
other
rules
"javalangException"
would
be
correct
if
"Exception"
was
meant
to
define
a
rule
for
all
checked
exceptions
With
more
unusual
Exception
names
such
as
"BaseBusinessException"
there
is
no
need
to
use
a
FQN
<p>Similar
to
orgspringframeworktransactioninterceptorRollbackRuleAttribute#RollbackRuleAttribute(String
exceptionName)
:end
:start
Defines
zero
(0)
or
more
exception
Class
Classes,
which
must
be
a
subclass
of
Throwable,
indicating
which
exception
types
must
<b>not</b>
cause
a
transaction
rollback
<p>This
is
the
preferred
way
to
construct
a
rollback
rule,
matching
the
exception
class
and
subclasses
<p>Similar
to
orgspringframeworktransactioninterceptorNoRollbackRuleAttribute#NoRollbackRuleAttribute(Class
clazz)
:end
:start
Defines
zero
(0)
or
more
exception
names
(for
exceptions
which
must
be
a
subclass
of
Throwable)
indicating
which
exception
types
must
<b>not</b>
cause
a
transaction
rollback
<p>See
the
description
of
#rollbackForClassName()
for
more
info
on
how
the
specified
names
are
treated
<p>Similar
to
orgspringframeworktransactioninterceptorNoRollbackRuleAttribute#NoRollbackRuleAttribute(String
exceptionName)
:end
:start
Strategy
interface
for
parsing
known
transaction
annotation
types
AnnotationTransactionAttributeSource
delegates
to
such
parsers
for
supporting
specific
annotation
types
such
as
Spring's
own
Transactional,
JTA
12's
javaxtransactionTransactional
or
EJB3's
javaxejbTransactionAttribute
:end
:start
Parse
the
transaction
attribute
for
the
given
method
or
class,
based
on
a
known
annotation
type
<p>This
essentially
parses
a
known
transaction
annotation
into
Spring's
metadata
attribute
class
Returns
null
if
the
method/class
is
not
transactional
:end
:start
Selects
which
implementation
of
AbstractTransactionManagementConfiguration
should
be
used
based
on
the
value
of
EnableTransactionManagement#mode
on
the
importing
@Configuration
class
:end
:start
:end
:start
Interface
to
be
implemented
by
@{@link
orgspringframeworkcontextannotationConfiguration
Configuration
classes
annotated
with
@{@link
EnableTransactionManagement
that
wish
or
need
to
specify
explicitly
the
PlatformTransactionManager
bean
to
be
used
for
annotation-driven
transaction
management,
as
opposed
to
the
default
approach
of
a
by-type
lookup
One
reason
this
might
be
necessary
is
if
there
are
two
PlatformTransactionManager
beans
present
in
the
container
<p>See
@{@link
EnableTransactionManagement
for
general
examples
and
context;
see
#annotationDrivenTransactionManager()
for
detailed
instructions
<p>Note
that
in
by-type
lookup
disambiguation
cases,
an
alternative
approach
to
implementing
this
interface
is
to
simply
mark
one
of
the
offending
PlatformTransactionManager
@Bean
methods
as
@{@link
orgspringframeworkcontextannotationPrimary
Primary
:end
:start
Return
the
transaction
manager
bean
to
use
for
annotation-driven
database
transaction
management,
ie
when
processing
@Transactional
methods
<p>There
are
two
basic
approaches
to
implementing
this
method:
<h3>1
Implement
the
method
and
annotate
it
with
@Bean</h3>
In
this
case,
the
implementing
@Configuration
class
implements
this
method,
marks
it
with
@Bean
and
configures
and
returns
the
transaction
manager
directly
within
the
method
body:
<pre
class="code">
&#064;Bean
&#064;Override
public
PlatformTransactionManager
annotationDrivenTransactionManager()
return
new
DataSourceTransactionManager(dataSource());
</pre>
<h3>2
Implement
the
method
without
@Bean
and
delegate
to
another
existing
@Bean
method</h3>
<pre
class="code">
&#064;Bean
public
PlatformTransactionManager
txManager()
return
new
DataSourceTransactionManager(dataSource());

&#064;Override
public
PlatformTransactionManager
annotationDrivenTransactionManager()
return
txManager();
//
reference
the
existing
@Bean
method
above
</pre>
If
taking
approach
#2,
be
sure
that
<em>only
one</em>
of
the
methods
is
marked
with
@Bean!
<p>In
either
scenario
#1
or
#2,
it
is
important
that
the
PlatformTransactionManager
instance
is
managed
as
a
Spring
bean
within
the
container
as
all
PlatformTransactionManager
implementations
take
advantage
of
Spring
lifecycle
callbacks
such
as
InitializingBean
and
BeanFactoryAware
:end
:start
Exception
thrown
when
a
transaction
can't
be
created
using
an
underlying
transaction
API
such
as
JTA
:end
:start
Constructor
for
CannotCreateTransactionException
:end
:start
Constructor
for
CannotCreateTransactionException
:end
:start
Parser
for
the
&lt;tx:jta-transaction-manager/&gt;
element,
autodetecting
BEA
WebLogic
and
IBM
WebSphere
:end
:start
The
bean
name
of
the
internally
managed
transaction
advisor
(used
when
mode
==
PROXY)
:end
:start
The
bean
name
of
the
internally
managed
transaction
aspect
(used
when
mode
==
ASPECTJ)
:end
:start
The
class
name
of
the
AspectJ
transaction
management
aspect
:end
:start
The
name
of
the
AspectJ
transaction
management
@{@code
Configuration
class
:end
:start
NamespaceHandler
allowing
for
the
configuration
of
declarative
transaction
management
using
either
XML
or
using
annotations
<p>This
namespace
handler
is
the
central
piece
of
functionality
in
the
Spring
transaction
management
facilities
and
offers
two
approaches
to
declaratively
manage
transactions
<p>One
approach
uses
transaction
semantics
defined
in
XML
using
the
&lt;tx:advice&gt;
elements,
the
other
uses
annotations
in
combination
with
the
&lt;tx:annotation-driven&gt;
element
Both
approached
are
detailed
to
great
extent
in
the
Spring
reference
manual
:end
:start
Exception
that
represents
a
transaction
failure
caused
by
a
heuristic
decision
on
the
side
of
the
transaction
coordinator
:end
:start
Values
for
the
outcome
state
of
a
heuristically
completed
transaction
:end
:start
Constructor
for
HeuristicCompletionException
:end
:start
Return
the
outcome
state
of
the
transaction
state,
as
one
of
the
constants
in
this
class
:end
:start
Exception
thrown
when
the
existence
or
non-existence
of
a
transaction
amounts
to
an
illegal
state
according
to
the
transaction
propagation
behavior
that
applies
:end
:start
Constructor
for
IllegalTransactionStateException
:end
:start
Constructor
for
IllegalTransactionStateException
:end
:start
Abstract
implementation
of
TransactionAttributeSource
that
caches
attributes
for
methods
and
implements
a
fallback
policy:
1
specific
target
method;
2
target
class;
3
declaring
method;
4
declaring
class/interface
<p>Defaults
to
using
the
target
class's
transaction
attribute
if
none
is
associated
with
the
target
method
Any
transaction
attribute
associated
with
the
target
method
completely
overrides
a
class
transaction
attribute
If
none
found
on
the
target
class,
the
interface
that
the
invoked
method
has
been
called
through
(in
case
of
a
JDK
proxy)
will
be
checked
<p>This
implementation
caches
attributes
by
method
after
they
are
first
used
If
it
is
ever
desirable
to
allow
dynamic
changing
of
transaction
attributes
(which
is
very
unlikely),
caching
could
be
made
configurable
Caching
is
desirable
because
of
the
cost
of
evaluating
rollback
rules
:end
:start
Logger
available
to
subclasses
<p>As
this
base
class
is
not
marked
Serializable,
the
logger
will
be
recreated
after
serialization
-
provided
that
the
concrete
subclass
is
Serializable
:end
:start
Determine
the
transaction
attribute
for
this
method
invocation
<p>Defaults
to
the
class's
transaction
attribute
if
no
method
attribute
is
found
:end
:start
Determine
a
cache
key
for
the
given
method
and
target
class
<p>Must
not
produce
same
key
for
overloaded
methods
Must
produce
same
key
for
different
instances
of
the
same
method
:end
:start
Subclasses
need
to
implement
this
to
return
the
transaction
attribute
for
the
given
method,
if
any
:end
:start
Subclasses
need
to
implement
this
to
return
the
transaction
attribute
for
the
given
class,
if
any
:end
:start
Should
only
public
methods
be
allowed
to
have
transactional
semantics?
<p>The
default
implementation
returns
false
:end
:start
Advisor
driven
by
a
TransactionAttributeSource,
used
to
include
a
transaction
advice
bean
for
methods
that
are
transactional
:end
:start
Set
the
transaction
attribute
source
which
is
used
to
find
transaction
attributes
This
should
usually
be
identical
to
the
source
reference
set
on
the
transaction
interceptor
itself
:end
:start
Set
the
ClassFilter
to
use
for
this
pointcut
Default
is
ClassFilter#TRUE
:end
:start
Composite
TransactionAttributeSource
implementation
that
iterates
over
a
given
array
of
TransactionAttributeSource
instances
:end
:start
Create
a
new
CompositeTransactionAttributeSource
for
the
given
sources
:end
:start
Return
the
TransactionAttributeSource
instances
that
this
CompositeTransactionAttributeSource
combines
:end
:start
Transaction
attribute
that
takes
the
EJB
approach
to
rolling
back
on
runtime,
but
not
checked,
exceptions
:end
:start
Create
a
new
DefaultTransactionAttribute,
with
default
settings
Can
be
modified
through
bean
property
setters
:end
:start
Copy
constructor
Definition
can
be
modified
through
bean
property
setters
:end
:start
Create
a
new
DefaultTransactionAttribute
with
the
the
given
propagation
behavior
Can
be
modified
through
bean
property
setters
:end
:start
Associate
a
qualifier
value
with
this
transaction
attribute
<p>This
may
be
used
for
choosing
a
corresponding
transaction
manager
to
process
this
specific
transaction
:end
:start
Return
a
qualifier
value
associated
with
this
transaction
attribute
:end
:start
The
default
behavior
is
as
with
EJB:
rollback
on
unchecked
exception
Additionally
attempt
to
rollback
on
Error
<p>This
is
consistent
with
TransactionTemplate's
default
behavior
:end
:start
Return
an
identifying
description
for
this
transaction
attribute
<p>Available
to
subclasses,
for
inclusion
in
their
toString()
result
:end
:start
TransactionAttribute
implementation
that
delegates
all
calls
to
a
given
target
TransactionAttribute
instance
Abstract
because
it
is
meant
to
be
subclassed,
with
subclasses
overriding
specific
methods
that
are
not
supposed
to
simply
delegate
to
the
target
instance
:end
:start
Create
a
DelegatingTransactionAttribute
for
the
given
target
attribute
:end
:start
Very
simple
implementation
of
TransactionAttributeSource
which
will
always
return
the
same
TransactionAttribute
for
all
methods
fed
to
it
The
TransactionAttribute
may
be
specified,
but
will
otherwise
default
to
PROPAGATION_REQUIRED
This
may
be
used
in
the
cases
where
you
want
to
use
the
same
transaction
attribute
with
all
methods
being
handled
by
a
transaction
interceptor
:end
:start
Allows
a
transaction
attribute
to
be
specified,
using
the
String
form,
for
example,
"PROPAGATION_REQUIRED"
:end
:start
Simple
TransactionAttributeSource
implementation
that
allows
attributes
to
be
stored
per
method
in
a
Map
:end
:start
Logger
available
to
subclasses
:end
:start
Set
a
name/attribute
map,
consisting
of
"FQCNmethod"
method
names
(eg
"commycompanymycodeMyClassmyMethod")
and
TransactionAttribute
instances
(or
Strings
to
be
converted
to
TransactionAttribute
instances)
<p>Intended
for
configuration
via
setter
injection,
typically
within
a
Spring
bean
factory
Relies
on
#afterPropertiesSet()
being
called
afterwards
:end
:start
Eagerly
initializes
the
specified
#setMethodMap(javautilMap)
"methodMap",
if
any
:end
:start
Initialize
the
specified
#setMethodMap(javautilMap)
"methodMap",
if
any
:end
:start
Add
an
attribute
for
a
transactional
method
<p>Method
names
can
end
or
start
with
"*"
for
matching
multiple
methods
:end
:start
Add
an
attribute
for
a
transactional
method
Method
names
can
end
or
start
with
"*"
for
matching
multiple
methods
:end
:start
Add
an
attribute
for
a
transactional
method
:end
:start
Return
if
the
given
method
name
matches
the
mapped
name
<p>The
default
implementation
checks
for
"xxx*",
"*xxx"
and
"*xxx*"
matches,
as
well
as
direct
equality
:end
:start
Simple
TransactionAttributeSource
implementation
that
allows
attributes
to
be
matched
by
registered
name
:end
:start
Logger
available
to
subclasses
<p>Static
for
optimal
serialization
:end
:start
Set
a
name/attribute
map,
consisting
of
method
names
(eg
"myMethod")
and
TransactionAttribute
instances
(or
Strings
to
be
converted
to
TransactionAttribute
instances)
:end
:start
Parses
the
given
properties
into
a
name/attribute
map
Expects
method
names
as
keys
and
String
attributes
definitions
as
values,
parsable
into
TransactionAttribute
instances
via
TransactionAttributeEditor
:end
:start
Add
an
attribute
for
a
transactional
method
<p>Method
names
can
be
exact
matches,
or
of
the
pattern
"xxx*",
"*xxx"
or
"*xxx*"
for
matching
multiple
methods
:end
:start
Return
if
the
given
method
name
matches
the
mapped
name
<p>The
default
implementation
checks
for
"xxx*",
"*xxx"
and
"*xxx*"
matches,
as
well
as
direct
equality
Can
be
overridden
in
subclasses
:end
:start
Tag
subclass
of
RollbackRuleAttribute
that
has
the
opposite
behavior
to
the
RollbackRuleAttribute
superclass
:end
:start
Create
a
new
instance
of
the
NoRollbackRuleAttribute
class
for
the
supplied
Throwable
class
:end
:start
Create
a
new
instance
of
the
NoRollbackRuleAttribute
class
for
the
supplied
exceptionName
:end
:start
Rule
determining
whether
or
not
a
given
exception
(and
any
subclasses)
should
cause
a
rollback
<p>Multiple
such
rules
can
be
applied
to
determine
whether
a
transaction
should
commit
or
rollback
after
an
exception
has
been
thrown
:end
:start
The
RollbackRuleAttribute
rollback
rule
for
RuntimeException
RuntimeExceptions
:end
:start
Create
a
new
instance
of
the
RollbackRuleAttribute
class
<p>This
is
the
preferred
way
to
construct
a
rollback
rule
that
matches
the
supplied
Exception
class
(and
subclasses)
:end
:start
Create
a
new
instance
of
the
RollbackRuleAttribute
class
for
the
given
exceptionName
<p>This
can
be
a
substring,
with
no
wildcard
support
at
present
A
value
of
"ServletException"
would
match
javaxservletServletException
and
subclasses,
for
example
<p><b>NB:</b>
Consider
carefully
how
specific
the
pattern
is,
and
whether
to
include
package
information
(which
is
not
mandatory)
For
example,
"Exception"
will
match
nearly
anything,
and
will
probably
hide
other
rules
"javalangException"
would
be
correct
if
"Exception"
was
meant
to
define
a
rule
for
all
checked
exceptions
With
more
unusual
exception
names
such
as
"BaseBusinessException"
there's
no
need
to
use
a
fully
package-qualified
name
:end
:start
Return
the
pattern
for
the
exception
name
:end
:start
Return
the
depth
of
the
superclass
matching
<p>{@code
0
means
ex
matches
exactly
Returns
-1
if
there
is
no
match
Otherwise,
returns
depth
with
the
lowest
depth
winning
:end
:start
TransactionAttribute
implementation
that
works
out
whether
a
given
exception
should
cause
transaction
rollback
by
applying
a
number
of
rollback
rules,
both
positive
and
negative
If
no
rules
are
relevant
to
the
exception,
it
behaves
like
DefaultTransactionAttribute
(rolling
back
on
runtime
exceptions)
<p>{@link
TransactionAttributeEditor
creates
objects
of
this
class
:end
:start
Prefix
for
rollback-on-exception
rules
in
description
strings
:end
:start
Prefix
for
commit-on-exception
rules
in
description
strings
:end
:start
Create
a
new
RuleBasedTransactionAttribute,
with
default
settings
Can
be
modified
through
bean
property
setters
:end
:start
Copy
constructor
Definition
can
be
modified
through
bean
property
setters
:end
:start
Create
a
new
DefaultTransactionAttribute
with
the
the
given
propagation
behavior
Can
be
modified
through
bean
property
setters
:end
:start
Set
the
list
of
RollbackRuleAttribute
objects
(and/or
NoRollbackRuleAttribute
objects)
to
apply
:end
:start
Return
the
list
of
RollbackRuleAttribute
objects
(never
null)
:end
:start
Winning
rule
is
the
shallowest
rule
(that
is,
the
closest
in
the
inheritance
hierarchy
to
the
exception)
If
no
rule
applies
(-1),
return
false
:end
:start
Base
class
for
transactional
aspects,
such
as
the
TransactionInterceptor
or
an
AspectJ
aspect
<p>This
enables
the
underlying
Spring
transaction
infrastructure
to
be
used
easily
to
implement
an
aspect
for
any
aspect
system
<p>Subclasses
are
responsible
for
calling
methods
in
this
class
in
the
correct
order
<p>If
no
transaction
name
has
been
specified
in
the
TransactionAttribute,
the
exposed
name
will
be
the
fully-qualified
class
name
+
""
+
method
name
(by
default)
<p>Uses
the
<b>Strategy</b>
design
pattern
A
PlatformTransactionManager
implementation
will
perform
the
actual
transaction
management,
and
a
TransactionAttributeSource
is
used
for
determining
transaction
definitions
<p>A
transaction
aspect
is
serializable
if
its
PlatformTransactionManager
and
TransactionAttributeSource
are
serializable
:end
:start
Subclasses
can
use
this
to
return
the
current
TransactionInfo
Only
subclasses
that
cannot
handle
all
operations
in
one
method,
such
as
an
AspectJ
aspect
involving
distinct
before
and
after
advice,
need
to
use
this
mechanism
to
get
at
the
current
TransactionInfo
An
around
advice
such
as
an
AOP
Alliance
MethodInterceptor
can
hold
a
reference
to
the
TransactionInfo
throughout
the
aspect
method
<p>A
TransactionInfo
will
be
returned
even
if
no
transaction
was
created
The
TransactionInfohasTransaction()
method
can
be
used
to
query
this
<p>To
find
out
about
specific
transaction
characteristics,
consider
using
TransactionSynchronizationManager's
isSynchronizationActive()
and/or
isActualTransactionActive()
methods
:end
:start
Return
the
transaction
status
of
the
current
method
invocation
Mainly
intended
for
code
that
wants
to
set
the
current
transaction
rollback-only
but
not
throw
an
application
exception
:end
:start
Specify
the
name
of
the
default
transaction
manager
bean
:end
:start
Return
the
name
of
the
default
transaction
manager
bean
:end
:start
Specify
the
target
transaction
manager
:end
:start
Return
the
transaction
manager,
if
specified
:end
:start
Set
properties
with
method
names
as
keys
and
transaction
attribute
descriptors
(parsed
via
TransactionAttributeEditor)
as
values:
eg
key
=
"myMethod",
value
=
"PROPAGATION_REQUIRED,readOnly"
<p>Note:
Method
names
are
always
applied
to
the
target
class,
no
matter
if
defined
in
an
interface
or
the
class
itself
<p>Internally,
a
NameMatchTransactionAttributeSource
will
be
created
from
the
given
properties
:end
:start
Set
multiple
transaction
attribute
sources
which
are
used
to
find
transaction
attributes
Will
build
a
CompositeTransactionAttributeSource
for
the
given
sources
:end
:start
Set
the
transaction
attribute
source
which
is
used
to
find
transaction
attributes
If
specifying
a
String
property
value,
a
PropertyEditor
will
create
a
MethodMapTransactionAttributeSource
from
the
value
:end
:start
Return
the
transaction
attribute
source
:end
:start
Set
the
BeanFactory
to
use
for
retrieving
PlatformTransactionManager
beans
:end
:start
Return
the
BeanFactory
to
use
for
retrieving
PlatformTransactionManager
beans
:end
:start
Check
that
required
properties
were
set
:end
:start
General
delegate
for
around-advice-based
subclasses,
delegating
to
several
other
template
methods
on
this
class
Able
to
handle
CallbackPreferringPlatformTransactionManager
as
well
as
regular
PlatformTransactionManager
implementations
:end
:start
Determine
the
specific
transaction
manager
to
use
for
the
given
transaction
:end
:start
Convenience
method
to
return
a
String
representation
of
this
Method
for
use
in
logging
Can
be
overridden
in
subclasses
to
provide
a
different
identifier
for
the
given
method
:end
:start
Convenience
method
to
return
a
String
representation
of
this
Method
for
use
in
logging
Can
be
overridden
in
subclasses
to
provide
a
different
identifier
for
the
given
method
:end
:start
Create
a
transaction
if
necessary,
based
on
the
given
method
and
class
<p>Performs
a
default
TransactionAttribute
lookup
for
the
given
method
:end
:start
Create
a
transaction
if
necessary
based
on
the
given
TransactionAttribute
<p>Allows
callers
to
perform
custom
TransactionAttribute
lookups
through
the
TransactionAttributeSource
:end
:start
Prepare
a
TransactionInfo
for
the
given
attribute
and
status
object
:end
:start
Execute
after
successful
completion
of
call,
but
not
after
an
exception
was
handled
Do
nothing
if
we
didn't
create
a
transaction
:end
:start
Handle
a
throwable,
completing
the
transaction
We
may
commit
or
roll
back,
depending
on
the
configuration
:end
:start
Reset
the
TransactionInfo
ThreadLocal
<p>Call
this
in
all
cases:
exception
or
normal
return!
:end
:start
Opaque
object
used
to
hold
Transaction
information
Subclasses
must
pass
it
back
to
methods
on
this
class,
but
not
see
its
internals
:end
:start
Return
a
String
representation
of
this
joinpoint
(usually
a
Method
call)
for
use
in
logging
:end
:start
Return
whether
a
transaction
was
created
by
this
aspect,
or
whether
we
just
have
a
placeholder
to
keep
ThreadLocal
stack
integrity
:end
:start
Simple
callback
interface
for
proceeding
with
the
target
invocation
Concrete
interceptors/aspects
adapt
this
to
their
invocation
mechanism
:end
:start
Opaque
object
used
to
hold
Transaction
information
Subclasses
must
pass
it
back
to
methods
on
this
class,
but
not
see
its
internals
:end
:start
Return
a
String
representation
of
this
joinpoint
(usually
a
Method
call)
for
use
in
logging
:end
:start
Return
whether
a
transaction
was
created
by
this
aspect,
or
whether
we
just
have
a
placeholder
to
keep
ThreadLocal
stack
integrity
:end
:start
Simple
callback
interface
for
proceeding
with
the
target
invocation
Concrete
interceptors/aspects
adapt
this
to
their
invocation
mechanism
:end
:start
This
interface
adds
a
rollbackOn
specification
to
TransactionDefinition
As
custom
rollbackOn
is
only
possible
with
AOP,
this
class
resides
in
the
AOP
transaction
package
:end
:start
Return
a
qualifier
value
associated
with
this
transaction
attribute
<p>This
may
be
used
for
choosing
a
corresponding
transaction
manager
to
process
this
specific
transaction
:end
:start
Should
we
roll
back
on
the
given
exception?
:end
:start
PropertyEditor
for
TransactionAttribute
objects
Accepts
a
String
of
form
<p>{@code
PROPAGATION_NAME,
ISOLATION_NAME,
readOnly,
timeout_NNNN,+Exception1,-Exception2
<p>where
only
propagation
code
is
required
For
example:
<p>{@code
PROPAGATION_MANDATORY,
ISOLATION_DEFAULT
<p>The
tokens
can
be
in
<strong>any</strong>
order
Propagation
and
isolation
codes
must
use
the
names
of
the
constants
in
the
TransactionDefinition
class
Timeout
values
are
in
seconds
If
no
timeout
is
specified,
the
transaction
manager
will
apply
a
default
timeout
specific
to
the
particular
transaction
manager
<p>A
"+"
before
an
exception
name
substring
indicates
that
transactions
should
commit
even
if
this
exception
is
thrown;
a
"-"
that
they
should
roll
back
:end
:start
Format
is
PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2
Null
or
the
empty
string
means
that
the
method
is
non
transactional
:end
:start
Strategy
interface
used
by
TransactionInterceptor
for
metadata
retrieval
<p>Implementations
know
how
to
source
transaction
attributes,
whether
from
configuration,
metadata
attributes
at
source
level
(such
as
Java
5
annotations),
or
anywhere
else
:end
:start
Return
the
transaction
attribute
for
the
given
method,
or
null
if
the
method
is
non-transactional
:end
:start
Advisor
driven
by
a
TransactionAttributeSource,
used
to
include
a
TransactionInterceptor
only
for
methods
that
are
transactional
<p>Because
the
AOP
framework
caches
advice
calculations,
this
is
normally
faster
than
just
letting
the
TransactionInterceptor
run
and
find
out
itself
that
it
has
no
work
to
do
:end
:start
Create
a
new
TransactionAttributeSourceAdvisor
:end
:start
Create
a
new
TransactionAttributeSourceAdvisor
:end
:start
Set
the
transaction
interceptor
to
use
for
this
advisor
:end
:start
Set
the
ClassFilter
to
use
for
this
pointcut
Default
is
ClassFilter#TRUE
:end
:start
Property
editor
that
converts
a
String
into
a
TransactionAttributeSource
The
transaction
attribute
string
must
be
parseable
by
the
TransactionAttributeEditor
in
this
package
<p>Strings
are
in
property
syntax,
with
the
form:<br>
FQCNmethodName=&lt;transaction
attribute
string&gt;
<p>For
example:<br>
commycompanymycodeMyClassmyMethod=PROPAGATION_MANDATORY,ISOLATION_DEFAULT
<p><b>NOTE:</b>
The
specified
class
must
be
the
one
where
the
methods
are
defined;
in
case
of
implementing
an
interface,
the
interface
class
name
<p>Note:
Will
register
all
overloaded
methods
for
a
given
name
Does
not
support
explicit
registration
of
certain
overloaded
methods
Supports
"xxx*"
mappings,
eg
"notify*"
for
"notify"
and
"notifyAll"
:end
:start
AOP
Alliance
MethodInterceptor
for
declarative
transaction
management
using
the
common
Spring
transaction
infrastructure
({@link
orgspringframeworktransactionPlatformTransactionManager)
<p>Derives
from
the
TransactionAspectSupport
class
which
contains
the
integration
with
Spring's
underlying
transaction
API
TransactionInterceptor
simply
calls
the
relevant
superclass
methods
such
as
#invokeWithinTransaction
in
the
correct
order
<p>TransactionInterceptors
are
thread-safe
:end
:start
Create
a
new
TransactionInterceptor
<p>Transaction
manager
and
transaction
attributes
still
need
to
be
set
:end
:start
Create
a
new
TransactionInterceptor
:end
:start
Create
a
new
TransactionInterceptor
:end
:start
Proxy
factory
bean
for
simplified
declarative
transaction
handling
This
is
a
convenient
alternative
to
a
standard
AOP
orgspringframeworkaopframeworkProxyFactoryBean
with
a
separate
TransactionInterceptor
definition
<p><strong>HISTORICAL
NOTE:</strong>
This
class
was
originally
designed
to
cover
the
typical
case
of
declarative
transaction
demarcation:
namely,
wrapping
a
singleton
target
object
with
a
transactional
proxy,
proxying
all
the
interfaces
that
the
target
implements
However,
in
Spring
versions
20
and
beyond,
the
functionality
provided
here
is
superseded
by
the
more
convenient
tx:
XML
namespace
See
the
<a
href="http://bitly/qUwvwz">declarative
transaction
management</a>
section
of
the
Spring
reference
documentation
to
understand
the
modern
options
for
managing
transactions
in
Spring
applications
For
these
reasons,
<strong>users
should
favor
of
the
tx:
XML
namespace
as
well
as
the
@{@link
orgspringframeworktransactionannotationTransactional
Transactional
and
@{@link
orgspringframeworktransactionannotationEnableTransactionManagement
EnableTransactionManagement
annotations</strong>
<p>There
are
three
main
properties
that
need
to
be
specified:
<ul>
<li>"transactionManager":
the
PlatformTransactionManager
implementation
to
use
(for
example,
a
orgspringframeworktransactionjtaJtaTransactionManager
instance)
<li>"target":
the
target
object
that
a
transactional
proxy
should
be
created
for
<li>"transactionAttributes":
the
transaction
attributes
(for
example,
propagation
behavior
and
"readOnly"
flag)
per
target
method
name
(or
method
name
pattern)
</ul>
<p>If
the
"transactionManager"
property
is
not
set
explicitly
and
this
FactoryBean
is
running
in
a
ListableBeanFactory,
a
single
matching
bean
of
type
PlatformTransactionManager
will
be
fetched
from
the
BeanFactory
<p>In
contrast
to
TransactionInterceptor,
the
transaction
attributes
are
specified
as
properties,
with
method
names
as
keys
and
transaction
attribute
descriptors
as
values
Method
names
are
always
applied
to
the
target
class
<p>Internally,
a
TransactionInterceptor
instance
is
used,
but
the
user
of
this
class
does
not
have
to
care
Optionally,
a
method
pointcut
can
be
specified
to
cause
conditional
invocation
of
the
underlying
TransactionInterceptor
<p>The
"preInterceptors"
and
"postInterceptors"
properties
can
be
set
to
add
additional
interceptors
to
the
mix,
like
orgspringframeworkaopinterceptorPerformanceMonitorInterceptor
<p><b>HINT:</b>
This
class
is
often
used
with
parent
/
child
bean
definitions
Typically,
you
will
define
the
transaction
manager
and
default
transaction
attributes
(for
method
name
patterns)
in
an
abstract
parent
bean
definition,
deriving
concrete
child
bean
definitions
for
specific
target
objects
This
reduces
the
per-bean
definition
effort
to
a
minimum
<pre
code="class">
<bean
id="baseTransactionProxy"
class="orgspringframeworktransactioninterceptorTransactionProxyFactoryBean"
abstract="true">
<property
name="transactionManager"
ref="transactionManager"/>
<property
name="transactionAttributes">
<props>
<prop
key="insert*">PROPAGATION_REQUIRED</prop>
<prop
key="update*">PROPAGATION_REQUIRED</prop>
<prop
key="*">PROPAGATION_REQUIRED,readOnly</prop>
</props>
</property>
</bean>
<bean
id="myProxy"
parent="baseTransactionProxy">
<property
name="target"
ref="myTarget"/>
</bean>
<bean
id="yourProxy"
parent="baseTransactionProxy">
<property
name="target"
ref="yourTarget"/>
</bean></pre>
:end
:start
Set
the
transaction
manager
This
will
perform
actual
transaction
management:
This
class
is
just
a
way
of
invoking
it
:end
:start
Set
properties
with
method
names
as
keys
and
transaction
attribute
descriptors
(parsed
via
TransactionAttributeEditor)
as
values:
eg
key
=
"myMethod",
value
=
"PROPAGATION_REQUIRED,readOnly"
<p>Note:
Method
names
are
always
applied
to
the
target
class,
no
matter
if
defined
in
an
interface
or
the
class
itself
<p>Internally,
a
NameMatchTransactionAttributeSource
will
be
created
from
the
given
properties
:end
:start
Set
the
transaction
attribute
source
which
is
used
to
find
transaction
attributes
If
specifying
a
String
property
value,
a
PropertyEditor
will
create
a
MethodMapTransactionAttributeSource
from
the
value
:end
:start
Set
a
pointcut,
ie
a
bean
that
can
cause
conditional
invocation
of
the
TransactionInterceptor
depending
on
method
and
attributes
passed
Note:
Additional
interceptors
are
always
invoked
:end
:start
This
callback
is
optional:
If
running
in
a
BeanFactory
and
no
transaction
manager
has
been
set
explicitly,
a
single
matching
bean
of
type
PlatformTransactionManager
will
be
fetched
from
the
BeanFactory
:end
:start
Creates
an
advisor
for
this
FactoryBean's
TransactionInterceptor
:end
:start
Exception
that
gets
thrown
when
an
invalid
isolation
level
is
specified,
ie
an
isolation
level
that
the
transaction
manager
implementation
doesn't
support
:end
:start
Constructor
for
InvalidIsolationLevelException
:end
:start
Exception
that
gets
thrown
when
an
invalid
timeout
is
specified,
that
is,
the
specified
timeout
valid
is
out
of
range
or
the
transaction
manager
implementation
doesn't
support
timeouts
:end
:start
Constructor
for
InvalidTimeoutException
:end
:start
Return
the
invalid
timeout
value
:end
:start
Adapter
for
a
JTA
Synchronization,
invoking
the
afterCommit
/
afterCompletion
callbacks
of
Spring
TransactionSynchronization
objects
callbacks
after
the
outer
JTA
transaction
has
completed
Applied
when
participating
in
an
existing
(non-Spring)
JTA
transaction
:end
:start
Create
a
new
JtaAfterCompletionSynchronization
for
the
given
synchronization
objects
:end
:start
orgspringframeworktransactionPlatformTransactionManager
implementation
for
JTA,
delegating
to
a
backend
JTA
provider
This
is
typically
used
to
delegate
to
a
Java
EE
server's
transaction
coordinator,
but
may
also
be
configured
with
a
local
JTA
provider
which
is
embedded
within
the
application
<p>This
transaction
manager
is
appropriate
for
handling
distributed
transactions,
ie
transactions
that
span
multiple
resources,
and
for
controlling
transactions
on
application
server
resources
(eg
JDBC
DataSources
available
in
JNDI)
in
general
For
a
single
JDBC
DataSource,
DataSourceTransactionManager
is
perfectly
sufficient,
and
for
accessing
a
single
resource
with
Hibernate
(including
transactional
cache),
HibernateTransactionManager
is
appropriate,
for
example
<p><b>For
typical
JTA
transactions
(REQUIRED,
SUPPORTS,
MANDATORY,
NEVER),
a
plain
JtaTransactionManager
definition
is
all
you
need,
portable
across
all
Java
EE
servers</b>
This
corresponds
to
the
functionality
of
the
JTA
UserTransaction,
for
which
Java
EE
specifies
a
standard
JNDI
name
("java:comp/UserTransaction")
There
is
no
need
to
configure
a
server-specific
TransactionManager
lookup
for
this
kind
of
JTA
usage
<p><b>Transaction
suspension
(REQUIRES_NEW,
NOT_SUPPORTED)
is
just
available
with
a
JTA
TransactionManager
being
registered</b>
Common
TransactionManager
locations
are
autodetected
by
JtaTransactionManager,
provided
that
the
"autodetectTransactionManager"
flag
is
set
to
"true"
(which
it
is
by
default)
<p>Note:
Support
for
the
JTA
TransactionManager
interface
is
not
required
by
Java
EE
Almost
all
Java
EE
servers
expose
it,
but
do
so
as
extension
to
EE
There
might
be
some
issues
with
compatibility,
despite
the
TransactionManager
interface
being
part
of
JTA
As
a
consequence,
Spring
provides
various
vendor-specific
PlatformTransactionManagers,
which
are
recommended
to
be
used
if
appropriate:
WebLogicJtaTransactionManager
and
WebSphereUowTransactionManager
For
all
other
Java
EE
servers,
the
standard
JtaTransactionManager
is
sufficient
<p>This
pure
JtaTransactionManager
class
supports
timeouts
but
not
per-transaction
isolation
levels
Custom
subclasses
may
override
the
#doJtaBegin
method
for
specific
JTA
extensions
in
order
to
provide
this
functionality;
Spring
includes
a
corresponding
WebLogicJtaTransactionManager
class
for
WebLogic
Server
Such
adapters
for
specific
Java
EE
transaction
coordinators
may
also
expose
transaction
names
for
monitoring;
with
standard
JTA,
transaction
names
will
simply
be
ignored
<p><b>Consider
using
Spring's
tx:jta-transaction-manager
configuration
element
for
automatically
picking
the
appropriate
JTA
platform
transaction
manager
(automatically
detecting
WebLogic
and
WebSphere)</b>
<p>JTA
11
adds
the
TransactionSynchronizationRegistry
facility,
as
public
Java
EE
5
API
in
addition
to
the
standard
JTA
UserTransaction
handle
As
of
Spring
25,
this
JtaTransactionManager
autodetects
the
TransactionSynchronizationRegistry
and
uses
it
for
registering
Spring-managed
synchronizations
when
participating
in
an
existing
JTA
transaction
(eg
controlled
by
EJB
CMT)
If
no
TransactionSynchronizationRegistry
is
available,
then
such
synchronizations
will
be
registered
via
the
(non-EE)
JTA
TransactionManager
handle
<p>This
class
is
serializable
However,
active
synchronizations
do
not
survive
serialization
:end
:start
Default
JNDI
location
for
the
JTA
UserTransaction
Many
Java
EE
servers
also
provide
support
for
the
JTA
TransactionManager
interface
there
:end
:start
Fallback
JNDI
locations
for
the
JTA
TransactionManager
Applied
if
the
JTA
UserTransaction
does
not
implement
the
JTA
TransactionManager
interface,
provided
that
the
"autodetectTransactionManager"
flag
is
"true"
:end
:start
Standard
Java
EE
5
JNDI
location
for
the
JTA
TransactionSynchronizationRegistry
Autodetected
when
available
:end
:start
Create
a
new
JtaTransactionManager
instance,
to
be
configured
as
bean
Invoke
afterPropertiesSet
to
activate
the
configuration
:end
:start
Create
a
new
JtaTransactionManager
instance
:end
:start
Create
a
new
JtaTransactionManager
instance
:end
:start
Create
a
new
JtaTransactionManager
instance
:end
:start
Set
the
JndiTemplate
to
use
for
JNDI
lookups
A
default
one
is
used
if
not
set
:end
:start
Return
the
JndiTemplate
used
for
JNDI
lookups
:end
:start
Set
the
JNDI
environment
to
use
for
JNDI
lookups
Creates
a
JndiTemplate
with
the
given
environment
settings
:end
:start
Return
the
JNDI
environment
to
use
for
JNDI
lookups
:end
:start
Set
the
JTA
UserTransaction
to
use
as
direct
reference
<p>Typically
just
used
for
local
JTA
setups;
in
a
Java
EE
environment,
the
UserTransaction
will
always
be
fetched
from
JNDI
:end
:start
Return
the
JTA
UserTransaction
that
this
transaction
manager
uses
:end
:start
Set
the
JNDI
name
of
the
JTA
UserTransaction
<p>Note
that
the
UserTransaction
will
be
autodetected
at
the
Java
EE
default
location
"java:comp/UserTransaction"
if
not
specified
explicitly
:end
:start
Set
whether
to
autodetect
the
JTA
UserTransaction
at
its
default
JNDI
location
"java:comp/UserTransaction",
as
specified
by
Java
EE
Will
proceed
without
UserTransaction
if
none
found
<p>Default
is
"true",
autodetecting
the
UserTransaction
unless
it
has
been
specified
explicitly
Turn
this
flag
off
to
allow
for
JtaTransactionManager
operating
against
the
TransactionManager
only,
despite
a
default
UserTransaction
being
available
:end
:start
Set
whether
to
cache
the
JTA
UserTransaction
object
fetched
from
JNDI
<p>Default
is
"true":
UserTransaction
lookup
will
only
happen
at
startup,
reusing
the
same
UserTransaction
handle
for
all
transactions
of
all
threads
This
is
the
most
efficient
choice
for
all
application
servers
that
provide
a
shared
UserTransaction
object
(the
typical
case)
<p>Turn
this
flag
off
to
enforce
a
fresh
lookup
of
the
UserTransaction
for
every
transaction
This
is
only
necessary
for
application
servers
that
return
a
new
UserTransaction
for
every
transaction,
keeping
state
tied
to
the
UserTransaction
object
itself
rather
than
the
current
thread
:end
:start
Set
the
JTA
TransactionManager
to
use
as
direct
reference
<p>A
TransactionManager
is
necessary
for
suspending
and
resuming
transactions,
as
this
not
supported
by
the
UserTransaction
interface
<p>Note
that
the
TransactionManager
will
be
autodetected
if
the
JTA
UserTransaction
object
implements
the
JTA
TransactionManager
interface
too,
as
well
as
autodetected
at
various
well-known
fallback
JNDI
locations
:end
:start
Return
the
JTA
TransactionManager
that
this
transaction
manager
uses,
if
any
:end
:start
Set
the
JNDI
name
of
the
JTA
TransactionManager
<p>A
TransactionManager
is
necessary
for
suspending
and
resuming
transactions,
as
this
not
supported
by
the
UserTransaction
interface
<p>Note
that
the
TransactionManager
will
be
autodetected
if
the
JTA
UserTransaction
object
implements
the
JTA
TransactionManager
interface
too,
as
well
as
autodetected
at
various
well-known
fallback
JNDI
locations
:end
:start
Set
whether
to
autodetect
a
JTA
UserTransaction
object
that
implements
the
JTA
TransactionManager
interface
too
(ie
the
JNDI
location
for
the
TransactionManager
is
"java:comp/UserTransaction",
same
as
for
the
UserTransaction)
Also
checks
the
fallback
JNDI
locations
"java:comp/TransactionManager"
and
"java:/TransactionManager"
Will
proceed
without
TransactionManager
if
none
found
<p>Default
is
"true",
autodetecting
the
TransactionManager
unless
it
has
been
specified
explicitly
Can
be
turned
off
to
deliberately
ignore
an
available
TransactionManager,
for
example
when
there
are
known
issues
with
suspend/resume
and
any
attempt
to
use
REQUIRES_NEW
or
NOT_SUPPORTED
should
fail
fast
:end
:start
Set
the
JTA
11
TransactionSynchronizationRegistry
to
use
as
direct
reference
<p>A
TransactionSynchronizationRegistry
allows
for
interposed
registration
of
transaction
synchronizations,
as
an
alternative
to
the
regular
registration
methods
on
the
JTA
TransactionManager
API
Also,
it
is
an
official
part
of
the
Java
EE
5
platform,
in
contrast
to
the
JTA
TransactionManager
itself
<p>Note
that
the
TransactionSynchronizationRegistry
will
be
autodetected
in
JNDI
and
also
from
the
UserTransaction/TransactionManager
object
if
implemented
there
as
well
:end
:start
Return
the
JTA
11
TransactionSynchronizationRegistry
that
this
transaction
manager
uses,
if
any
:end
:start
Set
the
JNDI
name
of
the
JTA
11
TransactionSynchronizationRegistry
<p>Note
that
the
TransactionSynchronizationRegistry
will
be
autodetected
at
the
Java
EE
5
default
location
"java:comp/TransactionSynchronizationRegistry"
if
not
specified
explicitly
:end
:start
Set
whether
to
autodetect
a
JTA
11
TransactionSynchronizationRegistry
object
at
its
default
JDNI
location
("java:comp/TransactionSynchronizationRegistry")
if
the
UserTransaction
has
also
been
obtained
from
JNDI,
and
also
whether
to
fall
back
to
checking
whether
the
JTA
UserTransaction/TransactionManager
object
implements
the
JTA
TransactionSynchronizationRegistry
interface
too
<p>Default
is
"true",
autodetecting
the
TransactionSynchronizationRegistry
unless
it
has
been
specified
explicitly
Can
be
turned
off
to
delegate
synchronization
registration
to
the
regular
JTA
TransactionManager
API
:end
:start
Set
whether
to
allow
custom
isolation
levels
to
be
specified
<p>Default
is
"false",
throwing
an
exception
if
a
non-default
isolation
level
is
specified
for
a
transaction
Turn
this
flag
on
if
affected
resource
adapters
check
the
thread-bound
transaction
context
and
apply
the
specified
isolation
levels
individually
(eg
through
an
IsolationLevelDataSourceAdapter)
:end
:start
Initialize
the
UserTransaction
as
well
as
the
TransactionManager
handle
:end
:start
Initialize
the
UserTransaction
as
well
as
the
TransactionManager
handle
:end
:start
Check
the
UserTransaction
as
well
as
the
TransactionManager
handle,
assuming
standard
JTA
requirements
:end
:start
Initialize
the
JTA
11
TransactionSynchronizationRegistry,
if
available
<p>To
be
called
after
#initUserTransactionAndTransactionManager(),
since
it
may
check
the
UserTransaction
and
TransactionManager
handles
:end
:start
Build
a
UserTransaction
handle
based
on
the
given
TransactionManager
:end
:start
Look
up
the
JTA
UserTransaction
in
JNDI
via
the
configured
name
<p>Called
by
afterPropertiesSet
if
no
direct
UserTransaction
reference
was
set
Can
be
overridden
in
subclasses
to
provide
a
different
UserTransaction
object
:end
:start
Look
up
the
JTA
TransactionManager
in
JNDI
via
the
configured
name
<p>Called
by
afterPropertiesSet
if
no
direct
TransactionManager
reference
was
set
Can
be
overridden
in
subclasses
to
provide
a
different
TransactionManager
object
:end
:start
Look
up
the
JTA
11
TransactionSynchronizationRegistry
in
JNDI
via
the
configured
name
<p>Can
be
overridden
in
subclasses
to
provide
a
different
TransactionManager
object
:end
:start
Allows
subclasses
to
retrieve
the
JTA
UserTransaction
in
a
vendor-specific
manner
Only
called
if
no
"userTransaction"
or
"userTransactionName"
specified
<p>The
default
implementation
simply
returns
null
:end
:start
Allows
subclasses
to
retrieve
the
JTA
TransactionManager
in
a
vendor-specific
manner
Only
called
if
no
"transactionManager"
or
"transactionManagerName"
specified
<p>The
default
implementation
simply
returns
null
:end
:start
Allows
subclasses
to
retrieve
the
JTA
11
TransactionSynchronizationRegistry
in
a
vendor-specific
manner
<p>The
default
implementation
simply
returns
null
:end
:start
Find
the
JTA
UserTransaction
through
a
default
JNDI
lookup:
"java:comp/UserTransaction"
:end
:start
Find
the
JTA
TransactionManager
through
autodetection:
checking
whether
the
UserTransaction
object
implements
the
TransactionManager,
and
checking
the
fallback
JNDI
locations
:end
:start
Find
the
JTA
11
TransactionSynchronizationRegistry
through
autodetection:
checking
whether
the
UserTransaction
object
or
TransactionManager
object
implements
it,
and
checking
Java
EE
5's
standard
JNDI
location
<p>The
default
implementation
simply
returns
null
:end
:start
This
implementation
returns
a
JtaTransactionObject
instance
for
the
JTA
UserTransaction
<p>The
UserTransaction
object
will
either
be
looked
up
freshly
for
the
current
transaction,
or
the
cached
one
looked
up
at
startup
will
be
used
The
latter
is
the
default:
Most
application
servers
use
a
shared
singleton
UserTransaction
that
can
be
cached
Turn
off
the
"cacheUserTransaction"
flag
to
enforce
a
fresh
lookup
for
every
transaction
:end
:start
Get
a
JTA
transaction
object
for
the
given
current
UserTransaction
<p>Subclasses
can
override
this
to
provide
a
JtaTransactionObject
subclass,
for
example
holding
some
additional
JTA
handle
needed
:end
:start
This
implementation
returns
false
to
cause
a
further
invocation
of
doBegin
despite
an
already
existing
transaction
<p>JTA
implementations
might
support
nested
transactions
via
further
UserTransactionbegin()
invocations,
but
never
support
savepoints
:end
:start
Perform
a
JTA
begin
on
the
JTA
UserTransaction
or
TransactionManager
<p>This
implementation
only
supports
standard
JTA
functionality:
that
is,
no
per-transaction
isolation
levels
and
no
transaction
names
Can
be
overridden
in
subclasses,
for
specific
JTA
implementations
<p>Calls
applyIsolationLevel
and
applyTimeout
before
invoking
the
UserTransaction's
begin
method
:end
:start
Apply
the
given
transaction
isolation
level
The
default
implementation
will
throw
an
exception
for
any
level
other
than
ISOLATION_DEFAULT
<p>To
be
overridden
in
subclasses
for
specific
JTA
implementations,
as
alternative
to
overriding
the
full
#doJtaBegin
method
:end
:start
Apply
the
given
transaction
timeout
The
default
implementation
will
call
UserTransactionsetTransactionTimeout
for
a
non-default
timeout
value
:end
:start
Perform
a
JTA
suspend
on
the
JTA
TransactionManager
<p>Can
be
overridden
in
subclasses,
for
specific
JTA
implementations
:end
:start
Perform
a
JTA
resume
on
the
JTA
TransactionManager
<p>Can
be
overridden
in
subclasses,
for
specific
JTA
implementations
:end
:start
This
implementation
returns
"true":
a
JTA
commit
will
properly
handle
transactions
that
have
been
marked
rollback-only
at
a
global
level
:end
:start
Register
a
JTA
synchronization
on
the
JTA
TransactionManager,
for
calling
afterCompletion
on
the
given
Spring
TransactionSynchronizations
<p>The
default
implementation
registers
the
synchronizations
on
the
JTA
11
TransactionSynchronizationRegistry,
if
available,
or
on
the
JTA
TransactionManager's
current
Transaction
-
again,
if
available
If
none
of
the
two
is
available,
a
warning
will
be
logged
<p>Can
be
overridden
in
subclasses,
for
specific
JTA
implementations
:end
:start
JTA
transaction
object,
representing
a
javaxtransactionUserTransaction
Used
as
transaction
object
by
Spring's
JtaTransactionManager
<p>Note:
This
is
an
SPI
class,
not
intended
to
be
used
by
applications
:end
:start
Create
a
new
JtaTransactionObject
for
the
given
JTA
UserTransaction
:end
:start
Return
the
JTA
UserTransaction
object
for
the
current
transaction
:end
:start
This
implementation
checks
the
UserTransaction's
rollback-only
flag
:end
:start
This
implementation
triggers
flush
callbacks,
assuming
that
they
will
flush
all
affected
ORM
sessions
:end
:start
Adapter
for
a
managed
JTA
Transaction
handle,
taking
a
JTA
javaxtransactionTransactionManager
reference
and
creating
a
JTA
javaxtransactionTransaction
handle
for
it
:end
:start
Create
a
new
ManagedTransactionAdapter
for
the
given
TransactionManager
:end
:start
Return
the
JTA
TransactionManager
that
this
adapter
delegates
to
:end
:start
Default
implementation
of
the
TransactionFactory
strategy
interface,
simply
wrapping
a
standard
JTA
javaxtransactionTransactionManager
<p>Does
not
support
transaction
names;
simply
ignores
any
specified
name
:end
:start
Create
a
new
SimpleTransactionFactory
for
the
given
TransactionManager
:end
:start
Adapter
that
implements
the
JTA
javaxtransactionSynchronization
interface
delegating
to
an
underlying
Spring
orgspringframeworktransactionsupportTransactionSynchronization
<p>Useful
for
synchronizing
Spring
resource
management
code
with
plain
JTA
/
EJB
CMT
transactions,
despite
the
original
code
being
built
for
Spring
transaction
synchronization
:end
:start
Create
a
new
SpringJtaSynchronizationAdapter
for
the
given
Spring
TransactionSynchronization
and
JTA
TransactionManager
:end
:start
Create
a
new
SpringJtaSynchronizationAdapter
for
the
given
Spring
TransactionSynchronization
and
JTA
TransactionManager
<p>Note
that
this
adapter
will
never
perform
a
rollback-only
call
on
WebLogic,
since
WebLogic
Server
is
known
to
automatically
mark
the
transaction
as
rollback-only
in
case
of
a
beforeCompletion
exception
Hence,
on
WLS,
this
constructor
is
equivalent
to
the
single-arg
constructor
:end
:start
Create
a
new
SpringJtaSynchronizationAdapter
for
the
given
Spring
TransactionSynchronization
and
JTA
TransactionManager
<p>Note
that
this
adapter
will
never
perform
a
rollback-only
call
on
WebLogic,
since
WebLogic
Server
is
known
to
automatically
mark
the
transaction
as
rollback-only
in
case
of
a
beforeCompletion
exception
Hence,
on
WLS,
this
constructor
is
equivalent
to
the
single-arg
constructor
:end
:start
JTA
beforeCompletion
callback:
just
invoked
before
commit
<p>In
case
of
an
exception,
the
JTA
transaction
will
be
marked
as
rollback-only
:end
:start
JTA
afterCompletion
callback:
invoked
after
commit/rollback
<p>Needs
to
invoke
the
Spring
synchronization's
beforeCompletion
at
this
late
stage
in
case
of
a
rollback,
since
there
is
no
corresponding
callback
with
JTA
:end
:start
Strategy
interface
for
creating
JTA
javaxtransactionTransaction
objects
based
on
specified
transactional
characteristics
<p>The
default
implementation,
SimpleTransactionFactory,
simply
wraps
a
standard
JTA
javaxtransactionTransactionManager
This
strategy
interface
allows
for
more
sophisticated
implementations
that
adapt
to
vendor-specific
JTA
extensions
:end
:start
Create
an
active
Transaction
object
based
on
the
given
name
and
timeout
:end
:start
Determine
whether
the
underlying
transaction
manager
supports
XA
transactions
managed
by
a
resource
adapter
(ie
without
explicit
XA
resource
enlistment)
<p>Typically
false
Checked
by
orgspringframeworkjcaendpointAbstractMessageEndpointFactory
in
order
to
differentiate
between
invalid
configuration
and
valid
ResourceAdapter-managed
transactions
:end
:start
Adapter
for
a
JTA
UserTransaction
handle,
taking
a
JTA
javaxtransactionTransactionManager
reference
and
creating
a
JTA
javaxtransactionUserTransaction
handle
for
it
<p>The
JTA
UserTransaction
interface
is
an
exact
subset
of
the
JTA
TransactionManager
interface
Unfortunately,
it
does
not
serve
as
super-interface
of
TransactionManager,
though,
which
requires
an
adapter
such
as
this
class
to
be
used
when
intending
to
talk
to
a
TransactionManager
handle
through
the
UserTransaction
interface
<p>Used
internally
by
Spring's
JtaTransactionManager
for
certain
scenarios
Not
intended
for
direct
use
in
application
code
:end
:start
Create
a
new
UserTransactionAdapter
for
the
given
TransactionManager
:end
:start
Return
the
JTA
TransactionManager
that
this
adapter
delegates
to
:end
:start
Special
JtaTransactionManager
variant
for
BEA
WebLogic
(90
and
higher)
Supports
the
full
power
of
Spring's
transaction
definitions
on
WebLogic's
transaction
coordinator,
<i>beyond
standard
JTA</i>:
transaction
names,
per-transaction
isolation
levels,
and
proper
resuming
of
transactions
in
all
cases
<p>Uses
WebLogic's
special
begin(name)
method
to
start
a
JTA
transaction,
in
order
to
make
<b>Spring-driven
transactions
visible
in
WebLogic's
transaction
monitor</b>
In
case
of
Spring's
declarative
transactions,
the
exposed
name
will
(by
default)
be
the
fully-qualified
class
name
+
""
+
method
name
<p>Supports
a
<b>per-transaction
isolation
level</b>
through
WebLogic's
corresponding
JTA
transaction
property
"ISOLATION
LEVEL"
This
will
apply
the
specified
isolation
level
(eg
ISOLATION_SERIALIZABLE)
to
all
JDBC
Connections
that
participate
in
the
given
transaction
<p>Invokes
WebLogic's
special
forceResume
method
if
standard
JTA
resume
failed,
to
<b>also
resume
if
the
target
transaction
was
marked
rollback-only</b>
If
you're
not
relying
on
this
feature
of
transaction
suspension
in
the
first
place,
Spring's
standard
JtaTransactionManager
will
behave
properly
too
<p>By
default,
the
JTA
UserTransaction
and
TransactionManager
handles
are
fetched
directly
from
WebLogic's
TransactionHelper
This
can
be
overridden
by
specifying
"userTransaction"/"userTransactionName"
and
"transactionManager"/"transactionManagerName",
passing
in
existing
handles
or
specifying
corresponding
JNDI
locations
to
look
up
<p><b>NOTE:
This
JtaTransactionManager
is
intended
to
refine
specific
transaction
demarcation
behavior
on
Spring's
side
It
will
happily
co-exist
with
independently
configured
WebLogic
transaction
strategies
in
your
persistence
provider,
with
no
need
to
specifically
connect
those
setups
in
any
way</b>
:end
:start
WebSphere-specific
PlatformTransactionManager
implementation
that
delegates
to
a
comibmwsspiuowUOWManager
instance,
obtained
from
WebSphere's
JNDI
environment
This
allows
Spring
to
leverage
the
full
power
of
the
WebSphere
transaction
coordinator,
including
transaction
suspension,
in
a
manner
that
is
perfectly
compliant
with
officially
supported
WebSphere
API
<p>The
CallbackPreferringPlatformTransactionManager
interface
implemented
by
this
class
indicates
that
callers
should
preferably
pass
in
a
TransactionCallback
through
the
#execute
method,
which
will
be
handled
through
the
callback-based
WebSphere
UOWManager
API
instead
of
through
standard
JTA
API
(UserTransaction
/
TransactionManager)
This
avoids
the
use
of
the
non-public
javaxtransactionTransactionManager
API
on
WebSphere,
staying
within
supported
WebSphere
API
boundaries
<p>This
transaction
manager
implementation
derives
from
Spring's
standard
JtaTransactionManager,
inheriting
the
capability
to
support
programmatic
transaction
demarcation
via
getTransaction
/
commit
/
rollback
calls
through
a
JTA
UserTransaction
handle,
for
callers
that
do
not
use
the
TransactionCallback-based
#execute
method
However,
transaction
suspension
is
<i>not</i>
supported
in
this
getTransaction
style
(unless
you
explicitly
specify
a
#setTransactionManager
reference,
despite
the
official
WebSphere
recommendations)
Use
the
#execute
style
for
any
code
that
might
require
transaction
suspension
<p>This
transaction
manager
is
compatible
with
WebSphere
6109
and
above
The
default
JNDI
location
for
the
UOWManager
is
"java:comp/websphere/UOWManager"
If
the
location
happens
to
differ
according
to
your
WebSphere
documentation,
simply
specify
the
actual
location
through
this
transaction
manager's
"uowManagerName"
bean
property
<p><b>NOTE:
This
JtaTransactionManager
is
intended
to
refine
specific
transaction
demarcation
behavior
on
Spring's
side
It
will
happily
co-exist
with
independently
configured
WebSphere
transaction
strategies
in
your
persistence
provider,
with
no
need
to
specifically
connect
those
setups
in
any
way</b>
:end
:start
Default
JNDI
location
for
the
WebSphere
UOWManager
:end
:start
Create
a
new
WebSphereUowTransactionManager
:end
:start
Create
a
new
WebSphereUowTransactionManager
for
the
given
UOWManager
:end
:start
Set
the
WebSphere
UOWManager
to
use
as
direct
reference
<p>Typically
just
used
for
test
setups;
in
a
J2EE
environment,
the
UOWManager
will
always
be
fetched
from
JNDI
:end
:start
Set
the
JNDI
name
of
the
WebSphere
UOWManager
The
default
"java:comp/websphere/UOWManager"
is
used
if
not
set
:end
:start
Look
up
the
WebSphere
UOWManager
in
JNDI
via
the
configured
name
:end
:start
Obtain
the
WebSphere
UOWManager
from
the
default
JNDI
location
"java:comp/websphere/UOWManager"
:end
:start
Registers
the
synchronizations
as
interposed
JTA
Synchronization
on
the
UOWManager
:end
:start
Returns
true
since
WebSphere
ResourceAdapters
(as
exposed
in
JNDI)
implicitly
perform
transaction
enlistment
if
the
MessageEndpointFactory's
isDeliveryTransacted
method
returns
true
In
that
case
we'll
simply
skip
the
#createTransaction
call
:end
:start
Exception
thrown
when
attempting
to
work
with
a
nested
transaction
but
nested
transactions
are
not
supported
by
the
underlying
backend
:end
:start
Constructor
for
NestedTransactionNotSupportedException
:end
:start
Constructor
for
NestedTransactionNotSupportedException
:end
:start
Exception
thrown
when
an
operation
is
attempted
that
relies
on
an
existing
transaction
(such
as
setting
rollback
status)
and
there
is
no
existing
transaction
This
represents
an
illegal
usage
of
the
transaction
API
:end
:start
Constructor
for
NoTransactionException
:end
:start
Constructor
for
NoTransactionException
:end
:start
This
is
the
central
interface
in
Spring's
transaction
infrastructure
Applications
can
use
this
directly,
but
it
is
not
primarily
meant
as
API:
Typically,
applications
will
work
with
either
TransactionTemplate
or
declarative
transaction
demarcation
through
AOP
<p>For
implementors,
it
is
recommended
to
derive
from
the
provided
orgspringframeworktransactionsupportAbstractPlatformTransactionManager
class,
which
pre-implements
the
defined
propagation
behavior
and
takes
care
of
transaction
synchronization
handling
Subclasses
have
to
implement
template
methods
for
specific
states
of
the
underlying
transaction,
for
example:
begin,
suspend,
resume,
commit
<p>The
default
implementations
of
this
strategy
interface
are
orgspringframeworktransactionjtaJtaTransactionManager
and
orgspringframeworkjdbcdatasourceDataSourceTransactionManager,
which
can
serve
as
an
implementation
guide
for
other
transaction
strategies
:end
:start
Return
a
currently
active
transaction
or
create
a
new
one,
according
to
the
specified
propagation
behavior
<p>Note
that
parameters
like
isolation
level
or
timeout
will
only
be
applied
to
new
transactions,
and
thus
be
ignored
when
participating
in
active
ones
<p>Furthermore,
not
all
transaction
definition
settings
will
be
supported
by
every
transaction
manager:
A
proper
transaction
manager
implementation
should
throw
an
exception
when
unsupported
settings
are
encountered
<p>An
exception
to
the
above
rule
is
the
read-only
flag,
which
should
be
ignored
if
no
explicit
read-only
mode
is
supported
Essentially,
the
read-only
flag
is
just
a
hint
for
potential
optimization
:end
:start
Commit
the
given
transaction,
with
regard
to
its
status
If
the
transaction
has
been
marked
rollback-only
programmatically,
perform
a
rollback
<p>If
the
transaction
wasn't
a
new
one,
omit
the
commit
for
proper
participation
in
the
surrounding
transaction
If
a
previous
transaction
has
been
suspended
to
be
able
to
create
a
new
one,
resume
the
previous
transaction
after
committing
the
new
one
<p>Note
that
when
the
commit
call
completes,
no
matter
if
normally
or
throwing
an
exception,
the
transaction
must
be
fully
completed
and
cleaned
up
No
rollback
call
should
be
expected
in
such
a
case
<p>If
this
method
throws
an
exception
other
than
a
TransactionException,
then
some
before-commit
error
caused
the
commit
attempt
to
fail
For
example,
an
O/R
Mapping
tool
might
have
tried
to
flush
changes
to
the
database
right
before
commit,
with
the
resulting
DataAccessException
causing
the
transaction
to
fail
The
original
exception
will
be
propagated
to
the
caller
of
this
commit
method
in
such
a
case
:end
:start
Perform
a
rollback
of
the
given
transaction
<p>If
the
transaction
wasn't
a
new
one,
just
set
it
rollback-only
for
proper
participation
in
the
surrounding
transaction
If
a
previous
transaction
has
been
suspended
to
be
able
to
create
a
new
one,
resume
the
previous
transaction
after
rolling
back
the
new
one
<p><b>Do
not
call
rollback
on
a
transaction
if
commit
threw
an
exception</b>
The
transaction
will
already
have
been
completed
and
cleaned
up
when
commit
returns,
even
in
case
of
a
commit
exception
Consequently,
a
rollback
call
after
commit
failure
will
lead
to
an
IllegalTransactionStateException
:end
:start
Interface
that
specifies
an
API
to
programmatically
manage
transaction
savepoints
in
a
generic
fashion
Extended
by
TransactionStatus
to
expose
savepoint
management
functionality
for
a
specific
transaction
<p>Note
that
savepoints
can
only
work
within
an
active
transaction
Just
use
this
programmatic
savepoint
handling
for
advanced
needs;
else,
a
subtransaction
with
PROPAGATION_NESTED
is
preferable
<p>This
interface
is
inspired
by
JDBC
30's
Savepoint
mechanism
but
is
independent
from
any
specific
persistence
technology
:end
:start
Create
a
new
savepoint
You
can
roll
back
to
a
specific
savepoint
via
rollbackToSavepoint,
and
explicitly
release
a
savepoint
that
you
don't
need
anymore
via
releaseSavepoint
<p>Note
that
most
transaction
managers
will
automatically
release
savepoints
at
transaction
completion
:end
:start
Roll
back
to
the
given
savepoint
The
savepoint
will
be
automatically
released
afterwards
:end
:start
Explicitly
release
the
given
savepoint
<p>Note
that
most
transaction
managers
will
automatically
release
savepoints
at
transaction
completion
<p>Implementations
should
fail
as
silently
as
possible
if
proper
resource
cleanup
will
still
happen
at
transaction
completion
:end
:start
Abstract
base
class
that
implements
Spring's
standard
transaction
workflow,
serving
as
basis
for
concrete
platform
transaction
managers
like
orgspringframeworktransactionjtaJtaTransactionManager
<p>This
base
class
provides
the
following
workflow
handling:
<ul>
<li>determines
if
there
is
an
existing
transaction;
<li>applies
the
appropriate
propagation
behavior;
<li>suspends
and
resumes
transactions
if
necessary;
<li>checks
the
rollback-only
flag
on
commit;
<li>applies
the
appropriate
modification
on
rollback
(actual
rollback
or
setting
rollback-only);
<li>triggers
registered
synchronization
callbacks
(if
transaction
synchronization
is
active)
</ul>
<p>Subclasses
have
to
implement
specific
template
methods
for
specific
states
of
a
transaction,
eg:
begin,
suspend,
resume,
commit,
rollback
The
most
important
of
them
are
abstract
and
must
be
provided
by
a
concrete
implementation;
for
the
rest,
defaults
are
provided,
so
overriding
is
optional
<p>Transaction
synchronization
is
a
generic
mechanism
for
registering
callbacks
that
get
invoked
at
transaction
completion
time
This
is
mainly
used
internally
by
the
data
access
support
classes
for
JDBC,
Hibernate,
JPA,
etc
when
running
within
a
JTA
transaction:
They
register
resources
that
are
opened
within
the
transaction
for
closing
at
transaction
completion
time,
allowing
eg
for
reuse
of
the
same
Hibernate
Session
within
the
transaction
The
same
mechanism
can
also
be
leveraged
for
custom
synchronization
needs
in
an
application
<p>The
state
of
this
class
is
serializable,
to
allow
for
serializing
the
transaction
strategy
along
with
proxies
that
carry
a
transaction
interceptor
It
is
up
to
subclasses
if
they
wish
to
make
their
state
to
be
serializable
too
They
should
implement
the
javaioSerializable
marker
interface
in
that
case,
and
potentially
a
private
readObject()
method
(according
to
Java
serialization
rules)
if
they
need
to
restore
any
transient
state
:end
:start
Always
activate
transaction
synchronization,
even
for
"empty"
transactions
that
result
from
PROPAGATION_SUPPORTS
with
no
existing
backend
transaction
:end
:start
Activate
transaction
synchronization
only
for
actual
transactions,
that
is,
not
for
empty
ones
that
result
from
PROPAGATION_SUPPORTS
with
no
existing
backend
transaction
:end
:start
Never
active
transaction
synchronization,
not
even
for
actual
transactions
:end
:start
Set
the
transaction
synchronization
by
the
name
of
the
corresponding
constant
in
this
class,
eg
"SYNCHRONIZATION_ALWAYS"
:end
:start
Set
when
this
transaction
manager
should
activate
the
thread-bound
transaction
synchronization
support
Default
is
"always"
<p>Note
that
transaction
synchronization
isn't
supported
for
multiple
concurrent
transactions
by
different
transaction
managers
Only
one
transaction
manager
is
allowed
to
activate
it
at
any
time
:end
:start
Return
if
this
transaction
manager
should
activate
the
thread-bound
transaction
synchronization
support
:end
:start
Specify
the
default
timeout
that
this
transaction
manager
should
apply
if
there
is
no
timeout
specified
at
the
transaction
level,
in
seconds
<p>Default
is
the
underlying
transaction
infrastructure's
default
timeout,
eg
typically
30
seconds
in
case
of
a
JTA
provider,
indicated
by
the
TransactionDefinitionTIMEOUT_DEFAULT
value
:end
:start
Return
the
default
timeout
that
this
transaction
manager
should
apply
if
there
is
no
timeout
specified
at
the
transaction
level,
in
seconds
<p>Returns
TransactionDefinitionTIMEOUT_DEFAULT
to
indicate
the
underlying
transaction
infrastructure's
default
timeout
:end
:start
Set
whether
nested
transactions
are
allowed
Default
is
"false"
<p>Typically
initialized
with
an
appropriate
default
by
the
concrete
transaction
manager
subclass
:end
:start
Return
whether
nested
transactions
are
allowed
:end
:start
Set
whether
existing
transactions
should
be
validated
before
participating
in
them
<p>When
participating
in
an
existing
transaction
(eg
with
PROPAGATION_REQUIRES
or
PROPAGATION_SUPPORTS
encountering
an
existing
transaction),
this
outer
transaction's
characteristics
will
apply
even
to
the
inner
transaction
scope
Validation
will
detect
incompatible
isolation
level
and
read-only
settings
on
the
inner
transaction
definition
and
reject
participation
accordingly
through
throwing
a
corresponding
exception
<p>Default
is
"false",
leniently
ignoring
inner
transaction
settings,
simply
overriding
them
with
the
outer
transaction's
characteristics
Switch
this
flag
to
"true"
in
order
to
enforce
strict
validation
:end
:start
Return
whether
existing
transactions
should
be
validated
before
participating
in
them
:end
:start
Set
whether
to
globally
mark
an
existing
transaction
as
rollback-only
after
a
participating
transaction
failed
<p>Default
is
"true":
If
a
participating
transaction
(eg
with
PROPAGATION_REQUIRES
or
PROPAGATION_SUPPORTS
encountering
an
existing
transaction)
fails,
the
transaction
will
be
globally
marked
as
rollback-only
The
only
possible
outcome
of
such
a
transaction
is
a
rollback:
The
transaction
originator
<i>cannot</i>
make
the
transaction
commit
anymore
<p>Switch
this
to
"false"
to
let
the
transaction
originator
make
the
rollback
decision
If
a
participating
transaction
fails
with
an
exception,
the
caller
can
still
decide
to
continue
with
a
different
path
within
the
transaction
However,
note
that
this
will
only
work
as
long
as
all
participating
resources
are
capable
of
continuing
towards
a
transaction
commit
even
after
a
data
access
failure:
This
is
generally
not
the
case
for
a
Hibernate
Session,
for
example;
neither
is
it
for
a
sequence
of
JDBC
insert/update/delete
operations
<p><b>Note:</b>This
flag
only
applies
to
an
explicit
rollback
attempt
for
a
subtransaction,
typically
caused
by
an
exception
thrown
by
a
data
access
operation
(where
TransactionInterceptor
will
trigger
a
PlatformTransactionManagerrollback()
call
according
to
a
rollback
rule)
If
the
flag
is
off,
the
caller
can
handle
the
exception
and
decide
on
a
rollback,
independent
of
the
rollback
rules
of
the
subtransaction
This
flag
does,
however,
<i>not</i>
apply
to
explicit
setRollbackOnly
calls
on
a
TransactionStatus,
which
will
always
cause
an
eventual
global
rollback
(as
it
might
not
throw
an
exception
after
the
rollback-only
call)
<p>The
recommended
solution
for
handling
failure
of
a
subtransaction
is
a
"nested
transaction",
where
the
global
transaction
can
be
rolled
back
to
a
savepoint
taken
at
the
beginning
of
the
subtransaction
PROPAGATION_NESTED
provides
exactly
those
semantics;
however,
it
will
only
work
when
nested
transaction
support
is
available
This
is
the
case
with
DataSourceTransactionManager,
but
not
with
JtaTransactionManager
:end
:start
Return
whether
to
globally
mark
an
existing
transaction
as
rollback-only
after
a
participating
transaction
failed
:end
:start
Set
whether
to
fail
early
in
case
of
the
transaction
being
globally
marked
as
rollback-only
<p>Default
is
"false",
only
causing
an
UnexpectedRollbackException
at
the
outermost
transaction
boundary
Switch
this
flag
on
to
cause
an
UnexpectedRollbackException
as
early
as
the
global
rollback-only
marker
has
been
first
detected,
even
from
within
an
inner
transaction
boundary
<p>Note
that,
as
of
Spring
20,
the
fail-early
behavior
for
global
rollback-only
markers
has
been
unified:
All
transaction
managers
will
by
default
only
cause
UnexpectedRollbackException
at
the
outermost
transaction
boundary
This
allows,
for
example,
to
continue
unit
tests
even
after
an
operation
failed
and
the
transaction
will
never
be
completed
All
transaction
managers
will
only
fail
earlier
if
this
flag
has
explicitly
been
set
to
"true"
:end
:start
Return
whether
to
fail
early
in
case
of
the
transaction
being
globally
marked
as
rollback-only
:end
:start
Set
whether
doRollback
should
be
performed
on
failure
of
the
doCommit
call
Typically
not
necessary
and
thus
to
be
avoided,
as
it
can
potentially
override
the
commit
exception
with
a
subsequent
rollback
exception
<p>Default
is
"false"
:end
:start
Return
whether
doRollback
should
be
performed
on
failure
of
the
doCommit
call
:end
:start
This
implementation
handles
propagation
behavior
Delegates
to
doGetTransaction,
isExistingTransaction
and
doBegin
:end
:start
Create
a
new
TransactionStatus
for
the
given
arguments,
also
initializing
transaction
synchronization
as
appropriate
:end
:start
Create
a
rae
TransactionStatus
instance
for
the
given
arguments
:end
:start
Initialize
transaction
synchronization
as
appropriate
:end
:start
Determine
the
actual
timeout
to
use
for
the
given
definition
Will
fall
back
to
this
manager's
default
timeout
if
the
transaction
definition
doesn't
specify
a
non-default
value
:end
:start
Suspend
the
given
transaction
Suspends
transaction
synchronization
first,
then
delegates
to
the
doSuspend
template
method
:end
:start
Resume
the
given
transaction
Delegates
to
the
doResume
template
method
first,
then
resuming
transaction
synchronization
:end
:start
This
implementation
of
commit
handles
participating
in
existing
transactions
and
programmatic
rollback
requests
Delegates
to
isRollbackOnly,
doCommit
and
rollback
:end
:start
This
implementation
of
rollback
handles
participating
in
existing
transactions
Delegates
to
doRollback
and
doSetRollbackOnly
:end
:start
Trigger
beforeCommit
callbacks
:end
:start
Trigger
beforeCompletion
callbacks
:end
:start
Actually
invoke
the
afterCompletion
methods
of
the
given
Spring
TransactionSynchronization
objects
<p>To
be
called
by
this
abstract
manager
itself,
or
by
special
implementations
of
the
registerAfterCompletionWithExistingTransaction
callback
:end
:start
Return
a
transaction
object
for
the
current
transaction
state
<p>The
returned
object
will
usually
be
specific
to
the
concrete
transaction
manager
implementation,
carrying
corresponding
transaction
state
in
a
modifiable
fashion
This
object
will
be
passed
into
the
other
template
methods
(eg
doBegin
and
doCommit),
either
directly
or
as
part
of
a
DefaultTransactionStatus
instance
<p>The
returned
object
should
contain
information
about
any
existing
transaction,
that
is,
a
transaction
that
has
already
started
before
the
current
getTransaction
call
on
the
transaction
manager
Consequently,
a
doGetTransaction
implementation
will
usually
look
for
an
existing
transaction
and
store
corresponding
state
in
the
returned
transaction
object
:end
:start
Check
if
the
given
transaction
object
indicates
an
existing
transaction
(that
is,
a
transaction
which
has
already
started)
<p>The
result
will
be
evaluated
according
to
the
specified
propagation
behavior
for
the
new
transaction
An
existing
transaction
might
get
suspended
(in
case
of
PROPAGATION_REQUIRES_NEW),
or
the
new
transaction
might
participate
in
the
existing
one
(in
case
of
PROPAGATION_REQUIRED)
<p>The
default
implementation
returns
false,
assuming
that
participating
in
existing
transactions
is
generally
not
supported
Subclasses
are
of
course
encouraged
to
provide
such
support
:end
:start
Return
whether
to
use
a
savepoint
for
a
nested
transaction
<p>Default
is
true,
which
causes
delegation
to
DefaultTransactionStatus
for
creating
and
holding
a
savepoint
If
the
transaction
object
does
not
implement
the
SavepointManager
interface,
a
NestedTransactionNotSupportedException
will
be
thrown
Else,
the
SavepointManager
will
be
asked
to
create
a
new
savepoint
to
demarcate
the
start
of
the
nested
transaction
<p>Subclasses
can
override
this
to
return
false,
causing
a
further
call
to
doBegin
-
within
the
context
of
an
already
existing
transaction
The
doBegin
implementation
needs
to
handle
this
accordingly
in
such
a
scenario
This
is
appropriate
for
JTA,
for
example
:end
:start
Begin
a
new
transaction
with
semantics
according
to
the
given
transaction
definition
Does
not
have
to
care
about
applying
the
propagation
behavior,
as
this
has
already
been
handled
by
this
abstract
manager
<p>This
method
gets
called
when
the
transaction
manager
has
decided
to
actually
start
a
new
transaction
Either
there
wasn't
any
transaction
before,
or
the
previous
transaction
has
been
suspended
<p>A
special
scenario
is
a
nested
transaction
without
savepoint:
If
useSavepointForNestedTransaction()
returns
"false",
this
method
will
be
called
to
start
a
nested
transaction
when
necessary
In
such
a
context,
there
will
be
an
active
transaction:
The
implementation
of
this
method
has
to
detect
this
and
start
an
appropriate
nested
transaction
:end
:start
Suspend
the
resources
of
the
current
transaction
Transaction
synchronization
will
already
have
been
suspended
<p>The
default
implementation
throws
a
TransactionSuspensionNotSupportedException,
assuming
that
transaction
suspension
is
generally
not
supported
:end
:start
Resume
the
resources
of
the
current
transaction
Transaction
synchronization
will
be
resumed
afterwards
<p>The
default
implementation
throws
a
TransactionSuspensionNotSupportedException,
assuming
that
transaction
suspension
is
generally
not
supported
:end
:start
Return
whether
to
call
doCommit
on
a
transaction
that
has
been
marked
as
rollback-only
in
a
global
fashion
<p>Does
not
apply
if
an
application
locally
sets
the
transaction
to
rollback-only
via
the
TransactionStatus,
but
only
to
the
transaction
itself
being
marked
as
rollback-only
by
the
transaction
coordinator
<p>Default
is
"false":
Local
transaction
strategies
usually
don't
hold
the
rollback-only
marker
in
the
transaction
itself,
therefore
they
can't
handle
rollback-only
transactions
as
part
of
transaction
commit
Hence,
AbstractPlatformTransactionManager
will
trigger
a
rollback
in
that
case,
throwing
an
UnexpectedRollbackException
afterwards
<p>Override
this
to
return
"true"
if
the
concrete
transaction
manager
expects
a
doCommit
call
even
for
a
rollback-only
transaction,
allowing
for
special
handling
there
This
will,
for
example,
be
the
case
for
JTA,
where
UserTransactioncommit
will
check
the
read-only
flag
itself
and
throw
a
corresponding
RollbackException,
which
might
include
the
specific
reason
(such
as
a
transaction
timeout)
<p>If
this
method
returns
"true"
but
the
doCommit
implementation
does
not
throw
an
exception,
this
transaction
manager
will
throw
an
UnexpectedRollbackException
itself
This
should
not
be
the
typical
case;
it
is
mainly
checked
to
cover
misbehaving
JTA
providers
that
silently
roll
back
even
when
the
rollback
has
not
been
requested
by
the
calling
code
:end
:start
Make
preparations
for
commit,
to
be
performed
before
the
beforeCommit
synchronization
callbacks
occur
<p>Note
that
exceptions
will
get
propagated
to
the
commit
caller
and
cause
a
rollback
of
the
transaction
:end
:start
Perform
an
actual
commit
of
the
given
transaction
<p>An
implementation
does
not
need
to
check
the
"new
transaction"
flag
or
the
rollback-only
flag;
this
will
already
have
been
handled
before
Usually,
a
straight
commit
will
be
performed
on
the
transaction
object
contained
in
the
passed-in
status
:end
:start
Perform
an
actual
rollback
of
the
given
transaction
<p>An
implementation
does
not
need
to
check
the
"new
transaction"
flag;
this
will
already
have
been
handled
before
Usually,
a
straight
rollback
will
be
performed
on
the
transaction
object
contained
in
the
passed-in
status
:end
:start
Set
the
given
transaction
rollback-only
Only
called
on
rollback
if
the
current
transaction
participates
in
an
existing
one
<p>The
default
implementation
throws
an
IllegalTransactionStateException,
assuming
that
participating
in
existing
transactions
is
generally
not
supported
Subclasses
are
of
course
encouraged
to
provide
such
support
:end
:start
Register
the
given
list
of
transaction
synchronizations
with
the
existing
transaction
<p>Invoked
when
the
control
of
the
Spring
transaction
manager
and
thus
all
Spring
transaction
synchronizations
end,
without
the
transaction
being
completed
yet
This
is
for
example
the
case
when
participating
in
an
existing
JTA
or
EJB
CMT
transaction
<p>The
default
implementation
simply
invokes
the
afterCompletion
methods
immediately,
passing
in
"STATUS_UNKNOWN"
This
is
the
best
we
can
do
if
there's
no
chance
to
determine
the
actual
outcome
of
the
outer
transaction
:end
:start
Cleanup
resources
after
transaction
completion
<p>Called
after
doCommit
and
doRollback
execution,
on
any
outcome
The
default
implementation
does
nothing
<p>Should
not
throw
any
exceptions
but
just
issue
warnings
on
errors
:end
:start
Holder
for
suspended
resources
Used
internally
by
suspend
and
resume
:end
:start
Holder
for
suspended
resources
Used
internally
by
suspend
and
resume
:end
:start
Abstract
base
implementation
of
the
orgspringframeworktransactionTransactionStatus
interface
<p>Pre-implements
the
handling
of
local
rollback-only
and
completed
flags,
and
delegation
to
an
underlying
orgspringframeworktransactionSavepointManager
Also
offers
the
option
of
a
holding
a
savepoint
within
the
transaction
<p>Does
not
assume
any
specific
internal
transaction
handling,
such
as
an
underlying
transaction
object,
and
no
transaction
synchronization
mechanism
:end
:start
Determine
the
rollback-only
flag
via
checking
both
the
local
rollback-only
flag
of
this
TransactionStatus
and
the
global
rollback-only
flag
of
the
underlying
transaction,
if
any
:end
:start
Determine
the
rollback-only
flag
via
checking
this
TransactionStatus
<p>Will
only
return
"true"
if
the
application
called
setRollbackOnly
on
this
TransactionStatus
object
:end
:start
Template
method
for
determining
the
global
rollback-only
flag
of
the
underlying
transaction,
if
any
<p>This
implementation
always
returns
false
:end
:start
This
implementations
is
empty,
considering
flush
as
a
no-op
:end
:start
Mark
this
transaction
as
completed,
that
is,
committed
or
rolled
back
:end
:start
Set
a
savepoint
for
this
transaction
Useful
for
PROPAGATION_NESTED
:end
:start
Get
the
savepoint
for
this
transaction,
if
any
:end
:start
Create
a
savepoint
and
hold
it
for
the
transaction
:end
:start
Roll
back
to
the
savepoint
that
is
held
for
the
transaction
:end
:start
Release
the
savepoint
that
is
held
for
the
transaction
:end
:start
This
implementation
delegates
to
a
SavepointManager
for
the
underlying
transaction,
if
possible
:end
:start
This
implementation
delegates
to
a
SavepointManager
for
the
underlying
transaction,
if
possible
:end
:start
This
implementation
delegates
to
a
SavepointManager
for
the
underlying
transaction,
if
possible
:end
:start
Return
a
SavepointManager
for
the
underlying
transaction,
if
possible
<p>Default
implementation
always
throws
a
NestedTransactionNotSupportedException
:end
:start
Extension
of
the
orgspringframeworktransactionPlatformTransactionManager
interface,
exposing
a
method
for
executing
a
given
callback
within
a
transaction
<p>Implementors
of
this
interface
automatically
express
a
preference
for
callbacks
over
programmatic
getTransaction,
commit
and
rollback
calls
Calling
code
may
check
whether
a
given
transaction
manager
implements
this
interface
to
choose
to
prepare
a
callback
instead
of
explicit
transaction
demarcation
control
<p>Spring's
TransactionTemplate
and
orgspringframeworktransactioninterceptorTransactionInterceptor
detect
and
use
this
PlatformTransactionManager
variant
automatically
:end
:start
Execute
the
action
specified
by
the
given
callback
object
within
a
transaction
<p>Allows
for
returning
a
result
object
created
within
the
transaction,
that
is,
a
domain
object
or
a
collection
of
domain
objects
A
RuntimeException
thrown
by
the
callback
is
treated
as
a
fatal
exception
that
enforces
a
rollback
Such
an
exception
gets
propagated
to
the
caller
of
the
template
:end
:start
Default
implementation
of
the
TransactionDefinition
interface,
offering
bean-style
configuration
and
sensible
default
values
(PROPAGATION_REQUIRED,
ISOLATION_DEFAULT,
TIMEOUT_DEFAULT,
readOnly=false)
<p>Base
class
for
both
TransactionTemplate
and
orgspringframeworktransactioninterceptorDefaultTransactionAttribute
:end
:start
Prefix
for
the
propagation
constants
defined
in
TransactionDefinition
:end
:start
Prefix
for
the
isolation
constants
defined
in
TransactionDefinition
:end
:start
Prefix
for
transaction
timeout
values
in
description
strings
:end
:start
Marker
for
read-only
transactions
in
description
strings
:end
:start
Create
a
new
DefaultTransactionDefinition,
with
default
settings
Can
be
modified
through
bean
property
setters
:end
:start
Copy
constructor
Definition
can
be
modified
through
bean
property
setters
:end
:start
Create
a
new
DefaultTransactionDefinition
with
the
the
given
propagation
behavior
Can
be
modified
through
bean
property
setters
:end
:start
Set
the
propagation
behavior
by
the
name
of
the
corresponding
constant
in
TransactionDefinition,
eg
"PROPAGATION_REQUIRED"
:end
:start
Set
the
propagation
behavior
Must
be
one
of
the
propagation
constants
in
the
TransactionDefinition
interface
Default
is
PROPAGATION_REQUIRED
:end
:start
Set
the
isolation
level
by
the
name
of
the
corresponding
constant
in
TransactionDefinition,
eg
"ISOLATION_DEFAULT"
:end
:start
Set
the
isolation
level
Must
be
one
of
the
isolation
constants
in
the
TransactionDefinition
interface
Default
is
ISOLATION_DEFAULT
:end
:start
Set
the
timeout
to
apply,
as
number
of
seconds
Default
is
TIMEOUT_DEFAULT
(-1)
:end
:start
Set
whether
to
optimize
as
read-only
transaction
Default
is
"false"
:end
:start
Set
the
name
of
this
transaction
Default
is
none
<p>This
will
be
used
as
transaction
name
to
be
shown
in
a
transaction
monitor,
if
applicable
(for
example,
WebLogic's)
:end
:start
This
implementation
compares
the
toString()
results
:end
:start
This
implementation
returns
toString()'s
hash
code
:end
:start
Return
an
identifying
description
for
this
transaction
definition
<p>The
format
matches
the
one
used
by
orgspringframeworktransactioninterceptorTransactionAttributeEditor,
to
be
able
to
feed
toString
results
into
bean
properties
of
type
orgspringframeworktransactioninterceptorTransactionAttribute
<p>Has
to
be
overridden
in
subclasses
for
correct
equals
and
hashCode
behavior
Alternatively,
#equals
and
#hashCode
can
be
overridden
themselves
:end
:start
Return
an
identifying
description
for
this
transaction
definition
<p>Available
to
subclasses,
for
inclusion
in
their
toString()
result
:end
:start
Default
implementation
of
the
orgspringframeworktransactionTransactionStatus
interface,
used
by
AbstractPlatformTransactionManager
Based
on
the
concept
of
an
underlying
"transaction
object"
<p>Holds
all
status
information
that
AbstractPlatformTransactionManager
needs
internally,
including
a
generic
transaction
object
determined
by
the
concrete
transaction
manager
implementation
<p>Supports
delegating
savepoint-related
methods
to
a
transaction
object
that
implements
the
SavepointManager
interface
<p><b>NOTE:</b>
This
is
<i>not</i>
intended
for
use
with
other
PlatformTransactionManager
implementations,
in
particular
not
for
mock
transaction
managers
in
testing
environments
Use
the
alternative
SimpleTransactionStatus
class
or
a
mock
for
the
plain
orgspringframeworktransactionTransactionStatus
interface
instead
:end
:start
Create
a
new
DefaultTransactionStatus
instance
:end
:start
Return
the
underlying
transaction
object
:end
:start
Return
whether
there
is
an
actual
transaction
active
:end
:start
Return
if
a
new
transaction
synchronization
has
been
opened
for
this
transaction
:end
:start
Return
if
this
transaction
is
defined
as
read-only
transaction
:end
:start
Return
whether
the
progress
of
this
transaction
is
debugged
This
is
used
by
AbstractPlatformTransactionManager
as
an
optimization,
to
prevent
repeated
calls
to
loggerisDebug()
Not
really
intended
for
client
code
:end
:start
Return
the
holder
for
resources
that
have
been
suspended
for
this
transaction,
if
any
:end
:start
Determine
the
rollback-only
flag
via
checking
both
the
transaction
object,
provided
that
the
latter
implements
the
SmartTransactionObject
interface
<p>Will
return
"true"
if
the
transaction
itself
has
been
marked
rollback-only
by
the
transaction
coordinator,
for
example
in
case
of
a
timeout
:end
:start
Delegate
the
flushing
to
the
transaction
object,
provided
that
the
latter
implements
the
SmartTransactionObject
interface
:end
:start
This
implementation
exposes
the
SavepointManager
interface
of
the
underlying
transaction
object,
if
any
:end
:start
Return
whether
the
underlying
transaction
implements
the
SavepointManager
interface
:end
:start
TransactionDefinition
implementation
that
delegates
all
calls
to
a
given
target
TransactionDefinition
instance
Abstract
because
it
is
meant
to
be
subclassed,
with
subclasses
overriding
specific
methods
that
are
not
supposed
to
simply
delegate
to
the
target
instance
:end
:start
Create
a
DelegatingTransactionAttribute
for
the
given
target
attribute
:end
:start
Generic
interface
to
be
implemented
by
resource
holders
Allows
Spring's
transaction
infrastructure
to
introspect
and
reset
the
holder
when
necessary
:end
:start
Reset
the
transactional
state
of
this
holder
:end
:start
Notify
this
holder
that
it
has
been
unbound
from
transaction
synchronization
:end
:start
Determine
whether
this
holder
is
considered
as
'void',
ie
as
a
leftover
from
a
previous
thread
:end
:start
Convenient
base
class
for
resource
holders
<p>Features
rollback-only
support
for
nested
transactions
Can
expire
after
a
certain
number
of
seconds
or
milliseconds,
to
determine
transactional
timeouts
:end
:start
Mark
the
resource
as
synchronized
with
a
transaction
:end
:start
Return
whether
the
resource
is
synchronized
with
a
transaction
:end
:start
Mark
the
resource
transaction
as
rollback-only
:end
:start
Return
whether
the
resource
transaction
is
marked
as
rollback-only
:end
:start
Set
the
timeout
for
this
object
in
seconds
:end
:start
Set
the
timeout
for
this
object
in
milliseconds
:end
:start
Return
whether
this
object
has
an
associated
timeout
:end
:start
Return
the
expiration
deadline
of
this
object
:end
:start
Return
the
time
to
live
for
this
object
in
seconds
Rounds
up
eagerly,
eg
900001
still
to
10
:end
:start
Return
the
time
to
live
for
this
object
in
milliseconds
:end
:start
Increase
the
reference
count
by
one
because
the
holder
has
been
requested
(ie
someone
requested
the
resource
held
by
it)
:end
:start
Decrease
the
reference
count
by
one
because
the
holder
has
been
released
(ie
someone
released
the
resource
held
by
it)
:end
:start
Return
whether
there
are
still
open
references
to
this
holder
:end
:start
Clear
the
transactional
state
of
this
resource
holder
:end
:start
Reset
this
resource
holder
-
transactional
state
as
well
as
reference
count
:end
:start
TransactionSynchronization
implementation
that
manages
a
ResourceHolder
bound
through
TransactionSynchronizationManager
:end
:start
Create
a
new
ResourceHolderSynchronization
for
the
given
holder
:end
:start
Return
whether
this
holder
should
be
unbound
at
completion
(or
should
rather
be
left
bound
to
the
thread
after
the
transaction)
<p>The
default
implementation
returns
true
:end
:start
Return
whether
this
holder's
resource
should
be
released
before
transaction
completion
({@code
true)
or
rather
after
transaction
completion
({@code
false)
<p>Note
that
resources
will
only
be
released
when
they
are
unbound
from
the
thread
({@link
#shouldUnbindAtCompletion())
<p>The
default
implementation
returns
true
:end
:start
Return
whether
this
holder's
resource
should
be
released
after
transaction
completion
({@code
true)
<p>The
default
implementation
returns
!shouldReleaseBeforeCompletion(),
releasing
after
completion
if
no
attempt
was
made
before
completion
:end
:start
Flush
callback
for
the
given
resource
holder
:end
:start
After-commit
callback
for
the
given
resource
holder
Only
called
when
the
resource
hasn't
been
released
yet
({@link
#shouldReleaseBeforeCompletion())
:end
:start
Release
the
given
resource
(after
it
has
been
unbound
from
the
thread)
:end
:start
Perform
a
cleanup
on
the
given
resource
(which
is
left
bound
to
the
thread)
:end
:start
Extension
of
the
orgspringframeworktransactionPlatformTransactionManager
interface,
indicating
a
native
resource
transaction
manager,
operating
on
a
single
target
resource
Such
transaction
managers
differ
from
JTA
transaction
managers
in
that
they
do
not
use
XA
transaction
enlistment
for
an
open
number
of
resources
but
rather
focus
on
leveraging
the
native
power
and
simplicity
of
a
single
target
resource
<p>This
interface
is
mainly
used
for
abstract
introspection
of
a
transaction
manager,
giving
clients
a
hint
on
what
kind
of
transaction
manager
they
have
been
given
and
on
what
concrete
resource
the
transaction
manager
is
operating
on
:end
:start
Return
the
resource
factory
that
this
transaction
manager
operates
on,
eg
a
JDBC
DataSource
or
a
JMS
ConnectionFactory
<p>This
target
resource
factory
is
usually
used
as
resource
key
for
TransactionSynchronizationManager's
resource
bindings
per
thread
:end
:start
A
simple
orgspringframeworktransactionTransactionStatus
implementation
<p>Derives
from
AbstractTransactionStatus
and
adds
an
explicit
#isNewTransaction()
"newTransaction"
flag
<p>This
class
is
not
used
by
any
of
Spring's
pre-built
orgspringframeworktransactionPlatformTransactionManager
implementations
It
is
mainly
provided
as
a
start
for
custom
transaction
manager
implementations
and
as
a
static
mock
for
testing
transactional
code
(either
as
part
of
a
mock
PlatformTransactionManager
or
as
argument
passed
into
a
TransactionCallback
to
be
tested)
:end
:start
Create
a
new
instance
of
the
SimpleTransactionStatus
class,
indicating
a
new
transaction
:end
:start
Create
a
new
instance
of
the
SimpleTransactionStatus
class
:end
:start
Interface
to
be
implemented
by
transaction
objects
that
are
able
to
return
an
internal
rollback-only
marker,
typically
from
a
another
transaction
that
has
participated
and
marked
it
as
rollback-only
<p>Autodetected
by
DefaultTransactionStatus,
to
always
return
a
current
rollbackOnly
flag
even
if
not
resulting
from
the
current
TransactionStatus
:end
:start
Return
whether
the
transaction
is
internally
marked
as
rollback-only
Can,
for
example,
check
the
JTA
UserTransaction
:end
:start
Flush
the
underlying
sessions
to
the
datastore,
if
applicable:
for
example,
all
affected
Hibernate/JPA
sessions
:end
:start
Callback
interface
for
transactional
code
Used
with
TransactionTemplate's
execute
method,
often
as
anonymous
class
within
a
method
implementation
<p>Typically
used
to
assemble
various
calls
to
transaction-unaware
data
access
services
into
a
higher-level
service
method
with
transaction
demarcation
As
an
alternative,
consider
the
use
of
declarative
transaction
demarcation
(eg
through
Spring's
orgspringframeworktransactionannotationTransactional
annotation)
:end
:start
Gets
called
by
TransactionTemplate#execute
within
a
transactional
context
Does
not
need
to
care
about
transactions
itself,
although
it
can
retrieve
and
influence
the
status
of
the
current
transaction
via
the
given
status
object,
eg
setting
rollback-only
<p>Allows
for
returning
a
result
object
created
within
the
transaction,
ie
a
domain
object
or
a
collection
of
domain
objects
A
RuntimeException
thrown
by
the
callback
is
treated
as
application
exception
that
enforces
a
rollback
Any
such
exception
will
be
propagated
to
the
caller
of
the
template,
unless
there
is
a
problem
rolling
back,
in
which
case
a
TransactionException
will
be
thrown
:end
:start
Simple
convenience
class
for
TransactionCallback
implementation
Allows
for
implementing
a
doInTransaction
version
without
result,
ie
without
the
need
for
a
return
statement
:end
:start
Gets
called
by
TransactionTemplateexecute
within
a
transactional
context
Does
not
need
to
care
about
transactions
itself,
although
it
can
retrieve
and
influence
the
status
of
the
current
transaction
via
the
given
status
object,
eg
setting
rollback-only
<p>A
RuntimeException
thrown
by
the
callback
is
treated
as
application
exception
that
enforces
a
rollback
An
exception
gets
propagated
to
the
caller
of
the
template
<p>Note
when
using
JTA:
JTA
transactions
only
work
with
transactional
JNDI
resources,
so
implementations
need
to
use
such
resources
if
they
want
transaction
support
:end
:start
Interface
specifying
basic
transaction
execution
operations
Implemented
by
TransactionTemplate
Not
often
used
directly,
but
a
useful
option
to
enhance
testability,
as
it
can
easily
be
mocked
or
stubbed
:end
:start
Execute
the
action
specified
by
the
given
callback
object
within
a
transaction
<p>Allows
for
returning
a
result
object
created
within
the
transaction,
that
is,
a
domain
object
or
a
collection
of
domain
objects
A
RuntimeException
thrown
by
the
callback
is
treated
as
a
fatal
exception
that
enforces
a
rollback
Such
an
exception
gets
propagated
to
the
caller
of
the
template
:end
:start
Interface
for
transaction
synchronization
callbacks
Supported
by
AbstractPlatformTransactionManager
<p>TransactionSynchronization
implementations
can
implement
the
Ordered
interface
to
influence
their
execution
order
A
synchronization
that
does
not
implement
the
Ordered
interface
is
appended
to
the
end
of
the
synchronization
chain
<p>System
synchronizations
performed
by
Spring
itself
use
specific
order
values,
allowing
for
fine-grained
interaction
with
their
execution
order
(if
necessary)
:end
:start
Completion
status
in
case
of
proper
commit
:end
:start
Completion
status
in
case
of
proper
rollback
:end
:start
Completion
status
in
case
of
heuristic
mixed
completion
or
system
errors
:end
:start
Suspend
this
synchronization
Supposed
to
unbind
resources
from
TransactionSynchronizationManager
if
managing
any
:end
:start
Resume
this
synchronization
Supposed
to
rebind
resources
to
TransactionSynchronizationManager
if
managing
any
:end
:start
Flush
the
underlying
session
to
the
datastore,
if
applicable:
for
example,
a
Hibernate/JPA
session
:end
:start
Invoked
before
transaction
commit
(before
"beforeCompletion")
Can
eg
flush
transactional
O/R
Mapping
sessions
to
the
database
<p>This
callback
does
<i>not</i>
mean
that
the
transaction
will
actually
be
committed
A
rollback
decision
can
still
occur
after
this
method
has
been
called
This
callback
is
rather
meant
to
perform
work
that's
only
relevant
if
a
commit
still
has
a
chance
to
happen,
such
as
flushing
SQL
statements
to
the
database
<p>Note
that
exceptions
will
get
propagated
to
the
commit
caller
and
cause
a
rollback
of
the
transaction
:end
:start
Invoked
before
transaction
commit/rollback
Can
perform
resource
cleanup
<i>before</i>
transaction
completion
<p>This
method
will
be
invoked
after
beforeCommit,
even
when
beforeCommit
threw
an
exception
This
callback
allows
for
closing
resources
before
transaction
completion,
for
any
outcome
:end
:start
Invoked
after
transaction
commit
Can
perform
further
operations
right
<i>after</i>
the
main
transaction
has
<i>successfully</i>
committed
<p>Can
eg
commit
further
operations
that
are
supposed
to
follow
on
a
successful
commit
of
the
main
transaction,
like
confirmation
messages
or
emails
<p><b>NOTE:</b>
The
transaction
will
have
been
committed
already,
but
the
transactional
resources
might
still
be
active
and
accessible
As
a
consequence,
any
data
access
code
triggered
at
this
point
will
still
"participate"
in
the
original
transaction,
allowing
to
perform
some
cleanup
(with
no
commit
following
anymore!),
unless
it
explicitly
declares
that
it
needs
to
run
in
a
separate
transaction
Hence:
<b>Use
PROPAGATION_REQUIRES_NEW
for
any
transactional
operation
that
is
called
from
here</b>
:end
:start
Invoked
after
transaction
commit/rollback
Can
perform
resource
cleanup
<i>after</i>
transaction
completion
<p><b>NOTE:</b>
The
transaction
will
have
been
committed
or
rolled
back
already,
but
the
transactional
resources
might
still
be
active
and
accessible
As
a
consequence,
any
data
access
code
triggered
at
this
point
will
still
"participate"
in
the
original
transaction,
allowing
to
perform
some
cleanup
(with
no
commit
following
anymore!),
unless
it
explicitly
declares
that
it
needs
to
run
in
a
separate
transaction
Hence:
<b>Use
PROPAGATION_REQUIRES_NEW
for
any
transactional
operation
that
is
called
from
here</b>
:end
:start
Simple
TransactionSynchronization
adapter
containing
empty
method
implementations,
for
easier
overriding
of
single
methods
<p>Also
implements
the
Ordered
interface
to
enable
the
execution
order
of
synchronizations
to
be
controlled
declaratively
The
default
#getOrder()
order
is
Ordered#LOWEST_PRECEDENCE,
indicating
late
execution;
return
a
lower
value
for
earlier
execution
:end
:start
Central
delegate
that
manages
resources
and
transaction
synchronizations
per
thread
To
be
used
by
resource
management
code
but
not
by
typical
application
code
<p>Supports
one
resource
per
key
without
overwriting,
that
is,
a
resource
needs
to
be
removed
before
a
new
one
can
be
set
for
the
same
key
Supports
a
list
of
transaction
synchronizations
if
synchronization
is
active
<p>Resource
management
code
should
check
for
thread-bound
resources,
eg
JDBC
Connections
or
Hibernate
Sessions,
via
getResource
Such
code
is
normally
not
supposed
to
bind
resources
to
threads,
as
this
is
the
responsibility
of
transaction
managers
A
further
option
is
to
lazily
bind
on
first
use
if
transaction
synchronization
is
active,
for
performing
transactions
that
span
an
arbitrary
number
of
resources
<p>Transaction
synchronization
must
be
activated
and
deactivated
by
a
transaction
manager
via
#initSynchronization()
and
#clearSynchronization()
This
is
automatically
supported
by
AbstractPlatformTransactionManager,
and
thus
by
all
standard
Spring
transaction
managers,
such
as
orgspringframeworktransactionjtaJtaTransactionManager
and
orgspringframeworkjdbcdatasourceDataSourceTransactionManager
<p>Resource
management
code
should
only
register
synchronizations
when
this
manager
is
active,
which
can
be
checked
via
#isSynchronizationActive;
it
should
perform
immediate
resource
cleanup
else
If
transaction
synchronization
isn't
active,
there
is
either
no
current
transaction,
or
the
transaction
manager
doesn't
support
transaction
synchronization
<p>Synchronization
is
for
example
used
to
always
return
the
same
resources
within
a
JTA
transaction,
eg
a
JDBC
Connection
or
a
Hibernate
Session
for
any
given
DataSource
or
SessionFactory,
respectively
:end
:start
Return
all
resources
that
are
bound
to
the
current
thread
<p>Mainly
for
debugging
purposes
Resource
managers
should
always
invoke
hasResource
for
a
specific
resource
key
that
they
are
interested
in
:end
:start
Check
if
there
is
a
resource
for
the
given
key
bound
to
the
current
thread
:end
:start
Retrieve
a
resource
for
the
given
key
that
is
bound
to
the
current
thread
:end
:start
Bind
the
given
resource
for
the
given
key
to
the
current
thread
:end
:start
Unbind
a
resource
for
the
given
key
from
the
current
thread
:end
:start
Unbind
a
resource
for
the
given
key
from
the
current
thread
:end
:start
Return
if
transaction
synchronization
is
active
for
the
current
thread
Can
be
called
before
register
to
avoid
unnecessary
instance
creation
:end
:start
Activate
transaction
synchronization
for
the
current
thread
Called
by
a
transaction
manager
on
transaction
begin
:end
:start
Register
a
new
transaction
synchronization
for
the
current
thread
Typically
called
by
resource
management
code
<p>Note
that
synchronizations
can
implement
the
orgspringframeworkcoreOrdered
interface
They
will
be
executed
in
an
order
according
to
their
order
value
(if
any)
:end
:start
Return
an
unmodifiable
snapshot
list
of
all
registered
synchronizations
for
the
current
thread
:end
:start
Deactivate
transaction
synchronization
for
the
current
thread
Called
by
the
transaction
manager
on
transaction
cleanup
:end
:start
Expose
the
name
of
the
current
transaction,
if
any
Called
by
the
transaction
manager
on
transaction
begin
and
on
cleanup
:end
:start
Return
the
name
of
the
current
transaction,
or
null
if
none
set
To
be
called
by
resource
management
code
for
optimizations
per
use
case,
for
example
to
optimize
fetch
strategies
for
specific
named
transactions
:end
:start
Expose
a
read-only
flag
for
the
current
transaction
Called
by
the
transaction
manager
on
transaction
begin
and
on
cleanup
:end
:start
Return
whether
the
current
transaction
is
marked
as
read-only
To
be
called
by
resource
management
code
when
preparing
a
newly
created
resource
(for
example,
a
Hibernate
Session)
<p>Note
that
transaction
synchronizations
receive
the
read-only
flag
as
argument
for
the
beforeCommit
callback,
to
be
able
to
suppress
change
detection
on
commit
The
present
method
is
meant
to
be
used
for
earlier
read-only
checks,
for
example
to
set
the
flush
mode
of
a
Hibernate
Session
to
"FlushModeNEVER"
upfront
:end
:start
Expose
an
isolation
level
for
the
current
transaction
Called
by
the
transaction
manager
on
transaction
begin
and
on
cleanup
:end
:start
Return
the
isolation
level
for
the
current
transaction,
if
any
To
be
called
by
resource
management
code
when
preparing
a
newly
created
resource
(for
example,
a
JDBC
Connection)
:end
:start
Expose
whether
there
currently
is
an
actual
transaction
active
Called
by
the
transaction
manager
on
transaction
begin
and
on
cleanup
:end
:start
Return
whether
there
currently
is
an
actual
transaction
active
This
indicates
whether
the
current
thread
is
associated
with
an
actual
transaction
rather
than
just
with
active
transaction
synchronization
<p>To
be
called
by
resource
management
code
that
wants
to
discriminate
between
active
transaction
synchronization
(with
or
without
backing
resource
transaction;
also
on
PROPAGATION_SUPPORTS)
and
an
actual
transaction
being
active
(with
backing
resource
transaction;
on
PROPAGATION_REQUIRES,
PROPAGATION_REQUIRES_NEW,
etc)
:end
:start
Clear
the
entire
transaction
synchronization
state
for
the
current
thread:
registered
synchronizations
as
well
as
the
various
transaction
characteristics
:end
:start
Utility
methods
for
triggering
specific
TransactionSynchronization
callback
methods
on
all
currently
registered
synchronizations
:end
:start
Check
whether
the
given
resource
transaction
managers
refers
to
the
given
(underlying)
resource
factory
:end
:start
Trigger
flush
callbacks
on
all
currently
registered
synchronizations
:end
:start
Trigger
beforeCommit
callbacks
on
all
currently
registered
synchronizations
:end
:start
Trigger
beforeCompletion
callbacks
on
all
currently
registered
synchronizations
:end
:start
Trigger
afterCommit
callbacks
on
all
currently
registered
synchronizations
:end
:start
Actually
invoke
the
afterCommit
methods
of
the
given
Spring
TransactionSynchronization
objects
:end
:start
Trigger
afterCompletion
callbacks
on
all
currently
registered
synchronizations
:end
:start
Actually
invoke
the
afterCompletion
methods
of
the
given
Spring
TransactionSynchronization
objects
:end
:start
Template
class
that
simplifies
programmatic
transaction
demarcation
and
transaction
exception
handling
<p>The
central
method
is
#execute,
supporting
transactional
code
that
implements
the
TransactionCallback
interface
This
template
handles
the
transaction
lifecycle
and
possible
exceptions
such
that
neither
the
TransactionCallback
implementation
nor
the
calling
code
needs
to
explicitly
handle
transactions
<p>Typical
usage:
Allows
for
writing
low-level
data
access
objects
that
use
resources
such
as
JDBC
DataSources
but
are
not
transaction-aware
themselves
Instead,
they
can
implicitly
participate
in
transactions
handled
by
higher-level
application
services
utilizing
this
class,
making
calls
to
the
low-level
services
via
an
inner-class
callback
object
<p>Can
be
used
within
a
service
implementation
via
direct
instantiation
with
a
transaction
manager
reference,
or
get
prepared
in
an
application
context
and
passed
to
services
as
bean
reference
Note:
The
transaction
manager
should
always
be
configured
as
bean
in
the
application
context:
in
the
first
case
given
to
the
service
directly,
in
the
second
case
given
to
the
prepared
template
<p>Supports
setting
the
propagation
behavior
and
the
isolation
level
by
name,
for
convenient
configuration
in
context
definitions
:end
:start
Logger
available
to
subclasses
:end
:start
Construct
a
new
TransactionTemplate
for
bean
usage
<p>Note:
The
PlatformTransactionManager
needs
to
be
set
before
any
execute
calls
:end
:start
Construct
a
new
TransactionTemplate
using
the
given
transaction
manager
:end
:start
Construct
a
new
TransactionTemplate
using
the
given
transaction
manager,
taking
its
default
settings
from
the
given
transaction
definition
:end
:start
Set
the
transaction
management
strategy
to
be
used
:end
:start
Return
the
transaction
management
strategy
to
be
used
:end
:start
Interface
that
defines
Spring-compliant
transaction
properties
Based
on
the
propagation
behavior
definitions
analogous
to
EJB
CMT
attributes
<p>Note
that
isolation
level
and
timeout
settings
will
not
get
applied
unless
an
actual
new
transaction
gets
started
As
only
#PROPAGATION_REQUIRED,
#PROPAGATION_REQUIRES_NEW
and
#PROPAGATION_NESTED
can
cause
that,
it
usually
doesn't
make
sense
to
specify
those
settings
in
other
cases
Furthermore,
be
aware
that
not
all
transaction
managers
will
support
those
advanced
features
and
thus
might
throw
corresponding
exceptions
when
given
non-default
values
<p>The
#isReadOnly()
read-only
flag
applies
to
any
transaction
context,
whether
backed
by
an
actual
resource
transaction
or
operating
non-transactionally
at
the
resource
level
In
the
latter
case,
the
flag
will
only
apply
to
managed
resources
within
the
application,
such
as
a
Hibernate
Session
:end
:start
Support
a
current
transaction;
create
a
new
one
if
none
exists
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p>This
is
typically
the
default
setting
of
a
transaction
definition,
and
typically
defines
a
transaction
synchronization
scope
:end
:start
Support
a
current
transaction;
execute
non-transactionally
if
none
exists
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p><b>NOTE:</b>
For
transaction
managers
with
transaction
synchronization,
PROPAGATION_SUPPORTS
is
slightly
different
from
no
transaction
at
all,
as
it
defines
a
transaction
scope
that
synchronization
might
apply
to
As
a
consequence,
the
same
resources
(a
JDBC
Connection,
a
Hibernate
Session,
etc)
will
be
shared
for
the
entire
specified
scope
Note
that
the
exact
behavior
depends
on
the
actual
synchronization
configuration
of
the
transaction
manager!
<p>In
general,
use
PROPAGATION_SUPPORTS
with
care!
In
particular,
do
not
rely
on
PROPAGATION_REQUIRED
or
PROPAGATION_REQUIRES_NEW
<i>within</i>
a
PROPAGATION_SUPPORTS
scope
(which
may
lead
to
synchronization
conflicts
at
runtime)
If
such
nesting
is
unavoidable,
make
sure
to
configure
your
transaction
manager
appropriately
(typically
switching
to
"synchronization
on
actual
transaction")
:end
:start
Support
a
current
transaction;
throw
an
exception
if
no
current
transaction
exists
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p>Note
that
transaction
synchronization
within
a
PROPAGATION_MANDATORY
scope
will
always
be
driven
by
the
surrounding
transaction
:end
:start
Create
a
new
transaction,
suspending
the
current
transaction
if
one
exists
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p><b>NOTE:</b>
Actual
transaction
suspension
will
not
work
out-of-the-box
on
all
transaction
managers
This
in
particular
applies
to
orgspringframeworktransactionjtaJtaTransactionManager,
which
requires
the
javaxtransactionTransactionManager
to
be
made
available
it
to
it
(which
is
server-specific
in
standard
J2EE)
<p>A
PROPAGATION_REQUIRES_NEW
scope
always
defines
its
own
transaction
synchronizations
Existing
synchronizations
will
be
suspended
and
resumed
appropriately
:end
:start
Do
not
support
a
current
transaction;
rather
always
execute
non-transactionally
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p><b>NOTE:</b>
Actual
transaction
suspension
will
not
work
out-of-the-box
on
all
transaction
managers
This
in
particular
applies
to
orgspringframeworktransactionjtaJtaTransactionManager,
which
requires
the
javaxtransactionTransactionManager
to
be
made
available
it
to
it
(which
is
server-specific
in
standard
J2EE)
<p>Note
that
transaction
synchronization
is
<i>not</i>
available
within
a
PROPAGATION_NOT_SUPPORTED
scope
Existing
synchronizations
will
be
suspended
and
resumed
appropriately
:end
:start
Do
not
support
a
current
transaction;
throw
an
exception
if
a
current
transaction
exists
Analogous
to
the
EJB
transaction
attribute
of
the
same
name
<p>Note
that
transaction
synchronization
is
<i>not</i>
available
within
a
PROPAGATION_NEVER
scope
:end
:start
Execute
within
a
nested
transaction
if
a
current
transaction
exists,
behave
like
#PROPAGATION_REQUIRED
else
There
is
no
analogous
feature
in
EJB
<p><b>NOTE:</b>
Actual
creation
of
a
nested
transaction
will
only
work
on
specific
transaction
managers
Out
of
the
box,
this
only
applies
to
the
JDBC
orgspringframeworkjdbcdatasourceDataSourceTransactionManager
when
working
on
a
JDBC
30
driver
Some
JTA
providers
might
support
nested
transactions
as
well
:end
:start
Use
the
default
isolation
level
of
the
underlying
datastore
All
other
levels
correspond
to
the
JDBC
isolation
levels
:end
:start
Indicates
that
dirty
reads,
non-repeatable
reads
and
phantom
reads
can
occur
<p>This
level
allows
a
row
changed
by
one
transaction
to
be
read
by
another
transaction
before
any
changes
in
that
row
have
been
committed
(a
"dirty
read")
If
any
of
the
changes
are
rolled
back,
the
second
transaction
will
have
retrieved
an
invalid
row
:end
:start
Indicates
that
dirty
reads
are
prevented;
non-repeatable
reads
and
phantom
reads
can
occur
<p>This
level
only
prohibits
a
transaction
from
reading
a
row
with
uncommitted
changes
in
it
:end
:start
Indicates
that
dirty
reads
and
non-repeatable
reads
are
prevented;
phantom
reads
can
occur
<p>This
level
prohibits
a
transaction
from
reading
a
row
with
uncommitted
changes
in
it,
and
it
also
prohibits
the
situation
where
one
transaction
reads
a
row,
a
second
transaction
alters
the
row,
and
the
first
transaction
re-reads
the
row,
getting
different
values
the
second
time
(a
"non-repeatable
read")
:end
:start
Indicates
that
dirty
reads,
non-repeatable
reads
and
phantom
reads
are
prevented
<p>This
level
includes
the
prohibitions
in
#ISOLATION_REPEATABLE_READ
and
further
prohibits
the
situation
where
one
transaction
reads
all
rows
that
satisfy
a
WHERE
condition,
a
second
transaction
inserts
a
row
that
satisfies
that
WHERE
condition,
and
the
first
transaction
re-reads
for
the
same
condition,
retrieving
the
additional
"phantom"
row
in
the
second
read
:end
:start
Use
the
default
timeout
of
the
underlying
transaction
system,
or
none
if
timeouts
are
not
supported
:end
:start
Return
the
propagation
behavior
<p>Must
return
one
of
the
PROPAGATION_XXX
constants
defined
on
TransactionDefinition
this
interface
:end
:start
Return
the
isolation
level
<p>Must
return
one
of
the
ISOLATION_XXX
constants
defined
on
TransactionDefinition
this
interface
<p>Only
makes
sense
in
combination
with
#PROPAGATION_REQUIRED
or
#PROPAGATION_REQUIRES_NEW
<p>Note
that
a
transaction
manager
that
does
not
support
custom
isolation
levels
will
throw
an
exception
when
given
any
other
level
than
#ISOLATION_DEFAULT
:end
:start
Return
the
transaction
timeout
<p>Must
return
a
number
of
seconds,
or
#TIMEOUT_DEFAULT
<p>Only
makes
sense
in
combination
with
#PROPAGATION_REQUIRED
or
#PROPAGATION_REQUIRES_NEW
<p>Note
that
a
transaction
manager
that
does
not
support
timeouts
will
throw
an
exception
when
given
any
other
timeout
than
#TIMEOUT_DEFAULT
:end
:start
Return
whether
to
optimize
as
a
read-only
transaction
<p>The
read-only
flag
applies
to
any
transaction
context,
whether
backed
by
an
actual
resource
transaction
({@link
#PROPAGATION_REQUIRED/{@link
#PROPAGATION_REQUIRES_NEW)
or
operating
non-transactionally
at
the
resource
level
({@link
#PROPAGATION_SUPPORTS)
In
the
latter
case,
the
flag
will
only
apply
to
managed
resources
within
the
application,
such
as
a
Hibernate
Session
<<
*
<p>This
just
serves
as
a
hint
for
the
actual
transaction
subsystem;
it
will
<i>not
necessarily</i>
cause
failure
of
write
access
attempts
A
transaction
manager
which
cannot
interpret
the
read-only
hint
will
<i>not</i>
throw
an
exception
when
asked
for
a
read-only
transaction
:end
:start
Return
the
name
of
this
transaction
Can
be
null
<p>This
will
be
used
as
the
transaction
name
to
be
shown
in
a
transaction
monitor,
if
applicable
(for
example,
WebLogic's)
<p>In
case
of
Spring's
declarative
transactions,
the
exposed
name
will
be
the
fully-qualified
class
name
+
""
+
method
name
(by
default)
:end
:start
Superclass
for
all
transaction
exceptions
:end
:start
Constructor
for
TransactionException
:end
:start
Constructor
for
TransactionException
:end
:start
Representation
of
the
status
of
a
transaction
<p>Transactional
code
can
use
this
to
retrieve
status
information,
and
to
programmatically
request
a
rollback
(instead
of
throwing
an
exception
that
causes
an
implicit
rollback)
<p>Derives
from
the
SavepointManager
interface
to
provide
access
to
savepoint
management
facilities
Note
that
savepoint
management
is
only
available
if
supported
by
the
underlying
transaction
manager
:end
:start
Return
whether
the
present
transaction
is
new
(else
participating
in
an
existing
transaction,
or
potentially
not
running
in
an
actual
transaction
in
the
first
place)
:end
:start
Return
whether
this
transaction
internally
carries
a
savepoint,
that
is,
has
been
created
as
nested
transaction
based
on
a
savepoint
<p>This
method
is
mainly
here
for
diagnostic
purposes,
alongside
#isNewTransaction()
For
programmatic
handling
of
custom
savepoints,
use
SavepointManager's
operations
:end
:start
Set
the
transaction
rollback-only
This
instructs
the
transaction
manager
that
the
only
possible
outcome
of
the
transaction
may
be
a
rollback,
as
alternative
to
throwing
an
exception
which
would
in
turn
trigger
a
rollback
<p>This
is
mainly
intended
for
transactions
managed
by
orgspringframeworktransactionsupportTransactionTemplate
or
orgspringframeworktransactioninterceptorTransactionInterceptor,
where
the
actual
commit/rollback
decision
is
made
by
the
container
:end
:start
Return
whether
the
transaction
has
been
marked
as
rollback-only
(either
by
the
application
or
by
the
transaction
infrastructure)
:end
:start
Flush
the
underlying
session
to
the
datastore,
if
applicable:
for
example,
all
affected
Hibernate/JPA
sessions
:end
:start
Return
whether
this
transaction
is
completed,
that
is,
whether
it
has
already
been
committed
or
rolled
back
:end
:start
Exception
thrown
when
attempting
to
suspend
an
existing
transaction
but
transaction
suspension
is
not
supported
by
the
underlying
backend
:end
:start
Constructor
for
TransactionSuspensionNotSupportedException
:end
:start
Constructor
for
TransactionSuspensionNotSupportedException
:end
:start
Exception
thrown
when
a
general
transaction
system
error
is
encountered,
like
on
commit
or
rollback
:end
:start
Constructor
for
TransactionSystemException
:end
:start
Constructor
for
TransactionSystemException
:end
:start
Set
an
application
exception
that
was
thrown
before
this
transaction
exception,
preserving
the
original
exception
despite
the
overriding
TransactionSystemException
:end
:start
Return
the
application
exception
that
was
thrown
before
this
transaction
exception,
if
any
:end
:start
Return
the
exception
that
was
the
first
to
be
thrown
within
the
failed
transaction:
ie
the
application
exception,
if
any,
or
the
TransactionSystemException's
own
cause
:end
:start
Exception
to
be
thrown
when
a
transaction
has
timed
out
<p>Thrown
by
Spring's
local
transaction
strategies
if
the
deadline
for
a
transaction
has
been
reached
when
an
operation
is
attempted,
according
to
the
timeout
specified
for
the
given
transaction
<p>Beyond
such
checks
before
each
transactional
operation,
Spring's
local
transaction
strategies
will
also
pass
appropriate
timeout
values
to
resource
operations
(for
example
to
JDBC
Statements,
letting
the
JDBC
driver
respect
the
timeout)
Such
operations
will
usually
throw
native
resource
exceptions
(for
example,
JDBC
SQLExceptions)
if
their
operation
timeout
has
been
exceeded,
to
be
converted
to
Spring's
DataAccessException
in
the
respective
DAO
(which
might
use
Spring's
JdbcTemplate,
for
example)
<p>In
a
JTA
environment,
it
is
up
to
the
JTA
transaction
coordinator
to
apply
transaction
timeouts
Usually,
the
corresponding
JTA-aware
connection
pool
will
perform
timeout
checks
and
throw
corresponding
native
resource
exceptions
(for
example,
JDBC
SQLExceptions)
:end
:start
Constructor
for
TransactionTimedOutException
:end
:start
Constructor
for
TransactionTimedOutException
:end
:start
Superclass
for
exceptions
caused
by
inappropriate
usage
of
a
Spring
transaction
API
:end
:start
Constructor
for
TransactionUsageException
:end
:start
Constructor
for
TransactionUsageException
:end
:start
Thrown
when
an
attempt
to
commit
a
transaction
resulted
in
an
unexpected
rollback
:end
:start
Constructor
for
UnexpectedRollbackException
:end
:start
Constructor
for
UnexpectedRollbackException
:end
:start
Test
for
CGLIB
proxying
that
implements
no
interfaces
and
has
one
dependency
:end
:start
Inherits
fallback
behavior
from
AbstractFallbackTransactionAttributeSource
:end
:start
Used
for
testing
only
(for
example,
when
we
must
replace
the
behavior
of
a
PlatformTransactionManager
bean
we
don't
have
access
to)
<p>Allows
behavior
of
an
entire
class
to
change
with
static
delegate
change
Not
multi-threaded
:end
:start
This
member
can
be
changed
to
change
behavior
class-wide
:end
:start
Abstract
base
for
ClientHttpRequest
that
makes
sure
that
headers
and
body
are
not
written
multiple
times
:end
:start
Asserts
that
this
request
has
not
been
#execute()
executed
yet
:end
:start
Abstract
template
method
that
returns
the
body
:end
:start
Abstract
template
method
that
writes
the
given
headers
and
content
to
the
HTTP
request
:end
:start
Abstract
base
class
for
ClientHttpRequestFactory
implementations
that
decorate
another
request
factory
:end
:start
Creates
a
AbstractClientHttpRequestFactoryWrapper
wrapping
the
given
request
factory
:end
:start
This
implementation
simply
calls
#createRequest(URI,
HttpMethod,
ClientHttpRequestFactory)
with
the
wrapped
request
factory
provided
to
the
#AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory)
constructor
:end
:start
Create
a
new
ClientHttpRequest
for
the
specified
URI
and
HTTP
method
by
using
the
passed-on
request
factory
<p>Called
from
#createRequest(URI,
HttpMethod)
:end
:start
Abstract
base
for
ClientHttpResponse
:end
:start
Represents
a
client-side
asynchronous
HTTP
request
Created
via
an
implementation
of
the
AsyncClientHttpRequestFactory
<p>A
AsyncHttpRequest
can
be
#executeAsync()
executed,
getting
a
future
ClientHttpResponse
which
can
be
read
from
:end
:start
Execute
this
request
asynchronously,
resulting
in
a
Future
handle
ClientHttpResponse
that
can
be
read
:end
:start
Factory
for
AsyncClientHttpRequest
objects
Requests
are
created
by
the
#createAsyncRequest(URI,
HttpMethod)
method
:end
:start
Create
a
new
asynchronous
AsyncClientHttpRequest
for
the
specified
URI
and
HTTP
method
<p>The
returned
request
can
be
written
to,
and
then
executed
by
calling
AsyncClientHttpRequest#executeAsync()
:end
:start
Wrapper
for
a
ClientHttpRequestFactory
that
buffers
all
outgoing
and
incoming
streams
in
memory
<p>Using
this
wrapper
allows
for
multiple
reads
of
the
ClientHttpResponse#getBody()
response
body
:end
:start
Indicates
whether
the
request/response
exchange
for
the
given
URI
and
method
should
be
buffered
in
memory
<p>Default
implementation
returns
true
for
all
URIs
and
methods
Subclasses
can
override
this
method
to
change
this
behavior
:end
:start
Represents
a
client-side
HTTP
request
Created
via
an
implementation
of
the
ClientHttpRequestFactory
<p>A
ClientHttpRequest
can
be
#execute()
executed,
getting
a
ClientHttpResponse
which
can
be
read
from
:end
:start
Execute
this
request,
resulting
in
a
ClientHttpResponse
that
can
be
read
:end
:start
Represents
the
context
of
a
client-side
HTTP
request
execution
<p>Used
to
invoke
the
next
interceptor
in
the
interceptor
chain,
or
-
if
the
calling
interceptor
is
last
-
execute
the
request
itself
:end
:start
Execute
the
request
with
the
given
request
attributes
and
body,
and
return
the
response
:end
:start
Factory
for
ClientHttpRequest
objects
Requests
are
created
by
the
#createRequest(URI,
HttpMethod)
method
:end
:start
Create
a
new
ClientHttpRequest
for
the
specified
URI
and
HTTP
method
<p>The
returned
request
can
be
written
to,
and
then
executed
by
calling
ClientHttpRequest#execute()
:end
:start
Intercepts
client-side
HTTP
requests
Implementations
of
this
interface
can
be
orgspringframeworkwebclientRestTemplate#setInterceptors(javautilList)
registered
with
the
orgspringframeworkwebclientRestTemplate
RestTemplate,
as
to
modify
the
outgoing
ClientHttpRequest
and/or
the
incoming
ClientHttpResponse
<p>The
main
entry
point
for
interceptors
is
#intercept(HttpRequest,
byte[],
ClientHttpRequestExecution)
:end
:start
Intercept
the
given
request,
and
return
a
response
The
given
ClientHttpRequestExecution
allows
the
interceptor
to
pass
on
the
request
and
response
to
the
next
entity
in
the
chain
<p>A
typical
implementation
of
this
method
would
follow
the
following
pattern:
<ol>
<li>Examine
the
HttpRequest
request
and
body</li>
<li>Optionally
orgspringframeworkhttpclientsupportHttpRequestWrapper
wrap
the
request
to
filter
HTTP
attributes</li>
<li>Optionally
modify
the
body
of
the
request</li>
<li><strong>Either</strong>
<ul>
<li>execute
the
request
using
ClientHttpRequestExecution#execute(orgspringframeworkhttpHttpRequest,
byte[]),</li>
<strong>or</strong>
<li>do
not
execute
the
request
to
block
the
execution
altogether</li>
</ul>
<li>Optionally
wrap
the
response
to
filter
HTTP
attributes</li>
</ol>
:end
:start
Represents
a
client-side
HTTP
response
Obtained
via
an
calling
of
the
ClientHttpRequest#execute()
<p>A
ClientHttpResponse
must
be
#close()
closed,
typically
in
a
finally
block
:end
:start
Return
the
HTTP
status
code
of
the
response
:end
:start
Return
the
HTTP
status
code
of
the
response
as
integer
:end
:start
Return
the
HTTP
status
text
of
the
response
:end
:start
Closes
this
response,
freeing
any
resources
created
:end
:start
Asynchronous
extension
of
the
HttpComponentsClientHttpRequestFactory
Uses
<a
href="http://hcapacheorg/httpcomponents-asyncclient-dev/">Apache
HttpComponents
HttpAsyncClient
40</a>
to
create
requests
:end
:start
Create
a
new
instance
of
the
HttpComponentsAsyncClientHttpRequestFactory
with
a
default
HttpAsyncClient
and
HttpClient
:end
:start
Create
a
new
instance
of
the
HttpComponentsAsyncClientHttpRequestFactory
with
the
given
HttpAsyncClient
instance
and
a
default
HttpClient
:end
:start
Create
a
new
instance
of
the
HttpComponentsAsyncClientHttpRequestFactory
with
the
given
HttpClient
and
HttpAsyncClient
instances
:end
:start
Set
the
HttpClient
used
for
#createAsyncRequest(javanetURI,
orgspringframeworkhttpHttpMethod)
asynchronous
execution
:end
:start
Return
the
HttpClient
used
for
#createAsyncRequest(URI,
HttpMethod)
asynchronous
execution
:end
:start
orgspringframeworkhttpclientClientHttpRequestFactory
implementation
that
uses
<a
href="http://hcapacheorg/httpcomponents-client-ga/">Apache
HttpComponents
HttpClient</a>
to
create
requests
<p>Allows
to
use
a
pre-configured
HttpClient
instance
-
potentially
with
authentication,
HTTP
connection
pooling,
etc
<p><b>NOTE:</b>
Requires
Apache
HttpComponents
43
or
higher,
as
of
Spring
40
:end
:start
Create
a
new
instance
of
the
HttpComponentsClientHttpRequestFactory
with
a
default
HttpClient
:end
:start
Create
a
new
instance
of
the
HttpComponentsClientHttpRequestFactory
with
the
given
HttpClient
instance
<p>As
of
Spring
Framework
40,
the
given
client
is
expected
to
be
of
type
CloseableHttpClient
(requiring
HttpClient
43+)
:end
:start
Set
the
HttpClient
used
for
<p>As
of
Spring
Framework
40,
the
given
client
is
expected
to
be
of
type
CloseableHttpClient
(requiring
HttpClient
43+)
:end
:start
Return
the
HttpClient
used
for
#createRequest(URI,
HttpMethod)
synchronous
execution
:end
:start
Set
the
connection
timeout
for
the
underlying
HttpClient
A
timeout
value
of
0
specifies
an
infinite
timeout
:end
:start
Set
the
socket
read
timeout
for
the
underlying
HttpClient
A
timeout
value
of
0
specifies
an
infinite
timeout
:end
:start
Indicates
whether
this
request
factory
should
buffer
the
request
body
internally
<p>Default
is
true
When
sending
large
amounts
of
data
via
POST
or
PUT,
it
is
recommended
to
change
this
property
to
false,
so
as
not
to
run
out
of
memory
:end
:start
Create
a
Commons
HttpMethodBase
object
for
the
given
HTTP
method
and
URI
specification
:end
:start
Template
method
that
allows
for
manipulating
the
HttpUriRequest
before
it
is
returned
as
part
of
a
HttpComponentsClientHttpRequest
<p>The
default
implementation
is
empty
:end
:start
Template
methods
that
creates
a
HttpContext
for
the
given
HTTP
method
and
URI
<p>The
default
implementation
returns
null
:end
:start
Shutdown
hook
that
closes
the
underlying
orgapachehttpconnHttpClientConnectionManager
ClientConnectionManager's
connection
pool,
if
any
:end
:start
Wrapper
for
a
ClientHttpRequestFactory
that
has
support
for
ClientHttpRequestInterceptors
:end
:start
Creates
a
new
instance
of
the
InterceptingClientHttpRequestFactory
with
the
given
parameters
:end
:start
ClientHttpRequestFactory
implementation
that
uses
standard
J2SE
facilities
:end
:start
Set
the
Proxy
to
use
for
this
request
factory
:end
:start
Indicates
whether
this
request
factory
should
buffer
the
ClientHttpRequest#getBody()
request
body
internally
<p>Default
is
true
When
sending
large
amounts
of
data
via
POST
or
PUT,
it
is
recommended
to
change
this
property
to
false,
so
as
not
to
run
out
of
memory
This
will
result
in
a
ClientHttpRequest
that
either
streams
directly
to
the
underlying
HttpURLConnection
(if
the
orgspringframeworkhttpHttpHeaders#getContentLength()
Content-Length
is
known
in
advance),
or
that
will
use
"Chunked
transfer
encoding"
(if
the
Content-Length
is
not
known
in
advance)
:end
:start
Sets
the
number
of
bytes
to
write
in
each
chunk
when
not
buffering
request
bodies
locally
<p>Note
that
this
parameter
is
only
used
when
#setBufferRequestBody(boolean)
bufferRequestBody
is
set
to
false,
and
the
orgspringframeworkhttpHttpHeaders#getContentLength()
Content-Length
is
not
known
in
advance
:end
:start
Set
the
underlying
URLConnection's
connect
timeout
(in
milliseconds)
A
timeout
value
of
0
specifies
an
infinite
timeout
<p>Default
is
the
system's
default
timeout
:end
:start
Set
the
underlying
URLConnection's
read
timeout
(in
milliseconds)
A
timeout
value
of
0
specifies
an
infinite
timeout
<p>Default
is
the
system's
default
timeout
:end
:start
Set
if
the
underlying
URLConnection
can
be
set
to
'output
streaming'
mode
When
output
streaming
is
enabled,
authentication
and
redirection
cannot
be
handled
automatically
If
output
streaming
is
disabled
the
HttpURLConnection#setFixedLengthStreamingMode(int)
setFixedLengthStreamingMode
and
HttpURLConnection#setChunkedStreamingMode(int)
setChunkedStreamingMode
methods
of
the
underlying
connection
will
never
be
called
<p>Default
is
true
:end
:start
Sets
the
task
executor
for
this
request
factory
Setting
this
property
is
required
for
#createAsyncRequest(URI,
HttpMethod)
creating
asynchronous
request
:end
:start
<p>Setting
the
#setTaskExecutor(orgspringframeworkcoretaskAsyncListenableTaskExecutor)
taskExecutor
property
is
required
before
calling
this
method
:end
:start
Opens
and
returns
a
connection
to
the
given
URL
<p>The
default
implementation
uses
the
given
#setProxy(javanetProxy)
proxy
-
if
any
-
to
open
a
connection
:end
:start
Template
method
for
preparing
the
given
HttpURLConnection
<p>The
default
implementation
prepares
the
connection
for
input
and
output,
and
sets
the
HTTP
method
:end
:start
Base
class
for
orgspringframeworkwebclientAsyncRestTemplate
and
other
HTTP
accessing
gateway
helpers,
defining
common
properties
such
as
the
AsyncClientHttpRequestFactory
to
operate
on
<p>Not
intended
to
be
used
directly
See
orgspringframeworkwebclientAsyncRestTemplate
:end
:start
Logger
available
to
subclasses
:end
:start
Set
the
request
factory
that
this
accessor
uses
for
obtaining
orgspringframeworkhttpclientClientHttpRequest
HttpRequests
:end
:start
Return
the
request
factory
that
this
accessor
uses
for
obtaining
orgspringframeworkhttpclientClientHttpRequest
HttpRequests
:end
:start
Create
a
new
AsyncClientHttpRequest
via
this
template's
AsyncClientHttpRequestFactory
:end
:start
Base
class
for
orgspringframeworkwebclientRestTemplate
and
other
HTTP
accessing
gateway
helpers,
defining
common
properties
such
as
the
ClientHttpRequestFactory
to
operate
on
<p>Not
intended
to
be
used
directly
See
orgspringframeworkwebclientRestTemplate
:end
:start
Logger
available
to
subclasses
:end
:start
Set
the
request
factory
that
this
accessor
uses
for
obtaining
ClientHttpRequest
HttpRequests
:end
:start
Return
the
request
factory
that
this
accessor
uses
for
obtaining
ClientHttpRequest
HttpRequests
:end
:start
Create
a
new
ClientHttpRequest
via
this
template's
ClientHttpRequestFactory
:end
:start
Provides
a
convenient
implementation
of
the
HttpRequest
interface
that
can
be
overridden
to
adapt
the
request
Methods
default
to
calling
through
to
the
wrapped
request
object
:end
:start
Creates
a
new
HttpRequest
wrapping
the
given
request
object
:end
:start
Returns
the
wrapped
request
:end
:start
Returns
the
method
of
the
wrapped
request
:end
:start
Returns
the
URI
of
the
wrapped
request
:end
:start
Returns
the
headers
of
the
wrapped
request
:end
:start
Base
class
for
orgspringframeworkwebclientRestTemplate
and
other
HTTP
accessing
gateway
helpers,
adding
interceptor-related
properties
to
HttpAccessor's
common
properties
<p>Not
intended
to
be
used
directly
See
orgspringframeworkwebclientRestTemplate
:end
:start
Sets
the
request
interceptors
that
this
accessor
should
use
:end
:start
Return
the
request
interceptor
that
this
accessor
uses
:end
:start
FactoryBean
that
creates
a
Proxy
javanetProxy
:end
:start
Sets
the
proxy
type
Defaults
to
javanetProxyType#HTTP
:end
:start
Sets
the
proxy
host
name
:end
:start
Sets
the
proxy
port
:end
:start
Abstract
base
class
for
most
HttpMessageConverter
implementations
<p>This
base
class
adds
support
for
setting
supported
MediaTypes,
through
the
#setSupportedMediaTypes(List)
supportedMediaTypes
bean
property
It
also
adds
support
for
Content-Type
and
Content-Length
when
writing
to
output
messages
:end
:start
Logger
available
to
subclasses
:end
:start
Construct
an
AbstractHttpMessageConverter
with
no
supported
media
types
:end
:start
Construct
an
AbstractHttpMessageConverter
with
one
supported
media
type
:end
:start
Construct
an
AbstractHttpMessageConverter
with
multiple
supported
media
type
:end
:start
Set
the
list
of
MediaType
objects
supported
by
this
converter
:end
:start
This
implementation
checks
if
the
given
class
is
#supports(Class)
supported,
and
if
the
#getSupportedMediaTypes()
supported
media
types
MediaType#includes(MediaType)
include
the
given
media
type
:end
:start
Returns
true
if
any
of
the
#setSupportedMediaTypes(List)
supported
media
types
include
the
given
media
type
:end
:start
This
implementation
checks
if
the
given
class
is
#supports(Class)
supported,
and
if
the
#getSupportedMediaTypes()
supported
media
types
MediaType#includes(MediaType)
include
the
given
media
type
:end
:start
Returns
true
if
the
given
media
type
includes
any
of
the
#setSupportedMediaTypes(List)
supported
media
types
:end
:start
This
implementation
simple
delegates
to
#readInternal(Class,
HttpInputMessage)
Future
implementations
might
add
some
default
behavior,
however
:end
:start
This
implementation
delegates
to
#getDefaultContentType(Object)
if
a
content
type
was
not
provided,
calls
#getContentLength,
and
sets
the
corresponding
headers
on
the
output
message
It
then
calls
#writeInternal
:end
:start
Returns
the
default
content
type
for
the
given
type
Called
when
#write
is
invoked
without
a
specified
content
type
parameter
<p>By
default,
this
returns
the
first
element
of
the
#setSupportedMediaTypes(List)
supportedMediaTypes
property,
if
any
Can
be
overridden
in
subclasses
:end
:start
Returns
the
content
length
for
the
given
type
<p>By
default,
this
returns
null,
meaning
that
the
content
length
is
unknown
Can
be
overridden
in
subclasses
:end
:start
Indicates
whether
the
given
class
is
supported
by
this
converter
:end
:start
Abstract
template
method
that
reads
the
actual
object
Invoked
from
#read
:end
:start
Abstract
template
method
that
writes
the
actual
body
Invoked
from
#write
:end
:start
Implementation
of
HttpMessageConverter
that
can
read
and
write
BufferedImage
BufferedImages
<p>By
default,
this
converter
can
read
all
media
types
that
are
supported
by
the
ImageIO#getReaderMIMETypes()
registered
image
readers,
and
writes
using
the
media
type
of
the
first
available
javaximageioImageIO#getWriterMIMETypes()
registered
image
writer
The
latter
can
be
overridden
by
setting
the
#setDefaultContentType
defaultContentType
property
<p>If
the
#setCacheDir
cacheDir
property
is
set,
this
converter
will
cache
image
data
<p>The
#process(ImageReadParam)
and
#process(ImageWriteParam)
template
methods
allow
subclasses
to
override
Image
I/O
parameters
:end
:start
Sets
the
default
Content-Type
to
be
used
for
writing
:end
:start
Returns
the
default
Content-Type
to
be
used
for
writing
Called
when
#write
is
invoked
without
a
specified
content
type
parameter
:end
:start
Sets
the
cache
directory
If
this
property
is
set
to
an
existing
directory,
this
converter
will
cache
image
data
:end
:start
Template
method
that
allows
for
manipulating
the
ImageReadParam
before
it
is
used
to
read
an
image
<p>The
default
implementation
is
empty
:end
:start
Template
method
that
allows
for
manipulating
the
ImageWriteParam
before
it
is
used
to
write
an
image
<p>The
default
implementation
is
empty
:end
:start
Implementation
of
HttpMessageConverter
that
can
read
and
write
byte
arrays
<p>By
default,
this
converter
supports
all
media
types
({@code
&#42;&#47;&#42;),
and
writes
with
a
Content-Type
of
application/octet-stream
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes
supportedMediaTypes
property
:end
:start
Creates
a
new
instance
of
the
ByteArrayHttpMessageConverter
:end
:start
Abstract
base
class
for
Atom
and
RSS
Feed
message
converters,
using
the
<a
href="http://rometoolsorg/">ROME
tools</a>
project
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
that
can
read
and
write
Atom
feeds
Specifically,
this
converter
can
handle
Feed
objects,
from
the
<a
href="https://romedevjavanet/">ROME</a>
project
<p>By
default,
this
converter
reads
and
writes
the
media
type
({@code
application/atom+xml)
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
property
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
that
can
read
and
write
RSS
feeds
Specifically,
this
converter
can
handle
Channel
objects,
from
the
<a
href="https://romedevjavanet/">ROME</a>
project
<p>By
default,
this
converter
reads
and
writes
the
media
type
({@code
application/rss+xml)
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
property
:end
:start
Implementation
of
HttpMessageConverter
that
can
handle
form
data,
including
multipart
form
data
(ie
file
uploads)
<p>This
converter
can
write
the
application/x-www-form-urlencoded
and
multipart/form-data
media
types,
and
read
the
application/x-www-form-urlencoded)
media
type
(but
not
multipart/form-data)
<p>In
other
words,
this
converter
can
read
and
write
'normal'
HTML
forms
(as
MultiValueMap
MultiValueMap&lt;String,
String&gt;),
and
it
can
write
multipart
form
(as
MultiValueMap
MultiValueMap&lt;String,
Object&gt;
When
writing
multipart,
this
converter
uses
other
HttpMessageConverter
HttpMessageConverters
to
write
the
respective
MIME
parts
By
default,
basic
converters
are
registered
(supporting
Strings
and
Resources,
for
instance);
these
can
be
overridden
by
setting
the
#setPartConverters(javautilList)
partConverters
property
<p>For
example,
the
following
snippet
shows
how
to
submit
an
HTML
form:
<pre
class="code">
RestTemplate
template
=
new
RestTemplate();
//
FormHttpMessageConverter
is
configured
by
default
MultiValueMap&lt;String,
String&gt;
form
=
new
LinkedMultiValueMap&lt;String,
String&gt;();
formadd("field
1",
"value
1");
formadd("field
2",
"value
2");
formadd("field
2",
"value
3");
templatepostForLocation("http://examplecom/myForm",
form);
</pre>
<p>The
following
snippet
shows
how
to
do
a
file
upload:
<pre
class="code">
MultiValueMap&lt;String,
Object&gt;
parts
=
new
LinkedMultiValueMap&lt;String,
Object&gt;();
partsadd("field
1",
"value
1");
partsadd("file",
new
ClassPathResource("myFilejpg"));
templatepostForLocation("http://examplecom/myFileUpload",
parts);
</pre>
<p>Some
methods
in
this
class
were
inspired
by
orgapachecommonshttpclientmethodsmultipartMultipartRequestEntity
:end
:start
Set
the
message
body
converters
to
use
These
converters
are
used
to
convert
objects
to
MIME
parts
:end
:start
Add
a
message
body
converter
Such
a
converters
is
used
to
convert
objects
to
MIME
parts
:end
:start
Sets
the
character
set
used
for
writing
form
data
:end
:start
Set
the
list
of
MediaType
objects
supported
by
this
converter
:end
:start
Generate
a
multipart
boundary
<p>The
default
implementation
returns
a
random
boundary
Can
be
overridden
in
subclasses
:end
:start
Return
the
filename
of
the
given
multipart
part
This
value
will
be
used
for
the
Content-Disposition
header
<p>The
default
implementation
returns
Resource#getFilename()
if
the
part
is
a
Resource,
and
null
in
other
cases
Can
be
overridden
in
subclasses
:end
:start
A
specialization
of
HttpMessageConverter
that
can
convert
an
HTTP
request
into
a
target
object
of
a
specified
generic
type
:end
:start
Indicates
whether
the
given
type
can
be
read
by
this
converter
:end
:start
Read
an
object
of
the
given
type
form
the
given
input
message,
and
returns
it
:end
:start
Thrown
by
HttpMessageConverter
implementations
when
the
conversion
fails
:end
:start
Create
a
new
HttpMessageConversionException
:end
:start
Create
a
new
HttpMessageConversionException
:end
:start
Strategy
interface
that
specifies
a
converter
that
can
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Indicates
whether
the
given
class
can
be
read
by
this
converter
:end
:start
Indicates
whether
the
given
class
can
be
written
by
this
converter
:end
:start
Return
the
list
of
MediaType
objects
supported
by
this
converter
:end
:start
Read
an
object
of
the
given
type
form
the
given
input
message,
and
returns
it
:end
:start
Write
an
given
object
to
the
given
output
message
:end
:start
Thrown
by
HttpMessageConverter
implementations
when
the
HttpMessageConverter#read(Class,
orgspringframeworkhttpHttpInputMessage)
read
method
fails
:end
:start
Create
a
new
HttpMessageNotReadableException
:end
:start
Create
a
new
HttpMessageNotReadableException
:end
:start
Thrown
by
orgspringframeworkhttpconverterHttpMessageConverter
implementations
when
the
orgspringframeworkhttpconverterHttpMessageConverter#write(Object,
orgspringframeworkhttpMediaType,
orgspringframeworkhttpHttpOutputMessage)
write
method
fails
:end
:start
Create
a
new
HttpMessageNotWritableException
:end
:start
Create
a
new
HttpMessageNotWritableException
:end
:start
A
FactoryBean
for
creating
a
Jackson
2x
ObjectMapper
with
setters
to
enable
or
disable
Jackson
features
from
within
XML
configuration
<p>Example
usage
with
orgspringframeworkhttpconverterjsonMappingJackson2HttpMessageConverter:
<pre
class="code">
&lt;bean
class="orgspringframeworkhttpconverterjsonMappingJackson2HttpMessageConverter">
&lt;property
name="objectMapper">
&lt;bean
class="orgspringframeworkhttpconverterjsonJackson2ObjectMapperFactoryBean"
p:autoDetectFields="false"
p:autoDetectGettersSetters="false"
p:annotationIntrospector-ref="jaxbAnnotationIntrospector"
/>
&lt;/property>
&lt;/bean>
</pre>
<p>Example
usage
with
MappingJackson2JsonView:
<pre
class="code">
&lt;bean
class="orgspringframeworkwebservletviewjsonMappingJackson2JsonView">
&lt;property
name="objectMapper">
&lt;bean
class="orgspringframeworkhttpconverterjsonJackson2ObjectMapperFactoryBean"
p:failOnEmptyBeans="false"
p:indentOutput="true">
&lt;property
name="serializers">
&lt;array>
&lt;bean
class="orgmycompanyMyCustomSerializer"
/>
&lt;/array>
&lt;/property>
&lt;/bean>
&lt;/property>
&lt;/bean>
</pre>
<p>In
case
there
are
no
specific
setters
provided
(for
some
rarely
used
options),
you
can
still
use
the
more
general
methods
#setFeaturesToEnable
and
#setFeaturesToDisable
<pre
class="code">
&lt;bean
class="orgspringframeworkhttpconverterjsonJackson2ObjectMapperFactoryBean">
&lt;property
name="featuresToEnable">
&lt;array>
&lt;util:constant
static-field="comfasterxmljacksondatabindSerializationFeature$WRAP_ROOT_VALUE"/>
&lt;util:constant
static-field="comfasterxmljacksondatabindSerializationFeature$CLOSE_CLOSEABLE"/>
&lt;/array>
&lt;/property>
&lt;property
name="featuresToDisable">
&lt;array>
&lt;util:constant
static-field="comfasterxmljacksondatabindMapperFeature$USE_ANNOTATIONS"/>
&lt;/array>
&lt;/property>
&lt;/bean>
</pre>
<p>In
case
you
want
to
configure
Jackson's
ObjectMapper
with
a
custom
Module,
you
can
register
one
or
more
such
Modules
by
class
name
via
#setModulesToInstall:
<pre
class="code">
&lt;bean
class="orgspringframeworkhttpconverterjsonJackson2ObjectMapperFactoryBean">
&lt;property
name="modulesToInstall"
value="myappjacksonMySampleModule,myappjacksonMyOtherModule"/>
&lt;/bean
</pre>
Note
that
Jackson's
JSR-310
and
Joda-Time
support
modules
will
be
registered
automatically
when
available
(and
when
Java
8
and
Joda-Time
themselves
are
available,
respectively)
<p>Tested
against
Jackson
22
and
23;
compatible
with
Jackson
20
and
higher
:end
:start
Set
the
ObjectMapper
instance
to
use
If
not
set,
the
ObjectMapper
will
be
created
using
its
default
constructor
:end
:start
Define
the
format
for
date/time
with
the
given
DateFormat
<p>Note:
Setting
this
property
makes
the
exposed
ObjectMapper
non-thread-safe,
according
to
Jackson's
thread
safety
rules
:end
:start
Define
the
date/time
format
with
a
SimpleDateFormat
<p>Note:
Setting
this
property
makes
the
exposed
ObjectMapper
non-thread-safe,
according
to
Jackson's
thread
safety
rules
:end
:start
Set
an
AnnotationIntrospector
for
both
serialization
and
deserialization
:end
:start
Set
a
custom
inclusion
strategy
for
serialization
:end
:start
Configure
custom
serializers
Each
serializer
is
registered
for
the
type
returned
by
JsonSerializer#handledType(),
which
must
not
be
null
:end
:start
Configure
custom
serializers
for
the
given
types
:end
:start
Configure
custom
deserializers
for
the
given
types
:end
:start
Shortcut
for
MapperFeature#AUTO_DETECT_FIELDS
option
:end
:start
Shortcut
for
MapperFeature#AUTO_DETECT_SETTERS/
MapperFeature#AUTO_DETECT_GETTERS
option
:end
:start
Shortcut
for
SerializationFeature#FAIL_ON_EMPTY_BEANS
option
:end
:start
Shortcut
for
SerializationFeature#INDENT_OUTPUT
option
:end
:start
Specify
features
to
enable
:end
:start
Specify
features
to
disable
:end
:start
Set
a
complete
list
of
modules
to
be
registered
with
the
ObjectMapper
<p>Note:
If
this
is
set,
no
finding
of
modules
is
going
to
happen
-
not
by
Jackson,
and
not
by
Spring
either
(see
#setFindModulesViaServiceLoader)
As
a
consequence,
specifying
an
empty
list
here
will
suppress
any
kind
of
module
detection
<p>Specify
either
this
or
#setModulesToInstall,
not
both
:end
:start
Specify
one
or
more
modules
by
class
(or
class
name
in
XML),
to
be
registered
with
the
ObjectMapper
<p>Modules
specified
here
will
be
registered
in
combination
with
Spring's
autodetection
of
JSR-310
and
Joda-Time,
or
Jackson's
finding
of
modules
(see
#setFindModulesViaServiceLoader)
<p>Specify
either
this
or
#setModules,
not
both
:end
:start
Set
whether
to
let
Jackson
find
available
modules
via
the
JDK
ServiceLoader,
based
on
META-INF
metadata
in
the
classpath
Requires
Jackson
22
or
higher
<p>If
this
mode
is
not
set,
Spring's
Jackson2ObjectMapperFactoryBean
itself
will
try
to
find
the
JSR-310
and
Joda-Time
support
modules
on
the
classpath
-
provided
that
Java
8
and
Joda-Time
themselves
are
available,
respectively
:end
:start
Specify
a
comfasterxmljacksondatabindPropertyNamingStrategy
to
configure
the
ObjectMapper
with
:end
:start
Return
the
singleton
ObjectMapper
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
HttpMessageConverter
that
can
read
and
write
JSON
using
<a
href="http://jacksoncodehausorg/">Jackson
2x's</a>
ObjectMapper
<p>This
converter
can
be
used
to
bind
to
typed
beans,
or
untyped
javautilHashMap
HashMap
instances
<p>By
default,
this
converter
supports
application/json
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes
supportedMediaTypes
property
<p>Tested
against
Jackson
22
and
23;
compatible
with
Jackson
20
and
higher
:end
:start
Construct
a
new
MappingJackson2HttpMessageConverter
:end
:start
Set
the
ObjectMapper
for
this
view
If
not
set,
a
default
ObjectMapper#ObjectMapper()
ObjectMapper
is
used
<p>Setting
a
custom-configured
ObjectMapper
is
one
way
to
take
further
control
of
the
JSON
serialization
process
For
example,
an
extended
comfasterxmljacksondatabindserSerializerFactory
can
be
configured
that
provides
custom
serializers
for
specific
types
The
other
option
for
refining
the
serialization
process
is
to
use
Jackson's
provided
annotations
on
the
types
to
be
serialized,
in
which
case
a
custom-configured
ObjectMapper
is
unnecessary
:end
:start
Return
the
underlying
ObjectMapper
for
this
view
:end
:start
Specify
a
custom
prefix
to
use
for
this
view's
JSON
output
Default
is
none
:end
:start
Indicate
whether
the
JSON
output
by
this
view
should
be
prefixed
with
"{
&&"
Default
is
false
<p>Prefixing
the
JSON
string
in
this
manner
is
used
to
help
prevent
JSON
Hijacking
The
prefix
renders
the
string
syntactically
invalid
as
a
script
so
that
it
cannot
be
hijacked
This
prefix
does
not
affect
the
evaluation
of
JSON,
but
if
JSON
validation
is
performed
on
the
string,
the
prefix
would
need
to
be
ignored
:end
:start
Whether
to
use
the
DefaultPrettyPrinter
when
writing
JSON
This
is
a
shortcut
for
setting
up
an
ObjectMapper
as
follows:
<pre
class="code">
ObjectMapper
mapper
=
new
ObjectMapper();
mapperconfigure(SerializationFeatureINDENT_OUTPUT,
true);
convertersetObjectMapper(mapper);
</pre>
:end
:start
Return
the
Jackson
JavaType
for
the
specified
type
and
context
class
<p>The
default
implementation
returns
typeFactoryconstructType(type,
contextClass),
but
this
can
be
overridden
in
subclasses,
to
allow
for
custom
generic
collection
handling
For
instance:
<pre
class="code">
protected
JavaType
getJavaType(Type
type)
if
(type
instanceof
Class
&&
ListclassisAssignableFrom((Class)type))
return
TypeFactorycollectionType(ArrayListclass,
MyBeanclass);

else
return
supergetJavaType(type);


</pre>
:end
:start
Determine
the
JSON
encoding
to
use
for
the
given
content
type
:end
:start
An
HttpMessageConverter
that
uses
StringHttpMessageConverter
for
reading
and
writing
content
and
a
ConversionService
for
converting
the
String
content
to
and
from
the
target
object
type
<p>
By
default,
this
converter
supports
the
media
type
text/plain
only
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes
supportedMediaTypes
property
Example
of
usage:
<pre
class="code">
&lt;bean
class="orgspringframeworkhttpconverterObjectToStringHttpMessageConverter">
&lt;constructor-arg>
&lt;bean
class="orgspringframeworkcontextsupportConversionServiceFactoryBean"/>
&lt;/constructor-arg>
&lt;/bean>
</pre>
:end
:start
A
constructor
accepting
a
ConversionService
to
use
to
convert
the
(String)
message
body
to/from
the
target
class
type
This
constructor
uses
StringHttpMessageConverter#DEFAULT_CHARSET
as
the
default
charset
:end
:start
A
constructor
accepting
a
ConversionService
as
well
as
a
default
charset
:end
:start
Indicates
whether
the
Accept-Charset
should
be
written
to
any
outgoing
request
<p>Default
is
true
:end
:start
Implementation
of
HttpMessageConverter
that
can
read
and
write
Resource
Resources
<p>By
default,
this
converter
can
read
all
media
types
The
Java
Activation
Framework
(JAF)
-
if
available
-
is
used
to
determine
the
Content-Type
of
written
resources
If
JAF
is
not
available,
application/octet-stream
is
used
:end
:start
Implementation
of
HttpMessageConverter
that
can
read
and
write
strings
<p>By
default,
this
converter
supports
all
media
types
({@code
&#42;&#47;&#42;),
and
writes
with
a
Content-Type
of
text/plain
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes
supportedMediaTypes
property
:end
:start
A
default
constructor
that
uses
"ISO-8859-1"
as
the
default
charset
:end
:start
A
constructor
accepting
a
default
charset
to
use
if
the
requested
content
type
does
not
specify
one
:end
:start
Indicates
whether
the
Accept-Charset
should
be
written
to
any
outgoing
request
<p>Default
is
true
:end
:start
Return
the
list
of
supported
Charset
<p>By
default,
returns
Charset#availableCharsets()
Can
be
overridden
in
subclasses
:end
:start
Extension
of
orgspringframeworkhttpconverterFormHttpMessageConverter,
adding
support
for
XML
and
JSON-based
parts
:end
:start
Abstract
base
class
for
orgspringframeworkhttpconverterHttpMessageConverter
HttpMessageConverters
that
use
JAXB2
Creates
JAXBContext
object
lazily
:end
:start
Create
a
new
Marshaller
for
the
given
class
:end
:start
Customize
the
Marshaller
created
by
this
message
converter
before
using
it
to
write
the
object
to
the
output
:end
:start
Create
a
new
Unmarshaller
for
the
given
class
:end
:start
Customize
the
Unmarshaller
created
by
this
message
converter
before
using
it
to
read
the
object
from
the
input
:end
:start
Return
a
JAXBContext
for
the
given
class
:end
:start
Abstract
base
class
for
orgspringframeworkhttpconverterHttpMessageConverter
HttpMessageConverters
that
convert
from/to
XML
<p>By
default,
subclasses
of
this
converter
support
text/xml,
application/xml,
and
application/*-xml
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
property
:end
:start
Protected
constructor
that
sets
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
to
text/xml
and
application/xml,
and
application/*-xml
:end
:start
Transforms
the
given
Source
to
the
Result
:end
:start
Abstract
template
method
called
from
#read(Class,
HttpInputMessage)
:end
:start
Abstract
template
method
called
from
#writeInternal(Object,
HttpOutputMessage)
:end
:start
An
HttpMessageConverter
that
can
read
XML
collections
using
JAXB2
<p>This
converter
can
read
Collection
collections
that
contain
classes
annotated
with
XmlRootElement
and
XmlType
Note
that
this
converter
does
not
support
writing
:end
:start
Always
returns
false
since
Jaxb2CollectionHttpMessageConverter
required
generic
type
information
in
order
to
read
a
Collection
:end
:start
<p>Jaxb2CollectionHttpMessageConverter
can
read
a
generic
Collection
where
the
generic
type
is
a
JAXB
type
annotated
with
XmlRootElement
or
XmlType
:end
:start
Always
returns
false
since
Jaxb2CollectionHttpMessageConverter
does
not
convert
collections
to
XML
:end
:start
Create
a
Collection
of
the
given
type,
with
the
given
initial
capacity
(if
supported
by
the
Collection
type)
:end
:start
Create
a
XMLInputFactory
that
this
converter
will
use
to
create
javaxxmlstreamXMLStreamReader
and
javaxxmlstreamXMLEventReader
objects
<p/>
Can
be
overridden
in
subclasses,
adding
further
initialization
of
the
factory
The
resulting
factory
is
cached,
so
this
method
will
only
be
called
once
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
HttpMessageConverter
that
can
read
and
write
XML
using
JAXB2
<p>This
converter
can
read
classes
annotated
with
XmlRootElement
and
XmlType,
and
write
classes
annotated
with
with
XmlRootElement,
or
subclasses
thereof
:end
:start
Indicates
whether
external
XML
entities
are
processed
when
converting
to
a
Source
<p>Default
is
false,
meaning
that
external
entities
are
not
resolved
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
HttpMessageConverter
that
can
read
and
write
XML
using
Spring's
Marshaller
and
Unmarshaller
abstractions
<p>This
converter
requires
a
Marshaller
and
Unmarshaller
before
it
can
be
used
These
can
be
injected
by
the
#MarshallingHttpMessageConverter(Marshaller)
constructor
or
#setMarshaller(Marshaller)
bean
properties
<p>By
default,
this
converter
supports
text/xml
and
application/xml
This
can
be
overridden
by
setting
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
property
:end
:start
Construct
a
new
MarshallingHttpMessageConverter
with
no
Marshaller
or
Unmarshaller
set
The
Marshaller
and
Unmarshaller
must
be
set
after
construction
by
invoking
#setMarshaller(Marshaller)
and
#setUnmarshaller(Unmarshaller)

:end
:start
Construct
a
new
MarshallingMessageConverter
with
the
given
Marshaller
set
<p>If
the
given
Marshaller
also
implements
the
Unmarshaller
interface,
it
is
used
for
both
marshalling
and
unmarshalling
Otherwise,
an
exception
is
thrown
<p>Note
that
all
Marshaller
implementations
in
Spring
also
implement
the
Unmarshaller
interface,
so
that
you
can
safely
use
this
constructor
:end
:start
Construct
a
new
MarshallingMessageConverter
with
the
given
Marshaller
and
Unmarshaller
:end
:start
Set
the
Marshaller
to
be
used
by
this
message
converter
:end
:start
Set
the
Unmarshaller
to
be
used
by
this
message
converter
:end
:start
Implementation
of
orgspringframeworkhttpconverterHttpMessageConverter
that
can
read
and
write
Source
objects
:end
:start
Sets
the
#setSupportedMediaTypes(javautilList)
supportedMediaTypes
to
text/xml
and
application/xml,
and
application/*-xml
:end
:start
Indicates
whether
external
XML
entities
are
processed
when
converting
to
a
Source
<p>Default
is
false,
meaning
that
external
entities
are
not
resolved
:end
:start
Extension
of
orgspringframeworkhttpconverterFormHttpMessageConverter,
adding
support
for
XML-based
parts
through
a
SourceHttpMessageConverter
:end
:start
Represents
an
HTTP
request
or
response
entity,
consisting
of
headers
and
body
<p>Typically
used
in
combination
with
the
orgspringframeworkwebclientRestTemplate
RestTemplate,
like
so:
<pre
class="code">
HttpHeaders
headers
=
new
HttpHeaders();
headerssetContentType(MediaTypeTEXT_PLAIN);
HttpEntity&lt;String&gt;
entity
=
new
HttpEntity&lt;String&gt;(helloWorld,
headers);
URI
location
=
templatepostForLocation("http://examplecom",
entity);
</pre>
or
<pre
class="code">
HttpEntity&lt;String&gt;
entity
=
templategetForEntity("http://examplecom",
Stringclass);
String
body
=
entitygetBody();
MediaType
contentType
=
entitygetHeaders()getContentType();
</pre>
Can
also
be
used
in
Spring
MVC,
as
a
return
value
from
a
@Controller
method:
<pre
class="code">
&#64;RequestMapping("/handle")
public
HttpEntity&lt;String&gt;
handle()
HttpHeaders
responseHeaders
=
new
HttpHeaders();
responseHeadersset("MyResponseHeader",
"MyValue");
return
new
HttpEntity&lt;String&gt;("Hello
World",
responseHeaders);

</pre>
:end
:start
The
empty
HttpEntity,
with
no
body
or
headers
:end
:start
Create
a
new,
empty
HttpEntity
:end
:start
Create
a
new
HttpEntity
with
the
given
body
and
no
headers
:end
:start
Create
a
new
HttpEntity
with
the
given
headers
and
no
body
:end
:start
Create
a
new
HttpEntity
with
the
given
body
and
headers
:end
:start
Returns
the
headers
of
this
entity
:end
:start
Returns
the
body
of
this
entity
:end
:start
Indicates
whether
this
entity
has
a
body
:end
:start
Represents
HTTP
request
and
response
headers,
mapping
string
header
names
to
list
of
string
values
<p>In
addition
to
the
normal
methods
defined
by
Map,
this
class
offers
the
following
convenience
methods:
<ul>
<li>{@link
#getFirst(String)
returns
the
first
value
associated
with
a
given
header
name</li>
<li>{@link
#add(String,
String)
adds
a
header
value
to
the
list
of
values
for
a
header
name</li>
<li>{@link
#set(String,
String)
sets
the
header
value
to
a
single
string
value</li>
</ul>
<p>Inspired
by
comsunnethttpserverHeaders
:end
:start
Constructs
a
new,
empty
instance
of
the
HttpHeaders
object
:end
:start
Returns
HttpHeaders
object
that
can
only
be
read,
not
written
to
:end
:start
Set
the
list
of
acceptable
MediaType
media
types,
as
specified
by
the
Accept
header
:end
:start
Return
the
list
of
acceptable
MediaType
media
types,
as
specified
by
the
Accept
header
<p>Returns
an
empty
list
when
the
acceptable
media
types
are
unspecified
:end
:start
Set
the
list
of
acceptable
Charset
charsets,
as
specified
by
the
Accept-Charset
header
:end
:start
Return
the
list
of
acceptable
Charset
charsets,
as
specified
by
the
Accept-Charset
header
:end
:start
Set
the
set
of
allowed
HttpMethod
HTTP
methods,
as
specified
by
the
Allow
header
:end
:start
Return
the
set
of
allowed
HttpMethod
HTTP
methods,
as
specified
by
the
Allow
header
<p>Returns
an
empty
set
when
the
allowed
methods
are
unspecified
:end
:start
Sets
the
(new)
value
of
the
Cache-Control
header
:end
:start
Returns
the
value
of
the
Cache-Control
header
:end
:start
Sets
the
(new)
value
of
the
Connection
header
:end
:start
Sets
the
(new)
value
of
the
Connection
header
:end
:start
Returns
the
value
of
the
Connection
header
:end
:start
Sets
the
(new)
value
of
the
Content-Disposition
header
for
form-data
:end
:start
Set
the
length
of
the
body
in
bytes,
as
specified
by
the
Content-Length
header
:end
:start
Return
the
length
of
the
body
in
bytes,
as
specified
by
the
Content-Length
header
<p>Returns
-1
when
the
content-length
is
unknown
:end
:start
Set
the
MediaType
media
type
of
the
body,
as
specified
by
the
Content-Type
header
:end
:start
Return
the
MediaType
media
type
of
the
body,
as
specified
by
the
Content-Type
header
<p>Returns
null
when
the
content-type
is
unknown
:end
:start
Sets
the
date
and
time
at
which
the
message
was
created,
as
specified
by
the
Date
header
<p>The
date
should
be
specified
as
the
number
of
milliseconds
since
January
1,
1970
GMT
:end
:start
Returns
the
date
and
time
at
which
the
message
was
created,
as
specified
by
the
Date
header
<p>The
date
is
returned
as
the
number
of
milliseconds
since
January
1,
1970
GMT
Returns
-1
when
the
date
is
unknown
:end
:start
Sets
the
(new)
entity
tag
of
the
body,
as
specified
by
the
ETag
header
:end
:start
Returns
the
entity
tag
of
the
body,
as
specified
by
the
ETag
header
:end
:start
Sets
the
date
and
time
at
which
the
message
is
no
longer
valid,
as
specified
by
the
Expires
header
<p>The
date
should
be
specified
as
the
number
of
milliseconds
since
January
1,
1970
GMT
:end
:start
Returns
the
date
and
time
at
which
the
message
is
no
longer
valid,
as
specified
by
the
Expires
header
<p>The
date
is
returned
as
the
number
of
milliseconds
since
January
1,
1970
GMT
Returns
-1
when
the
date
is
unknown
:end
:start
Sets
the
(new)
value
of
the
If-Modified-Since
header
<p>The
date
should
be
specified
as
the
number
of
milliseconds
since
January
1,
1970
GMT
:end
:start
Returns
the
value
of
the
IfModifiedSince
header
<p>The
date
is
returned
as
the
number
of
milliseconds
since
January
1,
1970
GMT
Returns
-1
when
the
date
is
unknown
:end
:start
Returns
the
value
of
the
If-Modified-Since
header
<p>The
date
is
returned
as
the
number
of
milliseconds
since
January
1,
1970
GMT
Returns
-1
when
the
date
is
unknown
:end
:start
Sets
the
(new)
value
of
the
If-None-Match
header
:end
:start
Sets
the
(new)
values
of
the
If-None-Match
header
:end
:start
Returns
the
value
of
the
If-None-Match
header
:end
:start
Sets
the
time
the
resource
was
last
changed,
as
specified
by
the
Last-Modified
header
<p>The
date
should
be
specified
as
the
number
of
milliseconds
since
January
1,
1970
GMT
:end
:start
Returns
the
time
the
resource
was
last
changed,
as
specified
by
the
Last-Modified
header
<p>The
date
is
returned
as
the
number
of
milliseconds
since
January
1,
1970
GMT
Returns
-1
when
the
date
is
unknown
:end
:start
Set
the
(new)
location
of
a
resource,
as
specified
by
the
Location
header
:end
:start
Return
the
(new)
location
of
a
resource,
as
specified
by
the
Location
header
<p>Returns
null
when
the
location
is
unknown
:end
:start
Sets
the
(new)
value
of
the
Origin
header
:end
:start
Returns
the
value
of
the
Origin
header
:end
:start
Sets
the
(new)
value
of
the
Pragma
header
:end
:start
Returns
the
value
of
the
Pragma
header
:end
:start
Sets
the
(new)
value
of
the
Upgrade
header
:end
:start
Returns
the
value
of
the
Upgrade
header
:end
:start
Parse
the
first
header
value
for
the
given
header
name
as
a
date,
return
-1
if
there
is
no
value,
or
raise
IllegalArgumentException
if
the
value
cannot
be
parsed
as
a
date
:end
:start
Set
the
given
date
under
the
given
header
name
after
formatting
it
as
a
string
using
the
pattern
"EEE,
dd
MMM
yyyy
HH:mm:ss
zzz"
The
equivalent
of
#set(String,
String)
but
for
date
headers
:end
:start
Return
the
first
header
value
for
the
given
header
name,
if
any
:end
:start
Add
the
given,
single
header
value
under
the
given
name
:end
:start
Set
the
given,
single
header
value
under
the
given
name
:end
:start
Represents
an
HTTP
input
message,
consisting
of
#getHeaders()
headers
and
a
readable
#getBody()
body
<p>Typically
implemented
by
an
HTTP
request
on
the
server-side,
or
a
response
on
the
client-side
:end
:start
Return
the
body
of
the
message
as
an
input
stream
:end
:start
Represents
the
base
interface
for
HTTP
request
and
response
messages
Consists
of
HttpHeaders,
retrievable
via
#getHeaders()
:end
:start
Return
the
headers
of
this
message
:end
:start
Java
5
enumeration
of
HTTP
request
methods
Intended
for
use
with
orgspringframeworkhttpclientClientHttpRequest
and
orgspringframeworkwebclientRestTemplate
:end
:start
Represents
an
HTTP
output
message,
consisting
of
#getHeaders()
headers
and
a
writable
#getBody()
body
<p>Typically
implemented
by
an
HTTP
request
on
the
client-side,
or
a
response
on
the
server-side
:end
:start
Return
the
body
of
the
message
as
an
output
stream
:end
:start
Represents
an
HTTP
request
message,
consisting
of
#getMethod()
method
and
#getURI()
uri
:end
:start
Return
the
HTTP
method
of
the
request
:end
:start
Return
the
URI
of
the
request
:end
:start
Java
5
enumeration
of
HTTP
status
codes
<p>The
HTTP
status
code
series
can
be
retrieved
via
#series()
:end
:start
100
Continue
:end
:start
101
Switching
Protocols
:end
:start
102
Processing
:end
:start
103
Checkpoint
:end
:start
200
OK
:end
:start
201
Created
:end
:start
202
Accepted
:end
:start
203
Non-Authoritative
Information
:end
:start
204
No
Content
:end
:start
205
Reset
Content
:end
:start
206
Partial
Content
:end
:start
207
Multi-Status
:end
:start
208
Already
Reported
:end
:start
226
IM
Used
:end
:start
300
Multiple
Choices
:end
:start
301
Moved
Permanently
:end
:start
302
Found
:end
:start
302
Moved
Temporarily
:end
:start
303
See
Other
:end
:start
304
Not
Modified
:end
:start
305
Use
Proxy
:end
:start
307
Temporary
Redirect
:end
:start
308
Resume
Incomplete
:end
:start
400
Bad
Request
:end
:start
401
Unauthorized
:end
:start
402
Payment
Required
:end
:start
403
Forbidden
:end
:start
404
Not
Found
:end
:start
405
Method
Not
Allowed
:end
:start
406
Not
Acceptable
:end
:start
407
Proxy
Authentication
Required
:end
:start
408
Request
Timeout
:end
:start
409
Conflict
:end
:start
410
Gone
:end
:start
411
Length
Required
:end
:start
412
Precondition
failed
:end
:start
413
Request
Entity
Too
Large
:end
:start
414
Request-URI
Too
Long
:end
:start
415
Unsupported
Media
Type
:end
:start
416
Requested
Range
Not
Satisfiable
:end
:start
417
Expectation
Failed
:end
:start
418
I'm
a
teapot
:end
:start
422
Unprocessable
Entity
:end
:start
423
Locked
:end
:start
424
Failed
Dependency
:end
:start
426
Upgrade
Required
:end
:start
428
Precondition
Required
:end
:start
429
Too
Many
Requests
:end
:start
431
Request
Header
Fields
Too
Large
:end
:start
500
Internal
Server
Error
:end
:start
501
Not
Implemented
:end
:start
502
Bad
Gateway
:end
:start
503
Service
Unavailable
:end
:start
504
Gateway
Timeout
:end
:start
505
HTTP
Version
Not
Supported
:end
:start
506
Variant
Also
Negotiates
:end
:start
507
Insufficient
Storage
:end
:start
508
Loop
Detected
:end
:start
509
Bandwidth
Limit
Exceeded
:end
:start
510
Not
Extended
:end
:start
511
Network
Authentication
Required
:end
:start
Return
the
integer
value
of
this
status
code
:end
:start
Return
the
reason
phrase
of
this
status
code
:end
:start
Whether
this
status
code
is
in
the
HTTP
series
orgspringframeworkhttpHttpStatusSeries#INFORMATIONAL
This
is
a
shortcut
for
checking
the
value
of
#series()
:end
:start
Whether
this
status
code
is
in
the
HTTP
series
orgspringframeworkhttpHttpStatusSeries#SUCCESSFUL
This
is
a
shortcut
for
checking
the
value
of
#series()
:end
:start
Whether
this
status
code
is
in
the
HTTP
series
orgspringframeworkhttpHttpStatusSeries#REDIRECTION
This
is
a
shortcut
for
checking
the
value
of
#series()
:end
:start
Whether
this
status
code
is
in
the
HTTP
series
orgspringframeworkhttpHttpStatusSeries#CLIENT_ERROR
This
is
a
shortcut
for
checking
the
value
of
#series()
:end
:start
Whether
this
status
code
is
in
the
HTTP
series
orgspringframeworkhttpHttpStatusSeries#SERVER_ERROR
This
is
a
shortcut
for
checking
the
value
of
#series()
:end
:start
Returns
the
HTTP
status
series
of
this
status
code
:end
:start
Return
a
string
representation
of
this
status
code
:end
:start
Return
the
enum
constant
of
this
type
with
the
specified
numeric
value
:end
:start
Java
5
enumeration
of
HTTP
status
series
<p>Retrievable
via
HttpStatus#series()
:end
:start
Return
the
integer
value
of
this
status
series
Ranges
from
1
to
5
:end
:start
Java
5
enumeration
of
HTTP
status
series
<p>Retrievable
via
HttpStatus#series()
:end
:start
Return
the
integer
value
of
this
status
series
Ranges
from
1
to
5
:end
:start
Exception
thrown
from
MediaType#parseMediaType(String)
in
case
of
encountering
an
invalid
media
type
specification
String
:end
:start
Create
a
new
InvalidMediaTypeException
for
the
given
media
type
:end
:start
Return
the
offending
media
type
:end
:start
A
sub-class
of
MimeType
that
adds
support
for
quality
parameters
as
defined
in
the
HTTP
specification
:end
:start
Public
constant
media
type
that
includes
all
media
ranges
(ie
"&#42;/&#42;")
:end
:start
A
String
equivalent
of
MediaType#ALL
:end
:start
Public
constant
media
type
for
application/atom+xml
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_ATOM_XML
:end
:start
Public
constant
media
type
for
application/x-www-form-urlencoded
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_FORM_URLENCODED
:end
:start
Public
constant
media
type
for
application/json
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_JSON
:end
:start
Public
constant
media
type
for
application/octet-stream
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_OCTET_STREAM
:end
:start
Public
constant
media
type
for
application/xhtml+xml
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_XHTML_XML
:end
:start
Public
constant
media
type
for
application/xml
:end
:start
A
String
equivalent
of
MediaType#APPLICATION_XML
:end
:start
Public
constant
media
type
for
image/gif
:end
:start
A
String
equivalent
of
MediaType#IMAGE_GIF
:end
:start
Public
constant
media
type
for
image/jpeg
:end
:start
A
String
equivalent
of
MediaType#IMAGE_JPEG
:end
:start
Public
constant
media
type
for
image/png
:end
:start
A
String
equivalent
of
MediaType#IMAGE_PNG
:end
:start
Public
constant
media
type
for
multipart/form-data
:end
:start
A
String
equivalent
of
MediaType#MULTIPART_FORM_DATA
:end
:start
Public
constant
media
type
for
text/html
:end
:start
A
String
equivalent
of
MediaType#TEXT_HTML
:end
:start
Public
constant
media
type
for
text/plain
:end
:start
A
String
equivalent
of
MediaType#TEXT_PLAIN
:end
:start
Public
constant
media
type
for
text/xml
:end
:start
A
String
equivalent
of
MediaType#TEXT_XML
:end
:start
Comparator
used
by
#sortByQualityValue(List)
:end
:start
Comparator
used
by
#sortBySpecificity(List)
:end
:start
Create
a
new
MediaType
for
the
given
primary
type
<p>The
#getSubtype()
subtype
is
set
to
"&#42;",
parameters
empty
:end
:start
Create
a
new
MediaType
for
the
given
primary
type
and
subtype
<p>The
parameters
are
empty
:end
:start
Create
a
new
MediaType
for
the
given
type,
subtype,
and
character
set
:end
:start
Create
a
new
MediaType
for
the
given
type,
subtype,
and
quality
value
:end
:start
Copy-constructor
that
copies
the
type
and
subtype
of
the
given
MediaType,
and
allows
for
different
parameter
:end
:start
Create
a
new
MediaType
for
the
given
type,
subtype,
and
parameters
:end
:start
Return
the
quality
value,
as
indicated
by
a
q
parameter,
if
any
Defaults
to
10
:end
:start
Indicate
whether
this
MediaType
includes
the
given
media
type
<p>For
instance,
text/*
includes
text/plain
and
text/html,
and
application/*+xml
includes
application/soap+xml,
etc
This
method
is
<b>not</b>
symmetric
:end
:start
Indicate
whether
this
MediaType
is
compatible
with
the
given
media
type
<p>For
instance,
text/*
is
compatible
with
text/plain,
text/html,
and
vice
versa
In
effect,
this
method
is
similar
to
#includes(MediaType),
except
that
it
<b>is</b>
symmetric
:end
:start
Return
a
replica
of
this
instance
with
the
quality
value
of
the
given
MediaType
:end
:start
Return
a
replica
of
this
instance
with
its
quality
value
removed
:end
:start
Parse
the
given
String
value
into
a
MediaType
object,
with
this
method
name
following
the
'valueOf'
naming
convention
(as
supported
by
orgspringframeworkcoreconvertConversionService
:end
:start
Parse
the
given
String
into
a
single
MediaType
:end
:start
Parse
the
given,
comma-separated
string
into
a
list
of
MediaType
objects
<p>This
method
can
be
used
to
parse
an
Accept
or
Content-Type
header
:end
:start
Return
a
string
representation
of
the
given
list
of
MediaType
objects
<p>This
method
can
be
used
to
for
an
Accept
or
Content-Type
header
:end
:start
Sorts
the
given
list
of
MediaType
objects
by
specificity
<p>Given
two
media
types:
<ol>
<li>if
either
media
type
has
a
#isWildcardType()
wildcard
type,
then
the
media
type
without
the
wildcard
is
ordered
before
the
other</li>
<li>if
the
two
media
types
have
different
#getType()
types,
then
they
are
considered
equal
and
remain
their
current
order</li>
<li>if
either
media
type
has
a
#isWildcardSubtype()
wildcard
subtype,
then
the
media
type
without
the
wildcard
is
sorted
before
the
other</li>
<li>if
the
two
media
types
have
different
#getSubtype()
subtypes,
then
they
are
considered
equal
and
remain
their
current
order</li>
<li>if
the
two
media
types
have
different
#getQualityValue()
quality
value,
then
the
media
type
with
the
highest
quality
value
is
ordered
before
the
other</li>
<li>if
the
two
media
types
have
a
different
amount
of
#getParameter(String)
parameters,
then
the
media
type
with
the
most
parameters
is
ordered
before
the
other</li>
</ol>
<p>For
example:
<blockquote>audio/basic
&lt;
audio/*
&lt;
*&#047;*</blockquote>
<blockquote>audio/*
&lt;
audio/*;q=07;
audio/*;q=03</blockquote>
<blockquote>audio/basic;level=1
&lt;
audio/basic</blockquote>
<blockquote>audio/basic
==
text/html</blockquote>
<blockquote>audio/basic
==
audio/wave</blockquote>
:end
:start
Sorts
the
given
list
of
MediaType
objects
by
quality
value
<p>Given
two
media
types:
<ol>
<li>if
the
two
media
types
have
different
#getQualityValue()
quality
value,
then
the
media
type
with
the
highest
quality
value
is
ordered
before
the
other</li>
<li>if
either
media
type
has
a
#isWildcardType()
wildcard
type,
then
the
media
type
without
the
wildcard
is
ordered
before
the
other</li>
<li>if
the
two
media
types
have
different
#getType()
types,
then
they
are
considered
equal
and
remain
their
current
order</li>
<li>if
either
media
type
has
a
#isWildcardSubtype()
wildcard
subtype,
then
the
media
type
without
the
wildcard
is
sorted
before
the
other</li>
<li>if
the
two
media
types
have
different
#getSubtype()
subtypes,
then
they
are
considered
equal
and
remain
their
current
order</li>
<li>if
the
two
media
types
have
a
different
amount
of
#getParameter(String)
parameters,
then
the
media
type
with
the
most
parameters
is
ordered
before
the
other</li>
</ol>
:end
:start
Sorts
the
given
list
of
MediaType
objects
by
specificity
as
the
primary
criteria
and
quality
value
the
secondary
:end
:start
javabeansPropertyEditor
Editor
for
MediaType
descriptors,
to
automatically
convert
String
specifications
(eg
"text/html")
to
MediaType
properties
:end
:start
Extension
of
HttpEntity
that
adds
a
HttpStatus
status
code
<p>Returned
by
orgspringframeworkwebclientRestTemplate#getForEntity:
<pre
class="code">
ResponseEntity&lt;String&gt;
entity
=
templategetForEntity("http://examplecom",
Stringclass);
String
body
=
entitygetBody();
MediaType
contentType
=
entitygetHeaders()getContentType();
HttpStatus
statusCode
=
entitygetStatusCode();
</pre>
<p>Can
also
be
used
in
Spring
MVC,
as
a
return
value
from
a
@Controller
method:
<pre
class="code">
&#64;RequestMapping("/handle")
public
ResponseEntity&lt;String&gt;
handle()
HttpHeaders
responseHeaders
=
new
HttpHeaders();
responseHeadersset("MyResponseHeader",
"MyValue");
return
new
ResponseEntity&lt;String&gt;("Hello
World",
responseHeaders,
HttpStatusCREATED);

</pre>
:end
:start
Create
a
new
ResponseEntity
with
the
given
status
code,
and
no
body
nor
headers
:end
:start
Create
a
new
ResponseEntity
with
the
given
body
and
status
code,
and
no
headers
:end
:start
Create
a
new
HttpEntity
with
the
given
headers
and
status
code,
and
no
body
:end
:start
Create
a
new
HttpEntity
with
the
given
body,
headers,
and
status
code
:end
:start
Return
the
HTTP
status
code
of
the
response
:end
:start
A
control
that
can
put
the
processing
of
an
HTTP
request
in
asynchronous
mode
during
which
the
response
remains
open
until
explicitly
closed
:end
:start
Enable
asynchronous
processing
after
which
the
response
remains
open
until
a
call
to
#complete()
is
made
or
the
server
times
out
the
request
Once
enabled,
additional
calls
to
this
method
are
ignored
:end
:start
A
variation
on
#start()
that
allows
specifying
a
timeout
value
to
use
to
use
for
asynchronous
processing
If
#complete()
is
not
called
within
the
specified
value,
the
request
times
out
:end
:start
Whether
asynchronous
request
processing
has
been
started
:end
:start
Causes
asynchronous
request
processing
to
be
completed
:end
:start
Whether
asynchronous
request
processing
has
been
completed
:end
:start
Represents
a
server-side
HTTP
request
:end
:start
Return
a
javasecurityPrincipal
instance
containing
the
name
of
the
authenticated
user
If
the
user
has
not
been
authenticated,
the
method
returns
<code>null</code>
:end
:start
Return
the
address
on
which
the
request
was
received
:end
:start
Return
the
address
of
the
remote
client
:end
:start
Return
a
control
that
allows
putting
the
request
in
asynchronous
mode
so
the
response
remains
open
until
closed
explicitly
from
the
current
or
another
thread
:end
:start
Represents
a
server-side
HTTP
response
:end
:start
Set
the
HTTP
status
code
of
the
response
:end
:start
Ensure
that
the
headers
and
the
content
of
the
response
are
written
out
<p>After
the
first
flush,
headers
can
no
longer
be
changed
Only
further
content
writing
and
content
flushing
is
possible
:end
:start
Close
this
response,
freeing
any
resources
created
:end
:start
A
ServerHttpAsyncRequestControl
to
use
on
Servlet
containers
(Servlet
30+)
:end
:start
Constructor
accepting
a
request
and
response
pair
that
are
expected
to
be
of
type
ServletServerHttpRequest
and
ServletServerHttpResponse
respectively
:end
:start
ServerHttpRequest
implementation
that
is
based
on
a
HttpServletRequest
:end
:start
Construct
a
new
instance
of
the
ServletServerHttpRequest
based
on
the
given
HttpServletRequest
:end
:start
Returns
the
HttpServletRequest
this
object
is
based
on
:end
:start
ServerHttpResponse
implementation
that
is
based
on
a
HttpServletResponse
:end
:start
Construct
a
new
instance
of
the
ServletServerHttpResponse
based
on
the
given
HttpServletResponse
:end
:start
Return
the
HttpServletResponse
this
object
is
based
on
:end
:start
Represents
a
HTTP
output
message
that
allows
for
setting
a
streaming
body
:end
:start
Sets
the
streaming
body
for
this
message
:end
:start
Defines
the
contract
for
bodies
that
can
be
written
directly
to
a
OutputStream
It
is
useful
with
HTTP
client
libraries
that
provide
indirect
access
to
an
OutputStream
via
a
callback
mechanism
:end
:start
Writes
this
body
to
the
given
OutputStream
:end
:start
Defines
the
contract
for
bodies
that
can
be
written
directly
to
a
OutputStream
It
is
useful
with
HTTP
client
libraries
that
provide
indirect
access
to
an
OutputStream
via
a
callback
mechanism
:end
:start
Writes
this
body
to
the
given
OutputStream
:end
:start
orgaopallianceinterceptMethodInterceptor
for
accessing
a
Burlap
service
Supports
authentication
via
username
and
password
The
service
URL
must
be
an
HTTP
URL
exposing
a
Burlap
service
<p>Burlap
is
a
slim,
XML-based
RPC
protocol
For
information
on
Burlap,
see
the
<a
href="http://wwwcauchocom/burlap">Burlap
website</a>
<p>Note:
There
is
no
requirement
for
services
accessed
with
this
proxy
factory
to
have
been
exported
using
Spring's
BurlapServiceExporter,
as
there
is
no
special
handling
involved
As
a
consequence,
you
can
also
access
services
that
have
been
exported
using
Caucho's
comcauchoburlapserverBurlapServlet
:end
:start
Set
the
BurlapProxyFactory
instance
to
use
If
not
specified,
a
default
BurlapProxyFactory
will
be
created
<p>Allows
to
use
an
externally
configured
factory
instance,
in
particular
a
custom
BurlapProxyFactory
subclass
:end
:start
Set
the
username
that
this
factory
should
use
to
access
the
remote
service
Default
is
none
<p>The
username
will
be
sent
by
Burlap
via
HTTP
Basic
Authentication
:end
:start
Set
the
password
that
this
factory
should
use
to
access
the
remote
service
Default
is
none
<p>The
password
will
be
sent
by
Burlap
via
HTTP
Basic
Authentication
:end
:start
Set
whether
overloaded
methods
should
be
enabled
for
remote
invocations
Default
is
"false"
:end
:start
Initialize
the
Burlap
proxy
for
this
interceptor
:end
:start
Create
the
Burlap
proxy
that
is
wrapped
by
this
interceptor
:end
:start
Convert
the
given
Burlap
access
exception
to
an
appropriate
Spring
RemoteAccessException
:end
:start
General
stream-based
protocol
exporter
for
a
Burlap
endpoint
<p>Burlap
is
a
slim,
XML-based
RPC
protocol
For
information
on
Burlap,
see
the
<a
href="http://wwwcauchocom/burlap">Burlap
website</a>
This
exporter
requires
Burlap
3x
:end
:start
Initialize
this
service
exporter
:end
:start
Perform
an
invocation
on
the
exported
object
:end
:start
FactoryBean
for
Burlap
proxies
Exposes
the
proxied
service
for
use
as
a
bean
reference,
using
the
specified
service
interface
<p>Burlap
is
a
slim,
XML-based
RPC
protocol
For
information
on
Burlap,
see
the
<a
href="http://wwwcauchocom/burlap">Burlap
website</a>
<p>The
service
URL
must
be
an
HTTP
URL
exposing
a
Burlap
service
For
details,
see
the
BurlapClientInterceptor
javadoc
:end
:start
Servlet-API-based
HTTP
request
handler
that
exports
the
specified
service
bean
as
Burlap
service
endpoint,
accessible
via
a
Burlap
proxy
<p><b>Note:</b>
Spring
also
provides
an
alternative
version
of
this
exporter,
for
Sun's
JRE
16
HTTP
server:
SimpleBurlapServiceExporter
<p>Burlap
is
a
slim,
XML-based
RPC
protocol
For
information
on
Burlap,
see
the
<a
href="http://wwwcauchocom/burlap">Burlap
website</a>
This
exporter
requires
Burlap
3x
<p>Note:
Burlap
services
exported
with
this
class
can
be
accessed
by
any
Burlap
client,
as
there
isn't
any
special
handling
involved
:end
:start
Processes
the
incoming
Burlap
request
and
creates
a
Burlap
response
:end
:start
orgaopallianceinterceptMethodInterceptor
for
accessing
a
Hessian
service
Supports
authentication
via
username
and
password
The
service
URL
must
be
an
HTTP
URL
exposing
a
Hessian
service
<p>Hessian
is
a
slim,
binary
RPC
protocol
For
information
on
Hessian,
see
the
<a
href="http://wwwcauchocom/hessian">Hessian
website</a>
<b>Note:
As
of
Spring
40,
this
client
requires
Hessian
40
or
above</b>
<p>Note:
There
is
no
requirement
for
services
accessed
with
this
proxy
factory
to
have
been
exported
using
Spring's
HessianServiceExporter,
as
there
is
no
special
handling
involved
As
a
consequence,
you
can
also
access
services
that
have
been
exported
using
Caucho's
comcauchohessianserverHessianServlet
:end
:start
Set
the
HessianProxyFactory
instance
to
use
If
not
specified,
a
default
HessianProxyFactory
will
be
created
<p>Allows
to
use
an
externally
configured
factory
instance,
in
particular
a
custom
HessianProxyFactory
subclass
:end
:start
Specify
the
Hessian
SerializerFactory
to
use
<p>This
will
typically
be
passed
in
as
an
inner
bean
definition
of
type
comcauchohessianioSerializerFactory,
with
custom
bean
property
values
applied
:end
:start
Set
whether
to
send
the
Java
collection
type
for
each
serialized
collection
Default
is
"true"
:end
:start
Set
whether
to
allow
non-serializable
types
as
Hessian
arguments
and
return
values
Default
is
"true"
:end
:start
Set
whether
overloaded
methods
should
be
enabled
for
remote
invocations
Default
is
"false"
:end
:start
Set
the
username
that
this
factory
should
use
to
access
the
remote
service
Default
is
none
<p>The
username
will
be
sent
by
Hessian
via
HTTP
Basic
Authentication
:end
:start
Set
the
password
that
this
factory
should
use
to
access
the
remote
service
Default
is
none
<p>The
password
will
be
sent
by
Hessian
via
HTTP
Basic
Authentication
:end
:start
Set
whether
Hessian's
debug
mode
should
be
enabled
Default
is
"false"
:end
:start
Set
whether
to
use
a
chunked
post
for
sending
a
Hessian
request
:end
:start
Specify
a
custom
HessianConnectionFactory
to
use
for
the
Hessian
client
:end
:start
Set
the
socket
connect
timeout
to
use
for
the
Hessian
client
:end
:start
Set
the
timeout
to
use
when
waiting
for
a
reply
from
the
Hessian
service
:end
:start
Set
whether
version
2
of
the
Hessian
protocol
should
be
used
for
parsing
requests
and
replies
Default
is
"false"
:end
:start
Set
whether
version
2
of
the
Hessian
protocol
should
be
used
for
parsing
requests
Default
is
"false"
:end
:start
Set
whether
version
2
of
the
Hessian
protocol
should
be
used
for
parsing
replies
Default
is
"false"
:end
:start
Initialize
the
Hessian
proxy
for
this
interceptor
:end
:start
Create
the
Hessian
proxy
that
is
wrapped
by
this
interceptor
:end
:start
Convert
the
given
Hessian
access
exception
to
an
appropriate
Spring
RemoteAccessException
:end
:start
General
stream-based
protocol
exporter
for
a
Hessian
endpoint
<p>Hessian
is
a
slim,
binary
RPC
protocol
For
information
on
Hessian,
see
the
<a
href="http://wwwcauchocom/hessian">Hessian
website</a>
<b>Note:
As
of
Spring
40,
this
exporter
requires
Hessian
40
or
above</b>
:end
:start
Specify
the
Hessian
SerializerFactory
to
use
<p>This
will
typically
be
passed
in
as
an
inner
bean
definition
of
type
comcauchohessianioSerializerFactory,
with
custom
bean
property
values
applied
:end
:start
Set
whether
to
send
the
Java
collection
type
for
each
serialized
collection
Default
is
"true"
:end
:start
Set
whether
to
allow
non-serializable
types
as
Hessian
arguments
and
return
values
Default
is
"true"
:end
:start
Specify
a
custom
HessianRemoteResolver
to
use
for
resolving
remote
object
references
:end
:start
Set
whether
Hessian's
debug
mode
should
be
enabled,
logging
to
this
exporter's
Commons
Logging
log
Default
is
"false"
:end
:start
Initialize
this
exporter
:end
:start
Perform
an
invocation
on
the
exported
object
:end
:start
Actually
invoke
the
skeleton
with
the
given
streams
:end
:start
FactoryBean
for
Hessian
proxies
Exposes
the
proxied
service
for
use
as
a
bean
reference,
using
the
specified
service
interface
<p>Hessian
is
a
slim,
binary
RPC
protocol
For
information
on
Hessian,
see
the
<a
href="http://wwwcauchocom/hessian">Hessian
website</a>
<b>Note:
As
of
Spring
40,
this
proxy
factory
requires
Hessian
40
or
above</b>
<p>The
service
URL
must
be
an
HTTP
URL
exposing
a
Hessian
service
For
details,
see
the
HessianClientInterceptor
javadoc
:end
:start
Servlet-API-based
HTTP
request
handler
that
exports
the
specified
service
bean
as
Hessian
service
endpoint,
accessible
via
a
Hessian
proxy
<p><b>Note:</b>
Spring
also
provides
an
alternative
version
of
this
exporter,
for
Sun's
JRE
16
HTTP
server:
SimpleHessianServiceExporter
<p>Hessian
is
a
slim,
binary
RPC
protocol
For
information
on
Hessian,
see
the
<a
href="http://wwwcauchocom/hessian">Hessian
website</a>
<b>Note:
As
of
Spring
40,
this
exporter
requires
Hessian
40
or
above</b>
<p>Hessian
services
exported
with
this
class
can
be
accessed
by
any
Hessian
client,
as
there
isn't
any
special
handling
involved
:end
:start
Processes
the
incoming
Hessian
request
and
creates
a
Hessian
response
:end
:start
HTTP
request
handler
that
exports
the
specified
service
bean
as
Burlap
service
endpoint,
accessible
via
a
Burlap
proxy
Designed
for
Sun's
JRE
16
HTTP
server,
implementing
the
comsunnethttpserverHttpHandler
interface
<p>Burlap
is
a
slim,
XML-based
RPC
protocol
For
information
on
Burlap,
see
the
<a
href="http://wwwcauchocom/burlap">Burlap
website</a>
This
exporter
requires
Burlap
3x
<p>Note:
Burlap
services
exported
with
this
class
can
be
accessed
by
any
Burlap
client,
as
there
isn't
any
special
handling
involved
:end
:start
Processes
the
incoming
Burlap
request
and
creates
a
Burlap
response
:end
:start
HTTP
request
handler
that
exports
the
specified
service
bean
as
Hessian
service
endpoint,
accessible
via
a
Hessian
proxy
Designed
for
Sun's
JRE
16
HTTP
server,
implementing
the
comsunnethttpserverHttpHandler
interface
<p>Hessian
is
a
slim,
binary
RPC
protocol
For
information
on
Hessian,
see
the
<a
href="http://wwwcauchocom/hessian">Hessian
website</a>
<b>Note:
As
of
Spring
40,
this
exporter
requires
Hessian
40
or
above</b>
<p>Hessian
services
exported
with
this
class
can
be
accessed
by
any
Hessian
client,
as
there
isn't
any
special
handling
involved
:end
:start
Processes
the
incoming
Hessian
request
and
creates
a
Hessian
response
:end
:start
Abstract
base
implementation
of
the
HttpInvokerRequestExecutor
interface
<p>Pre-implements
serialization
of
RemoteInvocation
objects
and
deserialization
of
RemoteInvocationResults
objects
:end
:start
Default
content
type:
"application/x-java-serialized-object"
:end
:start
Specify
the
content
type
to
use
for
sending
HTTP
invoker
requests
<p>Default
is
"application/x-java-serialized-object"
:end
:start
Return
the
content
type
to
use
for
sending
HTTP
invoker
requests
:end
:start
Set
whether
to
accept
GZIP
encoding,
that
is,
whether
to
send
the
HTTP
"Accept-Encoding"
header
with
"gzip"
as
value
<p>Default
is
"true"
Turn
this
flag
off
if
you
do
not
want
GZIP
response
compression
even
if
enabled
on
the
HTTP
server
:end
:start
Return
whether
to
accept
GZIP
encoding,
that
is,
whether
to
send
the
HTTP
"Accept-Encoding"
header
with
"gzip"
as
value
:end
:start
Return
the
bean
ClassLoader
that
this
executor
is
supposed
to
use
:end
:start
Serialize
the
given
RemoteInvocation
into
a
ByteArrayOutputStream
:end
:start
Serialize
the
given
RemoteInvocation
to
the
given
OutputStream
<p>The
default
implementation
gives
decorateOutputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
an
ObjectOutputStream
for
the
final
stream
and
calls
doWriteRemoteInvocation
to
actually
write
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
OutputStream
to
use
for
writing
remote
invocations,
potentially
decorating
the
given
original
OutputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
Perform
the
actual
writing
of
the
given
invocation
object
to
the
given
ObjectOutputStream
<p>The
default
implementation
simply
calls
writeObject
Can
be
overridden
for
serialization
of
a
custom
wrapper
object
rather
than
the
plain
invocation,
for
example
an
encryption-aware
holder
:end
:start
Execute
a
request
to
send
the
given
serialized
remote
invocation
<p>Implementations
will
usually
call
readRemoteInvocationResult
to
deserialize
a
returned
RemoteInvocationResult
object
:end
:start
Deserialize
a
RemoteInvocationResult
object
from
the
given
InputStream
<p>Gives
decorateInputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
an
ObjectInputStream
via
createObjectInputStream
and
calls
doReadRemoteInvocationResult
to
actually
read
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
InputStream
to
use
for
reading
remote
invocation
results,
potentially
decorating
the
given
original
InputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
Create
an
ObjectInputStream
for
the
given
InputStream
and
codebase
The
default
implementation
creates
a
CodebaseAwareObjectInputStream
:end
:start
Perform
the
actual
reading
of
an
invocation
object
from
the
given
ObjectInputStream
<p>The
default
implementation
simply
calls
readObject
Can
be
overridden
for
deserialization
of
a
custom
wrapper
object
rather
than
the
plain
invocation,
for
example
an
encryption-aware
holder
:end
:start
orgspringframeworkremotinghttpinvokerHttpInvokerRequestExecutor
implementation
that
uses
<a
href="http://hcapacheorg/httpcomponents-client-ga/httpclient/">Apache
HttpComponents
HttpClient</a>
to
execute
POST
requests
<p>Allows
to
use
a
pre-configured
orgapachehttpclientHttpClient
instance,
potentially
with
authentication,
HTTP
connection
pooling,
etc
Also
designed
for
easy
subclassing,
providing
specific
template
methods
<p>As
of
Spring
32,
this
request
executor
requires
Apache
HttpComponents
42
or
higher
:end
:start
Create
a
new
instance
of
the
HttpComponentsHttpInvokerRequestExecutor
with
a
default
HttpClient
that
uses
a
default
orgapachehttpimplconnPoolingClientConnectionManager
:end
:start
Create
a
new
instance
of
the
HttpComponentsClientHttpRequestFactory
with
the
given
HttpClient
instance
:end
:start
Set
the
HttpClient
instance
to
use
for
this
request
executor
:end
:start
Return
the
HttpClient
instance
that
this
request
executor
uses
:end
:start
Set
the
connection
timeout
for
the
underlying
HttpClient
A
timeout
value
of
0
specifies
an
infinite
timeout
:end
:start
Set
the
socket
read
timeout
for
the
underlying
HttpClient
A
timeout
value
of
0
specifies
an
infinite
timeout
:end
:start
Execute
the
given
request
through
the
HttpClient
<p>This
method
implements
the
basic
processing
workflow:
The
actual
work
happens
in
this
class's
template
methods
:end
:start
Create
a
HttpPost
for
the
given
configuration
<p>The
default
implementation
creates
a
standard
HttpPost
with
"application/x-java-serialized-object"
as
"Content-Type"
header
:end
:start
Set
the
given
serialized
remote
invocation
as
request
body
<p>The
default
implementation
simply
sets
the
serialized
invocation
as
the
HttpPost's
request
body
This
can
be
overridden,
for
example,
to
write
a
specific
encoding
and
to
potentially
set
appropriate
HTTP
request
headers
:end
:start
Execute
the
given
HttpPost
instance
:end
:start
Validate
the
given
response
as
contained
in
the
HttpPost
object,
throwing
an
exception
if
it
does
not
correspond
to
a
successful
HTTP
response
<p>Default
implementation
rejects
any
HTTP
status
code
beyond
2xx,
to
avoid
parsing
the
response
body
and
trying
to
deserialize
from
a
corrupted
stream
:end
:start
Extract
the
response
body
from
the
given
executed
remote
invocation
request
<p>The
default
implementation
simply
fetches
the
HttpPost's
response
body
stream
If
the
response
is
recognized
as
GZIP
response,
the
InputStream
will
get
wrapped
in
a
GZIPInputStream
:end
:start
Determine
whether
the
given
response
indicates
a
GZIP
response
<p>The
default
implementation
checks
whether
the
HTTP
"Content-Encoding"
header
contains
"gzip"
(in
any
casing)
:end
:start
Configuration
interface
for
executing
HTTP
invoker
requests
:end
:start
Return
the
HTTP
URL
of
the
target
service
:end
:start
Return
the
codebase
URL
to
download
classes
from
if
not
found
locally
Can
consist
of
multiple
URLs,
separated
by
spaces
:end
:start
orgaopallianceinterceptMethodInterceptor
for
accessing
an
HTTP
invoker
service
The
service
URL
must
be
an
HTTP
URL
exposing
an
HTTP
invoker
service
<p>Serializes
remote
invocation
objects
and
deserializes
remote
invocation
result
objects
Uses
Java
serialization
just
like
RMI,
but
provides
the
same
ease
of
setup
as
Caucho's
HTTP-based
Hessian
and
Burlap
protocols
<P>HTTP
invoker
is
a
very
extensible
and
customizable
protocol
It
supports
the
RemoteInvocationFactory
mechanism,
like
RMI
invoker,
allowing
to
include
additional
invocation
attributes
(for
example,
a
security
context)
Furthermore,
it
allows
to
customize
request
execution
via
the
HttpInvokerRequestExecutor
strategy
<p>Can
use
the
JDK's
javarmiserverRMIClassLoader
to
load
classes
from
a
given
#setCodebaseUrl
codebase,
performing
on-demand
dynamic
code
download
from
a
remote
location
The
codebase
can
consist
of
multiple
URLs,
separated
by
spaces
Note
that
RMIClassLoader
requires
a
SecurityManager
to
be
set,
analogous
to
when
using
dynamic
class
download
with
standard
RMI!
(See
the
RMI
documentation
for
details)
:end
:start
Set
the
codebase
URL
to
download
classes
from
if
not
found
locally
Can
consists
of
multiple
URLs,
separated
by
spaces
<p>Follows
RMI's
codebase
conventions
for
dynamic
class
download
In
contrast
to
RMI,
where
the
server
determines
the
URL
for
class
download
(via
the
"javarmiservercodebase"
system
property),
it's
the
client
that
determines
the
codebase
URL
here
The
server
will
usually
be
the
same
as
for
the
service
URL,
just
pointing
to
a
different
path
there
:end
:start
Return
the
codebase
URL
to
download
classes
from
if
not
found
locally
:end
:start
Set
the
HttpInvokerRequestExecutor
implementation
to
use
for
executing
remote
invocations
<p>Default
is
SimpleHttpInvokerRequestExecutor
Alternatively,
consider
using
HttpComponentsHttpInvokerRequestExecutor
for
more
sophisticated
needs
:end
:start
Return
the
HttpInvokerRequestExecutor
used
by
this
remote
accessor
<p>Creates
a
default
SimpleHttpInvokerRequestExecutor
if
no
executor
has
been
initialized
already
:end
:start
Execute
the
given
remote
invocation
via
the
HttpInvokerRequestExecutor
<p>This
implementation
delegates
to
#executeRequest(RemoteInvocation)
Can
be
overridden
to
react
to
the
specific
original
MethodInvocation
:end
:start
Execute
the
given
remote
invocation
via
the
HttpInvokerRequestExecutor
<p>Can
be
overridden
in
subclasses
to
pass
a
different
configuration
object
to
the
executor
Alternatively,
add
further
configuration
properties
in
a
subclass
of
this
accessor:
By
default,
the
accessor
passed
itself
as
configuration
object
to
the
executor
:end
:start
Convert
the
given
HTTP
invoker
access
exception
to
an
appropriate
Spring
RemoteAccessException
:end
:start
FactoryBean
for
HTTP
invoker
proxies
Exposes
the
proxied
service
for
use
as
a
bean
reference,
using
the
specified
service
interface
<p>The
service
URL
must
be
an
HTTP
URL
exposing
an
HTTP
invoker
service
Optionally,
a
codebase
URL
can
be
specified
for
on-demand
dynamic
code
download
from
a
remote
location
For
details,
see
HttpInvokerClientInterceptor
docs
<p>Serializes
remote
invocation
objects
and
deserializes
remote
invocation
result
objects
Uses
Java
serialization
just
like
RMI,
but
provides
the
same
ease
of
setup
as
Caucho's
HTTP-based
Hessian
and
Burlap
protocols
<p><b>HTTP
invoker
is
the
recommended
protocol
for
Java-to-Java
remoting</b>
It
is
more
powerful
and
more
extensible
than
Hessian
and
Burlap,
at
the
expense
of
being
tied
to
Java
Nevertheless,
it
is
as
easy
to
set
up
as
Hessian
and
Burlap,
which
is
its
main
advantage
compared
to
RMI
:end
:start
Strategy
interface
for
actual
execution
of
an
HTTP
invoker
request
Used
by
HttpInvokerClientInterceptor
and
its
subclass
HttpInvokerProxyFactoryBean
<p>Two
implementations
are
provided
out
of
the
box:
<ul>
<li><b>SimpleHttpInvokerRequestExecutor:</b>
Uses
J2SE
facilities
to
execute
POST
requests,
without
support
for
HTTP
authentication
or
advanced
configuration
options
<li><b>CommonsHttpInvokerRequestExecutor:</b>
Uses
Jakarta's
Commons
HttpClient
to
execute
POST
requests,
allowing
to
use
a
preconfigured
HttpClient
instance
(potentially
with
authentication,
HTTP
connection
pooling,
etc)
</ul>
:end
:start
Execute
a
request
to
send
the
given
remote
invocation
:end
:start
Servlet-API-based
HTTP
request
handler
that
exports
the
specified
service
bean
as
HTTP
invoker
service
endpoint,
accessible
via
an
HTTP
invoker
proxy
<p><b>Note:</b>
Spring
also
provides
an
alternative
version
of
this
exporter,
for
Sun's
JRE
16
HTTP
server:
SimpleHttpInvokerServiceExporter
<p>Deserializes
remote
invocation
objects
and
serializes
remote
invocation
result
objects
Uses
Java
serialization
just
like
RMI,
but
provides
the
same
ease
of
setup
as
Caucho's
HTTP-based
Hessian
and
Burlap
protocols
<p><b>HTTP
invoker
is
the
recommended
protocol
for
Java-to-Java
remoting</b>
It
is
more
powerful
and
more
extensible
than
Hessian
and
Burlap,
at
the
expense
of
being
tied
to
Java
Nevertheless,
it
is
as
easy
to
set
up
as
Hessian
and
Burlap,
which
is
its
main
advantage
compared
to
RMI
:end
:start
Reads
a
remote
invocation
from
the
request,
executes
it,
and
writes
the
remote
invocation
result
to
the
response
:end
:start
Read
a
RemoteInvocation
from
the
given
HTTP
request
<p>Delegates
to
#readRemoteInvocation(javaxservlethttpHttpServletRequest,
javaioInputStream)
with
the
javaxservletServletRequest#getInputStream()
servlet
request's
input
stream
:end
:start
Deserialize
a
RemoteInvocation
object
from
the
given
InputStream
<p>Gives
#decorateInputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
a
orgspringframeworkremotingrmiCodebaseAwareObjectInputStream
and
calls
#doReadRemoteInvocation
to
actually
read
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
InputStream
to
use
for
reading
remote
invocations,
potentially
decorating
the
given
original
InputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
Write
the
given
RemoteInvocationResult
to
the
given
HTTP
response
:end
:start
Serialize
the
given
RemoteInvocation
to
the
given
OutputStream
<p>The
default
implementation
gives
#decorateOutputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
an
javaioObjectOutputStream
for
the
final
stream
and
calls
#doWriteRemoteInvocationResult
to
actually
write
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
OutputStream
to
use
for
writing
remote
invocation
results,
potentially
decorating
the
given
original
OutputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
HttpInvokerRequestExecutor
implementation
that
uses
standard
J2SE
facilities
to
execute
POST
requests,
without
support
for
HTTP
authentication
or
advanced
configuration
options
<p>Designed
for
easy
subclassing,
customizing
specific
template
methods
However,
consider
CommonsHttpInvokerRequestExecutor
for
more
sophisticated
needs:
The
J2SE
HttpURLConnection
is
rather
limited
in
its
capabilities
:end
:start
Set
the
underlying
URLConnection's
connect
timeout
(in
milliseconds)
A
timeout
value
of
0
specifies
an
infinite
timeout
<p>Default
is
the
system's
default
timeout
:end
:start
Set
the
underlying
URLConnection's
read
timeout
(in
milliseconds)
A
timeout
value
of
0
specifies
an
infinite
timeout
<p>Default
is
the
system's
default
timeout
:end
:start
Execute
the
given
request
through
a
standard
J2SE
HttpURLConnection
<p>This
method
implements
the
basic
processing
workflow:
The
actual
work
happens
in
this
class's
template
methods
:end
:start
Open
an
HttpURLConnection
for
the
given
remote
invocation
request
:end
:start
Prepare
the
given
HTTP
connection
<p>The
default
implementation
specifies
POST
as
method,
"application/x-java-serialized-object"
as
"Content-Type"
header,
and
the
given
content
length
as
"Content-Length"
header
:end
:start
Set
the
given
serialized
remote
invocation
as
request
body
<p>The
default
implementation
simply
write
the
serialized
invocation
to
the
HttpURLConnection's
OutputStream
This
can
be
overridden,
for
example,
to
write
a
specific
encoding
and
potentially
set
appropriate
HTTP
request
headers
:end
:start
Validate
the
given
response
as
contained
in
the
HttpURLConnection
object,
throwing
an
exception
if
it
does
not
correspond
to
a
successful
HTTP
response
<p>Default
implementation
rejects
any
HTTP
status
code
beyond
2xx,
to
avoid
parsing
the
response
body
and
trying
to
deserialize
from
a
corrupted
stream
:end
:start
Extract
the
response
body
from
the
given
executed
remote
invocation
request
<p>The
default
implementation
simply
reads
the
serialized
invocation
from
the
HttpURLConnection's
InputStream
If
the
response
is
recognized
as
GZIP
response,
the
InputStream
will
get
wrapped
in
a
GZIPInputStream
:end
:start
Determine
whether
the
given
response
is
a
GZIP
response
<p>Default
implementation
checks
whether
the
HTTP
"Content-Encoding"
header
contains
"gzip"
(in
any
casing)
:end
:start
HTTP
request
handler
that
exports
the
specified
service
bean
as
HTTP
invoker
service
endpoint,
accessible
via
an
HTTP
invoker
proxy
Designed
for
Sun's
JRE
16
HTTP
server,
implementing
the
comsunnethttpserverHttpHandler
interface
<p>Deserializes
remote
invocation
objects
and
serializes
remote
invocation
result
objects
Uses
Java
serialization
just
like
RMI,
but
provides
the
same
ease
of
setup
as
Caucho's
HTTP-based
Hessian
and
Burlap
protocols
<p><b>HTTP
invoker
is
the
recommended
protocol
for
Java-to-Java
remoting</b>
It
is
more
powerful
and
more
extensible
than
Hessian
and
Burlap,
at
the
expense
of
being
tied
to
Java
Nevertheless,
it
is
as
easy
to
set
up
as
Hessian
and
Burlap,
which
is
its
main
advantage
compared
to
RMI
:end
:start
Reads
a
remote
invocation
from
the
request,
executes
it,
and
writes
the
remote
invocation
result
to
the
response
:end
:start
Read
a
RemoteInvocation
from
the
given
HTTP
request
<p>Delegates
to
#readRemoteInvocation(comsunnethttpserverHttpExchange,
javaioInputStream)
with
the
comsunnethttpserverHttpExchange#getRequestBody()
request's
input
stream
:end
:start
Deserialize
a
RemoteInvocation
object
from
the
given
InputStream
<p>Gives
#decorateInputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
a
orgspringframeworkremotingrmiCodebaseAwareObjectInputStream
and
calls
#doReadRemoteInvocation
to
actually
read
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
InputStream
to
use
for
reading
remote
invocations,
potentially
decorating
the
given
original
InputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
Write
the
given
RemoteInvocationResult
to
the
given
HTTP
response
:end
:start
Serialize
the
given
RemoteInvocation
to
the
given
OutputStream
<p>The
default
implementation
gives
#decorateOutputStream
a
chance
to
decorate
the
stream
first
(for
example,
for
custom
encryption
or
compression)
Creates
an
javaioObjectOutputStream
for
the
final
stream
and
calls
#doWriteRemoteInvocationResult
to
actually
write
the
object
<p>Can
be
overridden
for
custom
serialization
of
the
invocation
:end
:start
Return
the
OutputStream
to
use
for
writing
remote
invocation
results,
potentially
decorating
the
given
original
OutputStream
<p>The
default
implementation
returns
the
given
stream
as-is
Can
be
overridden,
for
example,
for
custom
encryption
or
compression
:end
:start
Abstract
exporter
for
JAX-WS
services,
autodetecting
annotated
service
beans
(through
the
JAX-WS
javaxjwsWebService
annotation)
Compatible
with
JAX-WS
21
and
22,
as
included
in
JDK
6
update
4+
and
Java
7/8
<p>Subclasses
need
to
implement
the
#publishEndpoint
template
methods
for
actual
endpoint
exposure
:end
:start
Set
the
property
bag
for
the
endpoint,
including
properties
such
as
"javaxxmlwswsdlservice"
or
"javaxxmlwswsdlport"
:end
:start
Set
the
JDK
concurrent
executor
to
use
for
dispatching
incoming
requests
to
exported
service
instances
:end
:start
Specify
the
binding
type
to
use,
overriding
the
value
of
the
JAX-WS
javaxxmlwsBindingType
annotation
:end
:start
Specify
WebServiceFeature
objects
(eg
as
inner
bean
definitions)
to
apply
to
JAX-WS
endpoint
creation
:end
:start
Allows
for
providing
JAX-WS
22
WebServiceFeature
specifications:
in
the
form
of
actual
javaxxmlwsWebServiceFeature
objects,
WebServiceFeature
Class
references,
or
WebServiceFeature
class
names
<p>As
of
Spring
40,
this
is
effectively
just
an
alternative
way
of
specifying
#setEndpointFeatures
"endpointFeatures"
Do
not
specify
both
properties
at
the
same
time;
prefer
"endpointFeatures"
moving
forward
:end
:start
Obtains
all
web
service
beans
and
publishes
them
as
JAX-WS
endpoints
:end
:start
Immediately
publish
all
endpoints
when
fully
configured
:end
:start
Publish
all
javaxjwsWebService
annotated
beans
in
the
containing
BeanFactory
:end
:start
Create
the
actual
Endpoint
instance
:end
:start
Actually
publish
the
given
endpoint
To
be
implemented
by
subclasses
:end
:start
Actually
publish
the
given
provider
endpoint
To
be
implemented
by
subclasses
:end
:start
Stops
all
published
endpoints,
taking
the
web
services
offline
:end
:start
orgaopallianceinterceptMethodInterceptor
for
accessing
a
specific
port
of
a
JAX-WS
service
Compatible
with
JAX-WS
21
and
22,
as
included
in
JDK
6
update
4+
and
Java
7/8
<p>Uses
either
LocalJaxWsServiceFactory's
facilities
underneath,
or
takes
an
explicit
reference
to
an
existing
JAX-WS
Service
instance
(eg
obtained
via
orgspringframeworkjndiJndiObjectFactoryBean)
:end
:start
Set
a
reference
to
an
existing
JAX-WS
Service
instance,
for
example
obtained
via
orgspringframeworkjndiJndiObjectFactoryBean
If
not
set,
LocalJaxWsServiceFactory's
properties
have
to
be
specified
:end
:start
Return
a
reference
to
an
existing
JAX-WS
Service
instance,
if
any
:end
:start
Set
the
name
of
the
port
Corresponds
to
the
"wsdl:port"
name
:end
:start
Return
the
name
of
the
port
:end
:start
Set
the
username
to
specify
on
the
stub
:end
:start
Return
the
username
to
specify
on
the
stub
:end
:start
Set
the
password
to
specify
on
the
stub
:end
:start
Return
the
password
to
specify
on
the
stub
:end
:start
Set
the
endpoint
address
to
specify
on
the
stub
:end
:start
Return
the
endpoint
address
to
specify
on
the
stub
:end
:start
Set
the
"sessionmaintain"
flag
to
specify
on
the
stub
:end
:start
Return
the
"sessionmaintain"
flag
to
specify
on
the
stub
:end
:start
Set
the
"soapactionuse"
flag
to
specify
on
the
stub
:end
:start
Return
the
"soapactionuse"
flag
to
specify
on
the
stub
:end
:start
Set
the
SOAP
action
URI
to
specify
on
the
stub
:end
:start
Return
the
SOAP
action
URI
to
specify
on
the
stub
:end
:start
Set
custom
properties
to
be
set
on
the
stub
<p>Can
be
populated
with
a
String
"value"
(parsed
via
PropertiesEditor)
or
a
"props"
element
in
XML
bean
definitions
:end
:start
Allow
Map
access
to
the
custom
properties
to
be
set
on
the
stub,
with
the
option
to
add
or
override
specific
entries
<p>Useful
for
specifying
entries
directly,
for
example
via
"customProperties[myKey]"
This
is
particularly
useful
for
adding
or
overriding
entries
in
child
bean
definitions
:end
:start
Add
a
custom
property
to
this
JAX-WS
BindingProvider
:end
:start
Specify
WebServiceFeature
objects
(eg
as
inner
bean
definitions)
to
apply
to
JAX-WS
port
stub
creation
:end
:start
Specify
WebServiceFeature
specifications
for
the
JAX-WS
port
stub:
in
the
form
of
actual
javaxxmlwsWebServiceFeature
objects,
WebServiceFeature
Class
references,
or
WebServiceFeature
class
names
<p>As
of
Spring
40,
this
is
effectively
just
an
alternative
way
of
specifying
#setPortFeatures
"portFeatures"
Do
not
specify
both
properties
at
the
same
time;
prefer
"portFeatures"
moving
forward
:end
:start
Set
the
interface
of
the
service
that
this
factory
should
create
a
proxy
for
:end
:start
Return
the
interface
of
the
service
that
this
factory
should
create
a
proxy
for
:end
:start
Set
whether
to
look
up
the
JAX-WS
service
on
startup
<p>Default
is
"true"
Turn
this
flag
off
to
allow
for
late
start
of
the
target
server
In
this
case,
the
JAX-WS
service
will
be
lazily
fetched
on
first
access
:end
:start
Set
the
bean
ClassLoader
to
use
for
this
interceptor:
for
resolving
WebServiceFeature
class
names
as
specified
through
#setWebServiceFeatures,
and
also
for
building
a
client
proxy
in
the
JaxWsPortProxyFactoryBean
subclass
:end
:start
Return
the
bean
ClassLoader
to
use
for
this
interceptor
:end
:start
Initialize
the
JAX-WS
port
for
this
interceptor
:end
:start
Initialize
this
client
interceptor's
properties
from
the
given
WebService
annotation,
if
necessary
and
possible
(ie
if
"wsdlDocumentUrl",
"namespaceUri",
"serviceName"
and
"portName"
haven't
been
set
but
corresponding
values
are
declared
at
the
annotation
level
of
the
specified
service
interface)
:end
:start
Return
whether
this
client
interceptor
has
already
been
prepared,
ie
has
already
looked
up
the
JAX-WS
service
and
port
:end
:start
Return
the
prepared
QName
for
the
port
:end
:start
Obtain
the
port
stub
from
the
given
JAX-WS
Service
:end
:start
Prepare
the
given
JAX-WS
port
stub,
applying
properties
to
it
Called
by
#prepare
:end
:start
Return
the
underlying
JAX-WS
port
stub
that
this
interceptor
delegates
to
for
each
method
invocation
on
the
proxy
:end
:start
Perform
a
JAX-WS
service
invocation
based
on
the
given
method
invocation
:end
:start
Perform
a
JAX-WS
service
invocation
on
the
given
port
stub
:end
:start
orgspringframeworkbeansfactoryFactoryBean
for
a
specific
port
of
a
JAX-WS
service
Exposes
a
proxy
for
the
port,
to
be
used
for
bean
references
Inherits
configuration
properties
from
JaxWsPortClientInterceptor
:end
:start
Spring
SoapFaultException
adapter
for
the
JAX-WS
javaxxmlwssoapSOAPFaultException
class
:end
:start
Constructor
for
JaxWsSoapFaultException
:end
:start
Return
the
wrapped
JAX-WS
SOAPFault
:end
:start
Factory
for
locally
defined
JAX-WS
javaxxmlwsService
references
Uses
the
JAX-WS
javaxxmlwsService#create
factory
API
underneath
<p>Serves
as
base
class
for
LocalJaxWsServiceFactoryBean
as
well
as
JaxWsPortClientInterceptor
and
JaxWsPortProxyFactoryBean
:end
:start
Set
the
URL
of
the
WSDL
document
that
describes
the
service
:end
:start
Set
the
WSDL
document
URL
as
a
Resource
:end
:start
Return
the
URL
of
the
WSDL
document
that
describes
the
service
:end
:start
Set
the
namespace
URI
of
the
service
Corresponds
to
the
WSDL
"targetNamespace"
:end
:start
Return
the
namespace
URI
of
the
service
:end
:start
Set
the
name
of
the
service
to
look
up
Corresponds
to
the
"wsdl:service"
name
:end
:start
Return
the
name
of
the
service
:end
:start
Specify
WebServiceFeature
objects
(eg
as
inner
bean
definitions)
to
apply
to
JAX-WS
service
creation
<p>Note:
This
mechanism
requires
JAX-WS
22
or
higher
:end
:start
Set
the
JDK
concurrent
executor
to
use
for
asynchronous
executions
that
require
callbacks
:end
:start
Set
the
JAX-WS
HandlerResolver
to
use
for
all
proxies
and
dispatchers
created
through
this
factory
:end
:start
Create
a
JAX-WS
Service
according
to
the
parameters
of
this
factory
:end
:start
Return
a
QName
for
the
given
name,
relative
to
the
namespace
URI
of
this
factory,
if
given
:end
:start
orgspringframeworkbeansfactoryFactoryBean
for
locally
defined
JAX-WS
Service
references
Uses
LocalJaxWsServiceFactory's
facilities
underneath
<p>Alternatively,
JAX-WS
Service
references
can
be
looked
up
in
the
JNDI
environment
of
the
J2EE
container
:end
:start
Simple
exporter
for
JAX-WS
services,
autodetecting
annotated
service
beans
(through
the
JAX-WS
javaxjwsWebService
annotation)
and
exporting
them
through
the
HTTP
server
included
in
Sun's
JDK
16
The
full
address
for
each
service
will
consist
of
the
server's
base
address
with
the
service
name
appended
(eg
"http://localhost:8080/OrderService")
<p>Note
that
this
exporter
will
only
work
on
Sun's
JDK
16
or
higher,
as
well
as
on
JDKs
that
ship
Sun's
entire
class
library
as
included
in
the
Sun
JDK
For
a
portable
JAX-WS
exporter,
have
a
look
at
SimpleJaxWsServiceExporter
:end
:start
Specify
an
existing
HTTP
server
to
register
the
web
service
contexts
with
This
will
typically
be
a
server
managed
by
the
general
Spring
orgspringframeworkremotingsupportSimpleHttpServerFactoryBean
<p>Alternatively,
configure
a
local
HTTP
server
through
the
#setPort
"port",
#setHostname
"hostname"
and
#setBacklog
"backlog"
properties
(or
rely
on
the
defaults
there)
:end
:start
Specify
the
HTTP
server's
port
Default
is
8080
<p>Only
applicable
for
a
locally
configured
HTTP
server
Ignored
when
the
#setServer
"server"
property
has
been
specified
:end
:start
Specify
the
HTTP
server's
hostname
to
bind
to
Default
is
localhost;
can
be
overridden
with
a
specific
network
address
to
bind
to
<p>Only
applicable
for
a
locally
configured
HTTP
server
Ignored
when
the
#setServer
"server"
property
has
been
specified
:end
:start
Specify
the
HTTP
server's
TCP
backlog
Default
is
-1,
indicating
the
system's
default
value
<p>Only
applicable
for
a
locally
configured
HTTP
server
Ignored
when
the
#setServer
"server"
property
has
been
specified
:end
:start
Specify
the
number
of
seconds
to
wait
until
HTTP
exchanges
have
completed
when
shutting
down
the
HTTP
server
Default
is
0
<p>Only
applicable
for
a
locally
configured
HTTP
server
Ignored
when
the
#setServer
"server"
property
has
been
specified
:end
:start
Set
the
base
path
for
context
publication
Default
is
"/"
<p>For
each
context
publication
path,
the
service
name
will
be
appended
to
this
base
address
Eg
service
name
"OrderService"
->
"/OrderService"
:end
:start
Register
common
comsunnethttpserverFilter
Filters
to
be
applied
to
all
detected
javaxjwsWebService
annotated
beans
:end
:start
Register
a
common
comsunnethttpserverAuthenticator
to
be
applied
to
all
detected
javaxjwsWebService
annotated
beans
:end
:start
Build
the
HttpContext
for
the
given
endpoint
:end
:start
Calculate
the
full
endpoint
path
for
the
given
endpoint
:end
:start
Simple
exporter
for
JAX-WS
services,
autodetecting
annotated
service
beans
(through
the
JAX-WS
javaxjwsWebService
annotation)
and
exporting
them
with
a
configured
base
address
(by
default
"http://localhost:8080/")
using
the
JAX-WS
provider's
built-in
publication
support
The
full
address
for
each
service
will
consist
of
the
base
address
with
the
service
name
appended
(eg
"http://localhost:8080/OrderService")
<p>Note
that
this
exporter
will
only
work
if
the
JAX-WS
runtime
actually
supports
publishing
with
an
address
argument,
ie
if
the
JAX-WS
runtime
ships
an
internal
HTTP
server
This
is
the
case
with
the
JAX-WS
runtime
that's
inclued
in
Sun's
JDK
16
but
not
with
the
standalone
JAX-WS
21
RI
<p>For
explicit
configuration
of
JAX-WS
endpoints
with
Sun's
JDK
16
HTTP
server,
consider
using
SimpleHttpServerJaxWsServiceExporter!
:end
:start
Set
the
base
address
for
exported
services
Default
is
"http://localhost:8080/"
<p>For
each
actual
publication
address,
the
service
name
will
be
appended
to
this
base
address
Eg
service
name
"OrderService"
->
"http://localhost:8080/OrderService"
:end
:start
Calculate
the
full
endpoint
address
for
the
given
endpoint
:end
:start
A
base
class
for
ContentNegotiationStrategy
types
that
maintain
a
map
with
keys
such
as
"json"
and
media
types
such
as
"application/json"
:end
:start
Create
an
instance
with
the
given
extension-to-MediaType
lookup
:end
:start
Sub-classes
must
extract
the
key
to
use
to
look
up
a
media
type
:end
:start
Invoked
when
a
matching
media
type
is
found
in
the
lookup
map
:end
:start
Invoked
when
no
matching
media
type
is
found
in
the
lookup
map
Sub-classes
can
take
further
steps
to
determine
the
media
type
:end
:start
This
class
is
used
to
determine
the
requested
MediaType
media
types
of
a
request
by
delegating
to
a
list
of
ContentNegotiationStrategy
instances
The
strategies
must
be
provided
at
instantiation
or
alternatively
if
using
the
default
constructor,
an
instance
of
HeaderContentNegotiationStrategy
will
be
configured
by
default
<p>This
class
may
also
be
used
to
look
up
file
extensions
associated
with
a
MediaType
This
is
done
by
consulting
the
list
of
configured
MediaTypeFileExtensionResolver
instances
Note
that
some
ContentNegotiationStrategy
implementations
also
implement
MediaTypeFileExtensionResolver
and
the
class
constructor
accepting
the
former
will
also
detect
if
they
implement
the
latter
If
you
need
to
register
additional
resolvers,
you
can
use
the
method
#addFileExtensionResolvers(MediaTypeFileExtensionResolver)
:end
:start
Create
an
instance
with
the
given
ContentNegotiationStrategy
instances
<p>Each
instance
is
checked
to
see
if
it
is
also
an
implementation
of
MediaTypeFileExtensionResolver,
and
if
so
it
is
registered
as
such
:end
:start
Create
an
instance
with
the
given
ContentNegotiationStrategy
instances
<p>Each
instance
is
checked
to
see
if
it
is
also
an
implementation
of
MediaTypeFileExtensionResolver,
and
if
so
it
is
registered
as
such
:end
:start
Create
a
default
instance
with
a
HeaderContentNegotiationStrategy
:end
:start
Add
MediaTypeFileExtensionResolver
instances
<p>Note
that
some
ContentNegotiationStrategy
implementations
also
implement
MediaTypeFileExtensionResolver
and
the
class
constructor
accepting
the
former
will
also
detect
implementations
of
the
latter
Therefore
you
only
need
to
use
this
method
to
register
additional
instances
:end
:start
Delegate
to
all
configured
ContentNegotiationStrategy
instances
until
one
returns
a
non-empty
list
:end
:start
Delegate
to
all
configured
MediaTypeFileExtensionResolver
instances
and
aggregate
the
list
of
all
file
extensions
found
:end
:start
Delegate
to
all
configured
MediaTypeFileExtensionResolver
instances
and
aggregate
the
list
of
all
known
file
extensions
:end
:start
A
factory
providing
convenient
access
to
a
ContentNegotiationManager
configured
with
one
or
more
ContentNegotiationStrategy
instances
<p>By
default
strategies
for
checking
the
extension
of
the
request
path
and
the
Accept
header
are
registered
The
path
extension
check
will
perform
lookups
through
the
ServletContext
and
the
Java
Activation
Framework
(if
present)
unless
#setMediaTypes
media
types
are
configured
:end
:start
Indicate
whether
the
extension
of
the
request
path
should
be
used
to
determine
the
requested
media
type
with
the
<em>highest
priority</em>
<p>By
default
this
value
is
set
to
true
in
which
case
a
request
for
/hotelspdf
will
be
interpreted
as
a
request
for
"application/pdf"
regardless
of
the
Accept
header
:end
:start
Add
mappings
from
file
extensions
to
media
types
represented
as
strings
<p>When
this
mapping
is
not
set
or
when
an
extension
is
not
found,
the
Java
Action
Framework,
if
available,
may
be
used
if
enabled
via
#setFavorPathExtension(boolean)
:end
:start
Add
a
mapping
from
a
file
extension
to
a
media
type
<p>If
no
mapping
is
added
or
when
an
extension
is
not
found,
the
Java
Action
Framework,
if
available,
may
be
used
if
enabled
via
#setFavorPathExtension(boolean)
:end
:start
Add
mappings
from
file
extensions
to
media
types
<p>If
no
mappings
are
added
or
when
an
extension
is
not
found,
the
Java
Action
Framework,
if
available,
may
be
used
if
enabled
via
#setFavorPathExtension(boolean)
:end
:start
Indicate
whether
to
use
the
Java
Activation
Framework
as
a
fallback
option
to
map
from
file
extensions
to
media
types
This
is
used
only
when
#setFavorPathExtension(boolean)
is
set
to
true
<p>The
default
value
is
true
:end
:start
Indicate
whether
a
request
parameter
should
be
used
to
determine
the
requested
media
type
with
the
<em>2nd
highest
priority</em>,
ie
after
path
extensions
but
before
the
Accept
header
<p>The
default
value
is
false
If
set
to
to
true,
a
request
for
/hotels?format=pdf
will
be
interpreted
as
a
request
for
"application/pdf"
regardless
of
the
Accept
header
<p>To
use
this
option
effectively
you
must
also
configure
the
MediaType
type
mappings
via
#setMediaTypes(Properties)
:end
:start
Set
the
parameter
name
that
can
be
used
to
determine
the
requested
media
type
if
the
#setFavorParameter
property
is
true
<p>The
default
parameter
name
is
"format"
:end
:start
Indicate
whether
the
HTTP
Accept
header
should
be
ignored
altogether
If
set
the
Accept
header
is
checked
at
the
<em>3rd
highest
priority</em>,
ie
after
the
request
path
extension
and
possibly
a
request
parameter
if
configured
<p>By
default
this
value
is
set
to
false
:end
:start
Set
the
default
content
type
<p>This
content
type
will
be
used
when
neither
the
request
path
extension,
nor
a
request
parameter,
nor
the
Accept
header
could
help
determine
the
requested
content
type
:end
:start
A
strategy
for
resolving
the
requested
media
types
in
a
request
:end
:start
Resolve
the
given
request
to
a
list
of
media
types
The
returned
list
is
ordered
by
specificity
first
and
by
quality
parameter
second
:end
:start
A
ContentNegotiationStrategy
that
returns
a
fixed
content
type
:end
:start
Create
an
instance
that
always
returns
the
given
content
type
:end
:start
A
ContentNegotiationStrategy
that
parses
the
'Accept'
header
of
the
request
:end
:start
:end
:start
An
implementation
of
MediaTypeFileExtensionResolver
that
maintains
a
lookup
from
extension
to
MediaType
:end
:start
Create
an
instance
with
the
given
mappings
between
extensions
and
media
types
:end
:start
Find
the
file
extensions
mapped
to
the
given
MediaType
:end
:start
Return
the
MediaType
mapped
to
the
given
extension
:end
:start
Map
a
MediaType
to
an
extension
or
ignore
if
the
extensions
is
already
mapped
:end
:start
A
strategy
for
resolving
a
MediaType
to
one
or
more
path
extensions
For
example
"application/json"
to
"json"
:end
:start
Resolve
the
given
media
type
to
a
list
of
path
extensions
:end
:start
Return
all
known
file
extensions
:end
:start
A
ContentNegotiationStrategy
that
uses
a
request
parameter
to
determine
what
media
types
are
requested
The
default
parameter
name
is
format
Its
value
is
used
to
look
up
the
media
type
in
the
map
given
to
the
constructor
:end
:start
Create
an
instance
with
the
given
extension-to-MediaType
lookup
:end
:start
Set
the
parameter
name
that
can
be
used
to
determine
the
requested
media
type
<p>The
default
parameter
name
is
format
:end
:start
A
ContentNegotiationStrategy
that
uses
the
path
extension
of
the
URL
to
determine
what
media
types
are
requested
The
path
extension
is
first
looked
up
in
the
map
of
media
types
provided
to
the
constructor
If
that
fails,
the
Java
Activation
framework
is
used
as
a
fallback
mechanism
<p>
The
presence
of
the
Java
Activation
framework
is
detected
and
enabled
automatically
but
the
#setUseJaf(boolean)
property
may
be
used
to
override
that
setting
:end
:start
Create
an
instance
with
the
given
extension-to-MediaType
lookup
:end
:start
Create
an
instance
without
any
mappings
to
start
with
Mappings
may
be
added
later
on
if
any
extensions
are
resolved
through
the
Java
Activation
framework
:end
:start
Indicate
whether
to
use
the
Java
Activation
Framework
to
map
from
file
extensions
to
media
types
<p>Default
is
true,
ie
the
Java
Activation
Framework
is
used
(if
available)
:end
:start
An
extension
of
PathExtensionContentNegotiationStrategy
that
uses
ServletContext#getMimeType(String)
as
a
fallback
mechanism
when
matching
a
path
extension
to
a
media
type
:end
:start
Create
an
instance
with
the
given
extension-to-MediaType
lookup
:end
:start
Create
an
instance
without
any
mappings
to
start
with
Mappings
may
be
added
later
on
if
any
extensions
are
resolved
through
ServletContext#getMimeType(String)
or
through
the
Java
Activation
framework
:end
:start
Look
up
the
given
extension
via
ServletContext#getMimeType(String)
and
if
that
doesn't
help,
delegate
to
the
parent
implementation
:end
:start
Indicates
the
annotated
class
assists
a
"Controller"
<p>Serves
as
a
specialization
of
Component
@Component,
allowing
for
implementation
classes
to
be
autodetected
through
classpath
scanning
<p>It
is
typically
used
to
define
ExceptionHandler
@ExceptionHandler,
InitBinder
@InitBinder,
and
ModelAttribute
@ModelAttribute
methods
that
apply
to
all
RequestMapping
@RequestMapping
methods
<p>One
of
#annotations(),
#basePackageClasses(),
#basePackages()
or
its
alias
#value()
may
be
specified
to
define
specific
subsets
of
Controllers
to
assist
When
multiple
selectors
are
applied,
OR
logic
is
applied
-
meaning
selected
Controllers
should
match
at
least
one
selector
<p>The
default
behavior
(ie
if
used
without
any
selector),
the
@ControllerAdvice
annotated
class
will
assist
all
known
Controllers
<p>Note
that
those
checks
are
done
at
runtime,
so
adding
many
attributes
and
using
multiple
strategies
may
have
negative
impacts
(complexity,
performance)
:end
:start
Alias
for
the
#basePackages()
attribute
Allows
for
more
concise
annotation
declarations
eg:
@ControllerAdvice("orgmypkg")
is
equivalent
to
@ControllerAdvice(basePackages="orgmypkg")
:end
:start
Array
of
base
packages
Controllers
that
belong
to
those
base
packages
will
be
included,
eg:
@ControllerAdvice(basePackages="orgmypkg")
or
@ControllerAdvice(basePackages={"orgmypkg","orgmyotherpkg")
<p>{@link
#value()
is
an
alias
for
this
attribute
<p>Also
consider
using
#basePackageClasses()
as
a
type-safe
alternative
to
String-based
package
names
:end
:start
Type-safe
alternative
to
#value()
for
specifying
the
packages
to
select
Controllers
to
be
assisted
by
the
@ControllerAdvice
annotated
class
<p>Consider
creating
a
special
no-op
marker
class
or
interface
in
each
package
that
serves
no
purpose
other
than
being
referenced
by
this
attribute
:end
:start
Array
of
classes
Controllers
that
are
assignable
to
at
least
one
of
the
given
types
will
be
assisted
by
the
@ControllerAdvice
annotated
class
:end
:start
Array
of
annotations
Controllers
that
are
annotated
with
this/one
of
those
annotation(s)
will
be
assisted
by
the
@ControllerAdvice
annotated
class
<p>Consider
creating
a
special
annotation
or
use
a
predefined
one,
like
RestController
@RestController
:end
:start
Annotation
which
indicates
that
a
method
parameter
should
be
bound
to
an
HTTP
cookie
Supported
for
annotated
handler
methods
in
Servlet
and
Portlet
environments
<p>The
method
parameter
may
be
declared
as
type
javaxservlethttpCookie
or
as
cookie
value
type
(String,
int,
etc)
:end
:start
The
name
of
the
cookie
to
bind
to
:end
:start
Whether
the
header
is
required
<p>Default
is
true,
leading
to
an
exception
being
thrown
in
case
the
header
is
missing
in
the
request
Switch
this
to
false
if
you
prefer
a
null
in
case
of
the
missing
header
<p>Alternatively,
provide
a
#defaultValue,
which
implicitly
sets
this
flag
to
false
:end
:start
The
default
value
to
use
as
a
fallback
Supplying
a
default
value
implicitly
sets
#required
to
false
:end
:start
Annotation
for
handling
exceptions
in
specific
handler
classes
and/or
handler
methods
Provides
consistent
style
between
Servlet
and
Portlet
environments,
with
the
semantics
adapting
to
the
concrete
environment
<p>Handler
methods
which
are
annotated
with
this
annotation
are
allowed
to
have
very
flexible
signatures
They
may
have
arguments
of
the
following
types,
in
arbitrary
order:
<ul>
<li>An
exception
argument:
declared
as
a
general
Exception
or
as
a
more
specific
exception
This
also
serves
as
a
mapping
hint
if
the
annotation
itself
does
not
narrow
the
exception
types
through
its
#value()
<li>Request
and/or
response
objects
(Servlet
API
or
Portlet
API)
You
may
choose
any
specific
request/response
type,
eg
javaxservletServletRequest
/
javaxservlethttpHttpServletRequest
or
javaxportletPortletRequest
/
javaxportletActionRequest
/
javaxportletRenderRequest
Note
that
in
the
Portlet
case,
an
explicitly
declared
action/render
argument
is
also
used
for
mapping
specific
request
types
onto
a
handler
method
(in
case
of
no
other
information
given
that
differentiates
between
action
and
render
requests)
<li>Session
object
(Servlet
API
or
Portlet
API):
either
javaxservlethttpHttpSession
or
javaxportletPortletSession
An
argument
of
this
type
will
enforce
the
presence
of
a
corresponding
session
As
a
consequence,
such
an
argument
will
never
be
null
<i>Note
that
session
access
may
not
be
thread-safe,
in
particular
in
a
Servlet
environment:
Consider
switching
the
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerAdapter#setSynchronizeOnSession
"synchronizeOnSession"
flag
to
"true"
if
multiple
requests
are
allowed
to
access
a
session
concurrently</i>
<li>{@link
orgspringframeworkwebcontextrequestWebRequest
or
orgspringframeworkwebcontextrequestNativeWebRequest
Allows
for
generic
request
parameter
access
as
well
as
request/session
attribute
access,
without
ties
to
the
native
Servlet/Portlet
API
<li>{@link
javautilLocale
for
the
current
request
locale
(determined
by
the
most
specific
locale
resolver
available,
ie
the
configured
orgspringframeworkwebservletLocaleResolver
in
a
Servlet
environment
and
the
portal
locale
in
a
Portlet
environment)
<li>{@link
javaioInputStream
/
javaioReader
for
access
to
the
request's
content
This
will
be
the
raw
InputStream/Reader
as
exposed
by
the
Servlet/Portlet
API
<li>{@link
javaioOutputStream
/
javaioWriter
for
generating
the
response's
content
This
will
be
the
raw
OutputStream/Writer
as
exposed
by
the
Servlet/Portlet
API
</ul>
<p>The
following
return
types
are
supported
for
handler
methods:
<ul>
<li>A
ModelAndView
object
(Servlet
MVC
or
Portlet
MVC)
<li>A
orgspringframeworkuiModel
Model
object,
with
the
view
name
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
<li>A
javautilMap
object
for
exposing
a
model,
with
the
view
name
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
<li>A
orgspringframeworkwebservletView
object
<li>A
String
value
which
is
interpreted
as
view
name
<li>{@link
ResponseBody
@ResponseBody
annotated
methods
(Servlet-only)
to
set
the
response
content
The
return
value
will
be
converted
to
the
response
stream
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
<li>An
orgspringframeworkhttpHttpEntity
HttpEntity&lt;?&gt;
or
orgspringframeworkhttpResponseEntity
ResponseEntity&lt;?&gt;
object
(Servlet-only)
to
set
response
headers
and
content
The
ResponseEntity
body
will
be
converted
and
written
to
the
response
stream
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
<li>{@code
void
if
the
method
handles
the
response
itself
(by
writing
the
response
content
directly,
declaring
an
argument
of
type
javaxservletServletResponse
/
javaxservlethttpHttpServletResponse
/
javaxportletRenderResponse
for
that
purpose)
or
if
the
view
name
is
supposed
to
be
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
(not
declaring
a
response
argument
in
the
handler
method
signature;
only
applicable
in
a
Servlet
environment)
</ul>
<p>In
Servlet
environments,
you
can
combine
the
ExceptionHandler
annotation
with
ResponseStatus
@ResponseStatus,
to
define
the
response
status
for
the
HTTP
response
<p><b>Note:</b>
In
Portlet
environments,
ExceptionHandler
annotated
methods
will
only
be
called
during
the
render
and
resource
phases
-
just
like
orgspringframeworkwebportletHandlerExceptionResolver
beans
would
Exceptions
carried
over
from
the
action
and
event
phases
will
be
invoked
during
the
render
phase
as
well,
with
exception
handler
methods
having
to
be
present
on
the
controller
class
that
defines
the
applicable
<i>render</i>
method
:end
:start
Exceptions
handled
by
the
annotated
method
If
empty,
will
default
to
any
exceptions
listed
in
the
method
argument
list
:end
:start
Annotation
that
identifies
methods
which
initialize
the
orgspringframeworkwebbindWebDataBinder
which
will
be
used
for
populating
command
and
form
object
arguments
of
annotated
handler
methods
<p>Such
init-binder
methods
support
all
arguments
that
RequestMapping
supports,
except
for
command/form
objects
and
corresponding
validation
result
objects
Init-binder
methods
must
not
have
a
return
value;
they
are
usually
declared
as
void
<p>Typical
arguments
are
orgspringframeworkwebbindWebDataBinder
in
combination
with
orgspringframeworkwebcontextrequestWebRequest
or
javautilLocale,
allowing
to
register
context-specific
editors
:end
:start
The
names
of
command/form
attributes
and/or
request
parameters
that
this
init-binder
method
is
supposed
to
apply
to
<p>Default
is
to
apply
to
all
command/form
attributes
and
all
request
parameters
processed
by
the
annotated
handler
class
Specifying
model
attribute
names
or
request
parameter
names
here
restricts
the
init-binder
method
to
those
specific
attributes/parameters,
with
different
init-binder
methods
typically
applying
to
different
groups
of
attributes
or
parameters
:end
:start
Meta
annotation
that
indicates
a
web
mapping
annotation
:end
:start
Annotation
which
indicates
that
a
method
parameter
should
be
bound
to
a
name-value
pair
within
a
path
segment
Supported
for
RequestMapping
annotated
handler
methods
in
Servlet
environments
:end
:start
The
name
of
the
matrix
variable
:end
:start
The
name
of
the
URI
path
variable
where
the
matrix
variable
is
located,
if
necessary
for
disambiguation
(eg
a
matrix
variable
with
the
same
name
present
in
more
than
one
path
segment)
:end
:start
Whether
the
matrix
variable
is
required
<p>Default
is
true,
leading
to
an
exception
thrown
in
case
of
the
variable
missing
in
the
request
Switch
this
to
false
if
you
prefer
a
null
in
case
of
the
variable
missing
<p>Alternatively,
provide
a
#defaultValue()
defaultValue,
which
implicitly
sets
this
flag
to
false
:end
:start
The
default
value
to
use
as
a
fallback
Supplying
a
default
value
implicitly
sets
#required()
to
false
:end
:start
Annotation
that
binds
a
method
parameter
or
method
return
value
to
a
named
model
attribute,
exposed
to
a
web
view
Supported
for
controller
classes
with
RequestMapping
@RequestMapping
methods
<p>Can
be
used
to
expose
command
objects
to
a
web
view,
using
specific
attribute
names,
through
annotating
corresponding
parameters
of
an
RequestMapping
@RequestMapping
method
<p>Can
also
be
used
to
expose
reference
data
to
a
web
view
through
annotating
accessor
methods
in
a
controller
class
with
RequestMapping
@RequestMapping
methods
Such
accessor
methods
are
allowed
to
have
any
arguments
that
RequestMapping
@RequestMapping
methods
support,
returning
the
model
attribute
value
to
expose
<p>Note
however
that
reference
data
and
all
other
model
content
is
not
available
to
web
views
when
request
processing
results
in
an
Exception
since
the
exception
could
be
raised
at
any
time
making
the
content
of
the
model
unreliable
For
this
reason
ExceptionHandler
@ExceptionHandler
methods
do
not
provide
access
to
a
Model
argument
:end
:start
The
name
of
the
model
attribute
to
bind
to
<p>The
default
model
attribute
name
is
inferred
from
the
declared
attribute
type
(ie
the
method
parameter
type
or
method
return
type),
based
on
the
non-qualified
class
name:
eg
"orderAddress"
for
class
"mypackageOrderAddress",
or
"orderAddressList"
for
"List&lt;mypackageOrderAddress&gt;"
:end
:start
Annotation
which
indicates
that
a
method
parameter
should
be
bound
to
a
URI
template
variable
Supported
for
RequestMapping
annotated
handler
methods
in
Servlet
environments
:end
:start
The
URI
template
variable
to
bind
to
:end
:start
Annotation
indicating
a
method
parameter
should
be
bound
to
the
body
of
the
web
request
The
body
of
the
request
is
passed
through
an
HttpMessageConverter
to
resolve
the
method
argument
depending
on
the
content
type
of
the
request
Optionally,
automatic
validation
can
be
applied
by
annotating
the
argument
with
@Valid
<p>Supported
for
annotated
handler
methods
in
Servlet
environments
:end
:start
Whether
body
content
is
required
<p>Default
is
true,
leading
to
an
exception
thrown
in
case
there
is
no
body
content
Switch
this
to
false
if
you
prefer
null
to
be
passed
when
the
body
content
is
null
:end
:start
Annotation
which
indicates
that
a
method
parameter
should
be
bound
to
a
web
request
header
Supported
for
annotated
handler
methods
in
Servlet
and
Portlet
environments
:end
:start
The
name
of
the
request
header
to
bind
to
:end
:start
Whether
the
header
is
required
<p>Default
is
true,
leading
to
an
exception
thrown
in
case
of
the
header
missing
in
the
request
Switch
this
to
false
if
you
prefer
a
null
in
case
of
the
header
missing
<p>Alternatively,
provide
a
#defaultValue,
which
implicitly
sets
this
flag
to
false
:end
:start
The
default
value
to
use
as
a
fallback
Supplying
a
default
value
implicitly
sets
#required
to
false
:end
:start
Annotation
for
mapping
web
requests
onto
specific
handler
classes
and/or
handler
methods
Provides
a
consistent
style
between
Servlet
and
Portlet
environments,
with
the
semantics
adapting
to
the
concrete
environment
<p><b>NOTE:</b>
The
set
of
features
supported
for
Servlets
is
a
superset
of
the
set
of
features
supported
for
Portlets
The
places
where
this
applies
are
marked
with
the
label
"Servlet-only"
in
this
source
file
For
Servlet
environments
there
are
some
further
distinctions
depending
on
whether
an
application
is
configured
with
"@MVC
30"
or
"@MVC
31"
support
classes
The
places
where
this
applies
are
marked
with
"@MVC
31-only"
in
this
source
file
For
more
details
see
the
note
on
the
new
support
classes
added
in
Spring
MVC
31
further
below
<p>Handler
methods
which
are
annotated
with
this
annotation
are
allowed
to
have
very
flexible
signatures
They
may
have
arguments
of
the
following
types,
in
arbitrary
order
(except
for
validation
results,
which
need
to
follow
right
after
the
corresponding
command
object,
if
desired):
<ul>
<li>Request
and/or
response
objects
(Servlet
API
or
Portlet
API)
You
may
choose
any
specific
request/response
type,
eg
javaxservletServletRequest
/
javaxservlethttpHttpServletRequest
or
javaxportletPortletRequest
/
javaxportletActionRequest
/
javaxportletRenderRequest
Note
that
in
the
Portlet
case,
an
explicitly
declared
action/render
argument
is
also
used
for
mapping
specific
request
types
onto
a
handler
method
(in
case
of
no
other
information
given
that
differentiates
between
action
and
render
requests)
<li>Session
object
(Servlet
API
or
Portlet
API):
either
javaxservlethttpHttpSession
or
javaxportletPortletSession
An
argument
of
this
type
will
enforce
the
presence
of
a
corresponding
session
As
a
consequence,
such
an
argument
will
never
be
null
<i>Note
that
session
access
may
not
be
thread-safe,
in
particular
in
a
Servlet
environment:
Consider
switching
the
orgspringframeworkwebservletmvcmethodannotationRequestMappingHandlerAdapter#setSynchronizeOnSession
"synchronizeOnSession"
flag
to
"true"
if
multiple
requests
are
allowed
to
access
a
session
concurrently</i>
<li>{@link
orgspringframeworkwebcontextrequestWebRequest
or
orgspringframeworkwebcontextrequestNativeWebRequest
Allows
for
generic
request
parameter
access
as
well
as
request/session
attribute
access,
without
ties
to
the
native
Servlet/Portlet
API
<li>{@link
javautilLocale
for
the
current
request
locale
(determined
by
the
most
specific
locale
resolver
available,
ie
the
configured
orgspringframeworkwebservletLocaleResolver
in
a
Servlet
environment
and
the
portal
locale
in
a
Portlet
environment)
<li>{@link
javaioInputStream
/
javaioReader
for
access
to
the
request's
content
This
will
be
the
raw
InputStream/Reader
as
exposed
by
the
Servlet/Portlet
API
<li>{@link
javaioOutputStream
/
javaioWriter
for
generating
the
response's
content
This
will
be
the
raw
OutputStream/Writer
as
exposed
by
the
Servlet/Portlet
API
<li>{@link
orgspringframeworkhttpHttpMethod
for
the
HTTP
request
method</li>
<li>{@link
PathVariable
@PathVariable
annotated
parameters
(Servlet-only)
for
access
to
URI
template
values
(ie
/hotels/{hotel)
Variable
values
will
be
converted
to
the
declared
method
argument
type
By
default,
the
URI
template
will
match
against
the
regular
expression
[^\]*
(ie
any
character
other
than
period),
but
this
can
be
changed
by
specifying
another
regular
expression,
like
so:
/hotels/{hotel:\d+
Additionally,
@PathVariable
can
be
used
on
a
javautilMap
Map&lt;String,
String&gt;
to
gain
access
to
all
URI
template
variables
<li>{@link
MatrixVariable
@MatrixVariable
annotated
parameters
(Servlet-only)
for
access
to
name-value
pairs
located
in
URI
path
segments
Matrix
variables
must
be
represented
with
a
URI
template
variable
For
example
/hotels/{hotel
where
the
incoming
URL
may
be
"/hotels/42;q=1"
Additionally,
@MatrixVariable
can
be
used
on
a
javautilMap
Map&lt;String,
String&gt;
to
gain
access
to
all
matrix
variables
in
the
URL
or
to
those
in
a
specific
path
variable
<li>{@link
RequestParam
@RequestParam
annotated
parameters
for
access
to
specific
Servlet/Portlet
request
parameters
Parameter
values
will
be
converted
to
the
declared
method
argument
type
Additionally,
@RequestParam
can
be
used
on
a
javautilMap
Map&lt;String,
String&gt;
or
orgspringframeworkutilMultiValueMap
MultiValueMap&lt;String,
String&gt;
method
parameter
to
gain
access
to
all
request
parameters
<li>{@link
RequestHeader
@RequestHeader
annotated
parameters
for
access
to
specific
Servlet/Portlet
request
HTTP
headers
Parameter
values
will
be
converted
to
the
declared
method
argument
type
Additionally,
@RequestHeader
can
be
used
on
a
javautilMap
Map&lt;String,
String&gt;,
orgspringframeworkutilMultiValueMap
MultiValueMap&lt;String,
String&gt;,
or
orgspringframeworkhttpHttpHeaders
HttpHeaders
method
parameter
to
gain
access
to
all
request
headers
<li>{@link
RequestBody
@RequestBody
annotated
parameters
(Servlet-only)
for
access
to
the
Servlet
request
HTTP
contents
The
request
stream
will
be
converted
to
the
declared
method
argument
type
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
Such
parameters
may
optionally
be
annotated
with
@Valid
and
also
support
access
to
validation
results
through
an
orgspringframeworkvalidationErrors
argument
Instead
a
orgspringframeworkwebbindMethodArgumentNotValidException
exception
is
raised
<li>{@link
RequestPart
@RequestPart
annotated
parameters
(Servlet-only,
@MVC
31-only)
for
access
to
the
content
of
a
part
of
"multipart/form-data"
request
The
request
part
stream
will
be
converted
to
the
declared
method
argument
type
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
Such
parameters
may
optionally
be
annotated
with
@Valid
and
support
access
to
validation
results
through
a
orgspringframeworkvalidationErrors
argument
Instead
a
orgspringframeworkwebbindMethodArgumentNotValidException
exception
is
raised
<li>{@link
orgspringframeworkhttpHttpEntity
HttpEntity&lt;?&gt;
parameters
(Servlet-only)
for
access
to
the
Servlet
request
HTTP
headers
and
contents
The
request
stream
will
be
converted
to
the
entity
body
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
<li>{@link
javautilMap
/
orgspringframeworkuiModel
/
orgspringframeworkuiModelMap
for
enriching
the
implicit
model
that
will
be
exposed
to
the
web
view
<li>{@link
orgspringframeworkwebservletmvcsupportRedirectAttributes
(Servlet-only,
@MVC
31-only)
to
specify
the
exact
set
of
attributes
to
use
in
case
of
a
redirect
and
also
to
add
flash
attributes
(attributes
stored
temporarily
on
the
server-side
to
make
them
available
to
the
request
after
the
redirect)
RedirectAttributes
is
used
instead
of
the
implicit
model
if
the
method
returns
a
"redirect:"
prefixed
view
name
or
RedirectView
<li>Command/form
objects
to
bind
parameters
to:
as
bean
properties
or
fields,
with
customizable
type
conversion,
depending
on
InitBinder
methods
and/or
the
HandlerAdapter
configuration
-
see
the
"webBindingInitializer"
property
on
RequestMappingHandlerMethodAdapter
Such
command
objects
along
with
their
validation
results
will
be
exposed
as
model
attributes,
by
default
using
the
non-qualified
command
class
name
in
property
notation
(eg
"orderAddress"
for
type
"mypackageOrderAddress")
Specify
a
parameter-level
ModelAttribute
@ModelAttribute
annotation
for
declaring
a
specific
model
attribute
name
<li>{@link
orgspringframeworkvalidationErrors
/
orgspringframeworkvalidationBindingResult
validation
results
for
a
preceding
command/form
object
(the
immediate
preceding
argument)
<li>{@link
orgspringframeworkwebbindsupportSessionStatus
status
handle
for
marking
form
processing
as
complete
(triggering
the
cleanup
of
session
attributes
that
have
been
indicated
by
the
SessionAttributes
@SessionAttributes
annotation
at
the
handler
type
level)
<li>{@link
orgspringframeworkwebutilUriComponentsBuilder
(Servlet-only,
@MVC
31-only)
for
preparing
a
URL
relative
to
the
current
request's
host,
port,
scheme,
context
path,
and
the
literal
part
of
the
servlet
mapping
</ul>
<p>The
following
return
types
are
supported
for
handler
methods:
<ul>
<li>A
ModelAndView
object
(Servlet
MVC
or
Portlet
MVC),
with
the
model
implicitly
enriched
with
command
objects
and
the
results
of
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
<li>A
orgspringframeworkuiModel
Model
object,
with
the
view
name
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
and
the
model
implicitly
enriched
with
command
objects
and
the
results
of
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
<li>A
javautilMap
object
for
exposing
a
model,
with
the
view
name
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
and
the
model
implicitly
enriched
with
command
objects
and
the
results
of
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
<li>A
orgspringframeworkwebservletView
object,
with
the
model
implicitly
determined
through
command
objects
and
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
The
handler
method
may
also
programmatically
enrich
the
model
by
declaring
a
orgspringframeworkuiModel
argument
(see
above)
<li>A
String
value
which
is
interpreted
as
view
name,
with
the
model
implicitly
determined
through
command
objects
and
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
The
handler
method
may
also
programmatically
enrich
the
model
by
declaring
a
orgspringframeworkuiModelMap
argument
(see
above)
<li>{@link
ResponseBody
@ResponseBody
annotated
methods
(Servlet-only)
for
access
to
the
Servlet
response
HTTP
contents
The
return
value
will
be
converted
to
the
response
stream
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
<li>An
orgspringframeworkhttpHttpEntity
HttpEntity&lt;?&gt;
or
orgspringframeworkhttpResponseEntity
ResponseEntity&lt;?&gt;
object
(Servlet-only)
to
access
to
the
Servlet
response
HTTP
headers
and
contents
The
entity
body
will
be
converted
to
the
response
stream
using
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
<li>An
orgspringframeworkhttpHttpHeaders
HttpHeaders
object
to
return
a
response
with
no
body</li>
<li>A
Callable
which
is
used
by
Spring
MVC
to
obtain
the
return
value
asynchronously
in
a
separate
thread
transparently
managed
by
Spring
MVC
on
behalf
of
the
application
<li>A
orgspringframeworkwebcontextrequestasyncDeferredResult
which
the
application
uses
to
produce
a
return
value
in
a
separate
thread
of
its
own
choosing,
as
an
alternative
to
returning
a
Callable
<li>{@code
void
if
the
method
handles
the
response
itself
(by
writing
the
response
content
directly,
declaring
an
argument
of
type
javaxservletServletResponse
/
javaxservlethttpHttpServletResponse
/
javaxportletRenderResponse
for
that
purpose)
or
if
the
view
name
is
supposed
to
be
implicitly
determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator
(not
declaring
a
response
argument
in
the
handler
method
signature;
only
applicable
in
a
Servlet
environment)
<li>Any
other
return
type
will
be
considered
as
single
model
attribute
to
be
exposed
to
the
view,
using
the
attribute
name
specified
through
ModelAttribute
@ModelAttribute
at
the
method
level
(or
the
default
attribute
name
based
on
the
return
type's
class
name
otherwise)
The
model
will
be
implicitly
enriched
with
command
objects
and
the
results
of
ModelAttribute
@ModelAttribute
annotated
reference
data
accessor
methods
</ul>
<p><b>NOTE:</b>
@RequestMapping
will
only
be
processed
if
an
an
appropriate
HandlerMapping-{@code
HandlerAdapter
pair
is
configured
This
is
the
case
by
default
in
both
the
DispatcherServlet
and
the
DispatcherPortlet
However,
if
you
are
defining
custom
HandlerMappings
or
HandlerAdapters,
then
you
need
to
add
DefaultAnnotationHandlerMapping
and
AnnotationMethodHandlerAdapter
to
your
configuration</code>
<p><b>NOTE:</b>
Spring
31
introduced
a
new
set
of
support
classes
for
@RequestMapping
methods
in
Servlet
environments
called
RequestMappingHandlerMapping
and
RequestMappingHandlerAdapter
They
are
recommended
for
use
and
even
required
to
take
advantage
of
new
features
in
Spring
MVC
31
(search
"@MVC
31-only"
in
this
source
file)
and
going
forward
The
new
support
classes
are
enabled
by
default
from
the
MVC
namespace
and
with
use
of
the
MVC
Java
config
({@code
@EnableWebMvc)
but
must
be
configured
explicitly
if
using
neither
<p><b>NOTE:</b>
When
using
controller
interfaces
(eg
for
AOP
proxying),
make
sure
to
consistently
put
<i>all</i>
your
mapping
annotations
-
such
as
@RequestMapping
and
@SessionAttributes
-
on
the
controller
<i>interface</i>
rather
than
on
the
implementation
class
:end
:start
The
primary
mapping
expressed
by
this
annotation
<p>In
a
Servlet
environment:
the
path
mapping
URIs
(eg
"/myPathdo")
Ant-style
path
patterns
are
also
supported
(eg
"/myPath/*do")
At
the
method
level,
relative
paths
(eg
"editdo")
are
supported
within
the
primary
mapping
expressed
at
the
type
level
Path
mapping
URIs
may
contain
placeholders
(eg
"/${connect")
<p>In
a
Portlet
environment:
the
mapped
portlet
modes
(ie
"EDIT",
"VIEW",
"HELP"
or
any
custom
modes)
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
inherit
this
primary
mapping,
narrowing
it
for
a
specific
handler
method
:end
:start
The
HTTP
request
methods
to
map
to,
narrowing
the
primary
mapping:
GET,
POST,
HEAD,
OPTIONS,
PUT,
PATCH,
DELETE,
TRACE
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
inherit
this
HTTP
method
restriction
(ie
the
type-level
restriction
gets
checked
before
the
handler
method
is
even
resolved)
<p>Supported
for
Servlet
environments
as
well
as
Portlet
20
environments
:end
:start
The
parameters
of
the
mapped
request,
narrowing
the
primary
mapping
<p>Same
format
for
any
environment:
a
sequence
of
"myParam=myValue"
style
expressions,
with
a
request
only
mapped
if
each
such
parameter
is
found
to
have
the
given
value
Expressions
can
be
negated
by
using
the
"!="
operator,
as
in
"myParam!=myValue"
"myParam"
style
expressions
are
also
supported,
with
such
parameters
having
to
be
present
in
the
request
(allowed
to
have
any
value)
Finally,
"!myParam"
style
expressions
indicate
that
the
specified
parameter
is
<i>not</i>
supposed
to
be
present
in
the
request
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
inherit
this
parameter
restriction
(ie
the
type-level
restriction
gets
checked
before
the
handler
method
is
even
resolved)
<p>In
a
Servlet
environment,
parameter
mappings
are
considered
as
restrictions
that
are
enforced
at
the
type
level
The
primary
path
mapping
(ie
the
specified
URI
value)
still
has
to
uniquely
identify
the
target
handler,
with
parameter
mappings
simply
expressing
preconditions
for
invoking
the
handler
<p>In
a
Portlet
environment,
parameters
are
taken
into
account
as
mapping
differentiators,
ie
the
primary
portlet
mode
mapping
plus
the
parameter
conditions
uniquely
identify
the
target
handler
Different
handlers
may
be
mapped
onto
the
same
portlet
mode,
as
long
as
their
parameter
mappings
differ
:end
:start
The
headers
of
the
mapped
request,
narrowing
the
primary
mapping
<p>Same
format
for
any
environment:
a
sequence
of
"My-Header=myValue"
style
expressions,
with
a
request
only
mapped
if
each
such
header
is
found
to
have
the
given
value
Expressions
can
be
negated
by
using
the
"!="
operator,
as
in
"My-Header!=myValue"
"My-Header"
style
expressions
are
also
supported,
with
such
headers
having
to
be
present
in
the
request
(allowed
to
have
any
value)
Finally,
"!My-Header"
style
expressions
indicate
that
the
specified
header
is
<i>not</i>
supposed
to
be
present
in
the
request
<p>Also
supports
media
type
wildcards
(*),
for
headers
such
as
Accept
and
Content-Type
For
instance,
<pre
class="code">
&#064;RequestMapping(value
=
"/something",
headers
=
"content-type=text/*")
</pre>
will
match
requests
with
a
Content-Type
of
"text/html",
"text/plain",
etc
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
inherit
this
header
restriction
(ie
the
type-level
restriction
gets
checked
before
the
handler
method
is
even
resolved)
<p>Maps
against
HttpServletRequest
headers
in
a
Servlet
environment,
and
against
PortletRequest
properties
in
a
Portlet
20
environment
:end
:start
The
consumable
media
types
of
the
mapped
request,
narrowing
the
primary
mapping
<p>The
format
is
a
single
media
type
or
a
sequence
of
media
types,
with
a
request
only
mapped
if
the
Content-Type
matches
one
of
these
media
types
Examples:
<pre
class="code">
consumes
=
"text/plain"
consumes
=
"application/*"
</pre>
Expressions
can
be
negated
by
using
the
"!"
operator,
as
in
"!text/plain",
which
matches
all
requests
with
a
Content-Type
other
than
"text/plain"
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
override
this
consumes
restriction
:end
:start
The
producible
media
types
of
the
mapped
request,
narrowing
the
primary
mapping
<p>The
format
is
a
single
media
type
or
a
sequence
of
media
types,
with
a
request
only
mapped
if
the
Accept
matches
one
of
these
media
types
Examples:
<pre
class="code">
produces
=
"text/plain"
produces
=
"application/*"
</pre>
Expressions
can
be
negated
by
using
the
"!"
operator,
as
in
"!text/plain",
which
matches
all
requests
with
a
Accept
other
than
"text/plain"
<p><b>Supported
at
the
type
level
as
well
as
at
the
method
level!</b>
When
used
at
the
type
level,
all
method-level
mappings
override
this
consumes
restriction
:end
:start
Java
5
enumeration
of
HTTP
request
methods
Intended
for
use
with
the
RequestMapping#method()
attribute
of
the
RequestMapping
annotation
<p>Note
that,
by
default,
orgspringframeworkwebservletDispatcherServlet
supports
GET,
HEAD,
POST,
PUT,
PATCH
and
DELETE
only
DispatcherServlet
will
process
TRACE
and
OPTIONS
with
the
default
HttpServlet
behavior
unless
explicitly
told
to
dispatch
those
request
types
as
well:
Check
out
the
"dispatchOptionsRequest"
and
"dispatchTraceRequest"
properties,
switching
them
to
"true"
if
necessary
:end
:start
Annotation
which
indicates
that
a
method
parameter
should
be
bound
to
a
web
request
parameter
Supported
for
annotated
handler
methods
in
Servlet
and
Portlet
environments
<p>If
the
method
parameter
type
is
Map
and
a
request
parameter
name
is
specified,
then
the
request
parameter
value
is
converted
to
a
Map
assuming
an
appropriate
conversion
strategy
is
available
<p>If
the
method
parameter
is
javautilMap
Map&lt;String,
String&gt;
or
orgspringframeworkutilMultiValueMap
MultiValueMap&lt;String,
String&gt;
and
a
parameter
name
is
not
specified,
then
the
map
parameter
is
populated
with
all
request
parameter
names
and
values
:end
:start
The
name
of
the
request
parameter
to
bind
to
:end
:start
Whether
the
parameter
is
required
<p>Default
is
true,
leading
to
an
exception
thrown
in
case
of
the
parameter
missing
in
the
request
Switch
this
to
false
if
you
prefer
a
null
in
case
of
the
parameter
missing
<p>Alternatively,
provide
a
#defaultValue()
defaultValue,
which
implicitly
sets
this
flag
to
false
:end
:start
The
default
value
to
use
as
a
fallback
when
the
request
parameter
value
is
not
provided
or
empty
Supplying
a
default
value
implicitly
sets
#required()
to
false
:end
:start
Annotation
that
can
be
used
to
associate
the
part
of
a
"multipart/form-data"
request
with
a
method
argument
Supported
method
argument
types
include
MultipartFile
in
conjunction
with
Spring's
MultipartResolver
abstraction,
javaxservlethttpPart
in
conjunction
with
Servlet
30
multipart
requests,
or
otherwise
for
any
other
method
argument,
the
content
of
the
part
is
passed
through
an
HttpMessageConverter
taking
into
consideration
the
'Content-Type'
header
of
the
request
part
This
is
analogous
to
what
@{@link
RequestBody
does
to
resolve
an
argument
based
on
the
content
of
a
non-multipart
regular
request
<p>Note
that
@{@link
RequestParam
annotation
can
also
be
used
to
associate
the
part
of
a
"multipart/form-data"
request
with
a
method
argument
supporting
the
same
method
argument
types
The
main
difference
is
that
when
the
method
argument
is
not
a
String,
@{@link
RequestParam
relies
on
type
conversion
via
a
registered
Converter
or
PropertyEditor
while
@{@link
RequestPart
relies
on
HttpMessageConverters
taking
into
consideration
the
'Content-Type'
header
of
the
request
part
@{@link
RequestParam
is
likely
to
be
used
with
name-value
form
fields
while
@{@link
RequestPart
is
likely
to
be
used
with
parts
containing
more
complex
content
(eg
JSON,
XML)
:end
:start
The
name
of
the
part
in
the
"multipart/form-data"
request
to
bind
to
:end
:start
Whether
the
part
is
required
<p>Default
is
true,
leading
to
an
exception
thrown
in
case
of
the
part
missing
in
the
request
Switch
this
to
false
if
you
prefer
a
null
in
case
of
the
part
missing
:end
:start
Annotation
that
indicates
a
method
return
value
should
be
bound
to
the
web
response
body
Supported
for
annotated
handler
methods
in
Servlet
environments
<p>As
of
version
40
this
annotation
can
also
be
added
on
the
type
level
in
which
case
it
is
inherited
and
does
not
need
to
be
added
on
the
method
level
:end
:start
Marks
a
method
or
exception
class
with
the
status
code
and
reason
that
should
be
returned
The
status
code
is
applied
to
the
HTTP
response
when
the
handler
method
is
invoked,
or
whenever
said
exception
is
thrown
:end
:start
The
status
code
to
use
for
the
response
:end
:start
The
reason
to
be
used
for
the
response
<p>If
this
element
is
not
set,
it
will
default
to
the
standard
status
message
for
the
status
code
Note
that
due
to
the
use
of
HttpServletResponsesendError(int,
String),
the
response
will
be
considered
complete
and
should
not
be
written
to
any
further
:end
:start
A
convenience
annotation
that
is
itself
annotated
with
Controller
@Controller
and
ResponseBody
@ResponseBody
<p>
Types
that
carry
this
annotation
are
treated
as
controllers
where
RequestMapping
@RequestMapping
methods
assume
ResponseBody
@ResponseBody
semantics
by
default
:end
:start
The
value
may
indicate
a
suggestion
for
a
logical
component
name,
to
be
turned
into
a
Spring
bean
in
case
of
an
autodetected
component
:end
:start
Annotation
that
indicates
the
session
attributes
that
a
specific
handler
uses
This
will
typically
list
the
names
of
model
attributes
which
should
be
transparently
stored
in
the
session
or
some
conversational
storage,
serving
as
form-backing
beans
<b>Declared
at
the
type
level,</b>
applying
to
the
model
attributes
that
the
annotated
handler
class
operates
on
<p><b>NOTE:</b>
Session
attributes
as
indicated
using
this
annotation
correspond
to
a
specific
handler's
model
attributes,
getting
transparently
stored
in
a
conversational
session
Those
attributes
will
be
removed
once
the
handler
indicates
completion
of
its
conversational
session
Therefore,
use
this
facility
for
such
conversational
attributes
which
are
supposed
to
be
stored
in
the
session
<i>temporarily</i>
during
the
course
of
a
specific
handler's
conversation
<p>For
permanent
session
attributes,
eg
a
user
authentication
object,
use
the
traditional
sessionsetAttribute
method
instead
Alternatively,
consider
using
the
attribute
management
capabilities
of
the
generic
orgspringframeworkwebcontextrequestWebRequest
interface
<p><b>NOTE:</b>
When
using
controller
interfaces
(eg
for
AOP
proxying),
make
sure
to
consistently
put
<i>all</i>
your
mapping
annotations
-
such
as
@RequestMapping
and
@SessionAttributes
-
on
the
controller
<i>interface</i>
rather
than
on
the
implementation
class
:end
:start
The
names
of
session
attributes
in
the
model,
to
be
stored
in
the
session
or
some
conversational
storage
<p>Note:
This
indicates
the
model
attribute
names
The
session
attribute
names
may
or
may
not
match
the
model
attribute
names;
applications
should
not
rely
on
the
session
attribute
names
but
rather
operate
on
the
model
only
:end
:start
The
types
of
session
attributes
in
the
model,
to
be
stored
in
the
session
or
some
conversational
storage
All
model
attributes
of
this
type
will
be
stored
in
the
session,
regardless
of
attribute
name
:end
:start
Exception
indicating
that
the
execution
of
an
annotated
MVC
handler
method
failed
:end
:start
Create
a
new
HandlerMethodInvocationException
for
the
given
Method
handle
and
cause
:end
:start
Support
class
for
invoking
an
annotated
handler
method
Operates
on
the
introspection
results
of
a
HandlerMethodResolver
for
a
specific
handler
type
<p>Used
by
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerAdapter
and
orgspringframeworkwebportletmvcannotationAnnotationMethodHandlerAdapter
:end
:start
Resolves
the
given
RequestBody
@RequestBody
annotation
:end
:start
Resolves
the
given
CookieValue
@CookieValue
annotation
<p>Throws
an
UnsupportedOperationException
by
default
:end
:start
Resolves
the
given
PathVariable
@PathVariable
annotation
<p>Throws
an
UnsupportedOperationException
by
default
:end
:start
Determine
whether
the
given
value
qualifies
as
a
"binding
candidate",
ie
might
potentially
be
subject
to
bean-style
data
binding
later
on
:end
:start
Return
a
HttpInputMessage
for
the
given
NativeWebRequest
<p>Throws
an
UnsupportedOperation1Exception
by
default
:end
:start
Return
a
HttpOutputMessage
for
the
given
NativeWebRequest
<p>Throws
an
UnsupportedOperationException
by
default
:end
:start
Support
class
for
resolving
web
method
annotations
in
a
handler
type
Processes
@RequestMapping,
@InitBinder,
@ModelAttribute
and
@SessionAttributes
<p>Used
by
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerAdapter
and
orgspringframeworkwebportletmvcannotationAnnotationMethodHandlerAdapter
:end
:start
Initialize
a
new
HandlerMethodResolver
for
the
specified
handler
type
:end
:start
Common
value
constants
shared
between
bind
annotations
:end
:start
Constant
defining
a
value
for
no
default
-
as
a
replacement
for
null
which
we
cannot
use
in
annotation
attributes
<p>This
is
an
artificial
arrangement
of
16
unicode
characters,
with
its
sole
purpose
being
to
never
match
user-declared
values
:end
:start
Errors
wrapper
that
adds
automatic
HTML
escaping
to
the
wrapped
instance,
for
convenient
usage
in
HTML
views
Can
be
retrieved
easily
via
RequestContext's
getErrors
method
<p>Note
that
BindTag
does
<i>not</i>
use
this
class
to
avoid
unnecessary
creation
of
ObjectError
instances
It
just
escapes
the
messages
and
values
that
get
copied
into
the
respective
BindStatus
instance
:end
:start
Create
a
new
EscapedErrors
instance
for
the
given
source
instance
:end
:start
Exception
to
be
thrown
when
validation
on
an
argument
annotated
with
@Valid
fails
:end
:start
Constructor
for
MethodArgumentNotValidException
:end
:start
Return
the
method
parameter
that
failed
validation
:end
:start
Return
the
results
of
the
failed
validation
:end
:start
ServletRequestBindingException
subclass
that
indicates
a
missing
parameter
:end
:start
Constructor
for
MissingServletRequestParameterException
:end
:start
Return
the
name
of
the
offending
parameter
:end
:start
Return
the
expected
type
of
the
offending
parameter
:end
:start
Fatal
binding
exception,
thrown
when
we
want
to
treat
binding
exceptions
as
unrecoverable
<p>Extends
ServletException
for
convenient
throwing
in
any
Servlet
resource
(such
as
a
Filter),
and
NestedServletException
for
proper
root
cause
handling
(as
the
plain
ServletException
doesn't
expose
its
root
cause
at
all)
:end
:start
Constructor
for
ServletRequestBindingException
:end
:start
Constructor
for
ServletRequestBindingException
:end
:start
Special
orgspringframeworkvalidationDataBinder
to
perform
data
binding
from
servlet
request
parameters
to
JavaBeans,
including
support
for
multipart
files
<p>See
the
DataBinder/WebDataBinder
superclasses
for
customization
options,
which
include
specifying
allowed/required
fields,
and
registering
custom
property
editors
<p>Can
also
be
used
for
manual
data
binding
in
custom
web
controllers:
for
example,
in
a
plain
Controller
implementation
or
in
a
MultiActionController
handler
method
Simply
instantiate
a
ServletRequestDataBinder
for
each
binding
process,
and
invoke
bind
with
the
current
ServletRequest
as
argument:
<pre
class="code">
MyBean
myBean
=
new
MyBean();
//
apply
binder
to
custom
target
object
ServletRequestDataBinder
binder
=
new
ServletRequestDataBinder(myBean);
//
register
custom
editors,
if
desired
binderregisterCustomEditor();
//
trigger
actual
binding
of
request
parameters
binderbind(request);
//
optionally
evaluate
binding
errors
Errors
errors
=
bindergetErrors();
</pre>
:end
:start
Create
a
new
ServletRequestDataBinder
instance,
with
default
object
name
:end
:start
Create
a
new
ServletRequestDataBinder
instance
:end
:start
Bind
the
parameters
of
the
given
request
to
this
binder's
target,
also
binding
multipart
files
in
case
of
a
multipart
request
<p>This
call
can
create
field
errors,
representing
basic
binding
errors
like
a
required
field
(code
"required"),
or
type
mismatch
between
value
and
bean
property
(code
"typeMismatch")
<p>Multipart
files
are
bound
via
their
parameter
name,
just
like
normal
HTTP
parameters:
ie
"uploadedFile"
to
an
"uploadedFile"
bean
property,
invoking
a
"setUploadedFile"
setter
method
<p>The
type
of
the
target
property
for
a
multipart
file
can
be
MultipartFile,
byte[],
or
String
The
latter
two
receive
the
contents
of
the
uploaded
file;
all
metadata
like
original
file
name,
content
type,
etc
are
lost
in
those
cases
:end
:start
Extension
point
that
subclasses
can
use
to
add
extra
bind
values
for
a
request
Invoked
before
#doBind(MutablePropertyValues)
The
default
implementation
is
empty
:end
:start
Treats
errors
as
fatal
<p>Use
this
method
only
if
it's
an
error
if
the
input
isn't
valid
This
might
be
appropriate
if
all
input
is
from
dropdowns,
for
example
:end
:start
PropertyValues
implementation
created
from
parameters
in
a
ServletRequest
Can
look
for
all
property
values
beginning
with
a
certain
prefix
and
prefix
separator
(default
is
"_")
<p>For
example,
with
a
prefix
of
"spring",
"spring_param1"
and
"spring_param2"
result
in
a
Map
with
"param1"
and
"param2"
as
keys
<p>This
class
is
not
immutable
to
be
able
to
efficiently
remove
property
values
that
should
be
ignored
for
binding
:end
:start
Default
prefix
separator
:end
:start
Create
new
ServletRequestPropertyValues
using
no
prefix
(and
hence,
no
prefix
separator)
:end
:start
Create
new
ServletRequestPropertyValues
using
the
given
prefix
and
the
default
prefix
separator
(the
underscore
character
"_")
:end
:start
Create
new
ServletRequestPropertyValues
supplying
both
prefix
and
prefix
separator
:end
:start
Parameter
extraction
methods,
for
an
approach
distinct
from
data
binding,
in
which
parameters
of
specific
types
are
required
<p>This
approach
is
very
useful
for
simple
submissions,
where
binding
request
parameters
to
a
command
object
would
be
overkill
:end
:start
Get
an
Integer
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
an
int
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
int
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
an
int
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
int
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Long
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
long
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
long
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
long
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
long
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Float
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
float
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
float
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
float
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
float
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Double
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
double
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
double
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
double
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
double
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Boolean
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
boolean
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
an
array
of
boolean
parameters,
return
an
empty
array
if
not
found
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
boolean
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
an
array
of
boolean
parameters,
throwing
an
exception
if
not
found
or
one
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
String
parameter,
or
null
if
not
present
:end
:start
Get
a
String
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
to
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
String
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
String
parameter,
throwing
an
exception
if
it
isn't
found
:end
:start
Get
an
array
of
String
parameters,
throwing
an
exception
if
not
found
:end
:start
Convenient
WebBindingInitializer
for
declarative
configuration
in
a
Spring
application
context
Allows
for
reusing
pre-configured
initializers
with
multiple
controller/handlers
:end
:start
Set
whether
a
binder
should
attempt
to
"auto-grow"
a
nested
path
that
contains
a
null
value
<p>If
"true",
a
null
path
location
will
be
populated
with
a
default
object
value
and
traversed
instead
of
resulting
in
an
exception
This
flag
also
enables
auto-growth
of
collection
elements
when
accessing
an
out-of-bounds
index
<p>Default
is
"true"
on
a
standard
DataBinder
Note
that
this
feature
is
only
supported
for
bean
property
access
(DataBinder's
default
mode),
not
for
field
access
:end
:start
Return
whether
a
binder
should
attempt
to
"auto-grow"
a
nested
path
that
contains
a
null
value
:end
:start
Set
whether
to
use
direct
field
access
instead
of
bean
property
access
<p>Default
is
false,
using
bean
property
access
Switch
this
to
true
in
order
to
enforce
direct
field
access
:end
:start
Return
whether
to
use
direct
field
access
instead
of
bean
property
access
:end
:start
Set
the
strategy
to
use
for
resolving
errors
into
message
codes
Applies
the
given
strategy
to
all
data
binders
used
by
this
controller
<p>Default
is
null,
ie
using
the
default
strategy
of
the
data
binder
:end
:start
Return
the
strategy
to
use
for
resolving
errors
into
message
codes
:end
:start
Set
the
strategy
to
use
for
processing
binding
errors,
that
is,
required
field
errors
and
PropertyAccessExceptions
<p>Default
is
null,
that
is,
using
the
default
strategy
of
the
data
binder
:end
:start
Return
the
strategy
to
use
for
processing
binding
errors
:end
:start
Set
the
Validator
to
apply
after
each
binding
step
:end
:start
Return
the
Validator
to
apply
after
each
binding
step,
if
any
:end
:start
Specify
a
ConversionService
which
will
apply
to
every
DataBinder
:end
:start
Return
the
ConversionService
which
will
apply
to
every
DataBinder
:end
:start
Specify
a
single
PropertyEditorRegistrar
to
be
applied
to
every
DataBinder
:end
:start
Specify
multiple
PropertyEditorRegistrars
to
be
applied
to
every
DataBinder
:end
:start
Return
the
PropertyEditorRegistrars
to
be
applied
to
every
DataBinder
:end
:start
Create
a
WebRequestDataBinder
instance
and
initialize
it
with
a
WebBindingInitializer
:end
:start
Create
new
instance
:end
:start
Create
a
new
WebDataBinder
for
the
given
target
object
and
initialize
it
through
a
WebBindingInitializer
:end
:start
Extension
point
to
create
the
WebDataBinder
instance
By
default
this
is
WebRequestDataBinder
:end
:start
Extension
point
to
further
initialize
the
created
data
binder
instance
(eg
with
@InitBinder
methods)
after
"global"
initializaton
via
WebBindingInitializer
:end
:start
Default
implementation
of
the
SessionAttributeStore
interface,
storing
the
attributes
in
the
WebRequest
session
(ie
HttpSession
or
PortletSession)
:end
:start
Specify
a
prefix
to
use
for
the
attribute
names
in
the
backend
session
<p>Default
is
to
use
no
prefix,
storing
the
session
attributes
with
the
same
name
as
in
the
model
:end
:start
Calculate
the
attribute
name
in
the
backend
session
<p>The
default
implementation
simply
prepends
the
configured
#setAttributeNamePrefix
"attributeNamePrefix",
if
any
:end
:start
Strategy
interface
for
storing
model
attributes
in
a
backend
session
:end
:start
Store
the
supplied
attribute
in
the
backend
session
<p>Can
be
called
for
new
attributes
as
well
as
for
existing
attributes
In
the
latter
case,
this
signals
that
the
attribute
value
may
have
been
modified
:end
:start
Retrieve
the
specified
attribute
from
the
backend
session
<p>This
will
typically
be
called
with
the
expectation
that
the
attribute
is
already
present,
with
an
exception
to
be
thrown
if
this
method
returns
null
:end
:start
Clean
up
the
specified
attribute
in
the
backend
session
<p>Indicates
that
the
attribute
name
will
not
be
used
anymore
:end
:start
Simple
interface
that
can
be
injected
into
handler
methods,
allowing
them
to
signal
that
their
session
processing
is
complete
The
handler
invoker
may
then
follow
up
with
appropriate
cleanup,
eg
of
session
attributes
which
have
been
implicitly
created
during
this
handler's
processing
(according
to
the
orgspringframeworkwebbindannotationSessionAttributes
@SessionAttributes
annotation)
:end
:start
Mark
the
current
handler's
session
processing
as
complete,
allowing
for
cleanup
of
session
attributes
:end
:start
Return
whether
the
current
handler's
session
processing
has
been
marked
as
complete
:end
:start
Simple
implementation
of
the
SessionStatus
interface,
keeping
the
complete
flag
as
an
instance
variable
:end
:start
SPI
for
resolving
custom
arguments
for
a
specific
handler
method
parameter
Typically
implemented
to
detect
special
parameter
types,
resolving
well-known
argument
values
for
them
<p>A
typical
implementation
could
look
like
as
follows:
<pre
class="code">
public
class
MySpecialArgumentResolver
implements
WebArgumentResolver
public
Object
resolveArgument(MethodParameter
methodParameter,
NativeWebRequest
webRequest)
if
(methodParametergetParameterType()equals(MySpecialArgclass))
return
new
MySpecialArg("myValue");

return
UNRESOLVED;

</pre>
:end
:start
Marker
to
be
returned
when
the
resolver
does
not
know
how
to
handle
the
given
method
parameter
:end
:start
Resolve
an
argument
for
the
given
handler
method
parameter
within
the
given
web
request
:end
:start
Callback
interface
for
initializing
a
orgspringframeworkwebbindWebDataBinder
for
performing
data
binding
in
the
context
of
a
specific
web
request
:end
:start
Initialize
the
given
DataBinder
for
the
given
request
:end
:start
A
factory
for
creating
a
WebDataBinder
instance
for
a
named
target
object
:end
:start
Create
a
WebDataBinder
for
the
given
object
:end
:start
Special
orgspringframeworkvalidationDataBinder
to
perform
data
binding
from
web
request
parameters
to
JavaBeans,
including
support
for
multipart
files
<p>See
the
DataBinder/WebDataBinder
superclasses
for
customization
options,
which
include
specifying
allowed/required
fields,
and
registering
custom
property
editors
<p>Can
also
used
for
manual
data
binding
in
custom
web
controllers
or
interceptors
that
build
on
Spring's
orgspringframeworkwebcontextrequestWebRequest
abstraction:
eg
in
a
orgspringframeworkwebcontextrequestWebRequestInterceptor
implementation
Simply
instantiate
a
WebRequestDataBinder
for
each
binding
process,
and
invoke
bind
with
the
current
WebRequest
as
argument:
<pre
class="code">
MyBean
myBean
=
new
MyBean();
//
apply
binder
to
custom
target
object
WebRequestDataBinder
binder
=
new
WebRequestDataBinder(myBean);
//
register
custom
editors,
if
desired
binderregisterCustomEditor();
//
trigger
actual
binding
of
request
parameters
binderbind(request);
//
optionally
evaluate
binding
errors
Errors
errors
=
bindergetErrors();
</pre>
:end
:start
Create
a
new
WebRequestDataBinder
instance,
with
default
object
name
:end
:start
Create
a
new
WebRequestDataBinder
instance
:end
:start
Bind
the
parameters
of
the
given
request
to
this
binder's
target,
also
binding
multipart
files
in
case
of
a
multipart
request
<p>This
call
can
create
field
errors,
representing
basic
binding
errors
like
a
required
field
(code
"required"),
or
type
mismatch
between
value
and
bean
property
(code
"typeMismatch")
<p>Multipart
files
are
bound
via
their
parameter
name,
just
like
normal
HTTP
parameters:
ie
"uploadedFile"
to
an
"uploadedFile"
bean
property,
invoking
a
"setUploadedFile"
setter
method
<p>The
type
of
the
target
property
for
a
multipart
file
can
be
Part,
MultipartFile,
byte[],
or
String
The
latter
two
receive
the
contents
of
the
uploaded
file;
all
metadata
like
original
file
name,
content
type,
etc
are
lost
in
those
cases
:end
:start
Treats
errors
as
fatal
<p>Use
this
method
only
if
it's
an
error
if
the
input
isn't
valid
This
might
be
appropriate
if
all
input
is
from
dropdowns,
for
example
:end
:start
ServletRequestBindingException
subclass
that
indicates
an
unsatisfied
parameter
condition,
as
typically
expressed
using
an
@RequestMapping
annotation
at
the
@Controller
type
level
:end
:start
Create
a
new
UnsatisfiedServletRequestParameterException
:end
:start
Return
the
parameter
conditions
that
have
been
violated
:end
:start
Return
the
actual
parameter
Map
associated
with
the
ServletRequest
:end
:start
Special
DataBinder
for
data
binding
from
web
request
parameters
to
JavaBean
objects
Designed
for
web
environments,
but
not
dependent
on
the
Servlet
API;
serves
as
base
class
for
more
specific
DataBinder
variants,
such
as
orgspringframeworkwebbindServletRequestDataBinder
<p>Includes
support
for
field
markers
which
address
a
common
problem
with
HTML
checkboxes
and
select
options:
detecting
that
a
field
was
part
of
the
form,
but
did
not
generate
a
request
parameter
because
it
was
empty
A
field
marker
allows
to
detect
that
state
and
reset
the
corresponding
bean
property
accordingly
Default
values,
for
parameters
that
are
otherwise
not
present,
can
specify
a
value
for
the
field
other
then
empty
:end
:start
Default
prefix
that
field
marker
parameters
start
with,
followed
by
the
field
name:
eg
"_subscribeToNewsletter"
for
a
field
"subscribeToNewsletter"
<p>Such
a
marker
parameter
indicates
that
the
field
was
visible,
that
is,
existed
in
the
form
that
caused
the
submission
If
no
corresponding
field
value
parameter
was
found,
the
field
will
be
reset
The
value
of
the
field
marker
parameter
does
not
matter
in
this
case;
an
arbitrary
value
can
be
used
This
is
particularly
useful
for
HTML
checkboxes
and
select
options
:end
:start
Default
prefix
that
field
default
parameters
start
with,
followed
by
the
field
name:
eg
"!subscribeToNewsletter"
for
a
field
"subscribeToNewsletter"
<p>Default
parameters
differ
from
field
markers
in
that
they
provide
a
default
value
instead
of
an
empty
value
:end
:start
Create
a
new
WebDataBinder
instance,
with
default
object
name
:end
:start
Create
a
new
WebDataBinder
instance
:end
:start
Specify
a
prefix
that
can
be
used
for
parameters
that
mark
potentially
empty
fields,
having
"prefix
+
field"
as
name
Such
a
marker
parameter
is
checked
by
existence:
You
can
send
any
value
for
it,
for
example
"visible"
This
is
particularly
useful
for
HTML
checkboxes
and
select
options
<p>Default
is
"_",
for
"_FIELD"
parameters
(eg
"_subscribeToNewsletter")
Set
this
to
null
if
you
want
to
turn
off
the
empty
field
check
completely
<p>HTML
checkboxes
only
send
a
value
when
they're
checked,
so
it
is
not
possible
to
detect
that
a
formerly
checked
box
has
just
been
unchecked,
at
least
not
with
standard
HTML
means
<p>One
way
to
address
this
is
to
look
for
a
checkbox
parameter
value
if
you
know
that
the
checkbox
has
been
visible
in
the
form,
resetting
the
checkbox
if
no
value
found
In
Spring
web
MVC,
this
typically
happens
in
a
custom
onBind
implementation
<p>This
auto-reset
mechanism
addresses
this
deficiency,
provided
that
a
marker
parameter
is
sent
for
each
checkbox
field,
like
"_subscribeToNewsletter"
for
a
"subscribeToNewsletter"
field
As
the
marker
parameter
is
sent
in
any
case,
the
data
binder
can
detect
an
empty
field
and
automatically
reset
its
value
:end
:start
Return
the
prefix
for
parameters
that
mark
potentially
empty
fields
:end
:start
Specify
a
prefix
that
can
be
used
for
parameters
that
indicate
default
value
fields,
having
"prefix
+
field"
as
name
The
value
of
the
default
field
is
used
when
the
field
is
not
provided
<p>Default
is
"!",
for
"!FIELD"
parameters
(eg
"!subscribeToNewsletter")
Set
this
to
null
if
you
want
to
turn
off
the
field
defaults
completely
<p>HTML
checkboxes
only
send
a
value
when
they're
checked,
so
it
is
not
possible
to
detect
that
a
formerly
checked
box
has
just
been
unchecked,
at
least
not
with
standard
HTML
means
A
default
field
is
especially
useful
when
a
checkbox
represents
a
non-boolean
value
<p>The
presence
of
a
default
parameter
preempts
the
behavior
of
a
field
marker
for
the
given
field
:end
:start
Return
the
prefix
for
parameters
that
mark
default
fields
:end
:start
Set
whether
to
bind
empty
MultipartFile
parameters
Default
is
"true"
<p>Turn
this
off
if
you
want
to
keep
an
already
bound
MultipartFile
when
the
user
resubmits
the
form
without
choosing
a
different
file
Else,
the
already
bound
MultipartFile
will
be
replaced
by
an
empty
MultipartFile
holder
:end
:start
Return
whether
to
bind
empty
MultipartFile
parameters
:end
:start
This
implementation
performs
a
field
default
and
marker
check
before
delegating
to
the
superclass
binding
process
:end
:start
Check
the
given
property
values
for
field
defaults,
ie
for
fields
that
start
with
the
field
default
prefix
<p>The
existence
of
a
field
defaults
indicates
that
the
specified
value
should
be
used
if
the
field
is
otherwise
not
present
:end
:start
Check
the
given
property
values
for
field
markers,
ie
for
fields
that
start
with
the
field
marker
prefix
<p>The
existence
of
a
field
marker
indicates
that
the
specified
field
existed
in
the
form
If
the
property
values
do
not
contain
a
corresponding
field
value,
the
field
will
be
considered
as
empty
and
will
be
reset
appropriately
:end
:start
Determine
an
empty
value
for
the
specified
field
<p>Default
implementation
returns
BooleanFALSE
for
boolean
fields
and
an
empty
array
of
array
types
Else,
null
is
used
as
default
:end
:start
Bind
all
multipart
files
contained
in
the
given
request,
if
any
(in
case
of
a
multipart
request)
<p>Multipart
files
will
only
be
added
to
the
property
values
if
they
are
not
empty
or
if
we're
configured
to
bind
empty
multipart
files
too
:end
:start
Callback
interface
for
code
that
operates
on
an
AsyncClientHttpRequest
Allows
to
manipulate
the
request
headers,
and
write
to
the
request
body
<p>Used
internally
by
the
AsyncRestTemplate,
but
also
useful
for
application
code
:end
:start
Gets
called
by
AsyncRestTemplate#execute
with
an
opened
ClientHttpRequest
Does
not
need
to
care
about
closing
the
request
or
about
handling
errors:
this
will
all
be
handled
by
the
RestTemplate
:end
:start
Interface
specifying
a
basic
set
of
asynchronous
RESTful
operations
Implemented
by
AsyncRestTemplate
Not
often
used
directly,
but
a
useful
option
to
enhance
testability,
as
it
can
easily
be
mocked
or
stubbed
:end
:start
Expose
the
synchronous
Spring
RestTemplate
to
allow
synchronous
invocation
:end
:start
Asynchronously
retrieve
an
entity
by
doing
a
GET
on
the
specified
URL
The
response
is
converted
and
stored
in
an
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
retrieve
a
representation
by
doing
a
GET
on
the
URI
template
The
response
is
converted
and
stored
in
an
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Asynchronously
retrieve
a
representation
by
doing
a
GET
on
the
URL
The
response
is
converted
and
stored
in
an
ResponseEntity
:end
:start
Asynchronously
retrieve
all
headers
of
the
resource
specified
by
the
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
retrieve
all
headers
of
the
resource
specified
by
the
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Asynchronously
retrieve
all
headers
of
the
resource
specified
by
the
URL
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
asynchronously
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
asynchronously
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URL,
and
asynchronously
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
asynchronously
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
asynchronously
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URL,
and
asynchronously
returns
the
response
as
ResponseEntity
:end
:start
Create
or
update
a
resource
by
PUTting
the
given
object
to
the
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Creates
a
new
resource
by
PUTting
the
given
object
to
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
map
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Creates
a
new
resource
by
PUTting
the
given
object
to
URL
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Asynchronously
delete
the
resources
at
the
specified
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Asynchronously
delete
the
resources
at
the
specified
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Asynchronously
delete
the
resources
at
the
specified
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
Future
will
return
a
null
result
upon
completion
:end
:start
Asynchronously
return
the
value
of
the
Allow
header
for
the
given
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
return
the
value
of
the
Allow
header
for
the
given
URI
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Asynchronously
return
the
value
of
the
Allow
header
for
the
given
URL
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
preparing
the
request
with
the
AsyncRequestCallback,
and
reading
the
response
with
a
ResponseExtractor
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URI
template,
preparing
the
request
with
the
AsyncRequestCallback,
and
reading
the
response
with
a
ResponseExtractor
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables
map
:end
:start
Asynchronously
execute
the
HTTP
method
to
the
given
URL,
preparing
the
request
with
the
AsyncRequestCallback,
and
reading
the
response
with
a
ResponseExtractor
:end
:start
<strong>Spring's
central
class
for
asynchronous
client-side
HTTP
access</strong>
Exposes
similar
methods
as
RestTemplate,
but
returns
ListenableFuture
wrappers
as
opposed
to
concrete
results
<p>The
AsyncRestTemplate
exposes
a
synchronous
RestTemplate
via
the
#getRestOperations()
method,
and
it
shares
its
#setErrorHandler(ResponseErrorHandler)
error
handler
and
#setMessageConverters(List)
message
converters
with
this
RestTemplate
<p>For
more
information,
please
refer
to
the
RestTemplate
API
documentation
:end
:start
Create
a
new
instance
of
the
AsyncRestTemplate
using
default
settings
<p>This
constructor
uses
a
SimpleClientHttpRequestFactory
in
combination
with
a
SimpleAsyncTaskExecutor
for
asynchronous
execution
:end
:start
Create
a
new
instance
of
the
AsyncRestTemplate
using
the
given
AsyncTaskExecutor
<p>This
constructor
uses
a
SimpleClientHttpRequestFactory
in
combination
with
the
given
AsyncTaskExecutor
for
asynchronous
execution
:end
:start
Creates
a
new
instance
of
the
AsyncRestTemplate
using
the
given
asynchronous
and
synchronous
request
factories
:end
:start
Create
a
new
instance
of
the
AsyncRestTemplate
using
the
given
AsyncClientHttpRequestFactory
and
synchronous
RestTemplate
:end
:start
Set
the
error
handler
<p>By
default,
AsyncRestTemplate
uses
a
orgspringframeworkwebclientDefaultResponseErrorHandler
:end
:start
Return
the
error
handler
:end
:start
Set
the
message
body
converters
to
use
<p>These
converters
are
used
to
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Return
the
message
body
converters
:end
:start
Execute
the
given
method
on
the
provided
URI
The
orgspringframeworkhttpclientClientHttpRequest
is
processed
using
the
RequestCallback;
the
response
with
the
ResponseExtractor
:end
:start
Returns
a
request
callback
implementation
that
prepares
the
request
Accept
headers
based
on
the
given
response
type
and
configured
#getMessageConverters()
message
converters
:end
:start
Returns
a
request
callback
implementation
that
writes
the
given
object
to
the
request
stream
:end
:start
Returns
a
request
callback
implementation
that
writes
the
given
object
to
the
request
stream
:end
:start
Returns
a
response
extractor
for
ResponseEntity
:end
:start
Returns
a
response
extractor
for
HttpHeaders
:end
:start
Default
implementation
of
the
ResponseErrorHandler
interface
<p>This
error
handler
checks
for
the
status
code
on
the
ClientHttpResponse:
any
code
with
series
orgspringframeworkhttpHttpStatusSeries#CLIENT_ERROR
or
orgspringframeworkhttpHttpStatusSeries#SERVER_ERROR
is
considered
to
be
an
error
This
behavior
can
be
changed
by
overriding
the
#hasError(HttpStatus)
method
:end
:start
Delegates
to
#hasError(HttpStatus)
with
the
response
status
code
:end
:start
Template
method
called
from
#hasError(ClientHttpResponse)
<p>The
default
implementation
checks
if
the
given
status
code
is
orgspringframeworkhttpHttpStatusSeries#CLIENT_ERROR
CLIENT_ERROR
or
orgspringframeworkhttpHttpStatusSeries#SERVER_ERROR
SERVER_ERROR
Can
be
overridden
in
subclasses
:end
:start
This
default
implementation
throws
a
HttpClientErrorException
if
the
response
status
code
is
orgspringframeworkhttpHttpStatusSeries#CLIENT_ERROR,
a
HttpServerErrorException
if
it
is
orgspringframeworkhttpHttpStatusSeries#SERVER_ERROR,
and
a
RestClientException
in
other
cases
:end
:start
Exception
thrown
when
an
HTTP
4xx
is
received
:end
:start
Construct
a
new
instance
of
HttpClientErrorException
based
on
an
HttpStatus
:end
:start
Construct
a
new
instance
of
HttpClientErrorException
based
on
an
HttpStatus
and
status
text
:end
:start
Construct
a
new
instance
of
HttpClientErrorException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Construct
a
new
instance
of
HttpClientErrorException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Response
extractor
that
uses
the
given
HttpMessageConverter
entity
converters
to
convert
the
response
into
a
type
T
:end
:start
Creates
a
new
instance
of
the
HttpMessageConverterExtractor
with
the
given
response
type
and
message
converters
The
given
converters
must
support
the
response
type
:end
:start
Creates
a
new
instance
of
the
HttpMessageConverterExtractor
with
the
given
response
type
and
message
converters
The
given
converters
must
support
the
response
type
:end
:start
Indicates
whether
the
given
response
has
a
message
body
<p>Default
implementation
returns
false
for
a
response
status
of
204
or
304,
or
a
Content-Length
of
0
:end
:start
Exception
thrown
when
an
HTTP
5xx
is
received
:end
:start
Construct
a
new
instance
of
HttpServerErrorException
based
on
an
HttpStatus
:end
:start
Construct
a
new
instance
of
HttpServerErrorException
based
on
an
HttpStatus
and
status
text
:end
:start
Construct
a
new
instance
of
HttpServerErrorException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Construct
a
new
instance
of
HttpServerErrorException
based
on
a
HttpStatus,
status
text,
and
response
body
content
:end
:start
Abstract
base
class
for
exceptions
based
on
an
HttpStatus
:end
:start
Construct
a
new
instance
of
HttpStatusCodeException
based
on
an
HttpStatus
:end
:start
Construct
a
new
instance
of
HttpStatusCodeException
based
on
an
HttpStatus
and
status
text
:end
:start
Construct
a
new
instance
of
HttpStatusCodeException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Construct
a
new
instance
of
HttpStatusCodeException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Return
the
HTTP
status
code
:end
:start
Return
the
HTTP
status
text
:end
:start
Return
the
HTTP
response
headers
:end
:start
Return
the
response
body
as
a
byte
array
:end
:start
Return
the
response
body
as
a
string
:end
:start
Callback
interface
for
code
that
operates
on
a
ClientHttpRequest
Allows
to
manipulate
the
request
headers,
and
write
to
the
request
body
<p>Used
internally
by
the
RestTemplate,
but
also
useful
for
application
code
:end
:start
Gets
called
by
RestTemplate#execute
with
an
opened
ClientHttpRequest
Does
not
need
to
care
about
closing
the
request
or
about
handling
errors:
this
will
all
be
handled
by
the
RestTemplate
:end
:start
Exception
thrown
when
an
I/O
error
occurs
:end
:start
Construct
a
new
HttpIOException
with
the
given
message
:end
:start
Construct
a
new
HttpIOException
with
the
given
message
and
IOException
:end
:start
Strategy
interface
used
by
the
RestTemplate
to
determine
whether
a
particular
response
has
an
error
or
not
:end
:start
Indicates
whether
the
given
response
has
any
errors
Implementations
will
typically
inspect
the
ClientHttpResponse#getStatusCode()
HttpStatus
of
the
response
:end
:start
Handles
the
error
in
the
given
response
This
method
is
only
called
when
#hasError(ClientHttpResponse)
has
returned
true
:end
:start
Generic
callback
interface
used
by
RestTemplate's
retrieval
methods
Implementations
of
this
interface
perform
the
actual
work
of
extracting
data
from
a
ClientHttpResponse,
but
don't
need
to
worry
about
exception
handling
or
closing
resources
<p>Used
internally
by
the
RestTemplate,
but
also
useful
for
application
code
:end
:start
Extract
data
from
the
given
ClientHttpResponse
and
return
it
:end
:start
Base
class
for
exceptions
thrown
by
RestTemplate
whenever
it
encounters
client-side
HTTP
errors
:end
:start
Construct
a
new
instance
of
HttpClientException
with
the
given
message
:end
:start
Construct
a
new
instance
of
HttpClientException
with
the
given
message
and
exception
:end
:start
Interface
specifying
a
basic
set
of
RESTful
operations
Implemented
by
RestTemplate
Not
often
used
directly,
but
a
useful
option
to
enhance
testability,
as
it
can
easily
be
mocked
or
stubbed
:end
:start
Retrieve
a
representation
by
doing
a
GET
on
the
specified
URL
The
response
(if
any)
is
converted
and
returned
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Retrieve
a
representation
by
doing
a
GET
on
the
URI
template
The
response
(if
any)
is
converted
and
returned
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Retrieve
a
representation
by
doing
a
GET
on
the
URL

The
response
(if
any)
is
converted
and
returned
:end
:start
Retrieve
an
entity
by
doing
a
GET
on
the
specified
URL
The
response
is
converted
and
stored
in
an
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Retrieve
a
representation
by
doing
a
GET
on
the
URI
template
The
response
is
converted
and
stored
in
an
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Retrieve
a
representation
by
doing
a
GET
on
the
URL

The
response
is
converted
and
stored
in
an
ResponseEntity
:end
:start
Retrieve
all
headers
of
the
resource
specified
by
the
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Retrieve
all
headers
of
the
resource
specified
by
the
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Retrieve
all
headers
of
the
resource
specified
by
the
URL
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
<p>URI
Template
variables
are
expanded
using
the
given
map
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URL,
and
returns
the
value
of
the
Location
header
This
header
typically
indicates
where
the
new
resource
is
stored
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
representation
found
in
the
response
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
representation
found
in
the
response
<p>URI
Template
variables
are
expanded
using
the
given
map
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URL,
and
returns
the
representation
found
in
the
response
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URI
template,
and
returns
the
response
as
HttpEntity
<p>URI
Template
variables
are
expanded
using
the
given
map
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
a
new
resource
by
POSTing
the
given
object
to
the
URL,
and
returns
the
response
as
ResponseEntity
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Create
or
update
a
resource
by
PUTting
the
given
object
to
the
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Creates
a
new
resource
by
PUTting
the
given
object
to
URI
template
<p>URI
Template
variables
are
expanded
using
the
given
map
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Creates
a
new
resource
by
PUTting
the
given
object
to
URL
<p>The
request
parameter
can
be
a
HttpEntity
in
order
to
add
additional
HTTP
headers
to
the
request
:end
:start
Delete
the
resources
at
the
specified
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Delete
the
resources
at
the
specified
URI
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Delete
the
resources
at
the
specified
URL
:end
:start
Return
the
value
of
the
Allow
header
for
the
given
URI
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Return
the
value
of
the
Allow
header
for
the
given
URI
<p>URI
Template
variables
are
expanded
using
the
given
map
:end
:start
Return
the
value
of
the
Allow
header
for
the
given
URL
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
writing
the
given
request
entity
to
the
request,
and
returns
the
response
as
ResponseEntity
The
given
ParameterizedTypeReference
is
used
to
pass
generic
type
information:
<pre
class="code">
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;
myBean
=
new
ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;()
ResponseEntity&lt;List&lt;MyBean&gt;&gt;
response
=
templateexchange(&quot;http://examplecom&quot;,HttpMethodGET,
null,
myBean);
</pre>
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
preparing
the
request
with
the
RequestCallback,
and
reading
the
response
with
a
ResponseExtractor
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables,
if
any
:end
:start
Execute
the
HTTP
method
to
the
given
URI
template,
preparing
the
request
with
the
RequestCallback,
and
reading
the
response
with
a
ResponseExtractor
<p>URI
Template
variables
are
expanded
using
the
given
URI
variables
map
:end
:start
Execute
the
HTTP
method
to
the
given
URL,
preparing
the
request
with
the
RequestCallback,
and
reading
the
response
with
a
ResponseExtractor
:end
:start
<strong>Spring's
central
class
for
synchronous
client-side
HTTP
access</strong>
It
simplifies
communication
with
HTTP
servers,
and
enforces
RESTful
principles
It
handles
HTTP
connections,
leaving
application
code
to
provide
URLs
(with
possible
template
variables)
and
extract
results
<p>The
main
entry
points
of
this
template
are
the
methods
named
after
the
six
main
HTTP
methods:
<table>
<tr><th>HTTP
method</th><th>RestTemplate
methods</th></tr>
<tr><td>DELETE</td><td>{@link
#delete</td></tr>
<tr><td>GET</td><td>{@link
#getForObject</td></tr>
<tr><td></td><td>{@link
#getForEntity</td></tr>
<tr><td>HEAD</td><td>{@link
#headForHeaders</td></tr>
<tr><td>OPTIONS</td><td>{@link
#optionsForAllow</td></tr>
<tr><td>POST</td><td>{@link
#postForLocation</td></tr>
<tr><td></td><td>{@link
#postForObject</td></tr>
<tr><td>PUT</td><td>{@link
#put</td></tr>
<tr><td>any</td><td>{@link
#exchange</td></tr>
<tr><td></td><td>{@link
#execute</td></tr>
</table>
<p>The
exchange
and
execute
methods
are
generalized
versions
of
the
more
specific
methods
listed
above
them
They
support
additional,
less
frequently
used
combinations
including
support
for
requests
using
the
HTTP
PATCH
method
However,
note
that
the
underlying
HTTP
library
must
also
support
the
desired
combination
<p>For
each
of
these
HTTP
methods,
there
are
three
corresponding
Java
methods
in
the
RestTemplate
Two
variants
take
a
String
URI
as
first
argument
(eg
#getForObject(String,
Class,
Object[]),
#getForObject(String,
Class,
Map)),
and
are
capable
of
substituting
any
UriTemplate
URI
templates
in
that
URL
using
either
a
String
variable
arguments
array,
or
a
Map<String,
String>
The
string
varargs
variant
expands
the
given
template
variables
in
order,
so
that
<pre
class="code">
String
result
=
restTemplategetForObject("http://examplecom/hotels/{hotel/bookings/{booking",
Stringclass,
"42",
"21");
</pre>
will
perform
a
GET
on
http://examplecom/hotels/42/bookings/21
The
map
variant
expands
the
template
based
on
variable
name,
and
is
therefore
more
useful
when
using
many
variables,
or
when
a
single
variable
is
used
multiple
times
For
example:
<pre
class="code">
Map&lt;String,
String&gt;
vars
=
CollectionssingletonMap("hotel",
"42");
String
result
=
restTemplategetForObject("http://examplecom/hotels/{hotel/rooms/{hotel",
Stringclass,
vars);
</pre>
will
perform
a
GET
on
http://examplecom/hotels/42/rooms/42
Alternatively,
there
are
URI
variant
methods
({@link
#getForObject(URI,
Class)),
which
do
not
allow
for
URI
templates,
but
allow
you
to
reuse
a
single,
expanded
URI
multiple
times
<p>Furthermore,
the
String-argument
methods
assume
that
the
URL
String
is
unencoded
This
means
that
<pre
class="code">
restTemplategetForObject("http://examplecom/hotel
list");
</pre>
will
perform
a
GET
on
http://examplecom/hotel%20list
As
a
result,
any
URL
passed
that
is
already
encoded
will
be
encoded
twice
(ie
http://examplecom/hotel%20list
will
become
http://examplecom/hotel%2520list)
If
this
behavior
is
undesirable,
use
the
URI-argument
methods,
which
will
not
perform
any
URL
encoding
<p>Objects
passed
to
and
returned
from
these
methods
are
converted
to
and
from
HTTP
messages
by
HttpMessageConverter
instances
Converters
for
the
main
mime
types
are
registered
by
default,
but
you
can
also
write
your
own
converter
and
register
it
via
the
#setMessageConverters
messageConverters
bean
property
<p>This
template
uses
a
orgspringframeworkhttpclientSimpleClientHttpRequestFactory
and
a
DefaultResponseErrorHandler
as
default
strategies
for
creating
HTTP
connections
or
handling
HTTP
errors,
respectively
These
defaults
can
be
overridden
through
the
#setRequestFactory(ClientHttpRequestFactory)
requestFactory
and
#setErrorHandler(ResponseErrorHandler)
errorHandler
bean
properties
:end
:start
Create
a
new
instance
of
the
RestTemplate
using
default
settings
Default
HttpMessageConverters
are
initialized
:end
:start
Create
a
new
instance
of
the
RestTemplate
based
on
the
given
ClientHttpRequestFactory
:end
:start
Create
a
new
instance
of
the
RestTemplate
using
the
given
list
of
HttpMessageConverter
to
use
:end
:start
Set
the
message
body
converters
to
use
<p>These
converters
are
used
to
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Return
the
message
body
converters
:end
:start
Set
the
error
handler
<p>By
default,
RestTemplate
uses
a
DefaultResponseErrorHandler
:end
:start
Return
the
error
handler
:end
:start
Execute
the
given
method
on
the
provided
URI
<p>The
ClientHttpRequest
is
processed
using
the
RequestCallback;
the
response
with
the
ResponseExtractor
:end
:start
Returns
a
request
callback
implementation
that
prepares
the
request
Accept
headers
based
on
the
given
response
type
and
configured
#getMessageConverters()
message
converters
:end
:start
Returns
a
request
callback
implementation
that
writes
the
given
object
to
the
request
stream
:end
:start
Returns
a
request
callback
implementation
that
writes
the
given
object
to
the
request
stream
:end
:start
Returns
a
response
extractor
for
ResponseEntity
:end
:start
Returns
a
response
extractor
for
HttpHeaders
:end
:start
Convenient
super
class
for
application
classes
that
need
REST
access
<p>Requires
a
ClientHttpRequestFactory
or
a
RestTemplate
instance
to
be
set
:end
:start
Logger
available
to
subclasses
:end
:start
Construct
a
new
instance
of
the
RestGatewaySupport,
with
default
parameters
:end
:start
Construct
a
new
instance
of
the
RestGatewaySupport,
with
the
given
ClientHttpRequestFactory
:end
:start
Sets
the
RestTemplate
for
the
gateway
:end
:start
Returns
the
RestTemplate
for
the
gateway
:end
:start
Exception
thrown
when
an
unknown
(or
custom)
HTTP
status
code
is
received
:end
:start
Construct
a
new
instance
of
HttpStatusCodeException
based
on
an
HttpStatus,
status
text,
and
response
body
content
:end
:start
Return
the
raw
HTTP
status
code
value
:end
:start
Return
the
HTTP
status
text
:end
:start
Return
the
HTTP
response
headers
:end
:start
Return
the
response
body
as
a
byte
array
:end
:start
Return
the
response
body
as
a
string
:end
:start
Convenient
base
class
for
WebApplicationInitializer
implementations
that
register
a
ContextLoaderListener
in
the
servlet
context
<p>The
only
method
required
to
be
implemented
by
subclasses
is
#createRootApplicationContext(),
which
gets
invoked
from
#registerContextLoaderListener(ServletContext)
:end
:start
Logger
available
to
subclasses
:end
:start
Register
a
ContextLoaderListener
against
the
given
servlet
context
The
ContextLoaderListener
is
initialized
with
the
application
context
returned
from
the
#createRootApplicationContext()
template
method
:end
:start
Create
the
"<strong>root</strong>"
application
context
to
be
provided
to
the
ContextLoaderListener
<p>The
returned
context
is
delegated
to
ContextLoaderListener#ContextLoaderListener(WebApplicationContext)
and
will
be
established
as
the
parent
context
for
any
DispatcherServlet
application
contexts
As
such,
it
typically
contains
middle-tier
services,
data
sources,
etc
:end
:start
Interface
to
be
implemented
by
configurable
web
application
contexts
Supported
by
ContextLoader
and
orgspringframeworkwebservletFrameworkServlet
<p>Note:
The
setters
of
this
interface
need
to
be
called
before
an
invocation
of
the
#refresh
method
inherited
from
orgspringframeworkcontextConfigurableApplicationContext
They
do
not
cause
an
initialization
of
the
context
on
their
own
:end
:start
Prefix
for
ApplicationContext
ids
that
refer
to
context
path
and/or
servlet
name
:end
:start
Name
of
the
ServletConfig
environment
bean
in
the
factory
:end
:start
Set
the
ServletContext
for
this
web
application
context
<p>Does
not
cause
an
initialization
of
the
context:
refresh
needs
to
be
called
after
the
setting
of
all
configuration
properties
:end
:start
Set
the
ServletConfig
for
this
web
application
context
Only
called
for
a
WebApplicationContext
that
belongs
to
a
specific
Servlet
:end
:start
Return
the
ServletConfig
for
this
web
application
context,
if
any
:end
:start
Set
the
namespace
for
this
web
application
context,
to
be
used
for
building
a
default
context
config
location
The
root
web
application
context
does
not
have
a
namespace
:end
:start
Return
the
namespace
for
this
web
application
context,
if
any
:end
:start
Set
the
config
locations
for
this
web
application
context
in
init-param
style,
ie
with
distinct
locations
separated
by
commas,
semicolons
or
whitespace
<p>If
not
set,
the
implementation
is
supposed
to
use
a
default
for
the
given
namespace
or
the
root
web
application
context,
as
appropriate
:end
:start
Set
the
config
locations
for
this
web
application
context
<p>If
not
set,
the
implementation
is
supposed
to
use
a
default
for
the
given
namespace
or
the
root
web
application
context,
as
appropriate
:end
:start
Return
the
config
locations
for
this
web
application
context,
or
null
if
none
specified
:end
:start
Specialization
of
ConfigurableEnvironment
allowing
initialization
of
servlet-related
orgspringframeworkcoreenvPropertySource
objects
at
the
earliest
moment
that
the
ServletContext
and
(optionally)
ServletConfig
become
available
:end
:start
Replace
any
orgspringframeworkcoreenvPropertySourceStubPropertySource
stub
property
source
instances
acting
as
placeholders
with
real
servlet
context/config
property
sources
using
the
given
parameters
:end
:start
Web
application
listener
that
cleans
up
remaining
disposable
attributes
in
the
ServletContext,
ie
attributes
which
implement
DisposableBean
and
haven't
been
removed
before
This
is
typically
used
for
destroying
objects
in
"application"
scope,
for
which
the
lifecycle
implies
destruction
at
the
very
end
of
the
web
application's
shutdown
phase
:end
:start
Performs
the
actual
initialization
work
for
the
root
application
context
Called
by
ContextLoaderListener
<p>Looks
for
a
#CONTEXT_CLASS_PARAM
"contextClass"
parameter
at
the
webxml
context-param
level
to
specify
the
context
class
type,
falling
back
to
the
default
of
orgspringframeworkwebcontextsupportXmlWebApplicationContext
if
not
found
With
the
default
ContextLoader
implementation,
any
context
class
specified
needs
to
implement
the
ConfigurableWebApplicationContext
interface
<p>Processes
a
#CONFIG_LOCATION_PARAM
"contextConfigLocation"
context-param
and
passes
its
value
to
the
context
instance,
parsing
it
into
potentially
multiple
file
paths
which
can
be
separated
by
any
number
of
commas
and
spaces,
eg
"WEB-INF/applicationContext1xml,
WEB-INF/applicationContext2xml"
Ant-style
path
patterns
are
supported
as
well,
eg
"WEB-INF/*Contextxml,WEB-INF/spring*xml"
or
"WEB-INF/&#42;&#42;/*Contextxml"
If
not
explicitly
specified,
the
context
implementation
is
supposed
to
use
a
default
location
(with
XmlWebApplicationContext:
"/WEB-INF/applicationContextxml")
<p>Note:
In
case
of
multiple
config
locations,
later
bean
definitions
will
override
ones
defined
in
previously
loaded
files,
at
least
when
using
one
of
Spring's
default
ApplicationContext
implementations
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
XML
file
<p>Above
and
beyond
loading
the
root
application
context,
this
class
can
optionally
load
or
obtain
and
hook
up
a
shared
parent
context
to
the
root
application
context
See
the
#loadParentContext(ServletContext)
method
for
more
information
<p>As
of
Spring
31,
ContextLoader
supports
injecting
the
root
web
application
context
via
the
#ContextLoader(WebApplicationContext)
constructor,
allowing
for
programmatic
configuration
in
Servlet
30+
environments
See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
:end
:start
Config
param
for
the
root
WebApplicationContext
id,
to
be
used
as
serialization
id
for
the
underlying
BeanFactory:
:end
:start
Name
of
servlet
context
parameter
(ie,
that
can
specify
the
config
location
for
the
root
context,
falling
back
to
the
implementation's
default
otherwise
:end
:start
Config
param
for
the
root
WebApplicationContext
implementation
class
to
use:
:end
:start
Config
param
for
ApplicationContextInitializer
classes
to
use
for
initializing
the
root
web
application
context:
:end
:start
Config
param
for
global
ApplicationContextInitializer
classes
to
use
for
initializing
all
web
application
contexts
in
the
current
application:
:end
:start
Optional
servlet
context
parameter
(ie,
"{@code
locatorFactorySelector")
used
only
when
obtaining
a
parent
context
using
the
default
implementation
of
#loadParentContext(ServletContext
servletContext)
Specifies
the
'selector'
used
in
the
ContextSingletonBeanFactoryLocator#getInstance(String
selector)
method
call,
which
is
used
to
obtain
the
BeanFactoryLocator
instance
from
which
the
parent
context
is
obtained
<p>The
default
is
classpath*:beanRefContextxml,
matching
the
default
applied
for
the
ContextSingletonBeanFactoryLocator#getInstance()
method
Supplying
the
"parentContextKey"
parameter
is
sufficient
in
this
case
:end
:start
Optional
servlet
context
parameter
(ie,
"{@code
parentContextKey")
used
only
when
obtaining
a
parent
context
using
the
default
implementation
of
#loadParentContext(ServletContext
servletContext)
Specifies
the
'factoryKey'
used
in
the
BeanFactoryLocator#useBeanFactory(String
factoryKey)
method
call,
obtaining
the
parent
application
context
from
the
BeanFactoryLocator
instance
<p>Supplying
this
"parentContextKey"
parameter
is
sufficient
when
relying
on
the
default
classpath*:beanRefContextxml
selector
for
candidate
factory
references
:end
:start
Create
a
new
ContextLoader
that
will
create
a
web
application
context
based
on
the
"contextClass"
and
"contextConfigLocation"
servlet
context-params
See
class-level
documentation
for
details
on
default
values
for
each
<p>This
constructor
is
typically
used
when
declaring
the
ContextLoaderListener
subclass
as
a
<listener>
within
webxml,
as
a
no-arg
constructor
is
required
<p>The
created
application
context
will
be
registered
into
the
ServletContext
under
the
attribute
name
WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
and
subclasses
are
free
to
call
the
#closeWebApplicationContext
method
on
container
shutdown
to
close
the
application
context
:end
:start
Create
a
new
ContextLoader
with
the
given
application
context
This
constructor
is
useful
in
Servlet
30+
environments
where
instance-based
registration
of
listeners
is
possible
through
the
ServletContext#addListener
API
<p>The
context
may
or
may
not
yet
be
ConfigurableApplicationContext#refresh()
refreshed
If
it
(a)
is
an
implementation
of
ConfigurableWebApplicationContext
and
(b)
has
<strong>not</strong>
already
been
refreshed
(the
recommended
approach),
then
the
following
will
occur:
<ul>
<li>If
the
given
context
has
not
already
been
assigned
an
ConfigurableApplicationContext#setId
id,
one
will
be
assigned
to
it</li>
<li>{@code
ServletContext
and
ServletConfig
objects
will
be
delegated
to
the
application
context</li>
<li>{@link
#customizeContext
will
be
called</li>
<li>Any
ApplicationContextInitializers
specified
through
the
"contextInitializerClasses"
init-param
will
be
applied</li>
<li>{@link
ConfigurableApplicationContext#refresh
refresh()
will
be
called</li>
</ul>
If
the
context
has
already
been
refreshed
or
does
not
implement
ConfigurableWebApplicationContext,
none
of
the
above
will
occur
under
the
assumption
that
the
user
has
performed
these
actions
(or
not)
per
his
or
her
specific
needs
<p>See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
<p>In
any
case,
the
given
application
context
will
be
registered
into
the
ServletContext
under
the
attribute
name
WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
and
subclasses
are
free
to
call
the
#closeWebApplicationContext
method
on
container
shutdown
to
close
the
application
context
:end
:start
Initialize
Spring's
web
application
context
for
the
given
servlet
context,
using
the
application
context
provided
at
construction
time,
or
creating
a
new
one
according
to
the
"{@link
#CONTEXT_CLASS_PARAM
contextClass"
and
"{@link
#CONFIG_LOCATION_PARAM
contextConfigLocation"
context-params
:end
:start
Instantiate
the
root
WebApplicationContext
for
this
loader,
either
the
default
context
class
or
a
custom
context
class
if
specified
<p>This
implementation
expects
custom
contexts
to
implement
the
ConfigurableWebApplicationContext
interface
Can
be
overridden
in
subclasses
<p>In
addition,
#customizeContext
gets
called
prior
to
refreshing
the
context,
allowing
subclasses
to
perform
custom
modifications
to
the
context
:end
:start
Customize
the
ConfigurableWebApplicationContext
created
by
this
ContextLoader
after
config
locations
have
been
supplied
to
the
context
but
before
the
context
is
<em>refreshed</em>
<p>The
default
implementation
#determineContextInitializerClasses(ServletContext)
determines
what
(if
any)
context
initializer
classes
have
been
specified
through
#CONTEXT_INITIALIZER_CLASSES_PARAM
context
init
parameters
and
ApplicationContextInitializer#initialize
invokes
each
with
the
given
web
application
context
<p>Any
ApplicationContextInitializers
implementing
orgspringframeworkcoreOrdered
Ordered
or
marked
with
@{@link
orgspringframeworkcoreannotationOrder
Order
will
be
sorted
appropriately
:end
:start
Return
the
WebApplicationContext
implementation
class
to
use,
either
the
default
XmlWebApplicationContext
or
a
custom
context
class
if
specified
:end
:start
Return
the
ApplicationContextInitializer
implementation
classes
to
use
if
any
have
been
specified
by
#CONTEXT_INITIALIZER_CLASSES_PARAM
:end
:start
Template
method
with
default
implementation
(which
may
be
overridden
by
a
subclass),
to
load
or
obtain
an
ApplicationContext
instance
which
will
be
used
as
the
parent
context
of
the
root
WebApplicationContext
If
the
return
value
from
the
method
is
null,
no
parent
context
is
set
<p>The
main
reason
to
load
a
parent
context
here
is
to
allow
multiple
root
web
application
contexts
to
all
be
children
of
a
shared
EAR
context,
or
alternately
to
also
share
the
same
parent
context
that
is
visible
to
EJBs
For
pure
web
applications,
there
is
usually
no
need
to
worry
about
having
a
parent
context
to
the
root
web
application
context
<p>The
default
implementation
uses
orgspringframeworkcontextaccessContextSingletonBeanFactoryLocator,
configured
via
#LOCATOR_FACTORY_SELECTOR_PARAM
and
#LOCATOR_FACTORY_KEY_PARAM,
to
load
a
parent
context
which
will
be
shared
by
all
other
users
of
ContextsingletonBeanFactoryLocator
which
also
use
the
same
configuration
parameters
:end
:start
Close
Spring's
web
application
context
for
the
given
servlet
context
If
the
default
#loadParentContext(ServletContext)
implementation,
which
uses
ContextSingletonBeanFactoryLocator,
has
loaded
any
shared
parent
context,
release
one
reference
to
that
shared
parent
context
<p>If
overriding
#loadParentContext(ServletContext),
you
may
have
to
override
this
method
as
well
:end
:start
Obtain
the
Spring
root
web
application
context
for
the
current
thread
(ie
for
the
current
thread's
context
ClassLoader,
which
needs
to
be
the
web
application's
ClassLoader)
:end
:start
Bootstrap
listener
to
start
up
and
shut
down
Spring's
root
WebApplicationContext
Simply
delegates
to
ContextLoader
as
well
as
to
ContextCleanupListener
<p>This
listener
should
be
registered
after
orgspringframeworkwebutilLog4jConfigListener
in
webxml,
if
the
latter
is
used
<p>As
of
Spring
31,
ContextLoaderListener
supports
injecting
the
root
web
application
context
via
the
#ContextLoaderListener(WebApplicationContext)
constructor,
allowing
for
programmatic
configuration
in
Servlet
30+
environments
See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
:end
:start
Create
a
new
ContextLoaderListener
that
will
create
a
web
application
context
based
on
the
"contextClass"
and
"contextConfigLocation"
servlet
context-params
See
ContextLoader
superclass
documentation
for
details
on
default
values
for
each
<p>This
constructor
is
typically
used
when
declaring
ContextLoaderListener
as
a
<listener>
within
webxml,
where
a
no-arg
constructor
is
required
<p>The
created
application
context
will
be
registered
into
the
ServletContext
under
the
attribute
name
WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
and
the
Spring
application
context
will
be
closed
when
the
#contextDestroyed
lifecycle
method
is
invoked
on
this
listener
:end
:start
Create
a
new
ContextLoaderListener
with
the
given
application
context
This
constructor
is
useful
in
Servlet
30+
environments
where
instance-based
registration
of
listeners
is
possible
through
the
javaxservletServletContext#addListener
API
<p>The
context
may
or
may
not
yet
be
orgspringframeworkcontextConfigurableApplicationContext#refresh()
refreshed
If
it
(a)
is
an
implementation
of
ConfigurableWebApplicationContext
and
(b)
has
<strong>not</strong>
already
been
refreshed
(the
recommended
approach),
then
the
following
will
occur:
<ul>
<li>If
the
given
context
has
not
already
been
assigned
an
orgspringframeworkcontextConfigurableApplicationContext#setId
id,
one
will
be
assigned
to
it</li>
<li>{@code
ServletContext
and
ServletConfig
objects
will
be
delegated
to
the
application
context</li>
<li>{@link
#customizeContext
will
be
called</li>
<li>Any
orgspringframeworkcontextApplicationContextInitializer
ApplicationContextInitializers
specified
through
the
"contextInitializerClasses"
init-param
will
be
applied</li>
<li>{@link
orgspringframeworkcontextConfigurableApplicationContext#refresh
refresh()
will
be
called</li>
</ul>
If
the
context
has
already
been
refreshed
or
does
not
implement
ConfigurableWebApplicationContext,
none
of
the
above
will
occur
under
the
assumption
that
the
user
has
performed
these
actions
(or
not)
per
his
or
her
specific
needs
<p>See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
<p>In
any
case,
the
given
application
context
will
be
registered
into
the
ServletContext
under
the
attribute
name
WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
and
the
Spring
application
context
will
be
closed
when
the
#contextDestroyed
lifecycle
method
is
invoked
on
this
listener
:end
:start
Initialize
the
root
web
application
context
:end
:start
Close
the
root
web
application
context
:end
:start
Abstract
support
class
for
RequestAttributes
implementations,
offering
a
request
completion
mechanism
for
request-specific
destruction
callbacks
and
for
updating
accessed
session
attributes
:end
:start
Map
from
attribute
name
String
to
destruction
callback
Runnable
:end
:start
Signal
that
the
request
has
been
completed
<p>Executes
all
request
destruction
callbacks
and
updates
the
session
attributes
that
have
been
accessed
during
request
processing
:end
:start
Determine
whether
the
original
request
is
still
active
:end
:start
Register
the
given
callback
as
to
be
executed
after
request
completion
:end
:start
Remove
the
request
destruction
callback
for
the
specified
attribute,
if
any
:end
:start
Update
all
session
attributes
that
have
been
accessed
during
request
processing,
to
expose
their
potentially
updated
state
to
the
underlying
session
manager
:end
:start
Abstract
Scope
implementation
that
reads
from
a
particular
scope
in
the
current
thread-bound
RequestAttributes
object
<p>Subclasses
simply
need
to
implement
#getScope()
to
instruct
this
class
which
RequestAttributes
scope
to
read
attributes
from
<p>Subclasses
may
wish
to
override
the
#get
and
#remove
methods
to
add
synchronization
around
the
call
back
into
this
super
class
:end
:start
Template
method
that
determines
the
actual
target
scope
:end
:start
Extends
NativeWebRequest
with
methods
for
asynchronous
request
processing
:end
:start
Set
the
time
required
for
concurrent
handling
to
complete
This
property
should
not
be
set
when
concurrent
handling
is
in
progress,
ie
when
#isAsyncStarted()
is
true
:end
:start
Add
a
handler
to
invoke
when
concurrent
handling
has
timed
out
:end
:start
Add
a
handle
to
invoke
when
request
processing
completes
:end
:start
Mark
the
start
of
asynchronous
request
processing
so
that
when
the
main
processing
thread
exits,
the
response
remains
open
for
further
processing
in
another
thread
:end
:start
Whether
the
request
is
in
async
mode
following
a
call
to
#startAsync()
Returns
"false"
if
asynchronous
processing
never
started,
has
completed,
or
the
request
was
dispatched
for
further
processing
:end
:start
Dispatch
the
request
to
the
container
in
order
to
resume
processing
after
concurrent
execution
in
an
application
thread
:end
:start
Whether
asynchronous
processing
has
completed
:end
:start
Intercepts
concurrent
request
handling,
where
the
concurrent
result
is
obtained
by
executing
a
Callable
on
behalf
of
the
application
with
an
AsyncTaskExecutor
<p>A
CallableProcessingInterceptor
is
invoked
before
and
after
the
invocation
of
the
Callable
task
in
the
asynchronous
thread,
as
well
as
on
timeout
from
a
container
thread,
or
after
completing
for
any
reason
including
a
timeout
or
network
error
<p>As
a
general
rule
exceptions
raised
by
interceptor
methods
will
cause
async
processing
to
resume
by
dispatching
back
to
the
container
and
using
the
Exception
instance
as
the
concurrent
result
Such
exceptions
will
then
be
processed
through
the
HandlerExceptionResolver
mechanism
<p>The
#handleTimeout(NativeWebRequest,
Callable)
afterTimeout
method
can
select
a
value
to
be
used
to
resume
processing
:end
:start
Invoked
<em>before</em>
the
start
of
concurrent
handling
in
the
original
thread
in
which
the
Callable
is
submitted
for
concurrent
handling
<p>
This
is
useful
for
capturing
the
state
of
the
current
thread
just
prior
to
invoking
the
Callable
Once
the
state
is
captured,
it
can
then
be
transferred
to
the
new
Thread
in
#preProcess(NativeWebRequest,
Callable)
Capturing
the
state
of
Spring
Security's
SecurityContextHolder
and
migrating
it
to
the
new
Thread
is
a
concrete
example
of
where
this
is
useful
</p>
:end
:start
Invoked
<em>after</em>
the
start
of
concurrent
handling
in
the
async
thread
in
which
the
Callable
is
executed
and
<em>before</em>
the
actual
invocation
of
the
Callable
:end
:start
Invoked
<em>after</em>
the
Callable
has
produced
a
result
in
the
async
thread
in
which
the
Callable
is
executed
This
method
may
be
invoked
later
than
afterTimeout
or
afterCompletion
depending
on
when
the
Callable
finishes
processing
:end
:start
Invoked
from
a
container
thread
when
the
async
request
times
out
before
the
Callable
task
completes
Implementations
may
return
a
value,
including
an
Exception,
to
use
instead
of
the
value
the
Callable
did
not
return
in
time
:end
:start
Invoked
from
a
container
thread
when
async
processing
completes
for
any
reason
including
timeout
or
network
error
:end
:start
Abstract
adapter
class
for
the
CallableProcessingInterceptor
interface,
for
simplified
implementation
of
individual
methods
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
always
returns
CallableProcessingInterceptor#RESULT_NONE
RESULT_NONE
:end
:start
This
implementation
is
empty
:end
:start
DeferredResult
provides
an
alternative
to
using
a
Callable
for
asynchronous
request
processing
While
a
Callable
is
executed
concurrently
on
behalf
of
the
application,
with
a
DeferredResult
the
application
can
produce
the
result
from
a
thread
of
its
choice
<p>Subclasses
can
extend
this
class
to
easily
associate
additional
data
or
behavior
with
the
DeferredResult
For
example,
one
might
want
to
associate
the
user
used
to
create
the
DeferredResult
by
extending
the
class
and
adding
an
additional
property
for
the
user
In
this
way,
the
user
could
easily
be
accessed
later
without
the
need
to
use
a
data
structure
to
do
the
mapping
<p>An
example
of
associating
additional
behavior
to
this
class
might
be
realized
by
extending
the
class
to
implement
an
additional
interface
For
example,
one
might
want
to
implement
Comparable
so
that
when
the
DeferredResult
is
added
to
a
PriorityQueue
it
is
handled
in
the
correct
order
:end
:start
Create
a
DeferredResult
:end
:start
Create
a
DeferredResult
with
a
timeout
value
:end
:start
Create
a
DeferredResult
with
a
timeout
value
and
a
default
result
to
use
in
case
of
timeout
:end
:start
Return
true
if
this
DeferredResult
is
no
longer
usable
either
because
it
was
previously
set
or
because
the
underlying
request
expired
<p>
The
result
may
have
been
set
with
a
call
to
#setResult(Object),
or
#setErrorResult(Object),
or
as
a
result
of
a
timeout,
if
a
timeout
result
was
provided
to
the
constructor
The
request
may
also
expire
due
to
a
timeout
or
network
error
:end
:start
Register
code
to
invoke
when
the
async
request
times
out
This
method
is
called
from
a
container
thread
when
an
async
request
times
out
before
the
DeferredResult
has
been
set
It
may
invoke
DeferredResult#setResult(Object)
setResult
or
DeferredResult#setErrorResult(Object)
setErrorResult
to
resume
processing
:end
:start
Register
code
to
invoke
when
the
async
request
completes
This
method
is
called
from
a
container
thread
when
an
async
request
completed
for
any
reason
including
timeout
and
network
error
This
method
is
useful
for
detecting
that
a
DeferredResult
instance
is
no
longer
usable
:end
:start
Provide
a
handler
to
use
to
handle
the
result
value
:end
:start
Set
the
value
for
the
DeferredResult
and
handle
it
:end
:start
Set
an
error
value
for
the
DeferredResult
and
handle
it
The
value
may
be
an
Exception
or
Throwable
in
which
case
it
will
be
processed
as
if
a
handler
raised
the
exception
:end
:start
Handles
a
DeferredResult
value
when
set
:end
:start
Handles
a
DeferredResult
value
when
set
:end
:start
Intercepts
concurrent
request
handling,
where
the
concurrent
result
is
obtained
by
waiting
for
a
DeferredResult
to
be
set
from
a
thread
chosen
by
the
application
(eg
in
response
to
some
external
event)
<p>A
DeferredResultProcessingInterceptor
is
invoked
before
the
start
of
async
processing,
after
the
DeferredResult
is
set
as
well
as
on
timeout,
or
or
after
completing
for
any
reason
including
a
timeout
or
network
error
<p>As
a
general
rule
exceptions
raised
by
interceptor
methods
will
cause
async
processing
to
resume
by
dispatching
back
to
the
container
and
using
the
Exception
instance
as
the
concurrent
result
Such
exceptions
will
then
be
processed
through
the
HandlerExceptionResolver
mechanism
<p>The
#handleTimeout(NativeWebRequest,
DeferredResult)
afterTimeout
method
can
set
the
DeferredResult
in
order
to
resume
processing
:end
:start
Invoked
immediately
before
the
start
of
concurrent
handling,
in
the
same
thread
that
started
it
This
method
may
be
used
to
capture
state
just
prior
to
the
start
of
concurrent
processing
with
the
given
DeferredResult
:end
:start
Invoked
immediately
after
the
start
of
concurrent
handling,
in
the
same
thread
that
started
it
This
method
may
be
used
to
detect
the
start
of
concurrent
processing
with
the
given
DeferredResult
<p>The
DeferredResult
may
have
already
been
set,
for
example
at
the
time
of
its
creation
or
by
another
thread
:end
:start
Invoked
after
a
DeferredResult
has
been
set,
via
DeferredResult#setResult(Object)
or
DeferredResult#setErrorResult(Object),
and
is
also
ready
to
handle
the
concurrent
result
<p>This
method
may
also
be
invoked
after
a
timeout
when
the
DeferredResult
was
created
with
a
constructor
accepting
a
default
timeout
result
:end
:start
Invoked
from
a
container
thread
when
an
async
request
times
out
before
the
DeferredResult
has
been
set
Implementations
may
invoke
DeferredResult#setResult(Object)
setResult
or
DeferredResult#setErrorResult(Object)
setErrorResult
to
resume
processing
:end
:start
Invoked
from
a
container
thread
when
an
async
request
completed
for
any
reason
including
timeout
and
network
error
This
method
is
useful
for
detecting
that
a
DeferredResult
instance
is
no
longer
usable
:end
:start
Abstract
adapter
class
for
the
DeferredResultProcessingInterceptor
interface
for
simplified
implementation
of
individual
methods
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
returns
true
by
default
allowing
other
interceptors
to
be
given
a
chance
to
handle
the
timeout
:end
:start
This
implementation
is
empty
:end
:start
An
AsyncWebRequest
to
use
when
there
is
no
underlying
async
support
:end
:start
A
Servlet
30
implementation
of
AsyncWebRequest
<p>The
servlet
and
all
filters
involved
in
an
async
request
must
have
async
support
enabled
using
the
Servlet
API
or
by
adding
an
<async-support>true</async-support>
element
to
servlet
and
filter
declarations
in
webxml
:end
:start
Create
a
new
instance
for
the
given
request/response
pair
:end
:start
<p>In
Servlet
3
async
processing,
the
timeout
period
begins
after
the
container
processing
thread
has
exited
:end
:start
Whether
async
request
processing
has
completed
<p>It
is
important
to
avoid
use
of
request
and
response
objects
after
async
processing
has
completed
Servlet
containers
often
re-use
them
:end
:start
Sends
a
503
(SERVICE_UNAVAILABLE)
in
case
of
a
timeout
if
the
response
is
not
already
committed
Registered
at
the
end,
after
all
other
interceptors
and
therefore
invoked
only
if
no
other
interceptor
handles
the
timeout
<p>Note
that
according
to
RFC
2616,
a
503
without
a
'Retry-After'
header
is
interpreted
as
a
500
error
and
the
client
should
not
retry
Applications
can
install
their
own
interceptor
to
handle
a
timeout
and
add
a
'Retry-After'
header
if
necessary
:end
:start
Sends
a
503
(SERVICE_UNAVAILABLE)
in
case
of
a
timeout
if
the
response
is
not
already
committed
Registered
at
the
end,
after
all
other
interceptors
and
therefore
invoked
only
if
no
other
interceptor
handles
the
timeout
<p>Note
that
according
to
RFC
2616,
a
503
without
a
'Retry-After'
header
is
interpreted
as
a
500
error
and
the
client
should
not
retry
Applications
can
install
their
own
interceptor
to
handle
a
timeout
and
add
a
'Retry-After'
header
if
necessary
:end
:start
The
central
class
for
managing
asynchronous
request
processing,
mainly
intended
as
an
SPI
and
not
typically
used
directly
by
application
classes
<p>An
async
scenario
starts
with
request
processing
as
usual
in
a
thread
(T1)
Concurrent
request
handling
can
be
initiated
by
calling
#startCallableProcessing(Callable,
Object)
startCallableProcessing
or
#startDeferredResultProcessing(DeferredResult,
Object)
startDeferredResultProcessing,
both
of
which
produce
a
result
in
a
separate
thread
(T2)
The
result
is
saved
and
the
request
dispatched
to
the
container,
to
resume
processing
with
the
saved
result
in
a
third
thread
(T3)
Within
the
dispatched
thread
(T3),
the
saved
result
can
be
accessed
via
#getConcurrentResult()
or
its
presence
detected
via
#hasConcurrentResult()
:end
:start
Configure
the
AsyncWebRequest
to
use
This
property
may
be
set
more
than
once
during
a
single
request
to
accurately
reflect
the
current
state
of
the
request
(eg
following
a
forward,
request/response
wrapping,
etc)
However,
it
should
not
be
set
while
concurrent
handling
is
in
progress,
ie
while
#isConcurrentHandlingStarted()
is
true
:end
:start
Configure
an
AsyncTaskExecutor
for
use
with
concurrent
processing
via
#startCallableProcessing(Callable,
Object)
<p>By
default
a
SimpleAsyncTaskExecutor
instance
is
used
:end
:start
Whether
the
selected
handler
for
the
current
request
chose
to
handle
the
request
asynchronously
A
return
value
of
"true"
indicates
concurrent
handling
is
under
way
and
the
response
will
remain
open
A
return
value
of
"false"
means
concurrent
handling
was
either
not
started
or
possibly
that
it
has
completed
and
the
request
was
dispatched
for
further
processing
of
the
concurrent
result
:end
:start
Whether
a
result
value
exists
as
a
result
of
concurrent
handling
:end
:start
Provides
access
to
the
result
from
concurrent
handling
:end
:start
Provides
access
to
additional
processing
context
saved
at
the
start
of
concurrent
handling
:end
:start
Get
the
CallableProcessingInterceptor
registered
under
the
given
key
:end
:start
Get
the
DeferredResultProcessingInterceptor
registered
under
the
given
key
:end
:start
Register
a
CallableProcessingInterceptor
under
the
given
key
:end
:start
Register
a
CallableProcessingInterceptor
without
a
key
The
key
is
derived
from
the
class
name
and
hashcode
:end
:start
Register
a
DeferredResultProcessingInterceptor
under
the
given
key
:end
:start
Register
a
DeferredResultProcessingInterceptor
without
a
key
The
key
is
derived
from
the
class
name
and
hashcode
:end
:start
Clear
#getConcurrentResult()
concurrentResult
and
#getConcurrentResultContext()
concurrentResultContext
:end
:start
Start
concurrent
request
processing
and
execute
the
given
task
with
an
#setTaskExecutor(AsyncTaskExecutor)
AsyncTaskExecutor
The
result
from
the
task
execution
is
saved
and
the
request
dispatched
in
order
to
resume
processing
of
that
result
If
the
task
raises
an
Exception
then
the
saved
result
will
be
the
raised
Exception
:end
:start
Use
the
given
WebAsyncTask
to
configure
the
task
executor
as
well
as
the
timeout
value
of
the
AsyncWebRequest
before
delegating
to
#startCallableProcessing(Callable,
Object)
:end
:start
Start
concurrent
request
processing
and
initialize
the
given
DeferredResult
with
a
DeferredResultHandler
that
saves
the
result
and
dispatches
the
request
to
resume
processing
of
that
result
The
AsyncWebRequest
is
also
updated
with
a
completion
handler
that
expires
the
DeferredResult
and
a
timeout
handler
assuming
the
DeferredResult
has
a
default
timeout
result
:end
:start
Holder
for
a
Callable,
a
timeout
value,
and
a
task
executor
:end
:start
Create
a
WebAsyncTask
wrapping
the
given
Callable
:end
:start
Create
a
WebAsyncTask
with
a
timeout
value
and
a
Callable
:end
:start
Create
a
WebAsyncTask
with
a
timeout
value,
an
executor
name,
and
a
Callable
:end
:start
Create
a
WebAsyncTask
with
a
timeout
value,
an
executor
instance,
and
a
Callable
:end
:start
Return
the
Callable
to
use
for
concurrent
handling,
never
null
:end
:start
Return
the
timeout
value
in
milliseconds
or
null
if
not
value
is
set
:end
:start
Return
the
AsyncTaskExecutor
to
use
for
concurrent
handling,
or
null
:end
:start
A
BeanFactory
to
use
to
resolve
an
executor
name
Applications
are
not
expected
to
have
to
set
this
property
when
WebAsyncTask
is
used
in
a
Spring
MVC
controller
:end
:start
Register
code
to
invoke
when
the
async
request
times
out
This
method
is
called
from
a
container
thread
when
an
async
request
times
out
before
the
Callable
has
completed
The
callback
is
executed
in
the
same
thread
and
therefore
should
return
without
blocking
It
may
return
an
alternative
value
to
use,
including
an
Exception
or
return
CallableProcessingInterceptor#RESULT_NONE
RESULT_NONE
:end
:start
Register
code
to
invoke
when
the
async
request
completes
This
method
is
called
from
a
container
thread
when
an
async
request
completed
for
any
reason
including
timeout
and
network
error
:end
:start
Utility
methods
related
to
processing
asynchronous
web
requests
:end
:start
Obtain
the
WebAsyncManager
for
the
current
request,
or
if
not
found,
create
and
associate
it
with
the
request
:end
:start
Create
an
AsyncWebRequest
instance
By
default
an
instance
of
StandardServletAsyncWebRequest
is
created
if
running
in
Servlet
30
(or
higher)
environment
or
as
a
fallback,
an
instance
of
NoSupportAsyncWebRequest
is
returned
:end
:start
Extends
WebRequestInterceptor
with
a
callback
method
invoked
during
asynchronous
request
handling
<p>When
a
handler
starts
asynchronous
request
handling,
the
DispatcherServlet
exits
without
invoking
postHandle
and
afterCompletion,
as
it
normally
does,
since
the
results
of
request
handling
(eg
ModelAndView)
are
not
available
in
the
current
thread
and
handling
is
not
yet
complete
In
such
scenarios,
the
#afterConcurrentHandlingStarted(WebRequest)
method
is
invoked
instead
allowing
implementations
to
perform
tasks
such
as
cleaning
up
thread
bound
attributes
<p>When
asynchronous
handling
completes,
the
request
is
dispatched
to
the
container
for
further
processing
At
this
stage
the
DispatcherServlet
invokes
preHandle,
postHandle
and
afterCompletion
as
usual
:end
:start
Called
instead
of
postHandle
and
afterCompletion,
when
the
the
handler
started
handling
the
request
concurrently
:end
:start
Adapter
that
implements
the
Servlet
23
HttpSessionBindingListener
interface,
wrapping
a
session
destruction
callback
:end
:start
Create
a
new
DestructionCallbackBindingListener
for
the
given
callback
:end
:start
RequestAttributes
adapter
for
a
JSF
javaxfacescontextFacesContext
Used
as
default
in
a
JSF
environment,
wrapping
the
current
FacesContext
<p><b>NOTE:</b>
In
contrast
to
ServletRequestAttributes,
this
variant
does
<i>not</i>
support
destruction
callbacks
for
scoped
attributes,
neither
for
the
request
scope
nor
for
the
session
scope
If
you
rely
on
such
implicit
destruction
callbacks,
consider
defining
a
Spring
RequestContextListener
in
your
webxml
<p>Requires
JSF
20
or
higher,
as
of
Spring
40
:end
:start
Create
a
new
FacesRequestAttributes
adapter
for
the
given
FacesContext
:end
:start
Return
the
JSF
FacesContext
that
this
adapter
operates
on
:end
:start
Return
the
JSF
ExternalContext
that
this
adapter
operates
on
:end
:start
Return
the
JSF
attribute
Map
for
the
specified
scope
:end
:start
WebRequest
adapter
for
a
JSF
javaxfacescontextFacesContext
<p>Requires
JSF
20
or
higher,
as
of
Spring
40
:end
:start
Create
a
new
FacesWebRequest
adapter
for
the
given
FacesContext
:end
:start
Request
logging
interceptor
that
adds
a
request
context
message
to
the
Log4J
nested
diagnostic
context
(NDC)
before
the
request
is
processed,
removing
it
again
after
the
request
is
processed
:end
:start
Logger
available
to
subclasses
:end
:start
Set
whether
or
not
the
session
id
and
user
name
should
be
included
in
the
log
message
:end
:start
Return
whether
or
not
the
session
id
and
user
name
should
be
included
in
the
log
message
:end
:start
Adds
a
message
the
Log4J
NDC
before
the
request
is
processed
:end
:start
Determine
the
message
to
be
pushed
onto
the
Log4J
nested
diagnostic
context
<p>Default
is
the
request
object's
getDescription
result
:end
:start
Removes
the
log
message
from
the
Log4J
NDC
after
the
request
is
processed
:end
:start
Removes
the
log
message
from
the
Log4J
NDC
when
the
processing
thread
is
exited
after
the
start
of
asynchronous
request
handling
:end
:start
Extension
of
the
WebRequest
interface,
exposing
the
native
request
and
response
objects
in
a
generic
fashion
<p>Mainly
intended
for
framework-internal
usage,
in
particular
for
generic
argument
resolution
code
:end
:start
Return
the
underlying
native
request
object,
if
available
:end
:start
Return
the
underlying
native
response
object,
if
available
:end
:start
Return
the
underlying
native
request
object,
if
available
:end
:start
Return
the
underlying
native
response
object,
if
available
:end
:start
Abstraction
for
accessing
attribute
objects
associated
with
a
request
Supports
access
to
request-scoped
attributes
as
well
as
to
session-scoped
attributes,
with
the
optional
notion
of
a
"global
session"
<p>Can
be
implemented
for
any
kind
of
request/session
mechanism,
in
particular
for
servlet
requests
and
portlet
requests
:end
:start
Constant
that
indicates
request
scope
:end
:start
Constant
that
indicates
session
scope
<p>This
preferably
refers
to
a
locally
isolated
session,
if
such
a
distinction
is
available
(for
example,
in
a
Portlet
environment)
Else,
it
simply
refers
to
the
common
session
:end
:start
Constant
that
indicates
global
session
scope
<p>This
explicitly
refers
to
a
globally
shared
session,
if
such
a
distinction
is
available
(for
example,
in
a
Portlet
environment)
Else,
it
simply
refers
to
the
common
session
:end
:start
Name
of
the
standard
reference
to
the
request
object:
"request"
:end
:start
Name
of
the
standard
reference
to
the
session
object:
"session"
:end
:start
Return
the
value
for
the
scoped
attribute
of
the
given
name,
if
any
:end
:start
Set
the
value
for
the
scoped
attribute
of
the
given
name,
replacing
an
existing
value
(if
any)
:end
:start
Remove
the
scoped
attribute
of
the
given
name,
if
it
exists
<p>Note
that
an
implementation
should
also
remove
a
registered
destruction
callback
for
the
specified
attribute,
if
any
It
does,
however,
<i>not</i>
need
to
<i>execute</i>
a
registered
destruction
callback
in
this
case,
since
the
object
will
be
destroyed
by
the
caller
(if
appropriate)
:end
:start
Retrieve
the
names
of
all
attributes
in
the
scope
:end
:start
Register
a
callback
to
be
executed
on
destruction
of
the
specified
attribute
in
the
given
scope
<p>Implementations
should
do
their
best
to
execute
the
callback
at
the
appropriate
time:
that
is,
at
request
completion
or
session
termination,
respectively
If
such
a
callback
is
not
supported
by
the
underlying
runtime
environment,
the
callback
<i>must
be
ignored</i>
and
a
corresponding
warning
should
be
logged
<p>Note
that
'destruction'
usually
corresponds
to
destruction
of
the
entire
scope,
not
to
the
individual
attribute
having
been
explicitly
removed
by
the
application
If
an
attribute
gets
removed
via
this
facade's
#removeAttribute(String,
int)
method,
any
registered
destruction
callback
should
be
disabled
as
well,
assuming
that
the
removed
object
will
be
reused
or
manually
destroyed
<p><b>NOTE:</b>
Callback
objects
should
generally
be
serializable
if
they
are
being
registered
for
a
session
scope
Otherwise
the
callback
(or
even
the
entire
session)
might
not
survive
web
app
restarts
:end
:start
Resolve
the
contextual
reference
for
the
given
key,
if
any
<p>At
a
minimum:
the
HttpServletRequest/PortletRequest
reference
for
key
"request",
and
the
HttpSession/PortletSession
reference
for
key
"session"
:end
:start
Return
an
id
for
the
current
underlying
session
:end
:start
Expose
the
best
available
mutex
for
the
underlying
session:
that
is,
an
object
to
synchronize
on
for
the
underlying
session
:end
:start
Holder
class
to
expose
the
web
request
in
the
form
of
a
thread-bound
RequestAttributes
object
The
request
will
be
inherited
by
any
child
threads
spawned
by
the
current
thread
if
the
inheritable
flag
is
set
to
true
<p>Use
RequestContextListener
or
orgspringframeworkwebfilterRequestContextFilter
to
expose
the
current
web
request
Note
that
orgspringframeworkwebservletDispatcherServlet
and
orgspringframeworkwebportletDispatcherPortlet
already
expose
the
current
request
by
default
:end
:start
Reset
the
RequestAttributes
for
the
current
thread
:end
:start
Bind
the
given
RequestAttributes
to
the
current
thread,
<i>not</i>
exposing
it
as
inheritable
for
child
threads
:end
:start
Bind
the
given
RequestAttributes
to
the
current
thread
:end
:start
Return
the
RequestAttributes
currently
bound
to
the
thread
:end
:start
Return
the
RequestAttributes
currently
bound
to
the
thread
<p>Exposes
the
previously
bound
RequestAttributes
instance,
if
any
Falls
back
to
the
current
JSF
FacesContext,
if
any
:end
:start
Servlet
24+
listener
that
exposes
the
request
to
the
current
thread,
through
both
orgspringframeworkcontexti18nLocaleContextHolder
and
RequestContextHolder
To
be
registered
as
listener
in
webxml
<p>Alternatively,
Spring's
orgspringframeworkwebfilterRequestContextFilter
and
Spring's
orgspringframeworkwebservletDispatcherServlet
also
expose
the
same
request
context
to
the
current
thread
In
contrast
to
this
listener,
advanced
options
are
available
there
(eg
"threadContextInheritable")
<p>This
listener
is
mainly
for
use
with
third-party
servlets,
eg
the
JSF
FacesServlet
Within
Spring's
own
web
support,
DispatcherServlet's
processing
is
perfectly
sufficient
:end
:start
Request-backed
orgspringframeworkbeansfactoryconfigScope
implementation
<p>Relies
on
a
thread-bound
RequestAttributes
instance,
which
can
be
exported
through
RequestContextListener,
orgspringframeworkwebfilterRequestContextFilter
or
orgspringframeworkwebservletDispatcherServlet
<p>This
Scope
will
also
work
for
Portlet
environments,
through
an
alternate
RequestAttributes
implementation
(as
exposed
out-of-the-box
by
Spring's
orgspringframeworkwebportletDispatcherPortlet
:end
:start
There
is
no
conversation
id
concept
for
a
request,
so
this
method
returns
null
:end
:start
Servlet-based
implementation
of
the
RequestAttributes
interface
<p>Accesses
objects
from
servlet
request
and
HTTP
session
scope,
with
no
distinction
between
"session"
and
"global
session"
:end
:start
Constant
identifying
the
String
prefixed
to
the
name
of
a
destruction
callback
when
it
is
stored
in
a
HttpSession
:end
:start
Create
a
new
ServletRequestAttributes
instance
for
the
given
request
:end
:start
Exposes
the
native
HttpServletRequest
that
we're
wrapping
:end
:start
Exposes
the
HttpSession
that
we're
wrapping
:end
:start
Update
all
accessed
session
attributes
through
sessionsetAttribute
calls,
explicitly
indicating
to
the
container
that
they
might
have
been
modified
:end
:start
Register
the
given
callback
as
to
be
executed
after
session
termination
<p>Note:
The
callback
object
should
be
serializable
in
order
to
survive
web
app
restarts
:end
:start
WebRequest
adapter
for
an
javaxservlethttpHttpServletRequest
:end
:start
Create
a
new
ServletWebRequest
instance
for
the
given
request
:end
:start
Create
a
new
ServletWebRequest
instance
for
the
given
request/response
pair
:end
:start
Exposes
the
native
HttpServletRequest
that
we're
wrapping
(if
any)
:end
:start
Return
the
HTTP
method
of
the
request
:end
:start
Session-backed
orgspringframeworkbeansfactoryconfigScope
implementation
<p>Relies
on
a
thread-bound
RequestAttributes
instance,
which
can
be
exported
through
RequestContextListener,
orgspringframeworkwebfilterRequestContextFilter
or
orgspringframeworkwebservletDispatcherServlet
<p>This
Scope
will
also
work
for
Portlet
environments,
through
an
alternate
RequestAttributes
implementation
(as
exposed
out-of-the-box
by
Spring's
orgspringframeworkwebportletDispatcherPortlet
:end
:start
Create
a
new
SessionScope,
storing
attributes
in
a
locally
isolated
session
(or
default
session,
if
there
is
no
distinction
between
a
global
session
and
a
component-specific
session)
:end
:start
Create
a
new
SessionScope,
specifying
whether
to
store
attributes
in
the
global
session,
provided
that
such
a
distinction
is
available
<p>This
distinction
is
important
for
Portlet
environments,
where
there
are
two
notions
of
a
session:
"portlet
scope"
and
"application
scope"
If
this
flag
is
on,
objects
will
be
put
into
the
"application
scope"
session;
else
they
will
end
up
in
the
"portlet
scope"
session
(the
typical
default)
<p>In
a
Servlet
environment,
this
flag
is
effectively
ignored
:end
:start
Generic
interface
for
a
web
request
Mainly
intended
for
generic
web
request
interceptors,
giving
them
access
to
general
request
metadata,
not
for
actual
handling
of
the
request
:end
:start
Return
the
request
header
of
the
given
name,
or
null
if
none
<p>Retrieves
the
first
header
value
in
case
of
a
multi-value
header
:end
:start
Return
the
request
header
values
for
the
given
header
name,
or
null
if
none
<p>A
single-value
header
will
be
exposed
as
an
array
with
a
single
element
:end
:start
Return
a
Iterator
over
request
header
names
:end
:start
Return
the
request
parameter
of
the
given
name,
or
null
if
none
<p>Retrieves
the
first
parameter
value
in
case
of
a
multi-value
parameter
:end
:start
Return
the
request
parameter
values
for
the
given
parameter
name,
or
null
if
none
<p>A
single-value
parameter
will
be
exposed
as
an
array
with
a
single
element
:end
:start
Return
a
Iterator
over
request
parameter
names
:end
:start
Return
a
immutable
Map
of
the
request
parameters,
with
parameter
names
as
map
keys
and
parameter
values
as
map
values
The
map
values
will
be
of
type
String
array
<p>A
single-value
parameter
will
be
exposed
as
an
array
with
a
single
element
:end
:start
Return
the
primary
Locale
for
this
request
:end
:start
Return
the
context
path
for
this
request
(usually
the
base
path
that
the
current
web
application
is
mapped
to)
:end
:start
Return
the
remote
user
for
this
request,
if
any
:end
:start
Return
the
user
principal
for
this
request,
if
any
:end
:start
Determine
whether
the
user
is
in
the
given
role
for
this
request
:end
:start
Return
whether
this
request
has
been
sent
over
a
secure
transport
mechanism
(such
as
SSL)
:end
:start
Check
whether
the
request
qualifies
as
not
modified
given
the
supplied
last-modified
timestamp
(as
determined
by
the
application)
<p>This
will
also
transparently
set
the
appropriate
response
headers,
for
both
the
modified
case
and
the
not-modified
case
<p>Typical
usage:
<pre
class="code">
public
String
myHandleMethod(WebRequest
webRequest,
Model
model)
long
lastModified
=
//
application-specific
calculation
if
(requestcheckNotModified(lastModified))
//
shortcut
exit
-
no
further
processing
necessary
return
null;

//
further
request
processing,
actually
building
content
modeladdAttribute();
return
"myViewName";
</pre>
<p><strong>Note:</strong>
that
you
typically
want
to
use
either
this
#checkNotModified(long)
method;
or
#checkNotModified(String),
but
not
both
:end
:start
Check
whether
the
request
qualifies
as
not
modified
given
the
supplied
ETag
(entity
tag),
as
determined
by
the
application
<p>This
will
also
transparently
set
the
appropriate
response
headers,
for
both
the
modified
case
and
the
not-modified
case
<p>Typical
usage:
<pre
class="code">
public
String
myHandleMethod(WebRequest
webRequest,
Model
model)
String
eTag
=
//
application-specific
calculation
if
(requestcheckNotModified(eTag))
//
shortcut
exit
-
no
further
processing
necessary
return
null;

//
further
request
processing,
actually
building
content
modeladdAttribute();
return
"myViewName";
</pre>
<p><strong>Note:</strong>
that
you
typically
want
to
use
either
this
#checkNotModified(String)
method;
or
#checkNotModified(long),
but
not
both
:end
:start
Get
a
short
description
of
this
request,
typically
containing
request
URI
and
session
id
:end
:start
Interface
for
general
web
request
interception
Allows
for
being
applied
to
Servlet
request
as
well
as
Portlet
request
environments,
by
building
on
the
WebRequest
abstraction
<p>This
interface
assumes
MVC-style
request
processing:
A
handler
gets
executed,
exposes
a
set
of
model
objects,
then
a
view
gets
rendered
based
on
that
model
Alternatively,
a
handler
may
also
process
the
request
completely,
with
no
view
to
be
rendered
<p>In
an
async
processing
scenario,
the
handler
may
be
executed
in
a
separate
thread
while
the
main
thread
exits
without
rendering
or
invoking
the
postHandle
and
afterCompletion
callbacks
When
concurrent
handler
execution
completes,
the
request
is
dispatched
back
in
order
to
proceed
with
rendering
the
model
and
all
methods
of
this
contract
are
invoked
again
For
further
options
and
comments
see
orgspringframeworkwebcontextrequestasyncAsyncWebRequestInterceptor
<p>This
interface
is
deliberately
minimalistic
to
keep
the
dependencies
of
generic
request
interceptors
as
minimal
as
feasible
<p><b>NOTE:</b>
While
this
interceptor
is
applied
to
the
entire
request
processing
in
a
Servlet
environment,
it
is
by
default
only
applied
to
the
<i>render</i>
phase
in
a
Portlet
environment,
preparing
and
rendering
a
Portlet
view
To
apply
WebRequestInterceptors
to
the
<i>action</i>
phase
as
well,
set
the
HandlerMapping's
"applyWebRequestInterceptorsToRenderPhaseOnly"
flag
to
"false"
Alternatively,
consider
using
the
Portlet-specific
HandlerInterceptor
mechanism
for
such
needs
:end
:start
Intercept
the
execution
of
a
request
handler
<i>before</i>
its
invocation
<p>Allows
for
preparing
context
resources
(such
as
a
Hibernate
Session)
and
expose
them
as
request
attributes
or
as
thread-local
objects
:end
:start
Intercept
the
execution
of
a
request
handler
<i>after</i>
its
successful
invocation,
right
before
view
rendering
(if
any)
<p>Allows
for
modifying
context
resources
after
successful
handler
execution
(for
example,
flushing
a
Hibernate
Session)
:end
:start
Callback
after
completion
of
request
processing,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allows
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
preHandle
method
has
successfully
completed!
:end
:start
Interface
to
be
implemented
by
any
object
that
wishes
to
be
notified
of
the
ServletConfig
(typically
determined
by
the
WebApplicationContext)
that
it
runs
in
<p>Note:
Only
satisfied
if
actually
running
within
a
Servlet-specific
WebApplicationContext
Otherwise,
no
ServletConfig
will
be
set
:end
:start
Set
the
ServletConfig
that
this
object
runs
in
<p>Invoked
after
population
of
normal
bean
properties
but
before
an
init
callback
like
InitializingBean's
afterPropertiesSet
or
a
custom
init-method
Invoked
after
ApplicationContextAware's
setApplicationContext
:end
:start
Interface
to
be
implemented
by
any
object
that
wishes
to
be
notified
of
the
ServletContext
(typically
determined
by
the
WebApplicationContext)
that
it
runs
in
:end
:start
Set
the
ServletContext
that
this
object
runs
in
<p>Invoked
after
population
of
normal
bean
properties
but
before
an
init
callback
like
InitializingBean's
afterPropertiesSet
or
a
custom
init-method
Invoked
after
ApplicationContextAware's
setApplicationContext
:end
:start
orgspringframeworkcontextsupportAbstractRefreshableApplicationContext
subclass
which
implements
the
orgspringframeworkwebcontextConfigurableWebApplicationContext
interface
for
web
environments
Provides
a
"configLocations"
property,
to
be
populated
through
the
ConfigurableWebApplicationContext
interface
on
web
application
startup
<p>This
class
is
as
easy
to
subclass
as
AbstractRefreshableApplicationContext:
All
you
need
to
implements
is
the
#loadBeanDefinitions
method;
see
the
superclass
javadoc
for
details
Note
that
implementations
are
supposed
to
load
bean
definitions
from
the
files
specified
by
the
locations
returned
by
the
#getConfigLocations
method
<p>Interprets
resource
paths
as
servlet
context
resources,
ie
as
paths
beneath
the
web
application
root
Absolute
paths,
eg
for
files
outside
the
web
app
root,
can
be
accessed
via
"file:"
URLs,
as
implemented
by
orgspringframeworkcoreioDefaultResourceLoader
<p>In
addition
to
the
special
beans
detected
by
orgspringframeworkcontextsupportAbstractApplicationContext,
this
class
detects
a
bean
of
type
orgspringframeworkuicontextThemeSource
in
the
context,
under
the
special
bean
name
"themeSource"
<p><b>This
is
the
web
context
to
be
subclassed
for
a
different
bean
definition
format</b>
Such
a
context
implementation
can
be
specified
as
"contextClass"
context-param
for
orgspringframeworkwebcontextContextLoader
or
as
"contextClass"
init-param
for
orgspringframeworkwebservletFrameworkServlet,
replacing
the
default
XmlWebApplicationContext
It
will
then
automatically
receive
the
"contextConfigLocation"
context-param
or
init-param,
respectively
<p>Note
that
WebApplicationContext
implementations
are
generally
supposed
to
configure
themselves
based
on
the
configuration
received
through
the
ConfigurableWebApplicationContext
interface
In
contrast,
a
standalone
application
context
might
allow
for
configuration
in
custom
startup
code
(for
example,
orgspringframeworkcontextsupportGenericApplicationContext)
:end
:start
Create
and
return
a
new
StandardServletEnvironment
Subclasses
may
override
in
order
to
configure
the
environment
or
specialize
the
environment
type
returned
:end
:start
Register
request/session
scopes,
a
ServletContextAwareProcessor,
etc
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
ServletContext
:end
:start
This
implementation
supports
pattern
matching
in
unexpanded
WARs
too
:end
:start
Initialize
the
theme
capability
:end
:start
<p>Replace
Servlet-related
property
sources
:end
:start
orgspringframeworkwebcontextWebApplicationContext
WebApplicationContext
implementation
which
accepts
annotated
classes
as
input
-
in
particular
orgspringframeworkcontextannotationConfiguration
@Configuration-annotated
classes,
but
also
plain
orgspringframeworkstereotypeComponent
@Component
classes
and
JSR-330
compliant
classes
using
javaxinject
annotations
Allows
for
registering
classes
one
by
one
(specifying
class
names
as
config
location)
as
well
as
for
classpath
scanning
(specifying
base
packages
as
config
location)
<p>This
is
essentially
the
equivalent
of
orgspringframeworkcontextannotationAnnotationConfigApplicationContext
AnnotationConfigApplicationContext
for
a
web
environment
<p>To
make
use
of
this
application
context,
the
ContextLoader#CONTEXT_CLASS_PARAM
"contextClass"
context-param
for
ContextLoader
and/or
"contextClass"
init-param
for
FrameworkServlet
must
be
set
to
the
fully-qualified
name
of
this
class
<p>As
of
Spring
31,
this
class
may
also
be
directly
instantiated
and
injected
into
Spring's
DispatcherServlet
or
ContextLoaderListener
when
using
the
new
orgspringframeworkwebWebApplicationInitializer
WebApplicationInitializer
code-based
alternative
to
webxml
See
its
Javadoc
for
details
and
usage
examples
<p>Unlike
XmlWebApplicationContext,
no
default
configuration
class
locations
are
assumed
Rather,
it
is
a
requirement
to
set
the
ContextLoader#CONFIG_LOCATION_PARAM
"contextConfigLocation"
context-param
for
ContextLoader
and/or
"contextConfigLocation"
init-param
for
FrameworkServlet
The
param-value
may
contain
both
fully-qualified
class
names
and
base
packages
to
scan
for
components
See
#loadBeanDefinitions
for
exact
details
on
how
these
locations
are
processed
<p>As
an
alternative
to
setting
the
"contextConfigLocation"
parameter,
users
may
implement
an
orgspringframeworkcontextApplicationContextInitializer
ApplicationContextInitializer
and
set
the
ContextLoader#CONTEXT_INITIALIZER_CLASSES_PARAM
"contextInitializerClasses"
context-param
/
init-param
In
such
cases,
users
should
favor
the
#refresh()
and
#scan(String)
methods
over
the
#setConfigLocation(String)
method,
which
is
primarily
for
use
by
ContextLoader
<p>Note:
In
case
of
multiple
@Configuration
classes,
later
@Bean
definitions
will
override
ones
defined
in
earlier
loaded
files
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
Configuration
class
:end
:start
Set
a
custom
BeanNameGenerator
for
use
with
AnnotatedBeanDefinitionReader
and/or
ClassPathBeanDefinitionScanner
<p>Default
is
orgspringframeworkcontextannotationAnnotationBeanNameGenerator
:end
:start
Return
the
custom
BeanNameGenerator
for
use
with
AnnotatedBeanDefinitionReader
and/or
ClassPathBeanDefinitionScanner,
if
any
:end
:start
Set
a
custom
ScopeMetadataResolver
for
use
with
AnnotatedBeanDefinitionReader
and/or
ClassPathBeanDefinitionScanner
<p>Default
is
an
orgspringframeworkcontextannotationAnnotationScopeMetadataResolver
:end
:start
Return
the
custom
ScopeMetadataResolver
for
use
with
AnnotatedBeanDefinitionReader
and/or
ClassPathBeanDefinitionScanner,
if
any
:end
:start
Register
one
or
more
annotated
classes
to
be
processed
Note
that
#refresh()
must
be
called
in
order
for
the
context
to
fully
process
the
new
class
<p>Calls
to
register
are
idempotent;
adding
the
same
annotated
class
more
than
once
has
no
additional
effect
:end
:start
Perform
a
scan
within
the
specified
base
packages
Note
that
#refresh()
must
be
called
in
order
for
the
context
to
fully
process
the
new
class
:end
:start
Register
a
orgspringframeworkbeansfactoryconfigBeanDefinition
for
any
classes
specified
by
#register(Class)
and
scan
any
packages
specified
by
#scan(String)
<p>For
any
values
specified
by
#setConfigLocation(String)
or
#setConfigLocations(String[]),
attempt
first
to
load
each
location
as
a
class,
registering
a
BeanDefinition
if
class
loading
is
successful,
and
if
class
loading
fails
(ie
a
ClassNotFoundException
is
raised),
assume
the
value
is
a
package
and
attempt
to
scan
it
for
annotated
classes
<p>Enables
the
default
set
of
annotation
configuration
post
processors,
such
that
@Autowired,
@Required,
and
associated
annotations
can
be
used
<p>Configuration
class
bean
definitions
are
registered
with
generated
bean
definition
names
unless
the
value
attribute
is
provided
to
the
stereotype
annotation
:end
:start
HttpServletRequest
decorator
that
makes
all
Spring
beans
in
a
given
WebApplicationContext
accessible
as
request
attributes,
through
lazy
checking
once
an
attribute
gets
accessed
:end
:start
Create
a
new
ContextExposingHttpServletRequest
for
the
given
request
:end
:start
Create
a
new
ContextExposingHttpServletRequest
for
the
given
request
:end
:start
Return
the
WebApplicationContext
that
this
request
runs
in
:end
:start
Subclass
of
GenericApplicationContext,
suitable
for
web
environments
<p>Implements
the
orgspringframeworkwebcontextConfigurableWebApplicationContext,
but
is
not
intended
for
declarative
setup
in
webxml
Instead,
it
is
designed
for
programmatic
setup,
for
example
for
building
nested
contexts
or
for
use
within
Spring
31
orgspringframeworkwebWebApplicationInitializers
<p><b>If
you
intend
to
implement
a
WebApplicationContext
that
reads
bean
definitions
from
configuration
files,
consider
deriving
from
AbstractRefreshableWebApplicationContext,
reading
the
bean
definitions
in
an
implementation
of
the
loadBeanDefinitions
method</b>
<p>Interprets
resource
paths
as
servlet
context
resources,
ie
as
paths
beneath
the
web
application
root
Absolute
paths,
eg
for
files
outside
the
web
app
root,
can
be
accessed
via
"file:"
URLs,
as
implemented
by
AbstractApplicationContext
<p>In
addition
to
the
special
beans
detected
by
orgspringframeworkcontextsupportAbstractApplicationContext,
this
class
detects
a
ThemeSource
bean
in
the
context,
with
the
name
"themeSource"
:end
:start
Create
a
new
GenericWebApplicationContext
:end
:start
Create
a
new
GenericWebApplicationContext
for
the
given
ServletContext
:end
:start
Create
a
new
GenericWebApplicationContext
with
the
given
DefaultListableBeanFactory
:end
:start
Create
a
new
GenericWebApplicationContext
with
the
given
DefaultListableBeanFactory
:end
:start
Set
the
ServletContext
that
this
WebApplicationContext
runs
in
:end
:start
Create
and
return
a
new
StandardServletEnvironment
:end
:start
Register
ServletContextAwareProcessor
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
ServletContext
:end
:start
This
implementation
supports
pattern
matching
in
unexpanded
WARs
too
:end
:start
Initialize
the
theme
capability
:end
:start
<p>Replace
Servlet-related
property
sources
:end
:start
Simple
HttpServlet
that
delegates
to
an
HttpRequestHandler
bean
defined
in
Spring's
root
web
application
context
The
target
bean
name
must
match
the
HttpRequestHandlerServlet
servlet-name
as
defined
in
webxml
<p>This
can
for
example
be
used
to
expose
a
single
Spring
remote
exporter,
such
as
orgspringframeworkremotinghttpinvokerHttpInvokerServiceExporter
or
orgspringframeworkremotingcauchoHessianServiceExporter,
per
HttpRequestHandlerServlet
definition
This
is
a
minimal
alternative
to
defining
remote
exporters
as
beans
in
a
DispatcherServlet
context
(with
advanced
mapping
and
interception
facilities
being
available
there)
:end
:start
Servlet
variant
of
LiveBeansView's
MBean
exposure
<p>Generates
a
JSON
snapshot
for
current
beans
and
their
dependencies
in
all
ApplicationContexts
that
live
within
the
current
web
application
:end
:start
Event
raised
when
a
request
is
handled
within
an
ApplicationContext
<p>Supported
by
Spring's
own
FrameworkServlet
(through
a
specific
ServletRequestHandledEvent
subclass),
but
can
also
be
raised
by
any
other
web
component
Used,
for
example,
by
Spring's
out-of-the-box
PerformanceMonitorListener
:end
:start
Create
a
new
RequestHandledEvent
with
session
information
:end
:start
Create
a
new
RequestHandledEvent
with
session
information
:end
:start
Return
the
processing
time
of
the
request
in
milliseconds
:end
:start
Return
the
id
of
the
HTTP
session,
if
any
:end
:start
Return
the
name
of
the
user
that
was
associated
with
the
request
(usually
the
UserPrincipal)
:end
:start
Return
whether
the
request
failed
:end
:start
Return
the
cause
of
failure,
if
any
:end
:start
Return
a
short
description
of
this
event,
only
involving
the
most
important
context
data
:end
:start
Return
a
full
description
of
this
event,
involving
all
available
context
data
:end
:start
PropertySource
that
reads
init
parameters
from
a
ServletConfig
object
:end
:start
Exporter
that
takes
Spring-defined
objects
and
exposes
them
as
ServletContext
attributes
Usually,
bean
references
will
be
used
to
export
Spring-defined
beans
as
ServletContext
attributes
<p>Useful
to
make
Spring-defined
beans
available
to
code
that
is
not
aware
of
Spring
at
all,
but
rather
just
of
the
Servlet
API
Client
code
can
then
use
plain
ServletContext
attribute
lookups
to
access
those
objects,
despite
them
being
defined
in
a
Spring
application
context
<p>Alternatively,
consider
using
the
WebApplicationContextUtils
class
to
access
Spring-defined
beans
via
the
WebApplicationContext
interface
This
makes
client
code
aware
of
Spring
API,
of
course
:end
:start
Set
the
ServletContext
attributes
to
expose
as
key-value
pairs
Each
key
will
be
considered
a
ServletContext
attributes
key,
and
each
value
will
be
used
as
corresponding
attribute
value
<p>Usually,
you
will
use
bean
references
for
the
values,
to
export
Spring-defined
beans
as
ServletContext
attributes
Of
course,
it
is
also
possible
to
define
plain
values
to
export
:end
:start
FactoryBean
that
fetches
a
specific,
existing
ServletContext
attribute
Exposes
that
ServletContext
attribute
when
used
as
bean
reference,
effectively
making
it
available
as
named
Spring
bean
instance
<p>Intended
to
link
in
ServletContext
attributes
that
exist
before
the
startup
of
the
Spring
application
context
Typically,
such
attributes
will
have
been
put
there
by
third-party
web
frameworks
In
a
purely
Spring-based
web
application,
no
such
linking
in
of
ServletContext
attributes
will
be
necessary
<p><b>NOTE:</b>
As
of
Spring
30,
you
may
also
use
the
"contextAttributes"
default
bean
which
is
of
type
Map,
and
dereference
it
using
an
"#{contextAttributesmyKey"
expression
to
access
a
specific
attribute
by
name
:end
:start
Set
the
name
of
the
ServletContext
attribute
to
expose
:end
:start
orgspringframeworkbeansfactoryconfigBeanPostProcessor
implementation
that
passes
the
ServletContext
to
beans
that
implement
the
ServletContextAware
interface
<p>Web
application
contexts
will
automatically
register
this
with
their
underlying
bean
factory
Applications
do
not
use
this
directly
:end
:start
Create
a
new
ServletContextAwareProcessor
without
an
initial
context
or
config
When
this
constructor
is
used
the
#getServletContext()
and/or
#getServletConfig()
methods
should
be
overridden
:end
:start
Create
a
new
ServletContextAwareProcessor
for
the
given
context
:end
:start
Create
a
new
ServletContextAwareProcessor
for
the
given
config
:end
:start
Create
a
new
ServletContextAwareProcessor
for
the
given
context
and
config
:end
:start
Returns
the
ServletContext
to
be
injected
or
null
This
method
can
be
overridden
by
subclasses
when
a
context
is
obtained
after
the
post-processor
has
been
registered
:end
:start
Returns
the
ServletContext
to
be
injected
or
null
This
method
can
be
overridden
by
subclasses
when
a
context
is
obtained
after
the
post-processor
has
been
registered
:end
:start
LiveBeansView
subclass
which
looks
for
all
ApplicationContexts
in
the
web
application,
as
exposed
in
ServletContext
attributes
:end
:start
Create
a
new
LiveBeansView
for
the
given
ServletContext
:end
:start
FactoryBean
that
retrieves
a
specific
ServletContext
init
parameter
(that
is,
a
"context-param"
defined
in
webxml)
Exposes
that
ServletContext
init
parameter
when
used
as
bean
reference,
effectively
making
it
available
as
named
Spring
bean
instance
<p><b>NOTE:</b>
As
of
Spring
30,
you
may
also
use
the
"contextParameters"
default
bean
which
is
of
type
Map,
and
dereference
it
using
an
"#{contextParametersmyKey"
expression
to
access
a
specific
parameter
by
name
:end
:start
Set
the
name
of
the
ServletContext
init
parameter
to
expose
:end
:start
Subclass
of
PropertyPlaceholderConfigurer
that
resolves
placeholders
as
ServletContext
init
parameters
(that
is,
webxml
context-param
entries)
<p>Can
be
combined
with
"locations"
and/or
"properties"
values
in
addition
to
webxml
context-params
Alternatively,
can
be
defined
without
local
properties,
to
resolve
all
placeholders
as
webxml
context-params
(or
JVM
system
properties)
<p>If
a
placeholder
could
not
be
resolved
against
the
provided
local
properties
within
the
application,
this
configurer
will
fall
back
to
ServletContext
parameters
Can
also
be
configured
to
let
ServletContext
init
parameters
override
local
properties
(contextOverride=true)
<p>Optionally
supports
searching
for
ServletContext
<i>attributes</i>:
If
turned
on,
an
otherwise
unresolvable
placeholder
will
matched
against
the
corresponding
ServletContext
attribute,
using
its
stringified
value
if
found
This
can
be
used
to
feed
dynamic
values
into
Spring's
placeholder
resolution
<p>If
not
running
within
a
WebApplicationContext
(or
any
other
context
that
is
able
to
satisfy
the
ServletContextAware
callback),
this
class
will
behave
like
the
default
PropertyPlaceholderConfigurer
This
allows
for
keeping
ServletContextPropertyPlaceholderConfigurer
definitions
in
test
suites
:end
:start
Set
whether
ServletContext
init
parameters
(and
optionally
also
ServletContext
attributes)
should
override
local
properties
within
the
application
Default
is
"false":
ServletContext
settings
serve
as
fallback
<p>Note
that
system
properties
will
still
override
ServletContext
settings,
if
the
system
properties
mode
is
set
to
"SYSTEM_PROPERTIES_MODE_OVERRIDE"
:end
:start
Set
whether
to
search
for
matching
a
ServletContext
attribute
before
checking
a
ServletContext
init
parameter
Default
is
"false":
only
checking
init
parameters
<p>If
turned
on,
the
configurer
will
look
for
a
ServletContext
attribute
with
the
same
name
as
the
placeholder,
and
use
its
stringified
value
if
found
Exposure
of
such
ServletContext
attributes
can
be
used
to
dynamically
override
init
parameters
defined
in
webxml,
for
example
in
a
custom
context
listener
:end
:start
Set
the
ServletContext
to
resolve
placeholders
against
Will
be
auto-populated
when
running
in
a
WebApplicationContext
<p>If
not
set,
this
configurer
will
simply
not
resolve
placeholders
against
the
ServletContext:
It
will
effectively
behave
like
a
plain
PropertyPlaceholderConfigurer
in
such
a
scenario
:end
:start
Resolves
the
given
placeholder
using
the
init
parameters
and
optionally
also
the
attributes
of
the
given
ServletContext
<p>Default
implementation
checks
ServletContext
attributes
before
init
parameters
Can
be
overridden
to
customize
this
behavior,
potentially
also
applying
specific
naming
patterns
for
parameters
and/or
attributes
(instead
of
using
the
exact
placeholder
name)
:end
:start
PropertySource
that
reads
init
parameters
from
a
ServletContext
object
:end
:start
orgspringframeworkcoreioResource
implementation
for
javaxservletServletContext
resources,
interpreting
relative
paths
within
the
web
application
root
directory
<p>Always
supports
stream
access
and
URL
access,
but
only
allows
javaioFile
access
when
the
web
application
archive
is
expanded
:end
:start
Create
a
new
ServletContextResource
<p>The
Servlet
spec
requires
that
resource
paths
start
with
a
slash,
even
if
many
containers
accept
paths
without
leading
slash
too
Consequently,
the
given
path
will
be
prepended
with
a
slash
if
it
doesn't
already
start
with
one
:end
:start
Return
the
ServletContext
for
this
resource
:end
:start
Return
the
path
for
this
resource
:end
:start
This
implementation
checks
ServletContextgetResource
:end
:start
This
implementation
delegates
to
ServletContextgetResourceAsStream,
which
returns
null
in
case
of
a
non-readable
resource
(eg
a
directory)
:end
:start
This
implementation
delegates
to
ServletContextgetResourceAsStream,
but
throws
a
FileNotFoundException
if
no
resource
found
:end
:start
This
implementation
delegates
to
ServletContextgetResource,
but
throws
a
FileNotFoundException
if
no
resource
found
:end
:start
This
implementation
resolves
"file:"
URLs
or
alternatively
delegates
to
ServletContextgetRealPath,
throwing
a
FileNotFoundException
if
not
found
or
not
resolvable
:end
:start
This
implementation
creates
a
ServletContextResource,
applying
the
given
path
relative
to
the
path
of
the
underlying
file
of
this
resource
descriptor
:end
:start
This
implementation
returns
the
name
of
the
file
that
this
ServletContext
resource
refers
to
:end
:start
This
implementation
returns
a
description
that
includes
the
ServletContext
resource
location
:end
:start
This
implementation
compares
the
underlying
ServletContext
resource
locations
:end
:start
This
implementation
returns
the
hash
code
of
the
underlying
ServletContext
resource
location
:end
:start
ResourceLoader
implementation
that
resolves
paths
as
ServletContext
resources,
for
use
outside
a
WebApplicationContext
(for
example,
in
an
HttpServletBean
or
GenericFilterBean
subclass)
<p>Within
a
WebApplicationContext,
resource
paths
are
automatically
resolved
as
ServletContext
resources
by
the
context
implementation
:end
:start
Create
a
new
ServletContextResourceLoader
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
web
application
:end
:start
ServletContext-aware
subclass
of
PathMatchingResourcePatternResolver,
able
to
find
matching
resources
below
the
web
application
root
directory
via
Servlet
23's
ServletContextgetResourcePaths
Falls
back
to
the
superclass'
file
system
checking
for
other
resources
:end
:start
Create
a
new
ServletContextResourcePatternResolver
:end
:start
Create
a
new
ServletContextResourcePatternResolver
:end
:start
Overridden
version
which
checks
for
ServletContextResource
and
uses
ServletContextgetResourcePaths
to
find
matching
resources
below
the
web
application
root
directory
In
case
of
other
resources,
delegates
to
the
superclass
version
:end
:start
Recursively
retrieve
ServletContextResources
that
match
the
given
pattern,
adding
them
to
the
given
result
set
:end
:start
Scope
wrapper
for
a
ServletContext,
ie
for
global
web
application
attributes
<p>This
differs
from
traditional
Spring
singletons
in
that
it
exposes
attributes
in
the
ServletContext
Those
attributes
will
get
destroyed
whenever
the
entire
application
shuts
down,
which
might
be
earlier
or
later
than
the
shutdown
of
the
containing
Spring
ApplicationContext
<p>The
associated
destruction
mechanism
relies
on
a
orgspringframeworkwebcontextContextCleanupListener
being
registered
in
webxml
Note
that
orgspringframeworkwebcontextContextLoaderListener
includes
ContextCleanupListener's
functionality
<p>This
scope
is
registered
as
default
scope
with
key
orgspringframeworkwebcontextWebApplicationContext#SCOPE_APPLICATION
"application"
:end
:start
Create
a
new
Scope
wrapper
for
the
given
ServletContext
:end
:start
Invoke
all
registered
destruction
callbacks
To
be
called
on
ServletContext
shutdown
:end
:start
Servlet-specific
subclass
of
RequestHandledEvent,
adding
servlet-specific
context
information
:end
:start
Create
a
new
ServletRequestHandledEvent
:end
:start
Create
a
new
ServletRequestHandledEvent
:end
:start
Return
the
URL
of
the
request
:end
:start
Return
the
IP
address
that
the
request
came
from
:end
:start
Return
the
HTTP
method
of
the
request
(usually
GET
or
POST)
:end
:start
Return
the
name
of
the
servlet
that
handled
the
request
:end
:start
Convenient
base
class
for
self-autowiring
classes
that
gets
constructed
within
a
Spring-based
web
application
Resolves
@Autowired
annotations
in
the
endpoint
class
against
beans
in
the
current
Spring
root
web
application
context
(as
determined
by
the
current
thread's
context
ClassLoader,
which
needs
to
be
the
web
application's
ClassLoader)
Can
alternatively
be
used
as
a
delegate
instead
of
as
a
base
class
<p>A
typical
usage
of
this
base
class
is
a
JAX-WS
endpoint
class:
Such
a
Spring-based
JAX-WS
endpoint
implementation
will
follow
the
standard
JAX-WS
contract
for
endpoint
classes
but
will
be
'thin'
in
that
it
delegates
the
actual
work
to
one
or
more
Spring-managed
service
beans
-
typically
obtained
using
@Autowired
The
lifecycle
of
such
an
endpoint
instance
will
be
managed
by
the
JAX-WS
runtime,
hence
the
need
for
this
base
class
to
provide
@Autowired
processing
based
on
the
current
Spring
context
<p><b>NOTE:</b>
If
there
is
an
explicit
way
to
access
the
ServletContext,
prefer
such
a
way
over
using
this
class
The
WebApplicationContextUtils
class
allows
for
easy
access
to
the
Spring
root
web
application
context
based
on
the
ServletContext
:end
:start
This
constructor
performs
injection
on
this
instance,
based
on
the
current
web
application
context
<p>Intended
for
use
as
a
base
class
:end
:start
Process
@Autowired
injection
for
the
given
target
object,
based
on
the
current
web
application
context
<p>Intended
for
use
as
a
delegate
:end
:start
Process
@Autowired
injection
for
the
given
target
object,
based
on
the
current
root
web
application
context
as
stored
in
the
ServletContext
<p>Intended
for
use
as
a
delegate
:end
:start
Environment
implementation
to
be
used
by
Servlet-based
web
applications
All
web-related
(servlet-based)
ApplicationContext
classes
initialize
an
instance
by
default
<p>Contributes
ServletConfig,
ServletContext,
and
JNDI-based
PropertySource
instances
See
#customizePropertySources
method
documentation
for
details
:end
:start
Servlet
context
init
parameters
property
source
name:
:end
:start
Servlet
config
init
parameters
property
source
name:
:end
:start
JNDI
property
source
name:
:end
:start
Customize
the
set
of
property
sources
with
those
contributed
by
superclasses
as
well
as
those
appropriate
for
standard
servlet-based
environments:
<ul>
<li>{@value
#SERVLET_CONFIG_PROPERTY_SOURCE_NAME
<li>{@value
#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME
<li>{@value
#JNDI_PROPERTY_SOURCE_NAME
</ul>
<p>Properties
present
in
#SERVLET_CONFIG_PROPERTY_SOURCE_NAME
will
take
precedence
over
those
in
#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,
and
properties
found
in
either
of
the
above
take
precedence
over
those
found
in
#JNDI_PROPERTY_SOURCE_NAME
<p>Properties
in
any
of
the
above
will
take
precedence
over
system
properties
and
environment
variables
contributed
by
the
StandardEnvironment
superclass
<p>The
Servlet-related
property
sources
are
added
as
StubPropertySource
stubs
at
this
stage,
and
will
be
#initPropertySources(ServletContext,
ServletConfig)
fully
initialized
once
the
actual
ServletContext
object
becomes
available
:end
:start
Static
orgspringframeworkwebcontextWebApplicationContext
implementation
for
testing
Not
intended
for
use
in
production
applications
<p>Implements
the
orgspringframeworkwebcontextConfigurableWebApplicationContext
interface
to
allow
for
direct
replacement
of
an
XmlWebApplicationContext,
despite
not
actually
supporting
external
configuration
files
<p>Interprets
resource
paths
as
servlet
context
resources,
ie
as
paths
beneath
the
web
application
root
Absolute
paths,
eg
for
files
outside
the
web
app
root,
can
be
accessed
via
"file:"
URLs,
as
implemented
by
orgspringframeworkcoreioDefaultResourceLoader
<p>In
addition
to
the
special
beans
detected
by
orgspringframeworkcontextsupportAbstractApplicationContext,
this
class
detects
a
bean
of
type
orgspringframeworkuicontextThemeSource
in
the
context,
under
the
special
bean
name
"themeSource"
:end
:start
Set
the
ServletContext
that
this
WebApplicationContext
runs
in
:end
:start
The
StaticWebApplicationContext
class
does
not
support
this
method
:end
:start
The
StaticWebApplicationContext
class
does
not
support
this
method
:end
:start
Register
request/session
scopes,
a
ServletContextAwareProcessor,
etc
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
ServletContext
:end
:start
This
implementation
supports
pattern
matching
in
unexpanded
WARs
too
:end
:start
Create
and
return
a
new
StandardServletEnvironment
:end
:start
Initialize
the
theme
capability
:end
:start
Convenience
methods
for
retrieving
the
root
WebApplicationContext
for
a
given
ServletContext
This
is
useful
for
programmatically
accessing
a
Spring
application
context
from
within
custom
web
views
or
MVC
actions
<p>Note
that
there
are
more
convenient
ways
of
accessing
the
root
context
for
many
web
frameworks,
either
part
of
Spring
or
available
as
an
external
library
This
helper
class
is
just
the
most
generic
way
to
access
the
root
context
:end
:start
Find
the
root
WebApplicationContext
for
this
web
application,
which
is
typically
loaded
via
orgspringframeworkwebcontextContextLoaderListener
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Find
the
root
WebApplicationContext
for
this
web
application,
which
is
typically
loaded
via
orgspringframeworkwebcontextContextLoaderListener
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Find
a
custom
WebApplicationContext
for
this
web
application
:end
:start
Register
web-specific
scopes
("request",
"session",
"globalSession")
with
the
given
BeanFactory,
as
used
by
the
WebApplicationContext
:end
:start
Register
web-specific
scopes
("request",
"session",
"globalSession",
"application")
with
the
given
BeanFactory,
as
used
by
the
WebApplicationContext
:end
:start
Register
web-specific
environment
beans
("contextParameters",
"contextAttributes")
with
the
given
BeanFactory,
as
used
by
the
WebApplicationContext
:end
:start
Register
web-specific
environment
beans
("contextParameters",
"contextAttributes")
with
the
given
BeanFactory,
as
used
by
the
WebApplicationContext
:end
:start
Convenient
variant
of
#initServletPropertySources(MutablePropertySources,
ServletContext,
ServletConfig)
that
always
provides
null
for
the
ServletConfig
parameter
:end
:start
Replace
Servlet-based
StubPropertySource
stub
property
sources
with
actual
instances
populated
with
the
given
servletContext
and
servletConfig
objects
<p>This
method
is
idempotent
with
respect
to
the
fact
it
may
be
called
any
number
of
times
but
will
perform
replacement
of
stub
property
sources
with
their
corresponding
actual
property
sources
once
and
only
once
:end
:start
Convenient
superclass
for
application
objects
running
in
a
WebApplicationContext
Provides
getWebApplicationContext(),
getServletContext(),
and
getTempDir()
methods
:end
:start
Overrides
the
base
class
behavior
to
enforce
running
in
an
ApplicationContext
All
accessors
will
throw
IllegalStateException
if
not
running
in
a
context
:end
:start
Calls
#initServletContext(javaxservletServletContext)
if
the
given
ApplicationContext
is
a
WebApplicationContext
:end
:start
Subclasses
may
override
this
for
custom
initialization
based
on
the
ServletContext
that
this
application
object
runs
in
<p>The
default
implementation
is
empty
Called
by
#initApplicationContext(orgspringframeworkcontextApplicationContext)
as
well
as
#setServletContext(javaxservletServletContext)
:end
:start
Return
the
current
application
context
as
WebApplicationContext
<p><b>NOTE:</b>
Only
use
this
if
you
actually
need
to
access
WebApplicationContext-specific
functionality
Preferably
use
getApplicationContext()
or
getServletContext()
else,
to
be
able
to
run
in
non-WebApplicationContext
environments
as
well
:end
:start
Return
the
current
ServletContext
:end
:start
Return
the
temporary
directory
for
the
current
web
application,
as
provided
by
the
servlet
container
:end
:start
orgspringframeworkwebcontextWebApplicationContext
implementation
which
takes
its
configuration
from
XML
documents,
understood
by
an
orgspringframeworkbeansfactoryxmlXmlBeanDefinitionReader
This
is
essentially
the
equivalent
of
orgspringframeworkcontextsupportAbstractXmlApplicationContext
for
a
web
environment
<p>By
default,
the
configuration
will
be
taken
from
"/WEB-INF/applicationContextxml"
for
the
root
context,
and
"/WEB-INF/test-servletxml"
for
a
context
with
the
namespace
"test-servlet"
(like
for
a
DispatcherServlet
instance
with
the
servlet-name
"test")
<p>The
config
location
defaults
can
be
overridden
via
the
"contextConfigLocation"
context-param
of
orgspringframeworkwebcontextContextLoader
and
servlet
init-param
of
orgspringframeworkwebservletFrameworkServlet
Config
locations
can
either
denote
concrete
files
like
"/WEB-INF/contextxml"
or
Ant-style
patterns
like
"/WEB-INF/*-contextxml"
(see
orgspringframeworkutilPathMatcher
javadoc
for
pattern
details)
<p>Note:
In
case
of
multiple
config
locations,
later
bean
definitions
will
override
ones
defined
in
earlier
loaded
files
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
XML
file
<p><b>For
a
WebApplicationContext
that
reads
in
a
different
bean
definition
format,
create
an
analogous
subclass
of
AbstractRefreshableWebApplicationContext</b>
Such
a
context
implementation
can
be
specified
as
"contextClass"
context-param
for
ContextLoader
or
"contextClass"
init-param
for
FrameworkServlet
:end
:start
Default
config
location
for
the
root
context
:end
:start
Default
prefix
for
building
a
config
location
for
a
namespace
:end
:start
Default
suffix
for
building
a
config
location
for
a
namespace
:end
:start
Loads
the
bean
definitions
via
an
XmlBeanDefinitionReader
:end
:start
Initialize
the
bean
definition
reader
used
for
loading
the
bean
definitions
of
this
context
Default
implementation
is
empty
<p>Can
be
overridden
in
subclasses,
eg
for
turning
off
XML
validation
or
using
a
different
XmlBeanDefinitionParser
implementation
:end
:start
Load
the
bean
definitions
with
the
given
XmlBeanDefinitionReader
<p>The
lifecycle
of
the
bean
factory
is
handled
by
the
refreshBeanFactory
method;
therefore
this
method
is
just
supposed
to
load
and/or
register
bean
definitions
<p>Delegates
to
a
ResourcePatternResolver
for
resolving
location
patterns
into
Resource
instances
:end
:start
The
default
location
for
the
root
context
is
"/WEB-INF/applicationContextxml",
and
"/WEB-INF/test-servletxml"
for
a
context
with
the
namespace
"test-servlet"
(like
for
a
DispatcherServlet
instance
with
the
servlet-name
"test")
:end
:start
Interface
to
provide
configuration
for
a
web
application
This
is
read-only
while
the
application
is
running,
but
may
be
reloaded
if
the
implementation
supports
this
<p>This
interface
adds
a
getServletContext()
method
to
the
generic
ApplicationContext
interface,
and
defines
a
well-known
application
attribute
name
that
the
root
context
must
be
bound
to
in
the
bootstrap
process
<p>Like
generic
application
contexts,
web
application
contexts
are
hierarchical
There
is
a
single
root
context
per
application,
while
each
servlet
in
the
application
(including
a
dispatcher
servlet
in
the
MVC
framework)
has
its
own
child
context
<p>In
addition
to
standard
application
context
lifecycle
capabilities,
WebApplicationContext
implementations
need
to
detect
ServletContextAware
beans
and
invoke
the
setServletContext
method
accordingly
:end
:start
Context
attribute
to
bind
root
WebApplicationContext
to
on
successful
startup
<p>Note:
If
the
startup
of
the
root
context
fails,
this
attribute
can
contain
an
exception
or
error
as
value
Use
WebApplicationContextUtils
for
convenient
lookup
of
the
root
WebApplicationContext
:end
:start
Scope
identifier
for
request
scope:
"request"
Supported
in
addition
to
the
standard
scopes
"singleton"
and
"prototype"
:end
:start
Scope
identifier
for
session
scope:
"session"
Supported
in
addition
to
the
standard
scopes
"singleton"
and
"prototype"
:end
:start
Scope
identifier
for
global
session
scope:
"globalSession"
Supported
in
addition
to
the
standard
scopes
"singleton"
and
"prototype"
:end
:start
Scope
identifier
for
the
global
web
application
scope:
"application"
Supported
in
addition
to
the
standard
scopes
"singleton"
and
"prototype"
:end
:start
Name
of
the
ServletContext
environment
bean
in
the
factory
:end
:start
Name
of
the
ServletContext/PortletContext
init-params
environment
bean
in
the
factory
<p>Note:
Possibly
merged
with
ServletConfig/PortletConfig
parameters
ServletConfig
parameters
override
ServletContext
parameters
of
the
same
name
:end
:start
Name
of
the
ServletContext/PortletContext
attributes
environment
bean
in
the
factory
:end
:start
Return
the
standard
Servlet
API
ServletContext
for
this
application
<p>Also
available
for
a
Portlet
application,
in
addition
to
the
PortletContext
:end
:start
Base
class
for
Filters
that
perform
logging
operations
before
and
after
a
request
is
processed
<p>Subclasses
should
override
the
beforeRequest(HttpServletRequest,
String)
and
afterRequest(HttpServletRequest,
String)
methods
to
perform
the
actual
logging
around
the
request
<p>Subclasses
are
passed
the
message
to
write
to
the
log
in
the
beforeRequest
and
afterRequest
methods
By
default,
only
the
URI
of
the
request
is
logged
However,
setting
the
includeQueryString
property
to
true
will
cause
the
query
string
of
the
request
to
be
included
also
The
payload
(body)
of
the
request
can
be
logged
via
the
includePayload
flag
Note
that
this
will
only
log
that
which
is
read,
which
might
not
be
the
entire
payload
<p>Prefixes
and
suffixes
for
the
before
and
after
messages
can
be
configured
using
the
beforeMessagePrefix,
afterMessagePrefix,
beforeMessageSuffix
and
afterMessageSuffix
properties,
:end
:start
Set
whether
or
not
the
query
string
should
be
included
in
the
log
message
<p>Should
be
configured
using
an
&lt;init-param&gt;
for
parameter
name
"includeQueryString"
in
the
filter
definition
in
webxml
:end
:start
Return
whether
or
not
the
query
string
should
be
included
in
the
log
message
:end
:start
Set
whether
or
not
the
client
address
and
session
id
should
be
included
in
the
log
message
<p>Should
be
configured
using
an
&lt;init-param&gt;
for
parameter
name
"includeClientInfo"
in
the
filter
definition
in
webxml
:end
:start
Return
whether
or
not
the
client
address
and
session
id
should
be
included
in
the
log
message
:end
:start
Set
whether
or
not
the
request
payload
(body)
should
be
included
in
the
log
message
<p>Should
be
configured
using
an
&lt;init-param&gt;
for
parameter
name
"includePayload"
in
the
filter
definition
in
webxml
:end
:start
Return
whether
or
not
the
request
payload
(body)
should
be
included
in
the
log
message
:end
:start
Sets
the
maximum
length
of
the
payload
body
to
be
included
in
the
log
message
Default
is
50
characters
:end
:start
Return
the
maximum
length
of
the
payload
body
to
be
included
in
the
log
message
:end
:start
Set
the
value
that
should
be
prepended
to
the
log
message
written
<i>before</i>
a
request
is
processed
:end
:start
Set
the
value
that
should
be
apppended
to
the
log
message
written
<i>before</i>
a
request
is
processed
:end
:start
Set
the
value
that
should
be
prepended
to
the
log
message
written
<i>after</i>
a
request
is
processed
:end
:start
Set
the
value
that
should
be
appended
to
the
log
message
written
<i>after</i>
a
request
is
processed
:end
:start
The
default
value
is
"false"
so
that
the
filter
may
log
a
"before"
message
at
the
start
of
request
processing
and
an
"after"
message
at
the
end
from
when
the
last
asynchronously
dispatched
thread
is
exiting
:end
:start
Forwards
the
request
to
the
next
filter
in
the
chain
and
delegates
down
to
the
subclasses
to
perform
the
actual
request
logging
both
before
and
after
the
request
is
processed
:end
:start
Create
a
log
message
for
the
given
request,
prefix
and
suffix
<p>If
includeQueryString
is
true,
then
the
inner
part
of
the
log
message
will
take
the
form
request_uri?query_string;
otherwise
the
message
will
simply
be
of
the
form
request_uri
<p>The
final
message
is
composed
of
the
inner
part
as
described
and
the
supplied
prefix
and
suffix
:end
:start
Concrete
subclasses
should
implement
this
method
to
write
a
log
message
<i>before</i>
the
request
is
processed
:end
:start
Concrete
subclasses
should
implement
this
method
to
write
a
log
message
<i>after</i>
the
request
is
processed
:end
:start
Servlet
23/24
Filter
that
allows
one
to
specify
a
character
encoding
for
requests
This
is
useful
because
current
browsers
typically
do
not
set
a
character
encoding
even
if
specified
in
the
HTML
page
or
form
<p>This
filter
can
either
apply
its
encoding
if
the
request
does
not
already
specify
an
encoding,
or
enforce
this
filter's
encoding
in
any
case
("forceEncoding"="true")
In
the
latter
case,
the
encoding
will
also
be
applied
as
default
response
encoding
on
Servlet
24+
containers
(although
this
will
usually
be
overridden
by
a
full
content
type
set
in
the
view)
:end
:start
Set
the
encoding
to
use
for
requests
This
encoding
will
be
passed
into
a
javaxservlethttpHttpServletRequest#setCharacterEncoding
call
<p>Whether
this
encoding
will
override
existing
request
encodings
(and
whether
it
will
be
applied
as
default
response
encoding
as
well)
depends
on
the
#setForceEncoding
"forceEncoding"
flag
:end
:start
Set
whether
the
configured
#setEncoding
encoding
of
this
filter
is
supposed
to
override
existing
request
and
response
encodings
<p>Default
is
"false",
ie
do
not
modify
the
encoding
if
javaxservlethttpHttpServletRequest#getCharacterEncoding()
returns
a
non-null
value
Switch
this
to
"true"
to
enforce
the
specified
encoding
in
any
case,
applying
it
as
default
response
encoding
as
well
<p>Note
that
the
response
encoding
will
only
be
set
on
Servlet
24+
containers,
since
Servlet
23
did
not
provide
a
facility
for
setting
a
default
response
encoding
:end
:start
Simple
request
logging
filter
that
writes
the
request
URI
(and
optionally
the
query
string)
to
the
Commons
Log
:end
:start
Writes
a
log
message
before
the
request
is
processed
:end
:start
Writes
a
log
message
after
the
request
is
processed
:end
:start
A
generic
composite
servlet
Filter
that
just
delegates
its
behaviour
to
a
chain
(list)
of
user
supplied
filters,
achieving
the
functionality
of
a
FilterChain,
but
conveniently
using
only
Filter
instances
This
is
useful
for
filters
that
require
dependency
injection,
and
can
therefore
be
set
up
in
a
Spring
application
context
Typically
this
composite
would
be
used
in
conjunction
with
DelegatingFilterProxy,
so
that
it
can
be
declared
in
Spring
but
applied
to
a
servlet
context
:end
:start
Clean
up
all
the
filters
supplied,
calling
each
one's
destroy
method
in
turn,
but
in
reverse
order
:end
:start
Initialize
all
the
filters,
calling
each
one's
init
method
in
turn
in
the
order
supplied
:end
:start
Forms
a
temporary
chain
from
the
list
of
delegate
filters
supplied
({@link
#setFilters(List))
and
executes
them
in
order
Each
filter
delegates
to
the
next
one
in
the
list,
achieving
the
normal
behaviour
of
a
FilterChain,
despite
the
fact
that
this
is
a
Filter
:end
:start
Proxy
for
a
standard
Servlet
23
Filter,
delegating
to
a
Spring-managed
bean
that
implements
the
Filter
interface
Supports
a
"targetBeanName"
filter
init-param
in
webxml,
specifying
the
name
of
the
target
bean
in
the
Spring
application
context
<p>{@code
webxml
will
usually
contain
a
DelegatingFilterProxy
definition,
with
the
specified
filter-name
corresponding
to
a
bean
name
in
Spring's
root
application
context
All
calls
to
the
filter
proxy
will
then
be
delegated
to
that
bean
in
the
Spring
context,
which
is
required
to
implement
the
standard
Servlet
23
Filter
interface
<p>This
approach
is
particularly
useful
for
Filter
implementation
with
complex
setup
needs,
allowing
to
apply
the
full
Spring
bean
definition
machinery
to
Filter
instances
Alternatively,
consider
standard
Filter
setup
in
combination
with
looking
up
service
beans
from
the
Spring
root
application
context
<p><b>NOTE:</b>
The
lifecycle
methods
defined
by
the
Servlet
Filter
interface
will
by
default
<i>not</i>
be
delegated
to
the
target
bean,
relying
on
the
Spring
application
context
to
manage
the
lifecycle
of
that
bean
Specifying
the
"targetFilterLifecycle"
filter
init-param
as
"true"
will
enforce
invocation
of
the
Filterinit
and
Filterdestroy
lifecycle
methods
on
the
target
bean,
letting
the
servlet
container
manage
the
filter
lifecycle
<p>As
of
Spring
31,
DelegatingFilterProxy
has
been
updated
to
optionally
accept
constructor
parameters
when
using
Servlet
30's
instance-based
filter
registration
methods,
usually
in
conjunction
with
Spring
31's
orgspringframeworkwebWebApplicationInitializer
SPI
These
constructors
allow
for
providing
the
delegate
Filter
bean
directly,
or
providing
the
application
context
and
bean
name
to
fetch,
avoiding
the
need
to
look
up
the
application
context
from
the
ServletContext
<p>This
class
was
originally
inspired
by
Spring
Security's
FilterToBeanProxy
class,
written
by
Ben
Alex
:end
:start
Create
a
new
DelegatingFilterProxy
For
traditional
(pre-Servlet
30)
use
in
webxml
:end
:start
Create
a
new
DelegatingFilterProxy
with
the
given
Filter
delegate
Bypasses
entirely
the
need
for
interacting
with
a
Spring
application
context,
specifying
the
#setTargetBeanName
target
bean
name,
etc
<p>For
use
in
Servlet
30+
environments
where
instance-based
registration
of
filters
is
supported
:end
:start
Create
a
new
DelegatingFilterProxy
that
will
retrieve
the
named
target
bean
from
the
given
Spring
WebApplicationContext
<p>For
use
in
Servlet
30+
environments
where
instance-based
registration
of
filters
is
supported
<p>The
target
bean
must
implement
the
standard
Servlet
Filter
interface
<p>The
given
WebApplicationContext
may
or
may
not
be
refreshed
when
passed
in
If
it
has
not,
and
if
the
context
implements
ConfigurableApplicationContext,
a
ConfigurableApplicationContext#refresh()
refresh()
will
be
attempted
before
retrieving
the
named
target
bean
<p>This
proxy's
Environment
will
be
inherited
from
the
given
WebApplicationContext
:end
:start
Set
the
name
of
the
ServletContext
attribute
which
should
be
used
to
retrieve
the
WebApplicationContext
from
which
to
load
the
delegate
Filter
bean
:end
:start
Return
the
name
of
the
ServletContext
attribute
which
should
be
used
to
retrieve
the
WebApplicationContext
from
which
to
load
the
delegate
Filter
bean
:end
:start
Set
the
name
of
the
target
bean
in
the
Spring
application
context
The
target
bean
must
implement
the
standard
Servlet
23
Filter
interface
<p>By
default,
the
filter-name
as
specified
for
the
DelegatingFilterProxy
in
webxml
will
be
used
:end
:start
Return
the
name
of
the
target
bean
in
the
Spring
application
context
:end
:start
Set
whether
to
invoke
the
Filterinit
and
Filterdestroy
lifecycle
methods
on
the
target
bean
<p>Default
is
"false";
target
beans
usually
rely
on
the
Spring
application
context
for
managing
their
lifecycle
Setting
this
flag
to
"true"
means
that
the
servlet
container
will
control
the
lifecycle
of
the
target
Filter,
with
this
proxy
delegating
the
corresponding
calls
:end
:start
Return
whether
to
invoke
the
Filterinit
and
Filterdestroy
lifecycle
methods
on
the
target
bean
:end
:start
Return
the
WebApplicationContext
passed
in
at
construction
time,
if
available
Otherwise,
attempt
to
retrieve
a
WebApplicationContext
from
the
ServletContext
attribute
with
the
#setContextAttribute
configured
name
if
set
Otherwise
look
up
a
WebApplicationContext
under
the
well-known
"root"
application
context
attribute
The
WebApplicationContext
must
have
already
been
loaded
and
stored
in
the
ServletContext
before
this
filter
gets
initialized
(or
invoked)
<p>Subclasses
may
override
this
method
to
provide
a
different
WebApplicationContext
retrieval
strategy
:end
:start
Initialize
the
Filter
delegate,
defined
as
bean
the
given
Spring
application
context
<p>The
default
implementation
fetches
the
bean
from
the
application
context
and
calls
the
standard
Filterinit
method
on
it,
passing
in
the
FilterConfig
of
this
Filter
proxy
:end
:start
Actually
invoke
the
delegate
Filter
with
the
given
request
and
response
:end
:start
Destroy
the
Filter
delegate
Default
implementation
simply
calls
Filterdestroy
on
it
:end
:start
Simple
base
implementation
of
javaxservletFilter
which
treats
its
config
parameters
({@code
init-param
entries
within
the
filter
tag
in
webxml)
as
bean
properties
<p>A
handy
superclass
for
any
type
of
filter
Type
conversion
of
config
parameters
is
automatic,
with
the
corresponding
setter
method
getting
invoked
with
the
converted
value
It
is
also
possible
for
subclasses
to
specify
required
properties
Parameters
without
matching
bean
property
setter
will
simply
be
ignored
<p>This
filter
leaves
actual
filtering
to
subclasses,
which
have
to
implement
the
javaxservletFilter#doFilter
method
<p>This
generic
filter
base
class
has
no
dependency
on
the
Spring
orgspringframeworkcontextApplicationContext
concept
Filters
usually
don't
load
their
own
context
but
rather
access
service
beans
from
the
Spring
root
application
context,
accessible
via
the
filter's
#getServletContext()
ServletContext
(see
orgspringframeworkwebcontextsupportWebApplicationContextUtils)
:end
:start
Logger
available
to
subclasses
:end
:start
Stores
the
bean
name
as
defined
in
the
Spring
bean
factory
<p>Only
relevant
in
case
of
initialization
as
bean,
to
have
a
name
as
fallback
to
the
filter
name
usually
provided
by
a
FilterConfig
instance
:end
:start
<p>Any
environment
set
here
overrides
the
StandardServletEnvironment
provided
by
default
<p>This
Environment
object
is
used
only
for
resolving
placeholders
in
resource
paths
passed
into
init-parameters
for
this
filter
If
no
init-params
are
used,
this
Environment
can
be
essentially
ignored
:end
:start
Stores
the
ServletContext
that
the
bean
factory
runs
in
<p>Only
relevant
in
case
of
initialization
as
bean,
to
have
a
ServletContext
as
fallback
to
the
context
usually
provided
by
a
FilterConfig
instance
:end
:start
Calls
the
initFilterBean()
method
that
might
contain
custom
initialization
of
a
subclass
<p>Only
relevant
in
case
of
initialization
as
bean,
where
the
standard
init(FilterConfig)
method
won't
be
called
:end
:start
Subclasses
can
invoke
this
method
to
specify
that
this
property
(which
must
match
a
JavaBean
property
they
expose)
is
mandatory,
and
must
be
supplied
as
a
config
parameter
This
should
be
called
from
the
constructor
of
a
subclass
<p>This
method
is
only
relevant
in
case
of
traditional
initialization
driven
by
a
FilterConfig
instance
:end
:start
Standard
way
of
initializing
this
filter
Map
config
parameters
onto
bean
properties
of
this
filter,
and
invoke
subclass
initialization
:end
:start
Initialize
the
BeanWrapper
for
this
GenericFilterBean,
possibly
with
custom
editors
<p>This
default
implementation
is
empty
:end
:start
Make
the
FilterConfig
of
this
filter
available,
if
any
Analogous
to
GenericServlet's
getServletConfig()
<p>Public
to
resemble
the
getFilterConfig()
method
of
the
Servlet
Filter
version
that
shipped
with
WebLogic
61
:end
:start
Make
the
name
of
this
filter
available
to
subclasses
Analogous
to
GenericServlet's
getServletName()
<p>Takes
the
FilterConfig's
filter
name
by
default
If
initialized
as
bean
in
a
Spring
application
context,
it
falls
back
to
the
bean
name
as
defined
in
the
bean
factory
:end
:start
Make
the
ServletContext
of
this
filter
available
to
subclasses
Analogous
to
GenericServlet's
getServletContext()
<p>Takes
the
FilterConfig's
ServletContext
by
default
If
initialized
as
bean
in
a
Spring
application
context,
it
falls
back
to
the
ServletContext
that
the
bean
factory
runs
in
:end
:start
Subclasses
may
override
this
to
perform
custom
initialization
All
bean
properties
of
this
filter
will
have
been
set
before
this
method
is
invoked
<p>Note:
This
method
will
be
called
from
standard
filter
initialization
as
well
as
filter
bean
initialization
in
a
Spring
application
context
Filter
name
and
ServletContext
will
be
available
in
both
cases
<p>This
default
implementation
is
empty
:end
:start
Subclasses
may
override
this
to
perform
custom
filter
shutdown
<p>Note:
This
method
will
be
called
from
standard
filter
destruction
as
well
as
filter
bean
destruction
in
a
Spring
application
context
<p>This
default
implementation
is
empty
:end
:start
javaxservletFilter
that
converts
posted
method
parameters
into
HTTP
methods,
retrievable
via
HttpServletRequest#getMethod()
Since
browsers
currently
only
support
GET
and
POST,
a
common
technique
-
used
by
the
Prototype
library,
for
instance
-
is
to
use
a
normal
POST
with
an
additional
hidden
form
field
({@code
_method)
to
pass
the
"real"
HTTP
method
along
This
filter
reads
that
parameter
and
changes
the
HttpServletRequestWrapper#getMethod()
return
value
accordingly
<p>The
name
of
the
request
parameter
defaults
to
_method,
but
can
be
adapted
via
the
#setMethodParam(String)
methodParam
property
<p><b>NOTE:
This
filter
needs
to
run
after
multipart
processing
in
case
of
a
multipart
POST
request,
due
to
its
inherent
need
for
checking
a
POST
body
parameter</b>
So
typically,
put
a
Spring
orgspringframeworkwebmultipartsupportMultipartFilter
<i>before</i>
this
HiddenHttpMethodFilter
in
your
webxml
filter
chain
:end
:start
Default
method
parameter:
_method
:end
:start
Set
the
parameter
name
to
look
for
HTTP
methods
:end
:start
javaxservletFilter
that
makes
form
encoded
data
available
through
the
ServletRequestgetParameter*()
family
of
methods
during
HTTP
PUT
or
PATCH
requests
<p>The
Servlet
spec
requires
form
data
to
be
available
for
HTTP
POST
but
not
for
HTTP
PUT
or
PATCH
requests
This
filter
intercepts
HTTP
PUT
and
PATCH
requests
where
content
type
is
'application/x-www-form-urlencoded',
reads
form
encoded
content
from
the
body
of
the
request,
and
wraps
the
ServletRequest
in
order
to
make
the
form
data
available
as
request
parameters
just
like
it
is
for
HTTP
POST
requests
:end
:start
The
default
character
set
to
use
for
reading
form
data
:end
:start
Request
logging
filter
that
adds
the
request
log
message
to
the
Log4J
nested
diagnostic
context
(NDC)
before
the
request
is
processed,
removing
it
again
after
the
request
is
processed
:end
:start
Logger
available
to
subclasses
:end
:start
Logs
the
before-request
message
through
Log4J
and
adds
a
message
the
Log4J
NDC
before
the
request
is
processed
:end
:start
Determine
the
message
to
be
pushed
onto
the
Log4J
nested
diagnostic
context
<p>Default
is
a
plain
request
log
message
without
prefix
or
suffix
:end
:start
Removes
the
log
message
from
the
Log4J
NDC
after
the
request
is
processed
and
logs
the
after-request
message
through
Log4J
:end
:start
Filter
base
class
that
aims
to
guarantee
a
single
execution
per
request
dispatch,
on
any
servlet
container
It
provides
a
#doFilterInternal
method
with
HttpServletRequest
and
HttpServletResponse
arguments
<p>As
of
Servlet
30,
a
filter
may
be
invoked
as
part
of
a
javaxservletDispatcherTypeREQUEST
REQUEST
or
javaxservletDispatcherTypeASYNC
ASYNC
dispatches
that
occur
in
separate
threads
A
filter
can
be
configured
in
webxml
whether
it
should
be
involved
in
async
dispatches
However,
in
some
cases
servlet
containers
assume
different
default
configuration
Therefore
sub-classes
can
override
the
method
#shouldNotFilterAsyncDispatch()
to
declare
statically
if
they
should
indeed
be
invoked,
<em>once</em>,
during
both
types
of
dispatches
in
order
to
provide
thread
initialization,
logging,
security,
and
so
on
This
mechanism
complements
and
does
not
replace
the
need
to
configure
a
filter
in
webxml
with
dispatcher
types
<p>Sub-classes
may
use
#isAsyncDispatch(HttpServletRequest)
to
determine
when
a
filter
is
invoked
as
part
of
an
async
dispatch,
and
use
#isAsyncStarted(HttpServletRequest)
to
determine
when
the
request
has
been
placed
in
async
mode
and
therefore
the
current
dispatch
won't
be
the
last
one
<p>Yet
another
dispatch
type
that
also
occurs
in
its
own
thread
is
javaxservletDispatcherTypeERROR
ERROR
Sub-classes
can
override
#shouldNotFilterErrorDispatch()
if
they
wish
to
declare
statically
if
they
should
be
invoked
<em>once</em>
during
error
dispatches
<p>The
#getAlreadyFilteredAttributeName
method
determines
how
to
identify
that
a
request
is
already
filtered
The
default
implementation
is
based
on
the
configured
name
of
the
concrete
filter
instance
:end
:start
Suffix
that
gets
appended
to
the
filter
name
for
the
"already
filtered"
request
attribute
:end
:start
This
doFilter
implementation
stores
a
request
attribute
for
"already
filtered",
proceeding
without
filtering
again
if
the
attribute
is
already
there
:end
:start
The
dispatcher
type
javaxservletDispatcherTypeASYNC
introduced
in
Servlet
30
means
a
filter
can
be
invoked
in
more
than
one
thread
over
the
course
of
a
single
request
This
method
returns
true
if
the
filter
is
currently
executing
within
an
asynchronous
dispatch
:end
:start
Whether
request
processing
is
in
asynchronous
mode
meaning
that
the
response
will
not
be
committed
after
the
current
thread
is
exited
:end
:start
Return
the
name
of
the
request
attribute
that
identifies
that
a
request
is
already
filtered
<p>Default
implementation
takes
the
configured
name
of
the
concrete
filter
instance
and
appends
"FILTERED"
If
the
filter
is
not
fully
initialized,
it
falls
back
to
its
class
name
:end
:start
Can
be
overridden
in
subclasses
for
custom
filtering
control,
returning
true
to
avoid
filtering
of
the
given
request
<p>The
default
implementation
always
returns
false
:end
:start
The
dispatcher
type
javaxservletDispatcherTypeASYNC
introduced
in
Servlet
30
means
a
filter
can
be
invoked
in
more
than
one
thread
over
the
course
of
a
single
request
Some
filters
only
need
to
filter
the
initial
thread
(eg
request
wrapping)
while
others
may
need
to
be
invoked
at
least
once
in
each
additional
thread
for
example
for
setting
up
thread
locals
or
to
perform
final
processing
at
the
very
end
<p>Note
that
although
a
filter
can
be
mapped
to
handle
specific
dispatcher
types
via
webxml
or
in
Java
through
the
ServletContext,
servlet
containers
may
enforce
different
defaults
with
regards
to
dispatcher
types
This
flag
enforces
the
design
intent
of
the
filter
<p>The
default
return
value
is
"true",
which
means
the
filter
will
not
be
invoked
during
subsequent
async
dispatches
If
"false",
the
filter
will
be
invoked
during
async
dispatches
with
the
same
guarantees
of
being
invoked
only
once
during
a
request
within
a
single
thread
:end
:start
Whether
to
filter
error
dispatches
such
as
when
the
servlet
container
processes
and
error
mapped
in
webxml
The
default
return
value
is
"true",
which
means
the
filter
will
not
be
invoked
in
case
of
an
error
dispatch
:end
:start
Same
contract
as
for
doFilter,
but
guaranteed
to
be
just
invoked
once
per
request
within
a
single
request
thread
See
#shouldNotFilterAsyncDispatch()
for
details
<p>Provides
HttpServletRequest
and
HttpServletResponse
arguments
instead
of
the
default
ServletRequest
and
ServletResponse
ones
:end
:start
Servlet
23
Filter
that
exposes
the
request
to
the
current
thread,
through
both
orgspringframeworkcontexti18nLocaleContextHolder
and
RequestContextHolder
To
be
registered
as
filter
in
webxml
<p>Alternatively,
Spring's
orgspringframeworkwebcontextrequestRequestContextListener
and
Spring's
orgspringframeworkwebservletDispatcherServlet
also
expose
the
same
request
context
to
the
current
thread
<p>This
filter
is
mainly
for
use
with
third-party
servlets,
eg
the
JSF
FacesServlet
Within
Spring's
own
web
support,
DispatcherServlet's
processing
is
perfectly
sufficient
:end
:start
Set
whether
to
expose
the
LocaleContext
and
RequestAttributes
as
inheritable
for
child
threads
(using
an
javalangInheritableThreadLocal)
<p>Default
is
"false",
to
avoid
side
effects
on
spawned
background
threads
Switch
this
to
"true"
to
enable
inheritance
for
custom
child
threads
which
are
spawned
during
request
processing
and
only
used
for
this
request
(that
is,
ending
after
their
initial
task,
without
reuse
of
the
thread)
<p><b>WARNING:</b>
Do
not
use
inheritance
for
child
threads
if
you
are
accessing
a
thread
pool
which
is
configured
to
potentially
add
new
threads
on
demand
(eg
a
JDK
javautilconcurrentThreadPoolExecutor),
since
this
will
expose
the
inherited
context
to
such
a
pooled
thread
:end
:start
Returns
"false"
so
that
the
filter
may
set
up
the
request
context
in
each
asynchronously
dispatched
thread
:end
:start
Returns
"false"
so
that
the
filter
may
set
up
the
request
context
in
an
error
dispatch
:end
:start
Simple
request
logging
filter
that
writes
the
request
URI
(and
optionally
the
query
string)
to
the
ServletContext
log
:end
:start
Writes
a
log
message
before
the
request
is
processed
:end
:start
Writes
a
log
message
after
the
request
is
processed
:end
:start
javaxservletFilter
that
generates
an
ETag
value
based
on
the
content
on
the
response
This
ETag
is
compared
to
the
If-None-Match
header
of
the
request
If
these
headers
are
equal,
the
response
content
is
not
sent,
but
rather
a
304
"Not
Modified"
status
instead
<p>Since
the
ETag
is
based
on
the
response
content,
the
response
(eg
a
orgspringframeworkwebservletView)
is
still
rendered
As
such,
this
filter
only
saves
bandwidth,
not
server
performance
:end
:start
The
default
value
is
"false"
so
that
the
filter
may
delay
the
generation
of
an
ETag
until
the
last
asynchronously
dispatched
thread
:end
:start
Indicates
whether
the
given
request
and
response
are
eligible
for
ETag
generation
<p>The
default
implementation
returns
true
if
all
conditions
match:
<ul>
<li>response
status
codes
in
the
2xx
series</li>
<li>request
method
is
a
GET</li>
<li>response
Cache-Control
header
is
not
set
or
does
not
contain
a
"no-store"
directive</li>
</ul>
:end
:start
Generate
the
ETag
header
value
from
the
given
response
body
byte
array
<p>The
default
implementation
generates
an
MD5
hash
:end
:start
Abstract
base
for
exceptions
related
to
media
types
Adds
a
list
of
supported
MediaType
MediaTypes
:end
:start
Create
a
new
HttpMediaTypeException
:end
:start
Create
a
new
HttpMediaTypeException
with
a
list
of
supported
media
types
:end
:start
Return
the
list
of
supported
media
types
:end
:start
Exception
thrown
when
the
request
handler
cannot
generate
a
response
that
is
acceptable
by
the
client
:end
:start
Create
a
new
HttpMediaTypeNotAcceptableException
:end
:start
Create
a
new
HttpMediaTypeNotSupportedException
:end
:start
Exception
thrown
when
a
client
POSTs,
PUTs,
or
PATCHes
content
of
a
type
not
supported
by
request
handler
:end
:start
Create
a
new
HttpMediaTypeNotSupportedException
:end
:start
Create
a
new
HttpMediaTypeNotSupportedException
:end
:start
Create
a
new
HttpMediaTypeNotSupportedException
:end
:start
Return
the
HTTP
request
content
type
method
that
caused
the
failure
:end
:start
Plain
handler
interface
for
components
that
process
HTTP
requests,
analogous
to
a
Servlet
Only
declares
javaxservletServletException
and
javaioIOException,
to
allow
for
usage
within
any
javaxservlethttpHttpServlet
This
interface
is
essentially
the
direct
equivalent
of
an
HttpServlet,
reduced
to
a
central
handle
method
<p>The
easiest
way
to
expose
an
HttpRequestHandler
bean
in
Spring
style
is
to
define
it
in
Spring's
root
web
application
context
and
define
an
orgspringframeworkwebcontextsupportHttpRequestHandlerServlet
in
webxml,
pointing
at
the
target
HttpRequestHandler
bean
through
its
servlet-name
which
needs
to
match
the
target
bean
name
<p>Supported
as
a
handler
type
within
Spring's
orgspringframeworkwebservletDispatcherServlet,
being
able
to
interact
with
the
dispatcher's
advanced
mapping
and
interception
facilities
This
is
the
recommended
way
of
exposing
an
HttpRequestHandler,
while
keeping
the
handler
implementations
free
of
direct
dependencies
on
a
DispatcherServlet
environment
<p>Typically
implemented
to
generate
binary
responses
directly,
with
no
separate
view
resource
involved
This
differentiates
it
from
a
orgspringframeworkwebservletmvcController
within
Spring's
Web
MVC
framework
The
lack
of
a
orgspringframeworkwebservletModelAndView
return
value
gives
a
clearer
signature
to
callers
other
than
the
DispatcherServlet,
indicating
that
there
will
never
be
a
view
to
render
<p>As
of
Spring
20,
Spring's
HTTP-based
remote
exporters,
such
as
orgspringframeworkremotinghttpinvokerHttpInvokerServiceExporter
and
orgspringframeworkremotingcauchoHessianServiceExporter,
implement
this
interface
rather
than
the
more
extensive
Controller
interface,
for
minimal
dependencies
on
Spring-specific
web
infrastructure
<p>Note
that
HttpRequestHandlers
may
optionally
implement
the
orgspringframeworkwebservletmvcLastModified
interface,
just
like
Controllers
can,
<i>provided
that
they
run
within
Spring's
DispatcherServlet</i>
However,
this
is
usually
not
necessary,
since
HttpRequestHandlers
typically
only
support
POST
requests
to
begin
with
Alternatively,
a
handler
may
implement
the
"If-Modified-Since"
HTTP
header
processing
manually
within
its
handle
method
:end
:start
Process
the
given
request,
generating
a
response
:end
:start
Exception
thrown
when
a
request
handler
does
not
support
a
specific
request
method
:end
:start
Create
a
new
HttpRequestMethodNotSupportedException
:end
:start
Create
a
new
HttpRequestMethodNotSupportedException
:end
:start
Create
a
new
HttpRequestMethodNotSupportedException
:end
:start
Create
a
new
HttpRequestMethodNotSupportedException
:end
:start
Create
a
new
HttpRequestMethodNotSupportedException
:end
:start
Return
the
HTTP
request
method
that
caused
the
failure
:end
:start
Return
the
actually
supported
HTTP
methods,
if
known
:end
:start
Return
the
actually
supported
HTTP
methods,
if
known,
as
HttpMethod
instances
:end
:start
Exception
thrown
when
an
HTTP
request
handler
requires
a
pre-existing
session
:end
:start
Create
a
new
HttpSessionRequiredException
:end
:start
Base
class
for
JSF
NavigationHandler
implementations
that
want
to
be
capable
of
decorating
an
original
NavigationHandler
<p>Supports
the
standard
JSF
style
of
decoration
(through
a
constructor
argument)
as
well
as
an
overloaded
handleNavigation
method
with
explicit
NavigationHandler
argument
(passing
in
the
original
NavigationHandler)
Subclasses
are
forced
to
implement
this
overloaded
handleNavigation
method
Standard
JSF
invocations
will
automatically
delegate
to
the
overloaded
method,
with
the
constructor-injected
NavigationHandler
as
argument
:end
:start
Create
a
DecoratingNavigationHandler
without
fixed
original
NavigationHandler
:end
:start
Create
a
DecoratingNavigationHandler
with
fixed
original
NavigationHandler
:end
:start
Return
the
fixed
original
NavigationHandler
decorated
by
this
handler,
if
any
(that
is,
if
passed
in
through
the
constructor)
:end
:start
This
implementation
of
the
standard
JSF
handleNavigation
method
delegates
to
the
overloaded
variant,
passing
in
constructor-injected
NavigationHandler
as
argument
:end
:start
Special
handleNavigation
variant
with
explicit
NavigationHandler
argument
Either
called
directly,
by
code
with
an
explicit
original
handler,
or
called
from
the
standard
handleNavigation
method,
as
plain
JSF-defined
NavigationHandler
<p>Implementations
should
invoke
callNextHandlerInChain
to
delegate
to
the
next
handler
in
the
chain
This
will
always
call
the
most
appropriate
next
handler
(see
callNextHandlerInChain
javadoc)
Alternatively,
the
decorated
NavigationHandler
or
the
passed-in
original
NavigationHandler
can
also
be
called
directly;
however,
this
is
not
as
flexible
in
terms
of
reacting
to
potential
positions
in
the
chain
:end
:start
Method
to
be
called
by
subclasses
when
intending
to
delegate
to
the
next
handler
in
the
NavigationHandler
chain
Will
always
call
the
most
appropriate
next
handler,
either
the
decorated
NavigationHandler
passed
in
as
constructor
argument
or
the
original
NavigationHandler
as
passed
into
this
method
-
according
to
the
position
of
this
instance
in
the
chain
<p>Will
call
the
decorated
NavigationHandler
specified
as
constructor
argument,
if
any
In
case
of
a
DecoratingNavigationHandler
as
target,
the
original
NavigationHandler
as
passed
into
this
method
will
be
passed
on
to
the
next
element
in
the
chain:
This
ensures
propagation
of
the
original
handler
that
the
last
element
in
the
handler
chain
might
delegate
back
to
In
case
of
a
standard
NavigationHandler
as
target,
the
original
handler
will
simply
not
get
passed
on;
no
delegating
back
to
the
original
is
possible
further
down
the
chain
in
that
scenario
<p>If
no
decorated
NavigationHandler
specified
as
constructor
argument,
this
instance
is
the
last
element
in
the
chain
Hence,
this
method
will
call
the
original
NavigationHandler
as
passed
into
this
method
If
no
original
NavigationHandler
has
been
passed
in
(for
example
if
this
instance
is
the
last
element
in
a
chain
with
standard
NavigationHandlers
as
earlier
elements),
this
method
corresponds
to
a
no-op
:end
:start
JSF
NavigationHandler
implementation
that
delegates
to
a
NavigationHandler
bean
obtained
from
the
Spring
root
WebApplicationContext
<p>Configure
this
handler
proxy
in
your
faces-configxml
file
as
follows:
<pre
class="code">
&lt;application&gt;

&lt;navigation-handler&gt;
orgspringframeworkwebjsfDelegatingNavigationHandlerProxy
&lt;/navigation-handler&gt;

&lt;/application&gt;</pre>
By
default,
the
Spring
ApplicationContext
will
be
searched
for
the
NavigationHandler
under
the
bean
name
"jsfNavigationHandler"
In
the
simplest
case,
this
is
a
plain
Spring
bean
definition
like
the
following
However,
all
of
Spring's
bean
configuration
power
can
be
applied
to
such
a
bean,
in
particular
all
flavors
of
dependency
injection
<pre
class="code">
&lt;bean
name="jsfNavigationHandler"
class="mypackageMyNavigationHandler"&gt;
&lt;property
name="myProperty"
ref="myOtherBean"/&gt;
&lt;/bean&gt;</pre>
The
target
NavigationHandler
bean
will
typically
extend
the
standard
JSF
NavigationHandler
class
However,
note
that
decorating
the
original
NavigationHandler
(the
JSF
provider's
default
handler)
is
<i>not</i>
supported
in
such
a
scenario,
since
we
can't
inject
the
original
handler
in
standard
JSF
style
(that
is,
as
constructor
argument)
<p>For
<b>decorating
the
original
NavigationHandler</b>,
make
sure
that
your
target
bean
extends
Spring's
<b>DecoratingNavigationHandler</b>
class
This
allows
to
pass
in
the
original
handler
as
method
argument,
which
this
proxy
automatically
detects
Note
that
a
DecoratingNavigationHandler
subclass
will
still
work
as
standard
JSF
NavigationHandler
as
well!
<p>This
proxy
may
be
subclassed
to
change
the
bean
name
used
to
search
for
the
navigation
handler,
change
the
strategy
used
to
obtain
the
target
handler,
or
change
the
strategy
used
to
access
the
ApplicationContext
(normally
obtained
via
FacesContextUtils#getWebApplicationContext(FacesContext))
:end
:start
Default
name
of
the
target
bean
in
the
Spring
application
context:
"jsfNavigationHandler"
:end
:start
Create
a
new
DelegatingNavigationHandlerProxy
:end
:start
Create
a
new
DelegatingNavigationHandlerProxy
:end
:start
Handle
the
navigation
request
implied
by
the
specified
parameters,
through
delegating
to
the
target
bean
in
the
Spring
application
context
<p>The
target
bean
needs
to
extend
the
JSF
NavigationHandler
class
If
it
extends
Spring's
DecoratingNavigationHandler,
the
overloaded
handleNavigation
method
with
the
original
NavigationHandler
as
argument
will
be
used
Else,
the
standard
handleNavigation
method
will
be
called
:end
:start
Return
the
target
NavigationHandler
to
delegate
to
<p>By
default,
a
bean
with
the
name
"jsfNavigationHandler"
is
obtained
from
the
Spring
root
WebApplicationContext,
for
every
invocation
:end
:start
Return
the
name
of
the
target
NavigationHandler
bean
in
the
BeanFactory
Default
is
"jsfNavigationHandler"
:end
:start
Retrieve
the
Spring
BeanFactory
to
delegate
bean
name
resolution
to
<p>Default
implementation
delegates
to
getWebApplicationContext
Can
be
overridden
to
provide
an
arbitrary
BeanFactory
reference
to
resolve
against;
usually,
this
will
be
a
full
Spring
ApplicationContext
:end
:start
Retrieve
the
web
application
context
to
delegate
bean
name
resolution
to
<p>Default
implementation
delegates
to
FacesContextUtils
:end
:start
JSF
PhaseListener
implementation
that
delegates
to
one
or
more
Spring-managed
PhaseListener
beans
coming
from
the
Spring
root
WebApplicationContext
<p>Configure
this
listener
multicaster
in
your
faces-configxml
file
as
follows:
<pre
class="code">
&lt;application&gt;

&lt;phase-listener&gt;
orgspringframeworkwebjsfDelegatingPhaseListenerMulticaster
&lt;/phase-listener&gt;

&lt;/application&gt;</pre>
The
multicaster
will
delegate
all
beforePhase
and
afterPhase
events
to
all
target
PhaseListener
beans
By
default,
those
will
simply
be
obtained
by
type:
All
beans
in
the
Spring
root
WebApplicationContext
that
implement
the
PhaseListener
interface
will
be
fetched
and
invoked
<p>Note:
This
multicaster's
getPhaseId()
method
will
always
return
ANY_PHASE
<b>The
phase
id
exposed
by
the
target
listener
beans
will
be
ignored;
all
events
will
be
propagated
to
all
listeners</b>
<p>This
multicaster
may
be
subclassed
to
change
the
strategy
used
to
obtain
the
listener
beans,
or
to
change
the
strategy
used
to
access
the
ApplicationContext
(normally
obtained
via
FacesContextUtils#getWebApplicationContext(FacesContext))
:end
:start
Obtain
the
delegate
PhaseListener
beans
from
the
Spring
root
WebApplicationContext
:end
:start
Retrieve
the
Spring
BeanFactory
to
delegate
bean
name
resolution
to
<p>The
default
implementation
delegates
to
getWebApplicationContext
Can
be
overridden
to
provide
an
arbitrary
ListableBeanFactory
reference
to
resolve
against;
usually,
this
will
be
a
full
Spring
ApplicationContext
:end
:start
Retrieve
the
web
application
context
to
delegate
bean
name
resolution
to
<p>The
default
implementation
delegates
to
FacesContextUtils
:end
:start
JSF
ELResolver
that
delegates
to
the
Spring
root
WebApplicationContext,
resolving
name
references
to
Spring-defined
beans
<p>Configure
this
resolver
in
your
faces-configxml
file
as
follows:
<pre
class="code">
&lt;application>

&lt;el-resolver>orgspringframeworkwebjsfelSpringBeanFacesELResolver&lt;/el-resolver>
&lt;/application></pre>
All
your
JSF
expressions
can
then
implicitly
refer
to
the
names
of
Spring-managed
service
layer
beans,
for
example
in
property
values
of
JSF-managed
beans:
<pre
class="code">
&lt;managed-bean>
&lt;managed-bean-name>myJsfManagedBean&lt;/managed-bean-name>
&lt;managed-bean-class>exampleMyJsfManagedBean&lt;/managed-bean-class>
&lt;managed-bean-scope>session&lt;/managed-bean-scope>
&lt;managed-property>
&lt;property-name>mySpringManagedBusinessObject&lt;/property-name>
&lt;value>#{mySpringManagedBusinessObject&lt;/value>
&lt;/managed-property>
&lt;/managed-bean></pre>
with
"mySpringManagedBusinessObject"
defined
as
Spring
bean
in
applicationContextxml:
<pre
class="code">
&lt;bean
id="mySpringManagedBusinessObject"
class="exampleMySpringManagedBusinessObject">

&lt;/bean></pre>
:end
:start
This
implementation
delegates
to
#getWebApplicationContext
Can
be
overridden
to
provide
an
arbitrary
BeanFactory
reference
to
resolve
against;
usually,
this
will
be
a
full
Spring
ApplicationContext
:end
:start
Retrieve
the
web
application
context
to
delegate
bean
name
resolution
to
<p>The
default
implementation
delegates
to
FacesContextUtils
:end
:start
Special
JSF
ELResolver
that
exposes
the
Spring
WebApplicationContext
instance
under
a
variable
named
"webApplicationContext"
<p>In
contrast
to
SpringBeanFacesELResolver,
this
ELResolver
variant
does
<i>not</i>
resolve
JSF
variable
names
as
Spring
bean
names
It
rather
exposes
Spring's
root
WebApplicationContext
<i>itself</i>
under
a
special
name,
and
is
able
to
resolve
"webApplicationContextmySpringManagedBusinessObject"
dereferences
to
Spring-defined
beans
in
that
application
context
<p>Configure
this
resolver
in
your
faces-configxml
file
as
follows:
<pre
class="code">
&lt;application>

&lt;el-resolver>orgspringframeworkwebjsfelWebApplicationContextFacesELResolver&lt;/el-resolver>
&lt;/application></pre>
:end
:start
Name
of
the
exposed
WebApplicationContext
variable:
"webApplicationContext"
:end
:start
Logger
available
to
subclasses
:end
:start
Retrieve
the
WebApplicationContext
reference
to
expose
<p>The
default
implementation
delegates
to
FacesContextUtils,
returning
null
if
no
WebApplicationContext
found
:end
:start
Convenience
methods
to
retrieve
Spring's
root
WebApplicationContext
for
a
given
JSF
FacesContext
This
is
useful
for
accessing
a
Spring
application
context
from
custom
JSF-based
code
<p>Analogous
to
Spring's
WebApplicationContextUtils
for
the
ServletContext
:end
:start
Find
the
root
WebApplicationContext
for
this
web
app,
typically
loaded
via
ContextLoaderListener
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Find
the
root
WebApplicationContext
for
this
web
app,
typically
loaded
via
ContextLoaderListener
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Return
the
best
available
mutex
for
the
given
session:
that
is,
an
object
to
synchronize
on
for
the
given
session
<p>Returns
the
session
mutex
attribute
if
available;
usually,
this
means
that
the
HttpSessionMutexListener
needs
to
be
defined
in
webxml
Falls
back
to
the
Session
reference
itself
if
no
mutex
attribute
found
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
Session
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
A
base
abstract
class
to
resolve
method
arguments
annotated
with
@CookieValue
Subclasses
extract
the
cookie
value
from
the
request
<p>An
@CookieValue
is
a
named
value
that
is
resolved
from
a
cookie
It
has
a
required
flag
and
a
default
value
to
fall
back
on
when
the
cookie
does
not
exist
<p>A
WebDataBinder
may
be
invoked
to
apply
type
conversion
to
the
resolved
cookie
value
:end
:start
Abstract
base
class
for
resolving
method
arguments
from
a
named
value
Request
parameters,
request
headers,
and
path
variables
are
examples
of
named
values
Each
may
have
a
name,
a
required
flag,
and
a
default
value
<p>Subclasses
define
how
to
do
the
following:
<ul>
<li>Obtain
named
value
information
for
a
method
parameter
<li>Resolve
names
into
argument
values
<li>Handle
missing
argument
values
when
argument
values
are
required
<li>Optionally
handle
a
resolved
value
</ul>
<p>A
default
value
string
can
contain
${
placeholders
and
Spring
Expression
Language
#{
expressions
For
this
to
work
a
ConfigurableBeanFactory
must
be
supplied
to
the
class
constructor
<p>A
WebDataBinder
is
created
to
apply
type
conversion
to
the
resolved
argument
value
if
it
doesn't
match
the
method
parameter
type
:end
:start
Create
the
NamedValueInfo
object
for
the
given
method
parameter
Implementations
typically
retrieve
the
method
annotation
by
means
of
MethodParameter#getParameterAnnotation(Class)
:end
:start
Resolves
the
given
parameter
type
and
value
name
into
an
argument
value
:end
:start
Invoked
when
a
named
value
is
required,
but
#resolveName(String,
MethodParameter,
NativeWebRequest)
returned
null
and
there
is
no
default
value
Subclasses
typically
throw
an
exception
in
this
case
:end
:start
Invoked
after
a
value
is
resolved
:end
:start
Represents
the
information
about
a
named
value,
including
name,
whether
it's
required
and
a
default
value
:end
:start
Represents
the
information
about
a
named
value,
including
name,
whether
it's
required
and
a
default
value
:end
:start
An
abstract
base
class
adapting
a
WebArgumentResolver
to
the
HandlerMethodArgumentResolver
contract
<p><strong>Note:</strong>
This
class
is
provided
for
backwards
compatibility
However
it
is
recommended
to
re-write
a
WebArgumentResolver
as
HandlerMethodArgumentResolver
Since
#supportsParameter
can
only
be
implemented
by
actually
resolving
the
value
and
then
checking
the
result
is
not
WebArgumentResolver#UNRESOLVED
any
exceptions
raised
must
be
absorbed
and
ignored
since
it's
not
clear
whether
the
adapter
doesn't
support
the
parameter
or
whether
it
failed
for
an
internal
reason
The
HandlerMethodArgumentResolver
contract
also
provides
access
to
model
attributes
and
to
WebDataBinderFactory
(for
type
conversion)
:end
:start
Create
a
new
instance
:end
:start
Actually
resolve
the
value
and
check
the
resolved
value
is
not
WebArgumentResolver#UNRESOLVED
absorbing
_any_
exceptions
:end
:start
Required
for
access
to
NativeWebRequest
in
#supportsParameter
:end
:start
Delegate
to
the
WebArgumentResolver
instance
:end
:start
Resolves
Errors
method
arguments
<p>An
Errors
method
argument
is
expected
to
appear
immediately
after
the
model
attribute
in
the
method
signature
It
is
resolved
by
expecting
the
last
two
attributes
added
to
the
model
to
be
the
model
attribute
and
its
BindingResult
:end
:start
Discovers
ExceptionHandler
@ExceptionHandler
methods
in
a
given
class,
including
all
of
its
superclasses,
and
helps
to
resolve
a
given
Exception
to
the
exception
types
supported
by
a
given
Method
:end
:start
A
filter
for
selecting
@ExceptionHandler
methods
:end
:start
A
constructor
that
finds
ExceptionHandler
methods
in
the
given
type
:end
:start
Whether
the
contained
type
has
any
exception
mappings
:end
:start
Find
a
Method
to
handle
the
given
exception
Use
ExceptionDepthComparator
if
more
than
one
match
is
found
:end
:start
Find
a
Method
to
handle
the
given
exception
type
This
can
be
useful
if
an
Exception
instance
is
not
available
(eg
for
tools)
:end
:start
Resolves
method
arguments
annotated
with
@Value
<p>An
@Value
does
not
have
a
name
but
gets
resolved
from
the
default
value
string,
which
may
contain
${
placeholder
or
Spring
Expression
Language
#{
expressions
<p>A
WebDataBinder
may
be
invoked
to
apply
type
conversion
to
resolved
argument
value
:end
:start
Adds
initialization
to
a
WebDataBinder
via
@InitBinder
methods
:end
:start
Create
a
new
instance
:end
:start
Initialize
a
WebDataBinder
with
@InitBinder
methods
If
the
@InitBinder
annotation
specifies
attributes
names,
it
is
invoked
only
if
the
names
include
the
target
object
name
:end
:start
Return
true
if
the
given
@InitBinder
method
should
be
invoked
to
initialize
the
given
WebDataBinder
<p>The
default
implementation
checks
if
target
object
name
is
included
in
the
attribute
names
specified
in
the
@InitBinder
annotation
:end
:start
Resolves
Map
method
arguments
and
handles
Map
return
values
<p>A
Map
return
value
can
be
interpreted
in
more
than
one
ways
depending
on
the
presence
of
annotations
like
@ModelAttribute
or
@ResponseBody
Therefore
this
handler
should
be
configured
after
the
handlers
that
support
these
annotations
:end
:start
Resolves
method
arguments
annotated
with
@ModelAttribute
and
handles
return
values
from
methods
annotated
with
@ModelAttribute
<p>Model
attributes
are
obtained
from
the
model
or
if
not
found
possibly
created
with
a
default
constructor
if
it
is
available
Once
created,
the
attributed
is
populated
with
request
data
via
data
binding
and
also
validation
may
be
applied
if
the
argument
is
annotated
with
@javaxvalidationValid
<p>When
this
handler
is
created
with
annotationNotRequired=true,
any
non-simple
type
argument
and
return
value
is
regarded
as
a
model
attribute
with
or
without
the
presence
of
an
@ModelAttribute
:end
:start
Resolve
the
argument
from
the
model
or
if
not
found
instantiate
it
with
its
default
if
it
is
available
The
model
attribute
is
then
populated
with
request
values
via
data
binding
and
optionally
validated
if
@javavalidationValid
is
present
on
the
argument
:end
:start
Extension
point
to
create
the
model
attribute
if
not
found
in
the
model
The
default
implementation
uses
the
default
constructor
:end
:start
Extension
point
to
bind
the
request
to
the
target
object
:end
:start
Validate
the
model
attribute
if
applicable
<p>The
default
implementation
checks
for
@javaxvalidationValid
:end
:start
Whether
to
raise
a
BindException
on
validation
errors
:end
:start
Return
true
if
there
is
a
method-level
@ModelAttribute
or
if
it
is
a
non-simple
type
when
annotationNotRequired=true
:end
:start
Add
non-null
return
values
to
the
ModelAndViewContainer
:end
:start
Provides
methods
to
initialize
the
Model
before
controller
method
invocation
and
to
update
it
afterwards
On
initialization,
the
model
is
populated
with
attributes
from
the
session
or
by
invoking
@ModelAttribute
methods
On
update,
model
attributes
are
synchronized
with
the
session
--
either
adding
or
removing
them
Also
BindingResult
attributes
where
missing
:end
:start
Create
a
new
instance
with
the
given
@ModelAttribute
methods
:end
:start
Populate
the
model
in
the
following
order:
<ol>
<li>Retrieve
"known"
session
attributes
--
ie
attributes
listed
via
SessionAttributes
@SessionAttributes
and
previously
stored
in
the
in
the
model
at
least
once
<li>Invoke
ModelAttribute
@ModelAttribute
methods
<li>Find
method
arguments
eligible
as
session
attributes
and
retrieve
them
if
they're
not
already
present
in
the
model
</ol>
:end
:start
Derive
the
model
attribute
name
for
the
given
return
value
using
one
of
the
following:
<ol>
<li>The
method
ModelAttribute
annotation
value
<li>The
declared
return
type
if
it
is
other
than
Object
<li>The
actual
return
value
type
</ol>
:end
:start
Derives
the
model
attribute
name
for
a
method
parameter
based
on:
<ol>
<li>The
parameter
@ModelAttribute
annotation
value
<li>The
parameter
type
</ol>
:end
:start
Synchronize
model
attributes
with
the
session
Add
BindingResult
attributes
where
necessary
:end
:start
Resolves
Model
arguments
and
handles
Model
return
values
<p>A
Model
return
type
has
a
set
purpose
Therefore
this
handler
should
be
configured
ahead
of
handlers
that
support
any
return
value
type
annotated
with
@ModelAttribute
or
@ResponseBody
to
ensure
they
don't
take
over
:end
:start
Resolves
Map
method
arguments
annotated
with
@RequestHeader
For
individual
header
values
annotated
with
@RequestHeader
see
RequestHeaderMethodArgumentResolver
instead
<p>The
created
Map
contains
all
request
header
name/value
pairs
The
method
parameter
type
may
be
a
MultiValueMap
to
receive
all
values
for
a
header,
not
only
the
first
one
:end
:start
Resolves
method
arguments
annotated
with
@RequestHeader
except
for
Map
arguments
See
RequestHeaderMapMethodArgumentResolver
for
details
on
Map
arguments
annotated
with
@RequestHeader
<p>An
@RequestHeader
is
a
named
value
resolved
from
a
request
header
It
has
a
required
flag
and
a
default
value
to
fall
back
on
when
the
request
header
does
not
exist
<p>A
WebDataBinder
is
invoked
to
apply
type
conversion
to
resolved
request
header
values
that
don't
yet
match
the
method
parameter
type
:end
:start
Resolves
Map
method
arguments
annotated
with
an
@{@link
RequestParam
where
the
annotation
does
not
specify
a
request
parameter
name
See
RequestParamMethodArgumentResolver
for
resolving
Map
method
arguments
with
a
request
parameter
name
<p>The
created
Map
contains
all
request
parameter
name/value
pairs
If
the
method
parameter
type
is
MultiValueMap
instead,
the
created
map
contains
all
request
parameters
and
all
there
values
for
cases
where
request
parameters
have
multiple
values
:end
:start
Resolves
method
arguments
annotated
with
@{@link
RequestParam,
arguments
of
type
MultipartFile
in
conjunction
with
Spring's
MultipartResolver
abstraction,
and
arguments
of
type
javaxservlethttpPart
in
conjunction
with
Servlet
30
multipart
requests
This
resolver
can
also
be
created
in
default
resolution
mode
in
which
simple
types
(int,
long,
etc)
not
annotated
with
@{@link
RequestParam
are
also
treated
as
request
parameters
with
the
parameter
name
derived
from
the
argument
name
<p>If
the
method
parameter
type
is
Map,
the
name
specified
in
the
annotation
is
used
to
resolve
the
request
parameter
String
value
The
value
is
then
converted
to
a
Map
via
type
conversion
assuming
a
suitable
Converter
or
PropertyEditor
has
been
registered
Or
if
a
request
parameter
name
is
not
specified
the
RequestParamMapMethodArgumentResolver
is
used
instead
to
provide
access
to
all
request
parameters
in
the
form
of
a
map
<p>A
WebDataBinder
is
invoked
to
apply
type
conversion
to
resolved
request
header
values
that
don't
yet
match
the
method
parameter
type
:end
:start
Supports
the
following:
<ul>
<li>@RequestParam-annotated
method
arguments
This
excludes
Map
params
where
the
annotation
doesn't
specify
a
name
See
RequestParamMapMethodArgumentResolver
instead
for
such
params
<li>Arguments
of
type
MultipartFile
unless
annotated
with
@{@link
RequestPart
<li>Arguments
of
type
javaxservlethttpPart
unless
annotated
with
@{@link
RequestPart
<li>In
default
resolution
mode,
simple
type
arguments
even
if
not
with
@{@link
RequestParam
</ul>
:end
:start
Manages
controller-specific
session
attributes
declared
via
SessionAttributes
@SessionAttributes
Actual
storage
is
delegated
to
a
SessionAttributeStore
instance
<p>When
a
controller
annotated
with
@SessionAttributes
adds
attributes
to
its
model,
those
attributes
are
checked
against
names
and
types
specified
via
@SessionAttributes
Matching
model
attributes
are
saved
in
the
HTTP
session
and
remain
there
until
the
controller
calls
SessionStatus#setComplete()
:end
:start
Create
a
new
instance
for
a
controller
type
Session
attribute
names
and
types
are
extracted
from
the
@SessionAttributes
annotation,
if
present,
on
the
given
type
:end
:start
Whether
the
controller
represented
by
this
instance
has
declared
any
session
attributes
through
an
SessionAttributes
annotation
:end
:start
Whether
the
attribute
name
or
type
match
the
names
and
types
specified
via
@SessionAttributes
in
underlying
controller
<p>Attributes
successfully
resolved
through
this
method
are
"remembered"
and
subsequently
used
in
#retrieveAttributes(WebRequest)
and
#cleanupAttributes(WebRequest)
:end
:start
Store
a
subset
of
the
given
attributes
in
the
session
Attributes
not
declared
as
session
attributes
via
@SessionAttributes
are
ignored
:end
:start
Retrieve
"known"
attributes
from
the
session,
ie
attributes
listed
by
name
in
@SessionAttributes
or
attributes
previously
stored
in
the
model
that
matched
by
type
:end
:start
Remove
"known"
attributes
from
the
session,
ie
attributes
listed
by
name
in
@SessionAttributes
or
attributes
previously
stored
in
the
model
that
matched
by
type
:end
:start
Resolves
a
SessionStatus
argument
by
obtaining
it
from
the
ModelAndViewContainer
:end
:start
Encapsulates
information
about
an
ControllerAdvice
@ControllerAdvice
Spring-managed
bean
without
necessarily
requiring
it
to
be
instantiated
<p>The
#findAnnotatedBeans(ApplicationContext)
method
can
be
used
to
discover
such
beans
However,
an
ControllerAdviceBean
may
be
created
from
any
object,
including
ones
without
an
@ControllerAdvice
:end
:start
Create
an
instance
using
the
given
bean
name
:end
:start
Create
an
instance
using
the
given
bean
instance
:end
:start
Returns
the
order
value
extracted
from
the
ControllerAdvice
annotation
or
Ordered#LOWEST_PRECEDENCE
otherwise
:end
:start
Returns
the
type
of
the
contained
bean
If
the
bean
type
is
a
CGLIB-generated
class,
the
original,
user-defined
class
is
returned
:end
:start
Return
a
bean
instance
if
necessary
resolving
the
bean
name
through
the
BeanFactory
:end
:start
Checks
whether
the
given
bean
type
should
be
assisted
by
this
@ControllerAdvice
instance
:end
:start
Find
the
names
of
beans
annotated
with
ControllerAdvice
@ControllerAdvice
in
the
given
ApplicationContext
and
wrap
them
as
ControllerAdviceBean
instances
:end
:start
Encapsulates
information
about
a
handler
method
consisting
of
a
#getMethod()
method
and
a
#getBean()
bean
Provides
convenient
access
to
method
parameters,
method
return
value,
method
annotations
<p>The
class
may
be
created
with
a
bean
instance
or
with
a
bean
name
(eg
lazy-init
bean,
prototype
bean)
Use
#createWithResolvedBean()
to
obtain
a
HandlerMethod
instance
with
a
bean
instance
resolved
through
the
associated
BeanFactory
:end
:start
Logger
that
is
available
to
subclasses
:end
:start
Create
an
instance
from
a
bean
instance
and
a
method
:end
:start
Create
an
instance
from
a
bean
instance,
method
name,
and
parameter
types
:end
:start
Create
an
instance
from
a
bean
name,
a
method,
and
a
BeanFactory
The
method
#createWithResolvedBean()
may
be
used
later
to
re-create
the
HandlerMethod
with
an
initialized
the
bean
:end
:start
Copy
constructor
for
use
in
sub-classes
:end
:start
Returns
the
bean
for
this
handler
method
:end
:start
Returns
the
method
for
this
handler
method
:end
:start
Returns
the
type
of
the
handler
for
this
handler
method
Note
that
if
the
bean
type
is
a
CGLIB-generated
class,
the
original,
user-defined
class
is
returned
:end
:start
If
the
bean
method
is
a
bridge
method,
this
method
returns
the
bridged
(user-defined)
method
Otherwise
it
returns
the
same
method
as
#getMethod()
:end
:start
Returns
the
method
parameters
for
this
handler
method
:end
:start
Return
the
HandlerMethod
return
type
:end
:start
Return
the
actual
return
value
type
:end
:start
Returns
true
if
the
method
return
type
is
void,
false
otherwise
:end
:start
Returns
a
single
annotation
on
the
underlying
method
traversing
its
super
methods
if
no
annotation
can
be
found
on
the
given
method
itself
:end
:start
If
the
provided
instance
contains
a
bean
name
rather
than
an
object
instance,
the
bean
name
is
resolved
before
a
HandlerMethod
is
created
and
returned
:end
:start
Defines
the
algorithm
for
searching
handler
methods
exhaustively
including
interfaces
and
parent
classes
while
also
dealing
with
parameterized
methods
as
well
as
interface
and
class-based
proxies
:end
:start
Select
handler
methods
for
the
given
handler
type
<p>Callers
define
handler
methods
of
interest
through
the
MethodFilter
parameter
:end
:start
A
UriComponentsContributor
containing
a
list
of
other
contributors
to
delegate
and
also
encapsulating
a
specific
ConversionService
to
use
for
formatting
method
argument
values
to
Strings
:end
:start
Create
an
instance
from
a
collection
of
UriComponentsContributors
or
HandlerMethodArgumentResolvers
Since
both
of
these
tend
to
be
implemented
by
the
same
class,
the
most
convenient
option
is
to
obtain
the
configured
HandlerMethodArgumentResolvers
in
RequestMappingHandlerAdapter
and
provide
that
to
this
constructor
:end
:start
Create
an
instance
from
a
collection
of
UriComponentsContributors
or
HandlerMethodArgumentResolvers
Since
both
of
these
tend
to
be
implemented
by
the
same
class,
the
most
convenient
option
is
to
obtain
the
configured
HandlerMethodArgumentResolvers
in
RequestMappingHandlerAdapter
and
provide
that
to
this
constructor
:end
:start
Create
an
instance
from
a
collection
of
UriComponentsContributors
or
HandlerMethodArgumentResolvers
Since
both
of
these
tend
to
be
implemented
by
the
same
class,
the
most
convenient
option
is
to
obtain
the
configured
HandlerMethodArgumentResolvers
in
the
RequestMappingHandlerAdapter
and
provide
that
to
this
constructor
<p>If
the
ConversionService
argument
is
null,
orgspringframeworkformatsupportDefaultFormattingConversionService
will
be
used
by
default
:end
:start
An
overloaded
method
that
uses
the
ConversionService
created
at
construction
:end
:start
Strategy
interface
for
resolving
method
parameters
into
argument
values
in
the
context
of
a
given
request
:end
:start
Whether
the
given
MethodParameter
method
parameter
is
supported
by
this
resolver
:end
:start
Resolves
a
method
parameter
into
an
argument
value
from
a
given
request
A
ModelAndViewContainer
provides
access
to
the
model
for
the
request
A
WebDataBinderFactory
provides
a
way
to
create
a
WebDataBinder
instance
when
needed
for
data
binding
and
type
conversion
purposes
:end
:start
Resolves
method
parameters
by
delegating
to
a
list
of
registered
HandlerMethodArgumentResolvers
Previously
resolved
method
parameters
are
cached
for
faster
lookups
:end
:start
Return
a
read-only
list
with
the
contained
resolvers,
or
an
empty
list
:end
:start
Whether
the
given
MethodParameter
method
parameter
is
supported
by
any
registered
HandlerMethodArgumentResolver
:end
:start
Iterate
over
registered
HandlerMethodArgumentResolvers
and
invoke
the
one
that
supports
it
:end
:start
Add
the
given
HandlerMethodArgumentResolver
:end
:start
Add
the
given
HandlerMethodArgumentResolvers
:end
:start
Strategy
interface
to
handle
the
value
returned
from
the
invocation
of
a
handler
method

:end
:start
Whether
the
given
MethodParameter
method
return
type
is
supported
by
this
handler
:end
:start
Handle
the
given
return
value
by
adding
attributes
to
the
model
and
setting
a
view
or
setting
the
ModelAndViewContainer#setRequestHandled
flag
to
true
to
indicate
the
response
has
been
handled
directly
:end
:start
Handles
method
return
values
by
delegating
to
a
list
of
registered
HandlerMethodReturnValueHandlers
Previously
resolved
return
types
are
cached
for
faster
lookups
:end
:start
Return
a
read-only
list
with
the
registered
handlers,
or
an
empty
list
:end
:start
Whether
the
given
MethodParameter
method
return
type
is
supported
by
any
registered
HandlerMethodReturnValueHandler
:end
:start
Iterate
over
registered
HandlerMethodReturnValueHandlers
and
invoke
the
one
that
supports
it
:end
:start
Add
the
given
HandlerMethodReturnValueHandler
:end
:start
Add
the
given
HandlerMethodReturnValueHandlers
:end
:start
Provides
a
method
for
invoking
the
handler
method
for
a
given
request
after
resolving
its
method
argument
values
through
registered
HandlerMethodArgumentResolvers
<p>Argument
resolution
often
requires
a
WebDataBinder
for
data
binding
or
for
type
conversion
Use
the
#setDataBinderFactory(WebDataBinderFactory)
property
to
supply
a
binder
factory
to
pass
to
argument
resolvers
<p>Use
#setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolverComposite)
to
customize
the
list
of
argument
resolvers
:end
:start
Create
an
instance
from
the
given
handler
and
method
:end
:start
Create
an
instance
from
a
HandlerMethod
:end
:start
Construct
a
new
handler
method
with
the
given
bean
instance,
method
name
and
parameters
:end
:start
Set
the
WebDataBinderFactory
to
be
passed
to
argument
resolvers
allowing
them
to
create
a
WebDataBinder
for
data
binding
and
type
conversion
purposes
:end
:start
Set
HandlerMethodArgumentResolvers
to
use
to
use
for
resolving
method
argument
values
:end
:start
Set
the
ParameterNameDiscoverer
for
resolving
parameter
names
when
needed
(eg
default
request
attribute
name)
<p>Default
is
a
orgspringframeworkcoreDefaultParameterNameDiscoverer
:end
:start
Invoke
the
method
after
resolving
its
argument
values
in
the
context
of
the
given
request
<p>Argument
values
are
commonly
resolved
through
HandlerMethodArgumentResolvers
The
provideArgs
parameter
however
may
supply
argument
values
to
be
used
directly,
ie
without
argument
resolution
Examples
of
provided
argument
values
include
a
WebDataBinder,
a
SessionStatus,
or
a
thrown
exception
instance
Provided
argument
values
are
checked
before
argument
resolvers
:end
:start
Adds
HandlerMethod
details
such
as
the
controller
type
and
method
signature
to
the
given
error
message
:end
:start
Records
model
and
view
related
decisions
made
by
HandlerMethodArgumentResolvers
and
HandlerMethodReturnValueHandlers
during
the
course
of
invocation
of
a
controller
method
<p>The
#setRequestHandled
flag
can
be
used
to
indicate
the
request
has
been
handled
directly
and
view
resolution
is
not
required
<p>A
default
Model
is
automatically
created
at
instantiation
An
alternate
model
instance
may
be
provided
via
#setRedirectModel
for
use
in
a
redirect
scenario
When
#setRedirectModelScenario
is
set
to
true
signalling
a
redirect
scenario,
the
#getModel()
returns
the
redirect
model
instead
of
the
default
model
:end
:start
Create
a
new
instance
:end
:start
Set
a
view
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
Will
override
any
pre-existing
view
name
or
View
:end
:start
Return
the
view
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver,
or
null
if
a
View
object
is
set
:end
:start
Set
a
View
object
to
be
used
by
the
DispatcherServlet
Will
override
any
pre-existing
view
name
or
View
:end
:start
Return
the
View
object,
or
null
if
we
using
a
view
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
:end
:start
Whether
the
view
is
a
view
reference
specified
via
a
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
:end
:start
Signal
a
scenario
where
the
request
is
handled
directly
<p>A
HandlerMethodReturnValueHandler
may
use
this
flag
to
indicate
the
response
has
been
fully
handled
and
view
resolution
is
not
required
(eg
@ResponseBody)
<p>A
HandlerMethodArgumentResolver
may
also
use
this
flag
to
indicate
the
presence
of
an
argument
(eg
ServletResponse
or
OutputStream)
that
may
lead
to
a
complete
response
depending
on
the
method
return
value
<p>The
default
value
is
true
:end
:start
Whether
the
request
is
handled
directly
:end
:start
Return
the
model
to
use:
the
"default"
or
the
"redirect"
model
<p>The
default
model
is
used
if
"redirectModelScenario=false"
or
if
the
redirect
model
is
null
(ie
it
wasn't
declared
as
a
method
argument)
and
ignoreDefaultModelOnRedirect=false
:end
:start
Provide
a
separate
model
instance
to
use
in
a
redirect
scenario
The
provided
additional
model
however
is
not
used
used
unless
#setRedirectModelScenario(boolean)
gets
set
to
true
to
signal
a
redirect
scenario
:end
:start
Signal
the
conditions
are
in
place
for
using
a
redirect
model
Typically
that
means
the
controller
has
returned
a
redirect
instruction
:end
:start
When
set
to
true
the
default
model
is
never
used
in
a
redirect
scenario
So
if
a
redirect
model
is
not
available,
an
empty
model
is
used
instead
<p>When
set
to
false
the
default
model
can
be
used
in
a
redirect
scenario
if
a
redirect
model
is
not
available
<p>The
default
setting
is
false
:end
:start
Return
the
SessionStatus
instance
to
use
that
can
be
used
to
signal
that
session
processing
is
complete
:end
:start
Add
the
supplied
attribute
to
the
underlying
model
A
shortcut
for
getModel()addAttribute(String,
Object)
:end
:start
Add
the
supplied
attribute
to
the
underlying
model
A
shortcut
for
getModel()addAttribute(Object)
:end
:start
Copy
all
attributes
to
the
underlying
model
A
shortcut
for
getModel()addAllAttributes(Map)
:end
:start
Copy
attributes
in
the
supplied
Map
with
existing
objects
of
the
same
name
taking
precedence
(ie
not
getting
replaced)
A
shortcut
for
getModel()mergeAttributes(Map<String,
?>)
:end
:start
Remove
the
given
attributes
from
the
model
:end
:start
Whether
the
underlying
model
contains
the
given
attribute
name
A
shortcut
for
getModel()containsAttribute(String)
:end
:start
Return
diagnostic
information
:end
:start
Strategy
for
contributing
to
the
building
of
a
UriComponents
by
looking
at
a
method
parameter
and
an
argument
value
and
deciding
what
part
of
the
target
URL
should
be
updated
:end
:start
Whether
this
contributor
supports
the
given
method
parameter
:end
:start
Process
the
given
method
argument
and
either
update
the
UriComponentsBuilder
or
add
to
the
map
with
URI
variables
to
use
to
expand
the
URI
after
all
arguments
are
processed
:end
:start
Base
class
for
multipart
resolvers
that
use
Jakarta
Commons
FileUpload
12
or
above
<p>Provides
common
configuration
properties
and
parsing
functionality
for
multipart
requests,
using
a
Map
of
Spring
CommonsMultipartFile
instances
as
representation
of
uploaded
files
and
a
String-based
parameter
Map
as
representation
of
uploaded
form
fields
<p>Subclasses
implement
concrete
resolution
strategies
for
Servlet
or
Portlet
environments:
see
CommonsMultipartResolver
and
CommonsPortletMultipartResolver,
respectively
This
base
class
is
not
tied
to
either
of
those
APIs,
factoring
out
common
functionality
:end
:start
Instantiate
a
new
CommonsFileUploadSupport
with
its
corresponding
FileItemFactory
and
FileUpload
instances
:end
:start
Return
the
underlying
orgapachecommonsfileuploaddiskDiskFileItemFactory
instance
There
is
hardly
any
need
to
access
this
:end
:start
Return
the
underlying
orgapachecommonsfileuploadFileUpload
instance
There
is
hardly
any
need
to
access
this
:end
:start
Set
the
maximum
allowed
size
(in
bytes)
before
uploads
are
refused
-1
indicates
no
limit
(the
default)
:end
:start
Set
the
maximum
allowed
size
(in
bytes)
before
uploads
are
written
to
disk
Uploaded
files
will
still
be
received
past
this
amount,
but
they
will
not
be
stored
in
memory
Default
is
10240,
according
to
Commons
FileUpload
:end
:start
Set
the
default
character
encoding
to
use
for
parsing
requests,
to
be
applied
to
headers
of
individual
parts
and
to
form
fields
Default
is
ISO-8859-1,
according
to
the
Servlet
spec
<p>If
the
request
specifies
a
character
encoding
itself,
the
request
encoding
will
override
this
setting
This
also
allows
for
generically
overriding
the
character
encoding
in
a
filter
that
invokes
the
ServletRequestsetCharacterEncoding
method
:end
:start
Set
the
temporary
directory
where
uploaded
files
get
stored
Default
is
the
servlet
container's
temporary
directory
for
the
web
application
:end
:start
Factory
method
for
a
Commons
DiskFileItemFactory
instance
<p>Default
implementation
returns
a
standard
DiskFileItemFactory
Can
be
overridden
to
use
a
custom
subclass,
eg
for
testing
purposes
:end
:start
Factory
method
for
a
Commons
FileUpload
instance
<p><b>To
be
implemented
by
subclasses</b>
:end
:start
Determine
an
appropriate
FileUpload
instance
for
the
given
encoding
<p>Default
implementation
returns
the
shared
FileUpload
instance
if
the
encoding
matches,
else
creates
a
new
FileUpload
instance
with
the
same
configuration
other
than
the
desired
encoding
:end
:start
Parse
the
given
List
of
Commons
FileItems
into
a
Spring
MultipartParsingResult,
containing
Spring
MultipartFile
instances
and
a
Map
of
multipart
parameter
:end
:start
Cleanup
the
Spring
MultipartFiles
created
during
multipart
parsing,
potentially
holding
temporary
data
on
disk
<p>Deletes
the
underlying
Commons
FileItem
instances
:end
:start
Holder
for
a
Map
of
Spring
MultipartFiles
and
a
Map
of
multipart
parameters
:end
:start
Holder
for
a
Map
of
Spring
MultipartFiles
and
a
Map
of
multipart
parameters
:end
:start
MultipartFile
implementation
for
Jakarta
Commons
FileUpload
:end
:start
Create
an
instance
wrapping
the
given
FileItem
:end
:start
Return
the
underlying
orgapachecommonsfileuploadFileItem
instance
There
is
hardly
any
need
to
access
this
:end
:start
Determine
whether
the
multipart
content
is
still
available
If
a
temporary
file
has
been
moved,
the
content
is
no
longer
available
:end
:start
Return
a
description
for
the
storage
location
of
the
multipart
content
Tries
to
be
as
specific
as
possible:
mentions
the
file
location
in
case
of
a
temporary
file
:end
:start
Servlet-based
orgspringframeworkwebmultipartMultipartResolver
implementation
for
<a
href="http://jakartaapacheorg/commons/fileupload">Jakarta
Commons
FileUpload</a>
12
or
above
<p>Provides
"maxUploadSize",
"maxInMemorySize"
and
"defaultEncoding"
settings
as
bean
properties
(inherited
from
CommonsFileUploadSupport)
See
corresponding
ServletFileUpload
/
DiskFileItemFactory
properties
("sizeMax",
"sizeThreshold",
"headerEncoding")
for
details
in
terms
of
defaults
and
accepted
values
<p>Saves
temporary
files
to
the
servlet
container's
temporary
directory
Needs
to
be
initialized
<i>either</i>
by
an
application
context
<i>or</i>
via
the
constructor
that
takes
a
ServletContext
(for
standalone
usage)
:end
:start
Constructor
for
use
as
bean
Determines
the
servlet
container's
temporary
directory
via
the
ServletContext
passed
in
as
through
the
ServletContextAware
interface
(typically
by
a
WebApplicationContext)
:end
:start
Constructor
for
standalone
usage
Determines
the
servlet
container's
temporary
directory
via
the
given
ServletContext
:end
:start
Set
whether
to
resolve
the
multipart
request
lazily
at
the
time
of
file
or
parameter
access
<p>Default
is
"false",
resolving
the
multipart
elements
immediately,
throwing
corresponding
exceptions
at
the
time
of
the
#resolveMultipart
call
Switch
this
to
"true"
for
lazy
multipart
parsing,
throwing
parse
exceptions
once
the
application
attempts
to
obtain
multipart
files
or
parameters
:end
:start
Initialize
the
underlying
orgapachecommonsfileuploadservletServletFileUpload
instance
Can
be
overridden
to
use
a
custom
subclass,
eg
for
testing
purposes
:end
:start
Parse
the
given
servlet
request,
resolving
its
multipart
elements
:end
:start
Determine
the
encoding
for
the
given
request
Can
be
overridden
in
subclasses
<p>The
default
implementation
checks
the
request
encoding,
falling
back
to
the
default
encoding
specified
for
this
resolver
:end
:start
MultipartException
subclass
thrown
when
an
upload
exceeds
the
maximum
upload
size
allowed
:end
:start
Constructor
for
MaxUploadSizeExceededException
:end
:start
Constructor
for
MaxUploadSizeExceededException
:end
:start
Return
the
maximum
upload
size
allowed
:end
:start
Exception
thrown
when
multipart
resolution
fails
:end
:start
Constructor
for
MultipartException
:end
:start
Constructor
for
MultipartException
:end
:start
A
representation
of
an
uploaded
file
received
in
a
multipart
request
<p>The
file
contents
are
either
stored
in
memory
or
temporarily
on
disk
In
either
case,
the
user
is
responsible
for
copying
file
contents
to
a
session-level
or
persistent
store
as
and
if
desired
The
temporary
storages
will
be
cleared
at
the
end
of
request
processing
:end
:start
Return
the
name
of
the
parameter
in
the
multipart
form
:end
:start
Return
the
original
filename
in
the
client's
filesystem
<p>This
may
contain
path
information
depending
on
the
browser
used,
but
it
typically
will
not
with
any
other
than
Opera
:end
:start
Return
the
content
type
of
the
file
:end
:start
Return
whether
the
uploaded
file
is
empty,
that
is,
either
no
file
has
been
chosen
in
the
multipart
form
or
the
chosen
file
has
no
content
:end
:start
Return
the
size
of
the
file
in
bytes
:end
:start
Return
the
contents
of
the
file
as
an
array
of
bytes
:end
:start
Return
an
InputStream
to
read
the
contents
of
the
file
from
The
user
is
responsible
for
closing
the
stream
:end
:start
Transfer
the
received
file
to
the
given
destination
file
<p>This
may
either
move
the
file
in
the
filesystem,
copy
the
file
in
the
filesystem,
or
save
memory-held
contents
to
the
destination
file
If
the
destination
file
already
exists,
it
will
be
deleted
first
<p>If
the
file
has
been
moved
in
the
filesystem,
this
operation
cannot
be
invoked
again
Therefore,
call
this
method
just
once
to
be
able
to
work
with
any
storage
mechanism
:end
:start
Provides
additional
methods
for
dealing
with
multipart
content
within
a
servlet
request,
allowing
to
access
uploaded
files
Implementations
also
need
to
override
the
standard
javaxservletServletRequest
methods
for
parameter
access,
making
multipart
parameters
available
<p>A
concrete
implementation
is
orgspringframeworkwebmultipartsupportDefaultMultipartHttpServletRequest
As
an
intermediate
step,
orgspringframeworkwebmultipartsupportAbstractMultipartHttpServletRequest
can
be
subclassed
:end
:start
Return
this
request's
method
as
a
convenient
HttpMethod
instance
:end
:start
Return
this
request's
headers
as
a
convenient
HttpHeaders
instance
:end
:start
Return
the
headers
associated
with
the
specified
part
of
the
multipart
request
<p>If
the
underlying
implementation
supports
access
to
headers,
then
all
headers
are
returned
Otherwise,
the
returned
headers
will
include
a
'Content-Type'
header
at
the
very
least
:end
:start
This
interface
defines
the
multipart
request
access
operations
that
are
exposed
for
actual
multipart
requests
It
is
extended
by
MultipartHttpServletRequest
and
the
Portlet
orgspringframeworkwebportletmultipartMultipartActionRequest
:end
:start
Return
an
javautilIterator
of
String
objects
containing
the
parameter
names
of
the
multipart
files
contained
in
this
request
These
are
the
field
names
of
the
form
(like
with
normal
parameters),
not
the
original
file
names
:end
:start
Return
the
contents
plus
description
of
an
uploaded
file
in
this
request,
or
null
if
it
does
not
exist
:end
:start
Return
the
contents
plus
description
of
uploaded
files
in
this
request,
or
an
empty
list
if
it
does
not
exist
:end
:start
Return
a
javautilMap
of
the
multipart
files
contained
in
this
request
:end
:start
Return
a
MultiValueMap
of
the
multipart
files
contained
in
this
request
:end
:start
Determine
the
content
type
of
the
specified
request
part
:end
:start
A
strategy
interface
for
multipart
file
upload
resolution
in
accordance
with
<a
href="http://wwwietforg/rfc/rfc1867txt">RFC
1867</a>
Implementations
are
typically
usable
both
within
an
application
context
and
standalone
<p>There
are
two
concrete
implementations
included
in
Spring,
as
of
Spring
31:
<ul>
<li>{@link
orgspringframeworkwebmultipartcommonsCommonsMultipartResolver
for
Jakarta
Commons
FileUpload
<li>{@link
orgspringframeworkwebmultipartsupportStandardServletMultipartResolver
for
Servlet
30
Part
API
</ul>
<p>There
is
no
default
resolver
implementation
used
for
Spring
orgspringframeworkwebservletDispatcherServlet
DispatcherServlets,
as
an
application
might
choose
to
parse
its
multipart
requests
itself
To
define
an
implementation,
create
a
bean
with
the
id
"multipartResolver"
in
a
orgspringframeworkwebservletDispatcherServlet
DispatcherServlet's
application
context
Such
a
resolver
gets
applied
to
all
requests
handled
by
that
orgspringframeworkwebservletDispatcherServlet
<p>If
a
orgspringframeworkwebservletDispatcherServlet
detects
a
multipart
request,
it
will
resolve
it
via
the
configured
MultipartResolver
and
pass
on
a
wrapped
javaxservlethttpHttpServletRequest
Controllers
can
then
cast
their
given
request
to
the
MultipartHttpServletRequest
interface,
which
permits
access
to
any
MultipartFile
MultipartFiles
Note
that
this
cast
is
only
supported
in
case
of
an
actual
multipart
request
<pre
class="code">
public
ModelAndView
handleRequest(HttpServletRequest
request,
HttpServletResponse
response)
MultipartHttpServletRequest
multipartRequest
=
(MultipartHttpServletRequest)
request;
MultipartFile
multipartFile
=
multipartRequestgetFile("image");

</pre>
Instead
of
direct
access,
command
or
form
controllers
can
register
a
orgspringframeworkwebmultipartsupportByteArrayMultipartFileEditor
or
orgspringframeworkwebmultipartsupportStringMultipartFileEditor
with
their
data
binder,
to
automatically
apply
multipart
content
to
command
bean
properties
<p>As
an
alternative
to
using
a
MultipartResolver
with
a
orgspringframeworkwebservletDispatcherServlet,
a
orgspringframeworkwebmultipartsupportMultipartFilter
can
be
registered
in
webxml
It
will
delegate
to
a
corresponding
MultipartResolver
bean
in
the
root
application
context
This
is
mainly
intended
for
applications
that
do
not
use
Spring's
own
web
MVC
framework
<p>Note:
There
is
hardly
ever
a
need
to
access
the
MultipartResolver
itself
from
application
code
It
will
simply
do
its
work
behind
the
scenes,
making
MultipartHttpServletRequest
MultipartHttpServletRequests
available
to
controllers
:end
:start
Determine
if
the
given
request
contains
multipart
content
<p>Will
typically
check
for
content
type
"multipart/form-data",
but
the
actually
accepted
requests
might
depend
on
the
capabilities
of
the
resolver
implementation
:end
:start
Parse
the
given
HTTP
request
into
multipart
files
and
parameters,
and
wrap
the
request
inside
a
orgspringframeworkwebmultipartMultipartHttpServletRequest
object
that
provides
access
to
file
descriptors
and
makes
contained
parameters
accessible
via
the
standard
ServletRequest
methods
:end
:start
Cleanup
any
resources
used
for
the
multipart
handling,
like
a
storage
for
the
uploaded
files
:end
:start
Abstract
base
implementation
of
the
MultipartHttpServletRequest
interface
Provides
management
of
pre-generated
MultipartFile
instances
:end
:start
Wrap
the
given
HttpServletRequest
in
a
MultipartHttpServletRequest
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
list
of
MultipartFile
objects
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
MultipartFile
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Lazily
initialize
the
multipart
request,
if
possible
Only
called
if
not
already
eagerly
initialized
:end
:start
Custom
javabeansPropertyEditor
for
converting
MultipartFile
MultipartFiles
to
byte
arrays
:end
:start
Default
implementation
of
the
orgspringframeworkwebmultipartMultipartHttpServletRequest
interface
Provides
management
of
pre-generated
parameter
values
:end
:start
Wrap
the
given
HttpServletRequest
in
a
MultipartHttpServletRequest
:end
:start
Wrap
the
given
HttpServletRequest
in
a
MultipartHttpServletRequest
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
String
array
objects
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
multipart
parameter
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
content
type
Strings
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
multipart
parameter
content
type
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Raised
when
the
part
of
a
"multipart/form-data"
request
identified
by
its
name
cannot
be
found
<p>This
may
be
because
the
request
is
not
a
multipart/form-data
either
because
the
part
is
not
present
in
the
request,
or
because
the
web
application
is
not
configured
correctly
for
processing
multipart
requests
--
eg
no
MultipartResolver
:end
:start
Servlet
23
Filter
that
resolves
multipart
requests
via
a
MultipartResolver
in
the
root
web
application
context
<p>Looks
up
the
MultipartResolver
in
Spring's
root
web
application
context
Supports
a
"multipartResolverBeanName"
filter
init-param
in
webxml;
the
default
bean
name
is
"filterMultipartResolver"
Looks
up
the
MultipartResolver
on
each
request,
to
avoid
initialization
order
issues
(when
using
ContextLoaderServlet,
the
root
application
context
will
get
initialized
<i>after</i>
this
filter)
<p>If
no
MultipartResolver
bean
is
found,
this
filter
falls
back
to
a
default
MultipartResolver:
StandardServletMultipartResolver
for
Servlet
30,
based
on
a
multipart-config
section
in
webxml
<p>MultipartResolver
lookup
is
customizable:
Override
this
filter's
lookupMultipartResolver
method
to
use
a
custom
MultipartResolver
instance,
for
example
if
not
using
a
Spring
web
application
context
Note
that
the
lookup
method
should
not
create
a
new
MultipartResolver
instance
for
each
call
but
rather
return
a
reference
to
a
pre-built
instance
<p>Note:
This
filter
is
an
<b>alternative</b>
to
using
DispatcherServlet's
MultipartResolver
support,
for
example
for
web
applications
with
custom
web
views
which
do
not
use
Spring's
web
MVC,
or
for
custom
filters
applied
before
a
Spring
MVC
DispatcherServlet
(eg
orgspringframeworkwebfilterHiddenHttpMethodFilter)
In
any
case,
this
filter
should
not
be
combined
with
servlet-specific
multipart
resolution
:end
:start
Set
the
bean
name
of
the
MultipartResolver
to
fetch
from
Spring's
root
application
context
Default
is
"filterMultipartResolver"
:end
:start
Return
the
bean
name
of
the
MultipartResolver
to
fetch
from
Spring's
root
application
context
:end
:start
Check
for
a
multipart
request
via
this
filter's
MultipartResolver,
and
wrap
the
original
request
with
a
MultipartHttpServletRequest
if
appropriate
<p>All
later
elements
in
the
filter
chain,
most
importantly
servlets,
benefit
from
proper
parameter
extraction
in
the
multipart
case,
and
are
able
to
cast
to
MultipartHttpServletRequest
if
they
need
to
:end
:start
Look
up
the
MultipartResolver
that
this
filter
should
use,
taking
the
current
HTTP
request
as
argument
<p>The
default
implementation
delegates
to
the
lookupMultipartResolver
without
arguments
:end
:start
Look
for
a
MultipartResolver
bean
in
the
root
web
application
context
Supports
a
"multipartResolverBeanName"
filter
init
param;
the
default
bean
name
is
"filterMultipartResolver"
<p>This
can
be
overridden
to
use
a
custom
MultipartResolver
instance,
for
example
if
not
using
a
Spring
web
application
context
:end
:start
ServerHttpRequest
implementation
that
accesses
one
part
of
a
multipart
request
If
using
MultipartResolver
configuration
the
part
is
accessed
through
a
MultipartFile
Or
if
using
Servlet
30
multipart
processing
the
part
is
accessed
through
ServletRequestgetPart
:end
:start
Create
a
new
instance
:end
:start
Spring
MultipartHttpServletRequest
adapter,
wrapping
a
Servlet
30
HttpServletRequest
and
its
Part
objects
Parameters
get
exposed
through
the
native
request's
getParameter
methods
-
without
any
custom
processing
on
our
side
:end
:start
Create
a
new
StandardMultipartHttpServletRequest
wrapper
for
the
given
request
:end
:start
Standard
implementation
of
the
MultipartResolver
interface,
based
on
the
Servlet
30
javaxservlethttpPart
API
To
be
added
as
"multipartResolver"
bean
to
a
Spring
DispatcherServlet
context,
without
any
extra
configuration
at
the
bean
level
(see
below)
<p><b>Note:</b>
In
order
to
use
Servlet
30
based
multipart
parsing,
you
need
to
mark
the
affected
servlet
with
a
"multipart-config"
section
in
webxml,
or
with
a
javaxservletMultipartConfigElement
in
programmatic
servlet
registration,
or
(in
case
of
a
custom
servlet
class)
possibly
with
a
javaxservletannotationMultipartConfig
annotation
on
your
servlet
class
Configuration
settings
such
as
maximum
sizes
or
storage
locations
need
to
be
applied
at
that
servlet
registration
level;
Servlet
30
does
not
allow
for
them
to
be
set
at
the
MultipartResolver
level
:end
:start
Custom
javabeansPropertyEditor
for
converting
MultipartFile
MultipartFiles
to
Strings
<p>Allows
one
to
specify
the
charset
to
use
:end
:start
Create
a
new
StringMultipartFileEditor,
using
the
default
charset
:end
:start
Create
a
new
StringMultipartFileEditor,
using
the
given
charset
:end
:start
Servlet
30
ServletContainerInitializer
designed
to
support
code-based
configuration
of
the
servlet
container
using
Spring's
WebApplicationInitializer
SPI
as
opposed
to
(or
possibly
in
combination
with)
the
traditional
webxml-based
approach
<h2>Mechanism
of
Operation</h2>
This
class
will
be
loaded
and
instantiated
and
have
its
#onStartup
method
invoked
by
any
Servlet
30-compliant
container
during
container
startup
assuming
that
the
spring-web
module
JAR
is
present
on
the
classpath
This
occurs
through
the
JAR
Services
API
ServiceLoader#load(Class)
method
detecting
the
spring-web
module's
META-INF/services/javaxservletServletContainerInitializer
service
provider
configuration
file
See
the
<a
href="http://downloadoraclecom/javase/6/docs/technotes/guides/jar/jarhtml#Service%20Provider">
JAR
Services
API
documentation</a>
as
well
as
section
<em>824</em>
of
the
Servlet
30
Final
Draft
specification
for
complete
details
<h3>In
combination
with
webxml</h3>
A
web
application
can
choose
to
limit
the
amount
of
classpath
scanning
the
Servlet
container
does
at
startup
either
through
the
metadata-complete
attribute
in
webxml,
which
controls
scanning
for
Servlet
annotations
or
through
an
<absolute-ordering>
element
also
in
webxml,
which
controls
which
web
fragments
(ie
jars)
are
allowed
to
perform
a
ServletContainerInitializer
scan
When
using
this
feature,
the
SpringServletContainerInitializer
can
be
enabled
by
adding
"spring_web"
to
the
list
of
named
web
fragments
in
webxml
as
follows:
<pre
class="code">
<absolute-ordering>
<name>some_web_fragment</name>
<name>spring_web</name>
</absolute-ordering>
</pre>
<h2>Relationship
to
Spring's
WebApplicationInitializer</h2>
Spring's
WebApplicationInitializer
SPI
consists
of
just
one
method:
WebApplicationInitializer#onStartup(ServletContext)
The
signature
is
intentionally
quite
similar
to
ServletContainerInitializer#onStartup(Set,
ServletContext):
simply
put,
SpringServletContainerInitializer
is
responsible
for
instantiating
and
delegating
the
ServletContext
to
any
user-defined
WebApplicationInitializer
implementations
It
is
then
the
responsibility
of
each
WebApplicationInitializer
to
do
the
actual
work
of
initializing
the
ServletContext
The
exact
process
of
delegation
is
described
in
detail
in
the
#onStartup
onStartup
documentation
below
<h2>General
Notes</h2>
In
general,
this
class
should
be
viewed
as
<em>supporting
infrastructure</em>
for
the
more
important
and
user-facing
WebApplicationInitializer
SPI
Taking
advantage
of
this
container
initializer
is
also
completely
<em>optional</em>:
while
it
is
true
that
this
initializer
will
be
loaded
and
invoked
under
all
Servlet
30+
runtimes,
it
remains
the
user's
choice
whether
to
make
any
WebApplicationInitializer
implementations
available
on
the
classpath
If
no
WebApplicationInitializer
types
are
detected,
this
container
initializer
will
have
no
effect
<p>Note
that
use
of
this
container
initializer
and
of
WebApplicationInitializer
is
not
in
any
way
"tied"
to
Spring
MVC
other
than
the
fact
that
the
types
are
shipped
in
the
spring-web
module
JAR
Rather,
they
can
be
considered
general-purpose
in
their
ability
to
facilitate
convenient
code-based
configuration
of
the
ServletContext
In
other
words,
any
servlet,
listener,
or
filter
may
be
registered
within
a
WebApplicationInitializer,
not
just
Spring
MVC-specific
components
<p>This
class
is
neither
designed
for
extension
nor
intended
to
be
extended
It
should
be
considered
an
internal
type,
with
WebApplicationInitializer
being
the
public-facing
SPI
<h2>See
Also</h2>
See
WebApplicationInitializer
Javadoc
for
examples
and
detailed
usage
recommendations<p>
:end
:start
Delegate
the
ServletContext
to
any
WebApplicationInitializer
implementations
present
on
the
application
classpath
<p>Because
this
class
declares
@{@code
HandlesTypes(WebApplicationInitializerclass),
Servlet
30+
containers
will
automatically
scan
the
classpath
for
implementations
of
Spring's
WebApplicationInitializer
interface
and
provide
the
set
of
all
such
types
to
the
webAppInitializerClasses
parameter
of
this
method
<p>If
no
WebApplicationInitializer
implementations
are
found
on
the
classpath,
this
method
is
effectively
a
no-op
An
INFO-level
log
message
will
be
issued
notifying
the
user
that
the
ServletContainerInitializer
has
indeed
been
invoked
but
that
no
WebApplicationInitializer
implementations
were
found
<p>Assuming
that
one
or
more
WebApplicationInitializer
types
are
detected,
they
will
be
instantiated
(and
<em>sorted</em>
if
the
@{@link
orgspringframeworkcoreannotationOrder
@Order
annotation
is
present
or
the
orgspringframeworkcoreOrdered
Ordered
interface
has
been
implemented)
Then
the
WebApplicationInitializer#onStartup(ServletContext)
method
will
be
invoked
on
each
instance,
delegating
the
ServletContext
such
that
each
instance
may
register
and
configure
servlets
such
as
Spring's
DispatcherServlet,
listeners
such
as
Spring's
ContextLoaderListener,
or
any
other
Servlet
API
componentry
such
as
filters
:end
:start
Helper
class
for
cookie
generation,
carrying
cookie
descriptor
settings
as
bean
properties
and
being
able
to
add
and
remove
cookie
to/from
a
given
response
<p>Can
serve
as
base
class
for
components
that
generate
specific
cookies,
such
as
CookieLocaleResolver
and
CookieThemeResolver
:end
:start
Default
path
that
cookies
will
be
visible
to:
"/",
ie
the
entire
server
:end
:start
Default
maximum
age
of
cookies:
maximum
integer
value,
ie
forever
:end
:start
Use
the
given
name
for
cookies
created
by
this
generator
:end
:start
Return
the
given
name
for
cookies
created
by
this
generator
:end
:start
Use
the
given
domain
for
cookies
created
by
this
generator
The
cookie
is
only
visible
to
servers
in
this
domain
:end
:start
Return
the
domain
for
cookies
created
by
this
generator,
if
any
:end
:start
Use
the
given
path
for
cookies
created
by
this
generator
The
cookie
is
only
visible
to
URLs
in
this
path
and
below
:end
:start
Return
the
path
for
cookies
created
by
this
generator
:end
:start
Use
the
given
maximum
age
(in
seconds)
for
cookies
created
by
this
generator
Useful
special
value:
-1

not
persistent,
deleted
when
client
shuts
down
:end
:start
Return
the
maximum
age
for
cookies
created
by
this
generator
:end
:start
Set
whether
the
cookie
should
only
be
sent
using
a
secure
protocol,
such
as
HTTPS
(SSL)
This
is
an
indication
to
the
receiving
browser,
not
processed
by
the
HTTP
server
itself
Default
is
"false"
:end
:start
Return
whether
the
cookie
should
only
be
sent
using
a
secure
protocol,
such
as
HTTPS
(SSL)
:end
:start
Set
whether
the
cookie
is
supposed
to
be
marked
with
the
"HttpOnly"
attribute
<p>Note
that
this
feature
is
only
available
on
Servlet
30
and
higher
:end
:start
Return
whether
the
cookie
is
supposed
to
be
marked
with
the
"HttpOnly"
attribute
:end
:start
Add
a
cookie
with
the
given
value
to
the
response,
using
the
cookie
descriptor
settings
of
this
generator
<p>Delegates
to
#createCookie
for
cookie
creation
:end
:start
Remove
the
cookie
that
this
generator
describes
from
the
response
Will
generate
a
cookie
with
empty
value
and
max
age
0
<p>Delegates
to
#createCookie
for
cookie
creation
:end
:start
Create
a
cookie
with
the
given
value,
using
the
cookie
descriptor
settings
of
this
generator
(except
for
"cookieMaxAge")
:end
:start
Utility
class
for
HTML
escaping
Escapes
and
unescapes
based
on
the
W3C
HTML
401
recommendation,
handling
character
entity
references
<p>Reference:
<a
href="http://wwww3org/TR/html4/charsethtml">http://wwww3org/TR/html4/charsethtml</a>
<p>For
a
comprehensive
set
of
String
escaping
utilities,
consider
Jakarta
Commons
Lang
and
its
StringEscapeUtils
class
We
are
not
using
that
class
here
to
avoid
a
runtime
dependency
on
Commons
Lang
just
for
HTML
escaping
Furthermore,
Spring's
HTML
escaping
is
more
flexible
and
100%
HTML
40
compliant
:end
:start
Turn
special
characters
into
HTML
character
references
Handles
complete
character
set
defined
in
HTML
401
recommendation
<p>Escapes
all
special
characters
to
their
corresponding
entity
reference
(eg
&lt;)
<p>Reference:
<a
href="http://wwww3org/TR/html4/sgml/entitieshtml">
http://wwww3org/TR/html4/sgml/entitieshtml
</a>
:end
:start
Turn
special
characters
into
HTML
character
references
Handles
complete
character
set
defined
in
HTML
401
recommendation
<p>Escapes
all
special
characters
to
their
corresponding
numeric
reference
in
decimal
format
(&#<i>Decimal</i>;)
<p>Reference:
<a
href="http://wwww3org/TR/html4/sgml/entitieshtml">
http://wwww3org/TR/html4/sgml/entitieshtml
</a>
:end
:start
Turn
special
characters
into
HTML
character
references
Handles
complete
character
set
defined
in
HTML
401
recommendation
<p>Escapes
all
special
characters
to
their
corresponding
numeric
reference
in
hex
format
(&#x<i>Hex</i>;)
<p>Reference:
<a
href="http://wwww3org/TR/html4/sgml/entitieshtml">
http://wwww3org/TR/html4/sgml/entitieshtml
</a>
:end
:start
Turn
HTML
character
references
into
their
plain
text
UNICODE
equivalent
<p>Handles
complete
character
set
defined
in
HTML
401
recommendation
and
all
reference
types
(decimal,
hex,
and
entity)
<p>Correctly
converts
the
following
formats:
<blockquote>
&amp;#<i>Entity</i>;
-
<i>(Example:
&amp;amp;)
case
sensitive</i>
&amp;#<i>Decimal</i>;
-
<i>(Example:
&amp;#68;)</i><br>
&amp;#x<i>Hex</i>;
-
<i>(Example:
&amp;#xE5;)
case
insensitive</i><br>
</blockquote>
Gracefully
handles
malformed
character
references
by
copying
original
characters
as
is
when
encountered<p>
<p>Reference:
<a
href="http://wwww3org/TR/html4/sgml/entitieshtml">
http://wwww3org/TR/html4/sgml/entitieshtml
</a>
:end
:start
Servlet
23
HttpSessionListener
that
automatically
exposes
the
session
mutex
when
an
HttpSession
gets
created
To
be
registered
as
a
listener
in
webxml
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
HttpSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Listener
that
flushes
the
JDK's
javabeansIntrospector
JavaBeans
Introspector
cache
on
web
app
shutdown
Register
this
listener
in
your
webxml
to
guarantee
proper
release
of
the
web
application
class
loader
and
its
loaded
classes
<p><b>If
the
JavaBeans
Introspector
has
been
used
to
analyze
application
classes,
the
system-level
Introspector
cache
will
hold
a
hard
reference
to
those
classes
Consequently,
those
classes
and
the
web
application
class
loader
will
not
be
garbage-collected
on
web
app
shutdown!</b>
This
listener
performs
proper
cleanup,
to
allow
for
garbage
collection
to
take
effect
<p>Unfortunately,
the
only
way
to
clean
up
the
Introspector
is
to
flush
the
entire
cache,
as
there
is
no
way
to
specifically
determine
the
application's
classes
referenced
there
This
will
remove
cached
introspection
results
for
all
other
applications
in
the
server
too
<p>Note
that
this
listener
is
<i>not</i>
necessary
when
using
Spring's
beans
infrastructure
within
the
application,
as
Spring's
own
introspection
results
cache
will
immediately
flush
an
analyzed
class
from
the
JavaBeans
Introspector
cache
and
only
hold
a
cache
within
the
application's
own
ClassLoader
<b>Although
Spring
itself
does
not
create
JDK
Introspector
leaks,
note
that
this
listener
should
nevertheless
be
used
in
scenarios
where
the
Spring
framework
classes
themselves
reside
in
a
'common'
ClassLoader
(such
as
the
system
ClassLoader)</b>
In
such
a
scenario,
this
listener
will
properly
clean
up
Spring's
introspection
cache
<p>Application
classes
hardly
ever
need
to
use
the
JavaBeans
Introspector
directly,
so
are
normally
not
the
cause
of
Introspector
resource
leaks
Rather,
many
libraries
and
frameworks
do
not
clean
up
the
Introspector:
eg
Struts
and
Quartz
<p>Note
that
a
single
such
Introspector
leak
will
cause
the
entire
web
app
class
loader
to
not
get
garbage
collected!
This
has
the
consequence
that
you
will
see
all
the
application's
static
class
resources
(like
singletons)
around
after
web
app
shutdown,
which
is
not
the
fault
of
those
classes!
<p><b>This
listener
should
be
registered
as
the
first
one
in
webxml,
before
any
application
listeners
such
as
Spring's
ContextLoaderListener</b>
This
allows
the
listener
to
take
full
effect
at
the
right
time
of
the
lifecycle
:end
:start
Utility
class
for
JavaScript
escaping
Escapes
based
on
the
JavaScript
15
recommendation
<p>Reference:
<a
href="https://developermozillaorg/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#String_literals">
JavaScript
Guide</a>
on
Mozilla
Developer
Network
:end
:start
Turn
JavaScript
special
characters
into
escaped
characters
:end
:start
Bootstrap
listener
for
custom
log4j
initialization
in
a
web
environment
Delegates
to
Log4jWebConfigurer
(see
its
javadoc
for
configuration
details)
<b>WARNING:
Assumes
an
expanded
WAR
file</b>,
both
for
loading
the
configuration
file
and
for
writing
the
log
files
If
you
want
to
keep
your
WAR
unexpanded
or
don't
need
application-specific
log
files
within
the
WAR
directory,
don't
use
log4j
setup
within
the
application
(thus,
don't
use
Log4jConfigListener
or
Log4jConfigServlet)
Instead,
use
a
global,
VM-wide
log4j
setup
(for
example,
in
JBoss)
or
JDK
14's
javautillogging
(which
is
global
too)
<p>This
listener
should
be
registered
before
ContextLoaderListener
in
webxml
when
using
custom
log4j
initialization
:end
:start
Convenience
class
that
performs
custom
log4j
initialization
for
web
environments,
allowing
for
log
file
paths
within
the
web
application,
with
the
option
to
perform
automatic
refresh
checks
(for
runtime
changes
in
logging
configuration)
<p><b>WARNING:
Assumes
an
expanded
WAR
file</b>,
both
for
loading
the
configuration
file
and
for
writing
the
log
files
If
you
want
to
keep
your
WAR
unexpanded
or
don't
need
application-specific
log
files
within
the
WAR
directory,
don't
use
log4j
setup
within
the
application
(thus,
don't
use
Log4jConfigListener
or
Log4jConfigServlet)
Instead,
use
a
global,
VM-wide
log4j
setup
(for
example,
in
JBoss)
or
JDK
14's
javautillogging
(which
is
global
too)
<p>Supports
three
init
parameters
at
the
servlet
context
level
(that
is,
context-param
entries
in
webxml):
<ul>
<li><i>"log4jConfigLocation":</i><br>
Location
of
the
log4j
config
file;
either
a
"classpath:"
location
(eg
"classpath:myLog4jproperties"),
an
absolute
file
URL
(eg
"file:C:/log4jproperties),
or
a
plain
path
relative
to
the
web
application
root
directory
(eg
"/WEB-INF/log4jproperties")
If
not
specified,
default
log4j
initialization
will
apply
("log4jproperties"
or
"log4jxml"
in
the
class
path;
see
the
log4j
documentation
for
details)
<li><i>"log4jRefreshInterval":</i><br>
Interval
between
config
file
refresh
checks,
in
milliseconds
If
not
specified,
no
refresh
checks
will
happen,
which
avoids
starting
log4j's
watchdog
thread
<li><i>"log4jExposeWebAppRoot":</i><br>
Whether
the
web
app
root
system
property
should
be
exposed,
allowing
for
log
file
paths
relative
to
the
web
application
root
directory
Default
is
"true";
specify
"false"
to
suppress
expose
of
the
web
app
root
system
property
See
below
for
details
on
how
to
use
this
system
property
in
log
file
locations
</ul>
<p>Note:
initLogging
should
be
called
before
any
other
Spring
activity
(when
using
log4j),
for
proper
initialization
before
any
Spring
logging
attempts
<p>Log4j's
watchdog
thread
will
asynchronously
check
whether
the
timestamp
of
the
config
file
has
changed,
using
the
given
interval
between
checks
A
refresh
interval
of
1000
milliseconds
(one
second),
which
allows
to
do
on-demand
log
level
changes
with
immediate
effect,
is
not
unfeasible
<p><b>WARNING:</b>
Log4j's
watchdog
thread
does
not
terminate
until
VM
shutdown;
in
particular,
it
does
not
terminate
on
LogManager
shutdown
Therefore,
it
is
recommended
to
<i>not</i>
use
config
file
refreshing
in
a
production
J2EE
environment;
the
watchdog
thread
would
not
stop
on
application
shutdown
there
<p>By
default,
this
configurer
automatically
sets
the
web
app
root
system
property,
for
"${key"
substitutions
within
log
file
locations
in
the
log4j
config
file,
allowing
for
log
file
paths
relative
to
the
web
application
root
directory
The
default
system
property
key
is
"webapproot",
to
be
used
in
a
log4j
config
file
like
as
follows:
<p>{@code
log4jappendermyfileFile=${webapproot/WEB-INF/demolog
<p>Alternatively,
specify
a
unique
context-param
"webAppRootKey"
per
web
application
For
example,
with
"webAppRootKey
=
"demoroot":
<p>{@code
log4jappendermyfileFile=${demoroot/WEB-INF/demolog
<p><b>WARNING:</b>
Some
containers
(like
Tomcat)
do
<i>not</i>
keep
system
properties
separate
per
web
app
You
have
to
use
unique
"webAppRootKey"
context-params
per
web
app
then,
to
avoid
clashes
Other
containers
like
Resin
do
isolate
each
web
app's
system
properties:
Here
you
can
use
the
default
key
(ie
no
"webAppRootKey"
context-param
at
all)
without
worrying
:end
:start
Parameter
specifying
the
location
of
the
log4j
config
file
:end
:start
Parameter
specifying
the
refresh
interval
for
checking
the
log4j
config
file
:end
:start
Parameter
specifying
whether
to
expose
the
web
app
root
system
property
:end
:start
Initialize
log4j,
including
setting
the
web
app
root
system
property
:end
:start
Shut
down
log4j,
properly
releasing
all
file
locks
and
resetting
the
web
app
root
system
property
:end
:start
Subclass
of
ServletException
that
properly
handles
a
root
cause
in
terms
of
message
and
stacktrace,
just
like
NestedChecked/RuntimeException
does
<p>Note
that
the
plain
ServletException
doesn't
expose
its
root
cause
at
all,
neither
in
the
exception
message
nor
in
printed
stack
traces!
While
this
might
be
fixed
in
later
Servlet
API
variants
(which
even
differ
per
vendor
for
the
same
API
version),
it
is
not
reliably
available
on
Servlet
24
(the
minimum
version
required
by
Spring
3x),
which
is
why
we
need
to
do
it
ourselves
<p>The
similarity
between
this
class
and
the
NestedChecked/RuntimeException
class
is
unavoidable,
as
this
class
needs
to
derive
from
ServletException
:end
:start
Construct
a
NestedServletException
with
the
specified
detail
message
:end
:start
Construct
a
NestedServletException
with
the
specified
detail
message
and
nested
exception
:end
:start
Return
the
detail
message,
including
the
message
from
the
nested
exception
if
there
is
one
:end
:start
Helper
class
for
resolving
placeholders
in
texts
Usually
applied
to
file
paths
<p>A
text
may
contain
${
placeholders,
to
be
resolved
as
servlet
context
init
parameters
or
system
properties:
eg
${userdir
Default
values
can
be
supplied
using
the
":"
separator
between
key
and
value
:end
:start
Resolve
${
placeholders
in
the
given
text,
replacing
them
with
corresponding
servlet
context
init
parameter
or
system
property
values
:end
:start
Resolve
${
placeholders
in
the
given
text,
replacing
them
with
corresponding
servlet
context
init
parameter
or
system
property
values
Unresolvable
placeholders
with
no
default
value
are
ignored
and
passed
through
unchanged
if
the
flag
is
set
to
true
:end
:start
Utility
class
for
tag
library
related
code,
exposing
functionality
such
as
translating
String
Strings
to
web
scopes
<p>
<ul>
<li>{@code
page
will
be
transformed
to
javaxservletjspPageContext#PAGE_SCOPE
PageContextPAGE_SCOPE
<li>{@code
request
will
be
transformed
to
javaxservletjspPageContext#REQUEST_SCOPE
PageContextREQUEST_SCOPE
<li>{@code
session
will
be
transformed
to
javaxservletjspPageContext#SESSION_SCOPE
PageContextSESSION_SCOPE
<li>{@code
application
will
be
transformed
to
javaxservletjspPageContext#APPLICATION_SCOPE
PageContextAPPLICATION_SCOPE
</ul>
:end
:start
Constant
identifying
the
page
scope
:end
:start
Constant
identifying
the
request
scope
:end
:start
Constant
identifying
the
session
scope
:end
:start
Constant
identifying
the
application
scope
:end
:start
Determines
the
scope
for
a
given
input
String
<p>If
the
String
does
not
match
'request',
'session',
'page'
or
'application',
the
method
will
return
PageContext#PAGE_SCOPE
:end
:start
Determine
whether
the
supplied
Tag
has
any
ancestor
tag
of
the
supplied
type
:end
:start
Determine
whether
the
supplied
Tag
has
any
ancestor
tag
of
the
supplied
type,
throwing
an
IllegalStateException
if
not
:end
:start
Represents
an
immutable
collection
of
URI
components,
mapping
component
type
to
string
values
Contains
convenience
getters
for
all
components
Effectively
similar
to
javanetURI,
but
with
more
powerful
encoding
options
and
support
for
URI
template
variables
:end
:start
Returns
the
scheme
Can
be
null
:end
:start
Returns
the
scheme
specific
part
Can
be
null
:end
:start
Returns
the
user
info
Can
be
null
:end
:start
Returns
the
host
Can
be
null
:end
:start
Returns
the
port
Returns
-1
if
no
port
has
been
set
:end
:start
Returns
the
path
Can
be
null
:end
:start
Returns
the
list
of
path
segments
Empty
if
no
path
has
been
set
:end
:start
Returns
the
query
Can
be
null
:end
:start
Returns
the
map
of
query
parameters
Empty
if
no
query
has
been
set
:end
:start
Returns
the
fragment
Can
be
null
:end
:start
Encode
all
URI
components
using
their
specific
encoding
rules,
and
returns
the
result
as
a
new
UriComponents
instance
This
method
uses
UTF-8
to
encode
:end
:start
Encode
all
URI
components
using
their
specific
encoding
rules,
and
returns
the
result
as
a
new
UriComponents
instance
:end
:start
Replaces
all
URI
template
variables
with
the
values
from
a
given
map
The
map
keys
represent
variable
names;
the
values
variable
values
The
order
of
variables
is
not
significant
:end
:start
Replaces
all
URI
template
variables
with
the
values
from
a
given
array
The
array
represent
variable
values
The
order
of
variables
is
significant
:end
:start
Replaces
all
URI
template
variables
with
the
values
obtained
through
the
given
UriTemplateVariables
instance
:end
:start
Normalize
the
path
removing
sequences
like
"path/"
:end
:start
Returns
a
URI
string
from
this
UriComponents
instance
:end
:start
Returns
a
URI
from
this
UriComponents
instance
:end
:start
Defines
the
contract
for
URI
Template
variables
:end
:start
Get
the
value
for
the
given
URI
variable
name
If
the
value
is
null,
an
empty
String
is
expanded
If
the
value
is
#SKIP_VALUE,
the
URI
variable
is
not
expanded
:end
:start
Defines
the
contract
for
URI
Template
variables
:end
:start
Get
the
value
for
the
given
URI
variable
name
If
the
value
is
null,
an
empty
String
is
expanded
If
the
value
is
#SKIP_VALUE,
the
URI
variable
is
not
expanded
:end
:start
Builder
for
UriComponents
<p></p>Typical
usage
involves:
<ol>
<li>Create
a
UriComponentsBuilder
with
one
of
the
static
factory
methods
(such
as
#fromPath(String)
or
#fromUri(URI))</li>
<li>Set
the
various
URI
components
through
the
respective
methods
({@link
#scheme(String),
#userInfo(String),
#host(String),
#port(int),
#path(String),
#pathSegment(String),
#queryParam(String,
Object),
and
#fragment(String)</li>
<li>Build
the
UriComponents
instance
with
the
#build()
method</li>
</ol>
:end
:start
Default
constructor
Protected
to
prevent
direct
instantiation
:end
:start
Returns
a
new,
empty
builder
:end
:start
Returns
a
builder
that
is
initialized
with
the
given
path
:end
:start
Returns
a
builder
that
is
initialized
with
the
given
URI
:end
:start
Returns
a
builder
that
is
initialized
with
the
given
URI
string
<p><strong>Note:</strong>
The
presence
of
reserved
characters
can
prevent
correct
parsing
of
the
URI
string
For
example
if
a
query
parameter
contains
'='
or
'&'
characters,
the
query
string
cannot
be
parsed
unambiguously
Such
values
should
be
substituted
for
URI
variables
to
enable
correct
parsing:
<pre
class="code">
String
uriString
=
&quot;/hotels/42?filter={value&quot;;
UriComponentsBuilderfromUriString(uriString)buildAndExpand(&quot;hot&amp;cold&quot;);
</pre>
:end
:start
Creates
a
new
UriComponents
object
from
the
string
HTTP
URL
<p><strong>Note:</strong>
The
presence
of
reserved
characters
can
prevent
correct
parsing
of
the
URI
string
For
example
if
a
query
parameter
contains
'='
or
'&'
characters,
the
query
string
cannot
be
parsed
unambiguously
Such
values
should
be
substituted
for
URI
variables
to
enable
correct
parsing:
<pre
class="code">
String
uriString
=
&quot;/hotels/42?filter={value&quot;;
UriComponentsBuilderfromUriString(uriString)buildAndExpand(&quot;hot&amp;cold&quot;);
</pre>
:end
:start
Builds
a
UriComponents
instance
from
the
various
components
contained
in
this
builder
:end
:start
Builds
a
UriComponents
instance
from
the
various
components
contained
in
this
builder
:end
:start
Builds
a
UriComponents
instance
and
replaces
URI
template
variables
with
the
values
from
a
map
This
is
a
shortcut
method,
which
combines
calls
to
#build()
and
then
UriComponents#expand(Map)
:end
:start
Builds
a
UriComponents
instance
and
replaces
URI
template
variables
with
the
values
from
an
array
This
is
a
shortcut
method,
which
combines
calls
to
#build()
and
then
UriComponents#expand(Object)
:end
:start
Initializes
all
components
of
this
URI
builder
with
the
components
of
the
given
URI
:end
:start
Sets
the
URI
scheme
The
given
scheme
may
contain
URI
template
variables,
and
may
also
be
null
to
clear
the
scheme
of
this
builder
:end
:start
Set
all
components
of
this
URI
builder
from
the
given
UriComponents
:end
:start
Set
the
URI
scheme-specific-part
When
invoked,
this
method
overwrites
#userInfo(String)
user-info,
#host(String)
host,
#port(int)
port,
#path(String)
path,
and
#query(String)
query
:end
:start
Sets
the
URI
user
info
The
given
user
info
may
contain
URI
template
variables,
and
may
also
be
null
to
clear
the
user
info
of
this
builder
:end
:start
Sets
the
URI
host
The
given
host
may
contain
URI
template
variables,
and
may
also
be
null
to
clear
the
host
of
this
builder
:end
:start
Sets
the
URI
port
Passing
-1
will
clear
the
port
of
this
builder
:end
:start
Appends
the
given
path
to
the
existing
path
of
this
builder
The
given
path
may
contain
URI
template
variables
:end
:start
Sets
the
path
of
this
builder
overriding
all
existing
path
and
path
segment
values
:end
:start
Appends
the
given
path
segments
to
the
existing
path
of
this
builder
Each
given
path
segments
may
contain
URI
template
variables
:end
:start
Appends
the
given
query
to
the
existing
query
of
this
builder
The
given
query
may
contain
URI
template
variables
<p><strong>Note:</strong>
The
presence
of
reserved
characters
can
prevent
correct
parsing
of
the
URI
string
For
example
if
a
query
parameter
contains
'='
or
'&'
characters,
the
query
string
cannot
be
parsed
unambiguously
Such
values
should
be
substituted
for
URI
variables
to
enable
correct
parsing:
<pre
class="code">
String
uriString
=
&quot;/hotels/42?filter={value&quot;;
UriComponentsBuilderfromUriString(uriString)buildAndExpand(&quot;hot&amp;cold&quot;);
</pre>
:end
:start
Sets
the
query
of
this
builder
overriding
all
existing
query
parameters
:end
:start
Appends
the
given
query
parameter
to
the
existing
query
parameters
The
given
name
or
any
of
the
values
may
contain
URI
template
variables
If
no
values
are
given,
the
resulting
URI
will
contain
the
query
parameter
name
only
(ie
?foo
instead
of
?foo=bar
:end
:start
Adds
the
given
query
parameters
:end
:start
Sets
the
query
parameter
values
overriding
all
existing
query
values
for
the
same
parameter
If
no
values
are
given,
the
query
parameter
is
removed
:end
:start
Sets
the
URI
fragment
The
given
fragment
may
contain
URI
template
variables,
and
may
also
be
null
to
clear
the
fragment
of
this
builder
:end
:start
Represents
a
URI
template
A
URI
template
is
a
URI-like
String
that
contains
variables
enclosed
by
braces
({@code
which
can
be
expanded
to
produce
an
actual
URI
<p>See
#expand(Map),
#expand(Object[]),
and
#match(String)
for
example
usages
:end
:start
Construct
a
new
UriTemplate
with
the
given
URI
String
:end
:start
Return
the
names
of
the
variables
in
the
template,
in
order
:end
:start
Given
the
Map
of
variables,
expands
this
template
into
a
URI
The
Map
keys
represent
variable
names,
the
Map
values
variable
values
The
order
of
variables
is
not
significant
<p>Example:
<pre
class="code">
UriTemplate
template
=
new
UriTemplate("http://examplecom/hotels/{hotel/bookings/{booking");
Map&lt;String,
String&gt;
uriVariables
=
new
HashMap&lt;String,
String&gt;();
uriVariablesput("booking",
"42");
uriVariablesput("hotel",
"1");
Systemoutprintln(templateexpand(uriVariables));
</pre>
will
print:
<blockquote>{@code
http://examplecom/hotels/1/bookings/42</blockquote>
:end
:start
Given
an
array
of
variables,
expand
this
template
into
a
full
URI
The
array
represent
variable
values
The
order
of
variables
is
significant
<p>Example:
<pre
class="code">
UriTemplate
template
=
new
UriTemplate("http://examplecom/hotels/{hotel/bookings/{booking");
Systemoutprintln(templateexpand("1",
"42));
</pre>
will
print:
<blockquote>{@code
http://examplecom/hotels/1/bookings/42</blockquote>
:end
:start
Indicate
whether
the
given
URI
matches
this
template
:end
:start
Match
the
given
URI
to
a
map
of
variable
values
Keys
in
the
returned
map
are
variable
names,
values
are
variable
values,
as
occurred
in
the
given
URI
<p>Example:
<pre
class="code">
UriTemplate
template
=
new
UriTemplate("http://examplecom/hotels/{hotel/bookings/{booking");
Systemoutprintln(templatematch("http://examplecom/hotels/1/bookings/42"));
</pre>
will
print:
<blockquote>{@code
booking=42</blockquote>
:end
:start
Utility
class
for
URI
encoding
and
decoding
based
on
RFC
3986
Offers
encoding
methods
for
the
various
URI
components
<p>All
encode*(String,
String
methods
in
this
class
operate
in
a
similar
way:
<ul>
<li>Valid
characters
for
the
specific
URI
component
as
defined
in
RFC
3986
stay
the
same</li>
<li>All
other
characters
are
converted
into
one
or
more
bytes
in
the
given
encoding
scheme
Each
of
the
resulting
bytes
is
written
as
a
hexadecimal
string
in
the
"{@code
%<i>xy</i>"
format</li>
</ul>
:end
:start
Encodes
the
given
source
URI
into
an
encoded
String
All
various
URI
components
are
encoded
according
to
their
respective
valid
character
sets
<p><strong>Note</strong>
that
this
method
does
not
attempt
to
encode
"="
and
"&"
characters
in
query
parameter
names
and
query
parameter
values
because
they
cannot
be
parsed
in
a
reliable
way
Instead
use:
<pre
class="code">
UriComponents
uriComponents
=
UriComponentsBuilderfromUri("/path?name={value")buildAndExpand("a=b");
String
encodedUri
=
uriComponentsencode()toUriString();
</pre>
:end
:start
Encodes
the
given
HTTP
URI
into
an
encoded
String
All
various
URI
components
are
encoded
according
to
their
respective
valid
character
sets
<p><strong>Note</strong>
that
this
method
does
not
support
fragments
({@code
#),
as
these
are
not
supposed
to
be
sent
to
the
server,
but
retained
by
the
client
<p><strong>Note</strong>
that
this
method
does
not
attempt
to
encode
"="
and
"&"
characters
in
query
parameter
names
and
query
parameter
values
because
they
cannot
be
parsed
in
a
reliable
way
Instead
use:
<pre
class="code">
UriComponents
uriComponents
=
UriComponentsBuilderfromHttpUrl("/path?name={value")buildAndExpand("a=b");
String
encodedUri
=
uriComponentsencode()toUriString();
</pre>
:end
:start
Encodes
the
given
source
URI
components
into
an
encoded
String
All
various
URI
components
are
optional,
but
encoded
according
to
their
respective
valid
character
sets
:end
:start
Encodes
the
given
URI
scheme
with
the
given
encoding
:end
:start
Encodes
the
given
URI
authority
with
the
given
encoding
:end
:start
Encodes
the
given
URI
user
info
with
the
given
encoding
:end
:start
Encodes
the
given
URI
host
with
the
given
encoding
:end
:start
Encodes
the
given
URI
port
with
the
given
encoding
:end
:start
Encodes
the
given
URI
path
with
the
given
encoding
:end
:start
Encodes
the
given
URI
path
segment
with
the
given
encoding
:end
:start
Encodes
the
given
URI
query
with
the
given
encoding
:end
:start
Encodes
the
given
URI
query
parameter
with
the
given
encoding
:end
:start
Encodes
the
given
URI
fragment
with
the
given
encoding
:end
:start
Decodes
the
given
encoded
source
String
into
an
URI
Based
on
the
following
rules:
<ul>
<li>Alphanumeric
characters
"a"
through
"z",
"A"
through
"Z",
and
"0"
through
"9"
stay
the
same</li>
<li>Special
characters
"-",
"_",
"",
and
"*"
stay
the
same</li>
<li>A
sequence
"{@code
%<i>xy</i>"
is
interpreted
as
a
hexadecimal
representation
of
the
character</li>
</ul>
:end
:start
Helper
class
for
URL
path
matching
Provides
support
for
URL
paths
in
RequestDispatcher
includes
and
support
for
consistent
URL
decoding
<p>Used
by
orgspringframeworkwebservlethandlerAbstractUrlHandlerMapping,
orgspringframeworkwebservletmvcmultiactionAbstractUrlMethodNameResolver
and
orgspringframeworkwebservletsupportRequestContext
for
path
matching
and/or
URI
determination
:end
:start
Set
if
URL
lookup
should
always
use
full
path
within
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(ie
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
Default
is
"false"
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
<p>Default
is
"true",
as
of
Spring
25
:end
:start
Set
if
";"
(semicolon)
content
should
be
stripped
from
the
request
URI
<p>Default
is
"true"
:end
:start
Whether
configured
to
remove
";"
(semicolon)
content
from
the
request
URI
:end
:start
Set
the
default
character
encoding
to
use
for
URL
decoding
Default
is
ISO-8859-1,
according
to
the
Servlet
spec
<p>If
the
request
specifies
a
character
encoding
itself,
the
request
encoding
will
override
this
setting
This
also
allows
for
generically
overriding
the
character
encoding
in
a
filter
that
invokes
the
ServletRequestsetCharacterEncoding
method
:end
:start
Return
the
default
character
encoding
to
use
for
URL
decoding
:end
:start
Return
the
mapping
lookup
path
for
the
given
request,
within
the
current
servlet
mapping
if
applicable,
else
within
the
web
application
<p>Detects
include
request
URL
if
called
within
a
RequestDispatcher
include
:end
:start
Return
the
path
within
the
servlet
mapping
for
the
given
request,
ie
the
part
of
the
request's
URL
beyond
the
part
that
called
the
servlet,
or
""
if
the
whole
URL
has
been
used
to
identify
the
servlet
<p>Detects
include
request
URL
if
called
within
a
RequestDispatcher
include
<p>Eg:
servlet
mapping
=
"/test/*";
request
URI
=
"/test/a"
->
"/a"
<p>Eg:
servlet
mapping
=
"/test";
request
URI
=
"/test"
->
""
<p>Eg:
servlet
mapping
=
"/*test";
request
URI
=
"/atest"
->
""
:end
:start
Return
the
path
within
the
web
application
for
the
given
request
<p>Detects
include
request
URL
if
called
within
a
RequestDispatcher
include
:end
:start
Return
the
request
URI
for
the
given
request,
detecting
an
include
request
URL
if
called
within
a
RequestDispatcher
include
<p>As
the
value
returned
by
requestgetRequestURI()
is
<i>not</i>
decoded
by
the
servlet
container,
this
method
will
decode
it
<p>The
URI
that
the
web
container
resolves
<i>should</i>
be
correct,
but
some
containers
like
JBoss/Jetty
incorrectly
include
";"
strings
like
";jsessionid"
in
the
URI
This
method
cuts
off
such
incorrect
appendices
:end
:start
Return
the
context
path
for
the
given
request,
detecting
an
include
request
URL
if
called
within
a
RequestDispatcher
include
<p>As
the
value
returned
by
requestgetContextPath()
is
<i>not</i>
decoded
by
the
servlet
container,
this
method
will
decode
it
:end
:start
Return
the
servlet
path
for
the
given
request,
regarding
an
include
request
URL
if
called
within
a
RequestDispatcher
include
<p>As
the
value
returned
by
requestgetServletPath()
is
already
decoded
by
the
servlet
container,
this
method
will
not
attempt
to
decode
it
:end
:start
Return
the
request
URI
for
the
given
request
If
this
is
a
forwarded
request,
correctly
resolves
to
the
request
URI
of
the
original
request
:end
:start
Return
the
context
path
for
the
given
request,
detecting
an
include
request
URL
if
called
within
a
RequestDispatcher
include
<p>As
the
value
returned
by
requestgetContextPath()
is
<i>not</i>
decoded
by
the
servlet
container,
this
method
will
decode
it
:end
:start
Return
the
servlet
path
for
the
given
request,
detecting
an
include
request
URL
if
called
within
a
RequestDispatcher
include
:end
:start
Return
the
query
string
part
of
the
given
request's
URL
If
this
is
a
forwarded
request,
correctly
resolves
to
the
query
string
of
the
original
request
:end
:start
Decode
the
given
source
string
with
a
URLDecoder
The
encoding
will
be
taken
from
the
request,
falling
back
to
the
default
"ISO-8859-1"
<p>The
default
implementation
uses
URLDecoderdecode(input,
enc)
:end
:start
Determine
the
encoding
for
the
given
request
Can
be
overridden
in
subclasses
<p>The
default
implementation
checks
the
request
encoding,
falling
back
to
the
default
encoding
specified
for
this
resolver
:end
:start
Remove
";"
(semicolon)
content
from
the
given
request
URI
if
the
#setRemoveSemicolonContent(boolean)
removeSemicolonContent
property
is
set
to
"true"
Note
that
"jssessionid"
is
always
removed
:end
:start
Decode
the
given
URI
path
variables
via
#decodeRequestString(HttpServletRequest,
String)
unless
#setUrlDecode(boolean)
is
set
to
true
in
which
case
it
is
assumed
the
URL
path
from
which
the
variables
were
extracted
is
already
decoded
through
a
call
to
#getLookupPathForRequest(HttpServletRequest)
:end
:start
Decode
the
given
matrix
variables
via
#decodeRequestString(HttpServletRequest,
String)
unless
#setUrlDecode(boolean)
is
set
to
true
in
which
case
it
is
assumed
the
URL
path
from
which
the
variables
were
extracted
is
already
decoded
through
a
call
to
#getLookupPathForRequest(HttpServletRequest)
:end
:start
Listener
that
sets
a
system
property
to
the
web
application
root
directory
The
key
of
the
system
property
can
be
defined
with
the
"webAppRootKey"
init
parameter
at
the
servlet
context
level
(ie
context-param
in
webxml),
the
default
key
is
"webapproot"
<p>Can
be
used
for
toolkits
that
support
substitution
with
system
properties
(ie
SystemgetProperty
values),
like
log4j's
"${key"
syntax
within
log
file
locations
<p>Note:
This
listener
should
be
placed
before
ContextLoaderListener
in
webxml,
at
least
when
used
for
log4j
Log4jConfigListener
sets
the
system
property
implicitly,
so
there's
no
need
for
this
listener
in
addition
to
it
<p><b>WARNING</b>:
Some
containers,
eg
Tomcat,
do
NOT
keep
system
properties
separate
per
web
app
You
have
to
use
unique
"webAppRootKey"
context-params
per
web
app
then,
to
avoid
clashes
Other
containers
like
Resin
do
isolate
each
web
app's
system
properties:
Here
you
can
use
the
default
key
(ie
no
"webAppRootKey"
context-param
at
all)
without
worrying
<p><b>WARNING</b>:
The
WAR
file
containing
the
web
application
needs
to
be
expanded
to
allow
for
setting
the
web
app
root
system
property
This
is
by
default
not
the
case
when
a
WAR
file
gets
deployed
to
WebLogic,
for
example
Do
not
use
this
listener
in
such
an
environment!
:end
:start
Miscellaneous
utilities
for
web
applications
Used
by
various
framework
classes
:end
:start
Standard
Servlet
23+
spec
request
attributes
for
include
URI
and
paths
<p>If
included
via
a
RequestDispatcher,
the
current
resource
will
see
the
originating
request
Its
own
URI
and
paths
are
exposed
as
request
attributes
:end
:start
Standard
Servlet
24+
spec
request
attributes
for
forward
URI
and
paths
<p>If
forwarded
to
via
a
RequestDispatcher,
the
current
resource
will
see
its
own
URI
and
paths
The
originating
URI
and
paths
are
exposed
as
request
attributes
:end
:start
Standard
Servlet
23+
spec
request
attributes
for
error
pages
<p>To
be
exposed
to
JSPs
that
are
marked
as
error
pages,
when
forwarding
to
them
directly
rather
than
through
the
servlet
container's
error
page
resolution
mechanism
:end
:start
Prefix
of
the
charset
clause
in
a
content
type
String:
";charset="
:end
:start
Default
character
encoding
to
use
when
requestgetCharacterEncoding
returns
null,
according
to
the
Servlet
spec
:end
:start
Standard
Servlet
spec
context
attribute
that
specifies
a
temporary
directory
for
the
current
web
application,
of
type
javaioFile
:end
:start
HTML
escape
parameter
at
the
servlet
context
level
(ie
a
context-param
in
webxml):
"defaultHtmlEscape"
:end
:start
Web
app
root
key
parameter
at
the
servlet
context
level
(ie
a
context-param
in
webxml):
"webAppRootKey"
:end
:start
Default
web
app
root
key:
"webapproot"
:end
:start
Name
suffixes
in
case
of
image
buttons
:end
:start
Key
for
the
mutex
session
attribute
:end
:start
Set
a
system
property
to
the
web
application
root
directory
The
key
of
the
system
property
can
be
defined
with
the
"webAppRootKey"
context-param
in
webxml
Default
is
"webapproot"
<p>Can
be
used
for
tools
that
support
substition
with
SystemgetProperty
values,
like
log4j's
"${key"
syntax
within
log
file
locations
:end
:start
Remove
the
system
property
that
points
to
the
web
app
root
directory
To
be
called
on
shutdown
of
the
web
application
:end
:start
Return
whether
default
HTML
escaping
is
enabled
for
the
web
application,
ie
the
value
of
the
"defaultHtmlEscape"
context-param
in
webxml
(if
any)
Falls
back
to
false
in
case
of
no
explicit
default
given
:end
:start
Return
whether
default
HTML
escaping
is
enabled
for
the
web
application,
ie
the
value
of
the
"defaultHtmlEscape"
context-param
in
webxml
(if
any)
<p>This
method
differentiates
between
no
param
specified
at
all
and
an
actual
boolean
value
specified,
allowing
to
have
a
context-specific
default
in
case
of
no
setting
at
the
global
level
:end
:start
Return
the
temporary
directory
for
the
current
web
application,
as
provided
by
the
servlet
container
:end
:start
Return
the
real
path
of
the
given
path
within
the
web
application,
as
provided
by
the
servlet
container
<p>Prepends
a
slash
if
the
path
does
not
already
start
with
a
slash,
and
throws
a
FileNotFoundException
if
the
path
cannot
be
resolved
to
a
resource
(in
contrast
to
ServletContext's
getRealPath,
which
returns
null)
:end
:start
Determine
the
session
id
of
the
given
request,
if
any
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
Returns
null
if
there
is
no
session
or
if
the
session
has
no
such
attribute
Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
Throws
an
exception
if
there
is
no
session
or
if
the
session
has
no
such
attribute
Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Set
the
session
attribute
with
the
given
name
to
the
given
value
Removes
the
session
attribute
if
value
is
null,
if
a
session
existed
at
all
Does
not
create
a
new
session
if
not
necessary!
:end
:start
Get
the
specified
session
attribute,
creating
and
setting
a
new
attribute
if
no
existing
found
The
given
class
needs
to
have
a
public
no-arg
constructor
Useful
for
on-demand
state
objects
in
a
web
tier,
like
shopping
carts
:end
:start
Return
the
best
available
mutex
for
the
given
session:
that
is,
an
object
to
synchronize
on
for
the
given
session
<p>Returns
the
session
mutex
attribute
if
available;
usually,
this
means
that
the
HttpSessionMutexListener
needs
to
be
defined
in
webxml
Falls
back
to
the
HttpSession
itself
if
no
mutex
attribute
found
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
HttpSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Return
an
appropriate
request
object
of
the
specified
type,
if
available,
unwrapping
the
given
request
as
far
as
necessary
:end
:start
Return
an
appropriate
response
object
of
the
specified
type,
if
available,
unwrapping
the
given
response
as
far
as
necessary
:end
:start
Determine
whether
the
given
request
is
an
include
request,
that
is,
not
a
top-level
HTTP
request
coming
in
from
the
outside
<p>Checks
the
presence
of
the
"javaxservletincluderequest_uri"
request
attribute
Could
check
any
request
attribute
that
is
only
present
in
an
include
request
:end
:start
Expose
the
Servlet
spec's
error
attributes
as
javaxservlethttpHttpServletRequest
attributes
under
the
keys
defined
in
the
Servlet
23
specification,
for
error
pages
that
are
rendered
directly
rather
than
through
the
Servlet
container's
error
page
resolution:
javaxservleterrorstatus_code,
javaxservleterrorexception_type,
javaxservleterrormessage,
javaxservleterrorexception,
javaxservleterrorrequest_uri,
javaxservleterrorservlet_name
<p>Does
not
override
values
if
already
present,
to
respect
attribute
values
that
have
been
exposed
explicitly
before
<p>Exposes
status
code
200
by
default
Set
the
"javaxservleterrorstatus_code"
attribute
explicitly
(before
or
after)
in
order
to
expose
a
different
status
code
:end
:start
Clear
the
Servlet
spec's
error
attributes
as
javaxservlethttpHttpServletRequest
attributes
under
the
keys
defined
in
the
Servlet
23
specification:
javaxservleterrorstatus_code,
javaxservleterrorexception_type,
javaxservleterrormessage,
javaxservleterrorexception,
javaxservleterrorrequest_uri,
javaxservleterrorservlet_name
:end
:start
Expose
the
given
Map
as
request
attributes,
using
the
keys
as
attribute
names
and
the
values
as
corresponding
attribute
values
Keys
need
to
be
Strings
:end
:start
Retrieve
the
first
cookie
with
the
given
name
Note
that
multiple
cookies
can
have
the
same
name
but
different
paths
or
domains
:end
:start
Check
if
a
specific
input
type="submit"
parameter
was
sent
in
the
request,
either
via
a
button
(directly
with
name)
or
via
an
image
(name
+
"x"
or
name
+
"y")
:end
:start
Obtain
a
named
parameter
from
the
given
request
parameters
<p>See
#findParameterValue(javautilMap,
String)
for
a
description
of
the
lookup
algorithm
:end
:start
Return
a
map
containing
all
parameters
with
the
given
prefix
Maps
single
values
to
String
and
multiple
values
to
String
array
<p>For
example,
with
a
prefix
of
"spring_",
"spring_param1"
and
"spring_param2"
result
in
a
Map
with
"param1"
and
"param2"
as
keys
:end
:start
Return
the
target
page
specified
in
the
request
:end
:start
Extract
the
URL
filename
from
the
given
request
URL
path
Correctly
resolves
nested
paths
such
as
"/products/viewhtml"
as
well
:end
:start
Extract
the
full
URL
filename
(including
file
extension)
from
the
given
request
URL
path
Correctly
resolves
nested
paths
such
as
"/products/viewhtml"
as
well
:end
:start
Parse
the
given
string
with
matrix
variables
An
example
string
would
look
like
this
"q1=a;q1=b;q2=a,b,c"
The
resulting
map
would
contain
keys
"q1"
and
"q2"
with
values
["a","b"]
and
["a","b","c"]
respectively
:end
:start
Interface
to
be
implemented
in
Servlet
30+
environments
in
order
to
configure
the
ServletContext
programmatically
--
as
opposed
to
(or
possibly
in
conjunction
with)
the
traditional
webxml-based
approach
<p>Implementations
of
this
SPI
will
be
detected
automatically
by
SpringServletContainerInitializer,
which
itself
is
bootstrapped
automatically
by
any
Servlet
30
container
See
SpringServletContainerInitializer
its
Javadoc
for
details
on
this
bootstrapping
mechanism
<h2>Example</h2>
<h3>The
traditional,
XML-based
approach</h3>
Most
Spring
users
building
a
web
application
will
need
to
register
Spring's
DispatcherServlet
For
reference,
in
WEB-INF/webxml,
this
would
typically
be
done
as
follows:
<pre
class="code">
<servlet>
<servlet-name>dispatcher</servlet-name>
<servlet-class>
orgspringframeworkwebservletDispatcherServlet
</servlet-class>
<init-param>
<param-name>contextConfigLocation</param-name>
<param-value>/WEB-INF/spring/dispatcher-configxml</param-value>
</init-param>
<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
<servlet-name>dispatcher</servlet-name>
<url-pattern>/</url-pattern>
</servlet-mapping></pre>
<h3>The
code-based
approach
with
WebApplicationInitializer</h3>
Here
is
the
equivalent
DispatcherServlet
registration
logic,
WebApplicationInitializer-style:
<pre
class="code">
public
class
MyWebAppInitializer
implements
WebApplicationInitializer
&#064;Override
public
void
onStartup(ServletContext
container)
XmlWebApplicationContext
appContext
=
new
XmlWebApplicationContext();
appContextsetConfigLocation("/WEB-INF/spring/dispatcher-configxml");
ServletRegistrationDynamic
dispatcher
=
containeraddServlet("dispatcher",
new
DispatcherServlet(appContext));
dispatchersetLoadOnStartup(1);
dispatcheraddMapping("/");

</pre>
As
an
alternative
to
the
above,
you
can
also
extend
from
orgspringframeworkwebservletsupportAbstractDispatcherServletInitializer
As
you
can
see,
thanks
to
Servlet
30's
new
ServletContext#addServlet
method
we're
actually
registering
an
<em>instance</em>
of
the
DispatcherServlet,
and
this
means
that
the
DispatcherServlet
can
now
be
treated
like
any
other
object
--
receiving
constructor
injection
of
its
application
context
in
this
case
<p>This
style
is
both
simpler
and
more
concise
There
is
no
concern
for
dealing
with
init-params,
etc,
just
normal
JavaBean-style
properties
and
constructor
arguments
You
are
free
to
create
and
work
with
your
Spring
application
contexts
as
necessary
before
injecting
them
into
the
DispatcherServlet
<p>Most
major
Spring
Web
components
have
been
updated
to
support
this
style
of
registration
You'll
find
that
DispatcherServlet,
FrameworkServlet,
ContextLoaderListener
and
DelegatingFilterProxy
all
now
support
constructor
arguments
Even
if
a
component
(eg
non-Spring,
other
third
party)
has
not
been
specifically
updated
for
use
within
WebApplicationInitializers,
they
still
may
be
used
in
any
case
The
Servlet
30
ServletContext
API
allows
for
setting
init-params,
context-params,
etc
programmatically
<h2>A
100%
code-based
approach
to
configuration</h2>
In
the
example
above,
WEB-INF/webxml
was
successfully
replaced
with
code
in
the
form
of
a
WebApplicationInitializer,
but
the
actual
dispatcher-configxml
Spring
configuration
remained
XML-based
WebApplicationInitializer
is
a
perfect
fit
for
use
with
Spring's
code-based
@Configuration
classes
See
@{@link
orgspringframeworkcontextannotationConfiguration
Configuration
Javadoc
for
complete
details,
but
the
following
example
demonstrates
refactoring
to
use
Spring's
orgspringframeworkwebcontextsupportAnnotationConfigWebApplicationContext
AnnotationConfigWebApplicationContext
in
lieu
of
XmlWebApplicationContext,
and
user-defined
@Configuration
classes
AppConfig
and
DispatcherConfig
instead
of
Spring
XML
files
This
example
also
goes
a
bit
beyond
those
above
to
demonstrate
typical
configuration
of
the
'root'
application
context
and
registration
of
the
ContextLoaderListener:
<pre
class="code">
public
class
MyWebAppInitializer
implements
WebApplicationInitializer
&#064;Override
public
void
onStartup(ServletContext
container)
//
Create
the
'root'
Spring
application
context
AnnotationConfigWebApplicationContext
rootContext
=
new
AnnotationConfigWebApplicationContext();
rootContextregister(AppConfigclass);
//
Manage
the
lifecycle
of
the
root
application
context
containeraddListener(new
ContextLoaderListener(rootContext));
//
Create
the
dispatcher
servlet's
Spring
application
context
AnnotationConfigWebApplicationContext
dispatcherContext
=
new
AnnotationConfigWebApplicationContext();
dispatcherContextregister(DispatcherConfigclass);
//
Register
and
map
the
dispatcher
servlet
ServletRegistrationDynamic
dispatcher
=
containeraddServlet("dispatcher",
new
DispatcherServlet(dispatcherContext));
dispatchersetLoadOnStartup(1);
dispatcheraddMapping("/");

</pre>
As
an
alternative
to
the
above,
you
can
also
extend
from
orgspringframeworkwebservletsupportAbstractAnnotationConfigDispatcherServletInitializer
Remember
that
WebApplicationInitializer
implementations
are
<em>detected
automatically</em>
--
so
you
are
free
to
package
them
within
your
application
as
you
see
fit
<h2>Ordering
WebApplicationInitializer
execution</h2>
WebApplicationInitializer
implementations
may
optionally
be
annotated
at
the
class
level
with
Spring's
@{@link
orgspringframeworkcoreannotationOrder
Order
annotation
or
may
implement
Spring's
orgspringframeworkcoreOrdered
Ordered
interface
If
so,
the
initializers
will
be
ordered
prior
to
invocation
This
provides
a
mechanism
for
users
to
ensure
the
order
in
which
servlet
container
initialization
occurs
Use
of
this
feature
is
expected
to
be
rare,
as
typical
applications
will
likely
centralize
all
container
initialization
within
a
single
WebApplicationInitializer
<h2>Caveats</h2>
<h3>webxml
versioning</h3>
<p>{@code
WEB-INF/webxml
and
WebApplicationInitializer
use
are
not
mutually
exclusive;
for
example,
webxml
can
register
one
servlet,
and
a
WebApplicationInitializer
can
register
another
An
initializer
can
even
<em>modify</em>
registrations
performed
in
webxml
through
methods
such
as
ServletContext#getServletRegistration(String)
<strong>However,
if
WEB-INF/webxml
is
present
in
the
application,
its
version
attribute
must
be
set
to
"30"
or
greater,
otherwise
ServletContainerInitializer
bootstrapping
will
be
ignored
by
the
servlet
container</strong>
<h3>Mapping
to
'/'
under
Tomcat</h3>
<p>Apache
Tomcat
maps
its
internal
DefaultServlet
to
"/",
and
on
Tomcat
versions
&lt;=
7014,
this
servlet
mapping
<em>cannot
be
overridden
programmatically</em>
7015
fixes
this
issue
Overriding
the
"/"
servlet
mapping
has
also
been
tested
successfully
under
GlassFish
31<p>
:end
:start
Configure
the
given
ServletContext
with
any
servlets,
filters,
listeners
context-params
and
attributes
necessary
for
initializing
this
web
application
See
examples
WebApplicationInitializer
above
:end
:start
Delegating
implementation
of
javaxservletServletInputStream
<p>Used
by
MockHttpServletRequest;
typically
not
directly
used
for
testing
application
controllers
:end
:start
Create
a
DelegatingServletInputStream
for
the
given
source
stream
:end
:start
Return
the
underlying
source
stream
(never
null)
:end
:start
Delegating
implementation
of
javaxservletServletOutputStream
<p>Used
by
MockHttpServletResponse;
typically
not
directly
used
for
testing
application
controllers
:end
:start
Create
a
DelegatingServletOutputStream
for
the
given
target
stream
:end
:start
Return
the
underlying
target
stream
(never
null)
:end
:start
Mock
implementation
of
the
AsyncContext
interface
:end
:start
Mock
implementation
of
the
javaxservletjsptagextBodyContent
class
<p>Used
for
testing
the
web
framework;
only
necessary
for
testing
applications
when
testing
custom
JSP
tags
:end
:start
Create
a
MockBodyContent
for
the
given
response
:end
:start
Create
a
MockBodyContent
for
the
given
response
:end
:start
Mock
implementation
of
the
JSP
20
javaxservletjspelExpressionEvaluator
interface,
delegating
to
the
Jakarta
JSTL
ExpressionEvaluatorManager
<p>Used
for
testing
the
web
framework;
only
necessary
for
testing
applications
when
testing
custom
JSP
tags
<p>Note
that
the
Jakarta
JSTL
implementation
(jstljar,
standardjar)
has
to
be
available
on
the
class
path
to
use
this
expression
evaluator
:end
:start
Create
a
new
MockExpressionEvaluator
for
the
given
PageContext
:end
:start
<p>Mock
implementation
of
the
javaxservletFilterChain
interface
Used
for
testing
the
web
framework;
also
useful
for
testing
custom
javaxservletFilter
implementations
<p>A
MockFilterChain
can
be
configured
with
one
or
more
filters
and
a
Servlet
to
invoke
The
first
time
the
chain
is
called,
it
invokes
all
filters
and
the
Servlet,
and
saves
the
request
and
response
Subsequent
invocations
raise
an
IllegalStateException
unless
#reset()
is
called
:end
:start
Register
a
single
do-nothing
Filter
implementation
The
first
invocation
saves
the
request
and
response
Subsequent
invocations
raise
an
IllegalStateException
unless
#reset()
is
called
:end
:start
Create
a
FilterChain
with
a
Servlet
:end
:start
Create
a
FilterChain
with
Filter's
and
a
Servlet
:end
:start
Return
the
request
that
#doFilter
has
been
called
with
:end
:start
Return
the
response
that
#doFilter
has
been
called
with
:end
:start
Invoke
registered
Filters
and/or
Servlet
also
saving
the
request
and
response
:end
:start
Reset
the
MockFilterChain
allowing
it
to
be
invoked
again
:end
:start
Mock
implementation
of
the
javaxservletFilterConfig
interface
<p>Used
for
testing
the
web
framework;
also
usefol
for
testing
custom
javaxservletFilter
implementations
:end
:start
Create
a
new
MockFilterConfig
with
a
default
MockServletContext
:end
:start
Create
a
new
MockFilterConfig
with
a
default
MockServletContext
:end
:start
Create
a
new
MockFilterConfig
:end
:start
Create
a
new
MockFilterConfig
:end
:start
Mock
implementation
of
the
javaxservlethttpHttpServletRequest
interface
<p>As
of
Spring
40,
this
set
of
mocks
is
designed
on
a
Servlet
30
baseline
:end
:start
The
default
protocol:
'http'
:end
:start
The
default
server
address:
'127001'
:end
:start
The
default
server
name:
'localhost'
:end
:start
The
default
server
port:
'80'
:end
:start
The
default
remote
address:
'127001'
:end
:start
The
default
remote
host:
'localhost'
:end
:start
Create
a
new
MockHttpServletRequest
with
a
default
MockServletContext
:end
:start
Create
a
new
MockHttpServletRequest
with
a
default
MockServletContext
:end
:start
Create
a
new
MockHttpServletRequest
with
the
supplied
ServletContext
:end
:start
Create
a
new
MockHttpServletRequest
with
the
supplied
ServletContext,
method,
and
requestURI
<p>The
preferred
locale
will
be
set
to
Locale#ENGLISH
:end
:start
Return
the
ServletContext
that
this
request
is
associated
with
(Not
available
in
the
standard
HttpServletRequest
interface
for
some
reason)
:end
:start
Return
whether
this
request
is
still
active
(that
is,
not
completed
yet)
:end
:start
Mark
this
request
as
completed,
keeping
its
state
:end
:start
Invalidate
this
request,
clearing
its
state
:end
:start
Check
whether
this
request
is
still
active
(that
is,
not
completed
yet),
throwing
an
IllegalStateException
if
not
active
anymore
:end
:start
Set
a
single
value
for
the
specified
HTTP
parameter
<p>If
there
are
already
one
or
more
values
registered
for
the
given
parameter
name,
they
will
be
replaced
:end
:start
Set
an
array
of
values
for
the
specified
HTTP
parameter
<p>If
there
are
already
one
or
more
values
registered
for
the
given
parameter
name,
they
will
be
replaced
:end
:start
Sets
all
provided
parameters
<strong>replacing</strong>
any
existing
values
for
the
provided
parameter
names
To
add
without
replacing
existing
values,
use
#addParameters(javautilMap)
:end
:start
Add
a
single
value
for
the
specified
HTTP
parameter
<p>If
there
are
already
one
or
more
values
registered
for
the
given
parameter
name,
the
given
value
will
be
added
to
the
end
of
the
list
:end
:start
Add
an
array
of
values
for
the
specified
HTTP
parameter
<p>If
there
are
already
one
or
more
values
registered
for
the
given
parameter
name,
the
given
values
will
be
added
to
the
end
of
the
list
:end
:start
Adds
all
provided
parameters
<strong>without</strong>
replacing
any
existing
values
To
replace
existing
values,
use
#setParameters(javautilMap)
:end
:start
Remove
already
registered
values
for
the
specified
HTTP
parameter,
if
any
:end
:start
Removes
all
existing
parameters
:end
:start
Clear
all
of
this
request's
attributes
:end
:start
Add
a
new
preferred
locale,
before
any
existing
locales
:end
:start
Set
the
list
of
preferred
locales,
in
descending
order,
effectively
replacing
any
existing
locales
:end
:start
Add
a
header
entry
for
the
given
name
<p>If
there
was
no
entry
for
that
header
name
before,
the
value
will
be
used
as-is
In
case
of
an
existing
entry,
a
String
array
will
be
created,
adding
the
given
value
(more
specifically,
its
toString
representation)
as
further
element
<p>Multiple
values
can
only
be
stored
as
list
of
Strings,
following
the
Servlet
spec
(see
getHeaders
accessor)
As
alternative
to
repeated
addHeader
calls
for
individual
elements,
you
can
use
a
single
call
with
an
entire
array
or
Collection
of
values
as
parameter
:end
:start
The
implementation
of
this
(Servlet
31+)
method
calls
MockHttpSession#changeSessionId()
if
the
session
is
a
mock
session
Otherwise
it
simply
returns
the
current
session
id
:end
:start
Mock
implementation
of
the
javaxservlethttpHttpServletResponse
interface
<p>As
of
Spring
40,
this
set
of
mocks
is
designed
on
a
Servlet
30
baseline
Beyond
that,
MockHttpServletResponse
is
also
compatible
with
Servlet
31's
setContentLengthLong()
method
:end
:start
Set
whether
#getOutputStream()
access
is
allowed
<p>Default
is
true
:end
:start
Return
whether
#getOutputStream()
access
is
allowed
:end
:start
Set
whether
#getWriter()
access
is
allowed
<p>Default
is
true
:end
:start
Return
whether
#getOutputStream()
access
is
allowed
:end
:start
Return
the
names
of
all
specified
headers
as
a
Set
of
Strings
<p>As
of
Servlet
30,
this
method
is
also
defined
HttpServletResponse
:end
:start
Return
the
primary
value
for
the
given
header
as
a
String,
if
any
Will
return
the
first
value
in
case
of
multiple
values
<p>As
of
Servlet
30,
this
method
is
also
defined
in
HttpServletResponse
As
of
Spring
31,
it
returns
a
stringified
value
for
Servlet
30
compatibility
Consider
using
#getHeaderValue(String)
for
raw
Object
access
:end
:start
Return
all
values
for
the
given
header
as
a
List
of
Strings
<p>As
of
Servlet
30,
this
method
is
also
defined
in
HttpServletResponse
As
of
Spring
31,
it
returns
a
List
of
stringified
values
for
Servlet
30
compatibility
Consider
using
#getHeaderValues(String)
for
raw
Object
access
:end
:start
Return
the
primary
value
for
the
given
header,
if
any
<p>Will
return
the
first
value
in
case
of
multiple
values
:end
:start
Return
all
values
for
the
given
header
as
a
List
of
value
objects
:end
:start
The
default
implementation
returns
the
given
URL
String
as-is
<p>Can
be
overridden
in
subclasses,
appending
a
session
id
or
the
like
:end
:start
The
default
implementation
delegates
to
#encodeURL,
returning
the
given
URL
String
as-is
<p>Can
be
overridden
in
subclasses,
appending
a
session
id
or
the
like
in
a
redirect-specific
fashion
For
general
URL
encoding
rules,
override
the
common
#encodeURL
method
instead,
applying
to
redirect
URLs
as
well
as
to
general
URLs
:end
:start
Mock
implementation
of
the
javaxservlethttpHttpSession
interface
<p>As
of
Spring
40,
this
set
of
mocks
is
designed
on
a
Servlet
30
baseline
<p>Used
for
testing
the
web
framework;
also
useful
for
testing
application
controllers
:end
:start
Create
a
new
MockHttpSession
with
a
default
MockServletContext
:end
:start
Create
a
new
MockHttpSession
:end
:start
Create
a
new
MockHttpSession
:end
:start
As
of
Servlet
31
the
id
of
a
session
can
be
changed
:end
:start
Clear
all
of
this
session's
attributes
:end
:start
Invalidates
this
session
then
unbinds
any
objects
bound
to
it
:end
:start
Serialize
the
attributes
of
this
session
into
an
object
that
can
be
turned
into
a
byte
array
with
standard
Java
serialization
:end
:start
Deserialize
the
attributes
of
this
session
from
a
state
object
created
by
#serializeState()
:end
:start
Mock
implementation
of
the
javaxservletjspJspWriter
class
<p>Used
for
testing
the
web
framework;
only
necessary
for
testing
applications
when
testing
custom
JSP
tags
:end
:start
Create
a
MockJspWriter
for
the
given
response,
using
the
response's
default
Writer
:end
:start
Create
a
MockJspWriter
for
the
given
response
:end
:start
Lazily
initialize
the
target
Writer
:end
:start
Mock
implementation
of
the
orgspringframeworkwebmultipartMultipartFile
interface
<p>Useful
in
conjunction
with
a
MockMultipartHttpServletRequest
for
testing
application
controllers
that
access
multipart
uploads
:end
:start
Create
a
new
MockMultipartFile
with
the
given
content
:end
:start
Create
a
new
MockMultipartFile
with
the
given
content
:end
:start
Create
a
new
MockMultipartFile
with
the
given
content
:end
:start
Create
a
new
MockMultipartFile
with
the
given
content
:end
:start
Mock
implementation
of
the
orgspringframeworkwebmultipartMultipartHttpServletRequest
interface
<p>As
of
Spring
40,
this
set
of
mocks
is
designed
on
a
Servlet
30
baseline
<p>Useful
for
testing
application
controllers
that
access
multipart
uploads
The
MockMultipartFile
can
be
used
to
populate
these
mock
requests
with
files
:end
:start
Create
a
new
MockMultipartHttpServletRequest
with
a
default
MockServletContext
:end
:start
Create
a
new
MockMultipartHttpServletRequest
with
the
supplied
ServletContext
:end
:start
Add
a
file
to
this
request
The
parameter
name
from
the
multipart
form
is
taken
from
the
MultipartFile#getName()
:end
:start
Mock
implementation
of
the
javaxservletjspPageContext
interface
<p>Used
for
testing
the
web
framework;
only
necessary
for
testing
applications
when
testing
custom
JSP
tags
<p>Note:
Expects
initialization
via
the
constructor
rather
than
via
the
PageContextinitialize
method
Does
not
support
writing
to
a
JspWriter,
request
dispatching,
and
handlePageException
calls
:end
:start
Create
new
MockPageContext
with
a
default
MockServletContext,
MockHttpServletRequest,
MockHttpServletResponse,
MockServletConfig
:end
:start
Create
new
MockPageContext
with
a
default
MockHttpServletRequest,
MockHttpServletResponse,
MockServletConfig
:end
:start
Create
new
MockPageContext
with
a
MockHttpServletResponse,
MockServletConfig
:end
:start
Create
new
MockPageContext
with
a
MockServletConfig
:end
:start
Create
new
MockServletConfig
:end
:start
Mock
implementation
of
the
Part
interface
:end
:start
Create
a
new
MockPart
with
the
given
content
:end
:start
Create
a
new
MockPart
with
the
given
content
:end
:start
Create
a
new
MockPart
with
the
given
content
:end
:start
Create
a
new
MockPart
with
the
given
content
:end
:start
Mock
implementation
of
the
javaxservletRequestDispatcher
interface
<p>Used
for
testing
the
web
framework;
typically
not
necessary
for
testing
application
controllers
:end
:start
Create
a
new
MockRequestDispatcher
for
the
given
resource
:end
:start
Obtain
the
underlying
MockHttpServletResponse,
unwrapping
HttpServletResponseWrapper
decorators
if
necessary
:end
:start
Mock
implementation
of
the
javaxservletServletConfig
interface
<p>Used
for
testing
the
web
framework;
typically
not
necessary
for
testing
application
controllers
:end
:start
Create
a
new
MockServletConfig
with
a
default
MockServletContext
:end
:start
Create
a
new
MockServletConfig
with
a
default
MockServletContext
:end
:start
Create
a
new
MockServletConfig
:end
:start
Create
a
new
MockServletConfig
:end
:start
Mock
implementation
of
the
javaxservletServletContext
interface
<p>As
of
Spring
40,
this
set
of
mocks
is
designed
on
a
Servlet
30
baseline
<p>Compatible
with
Servlet
30
but
can
be
configured
to
expose
a
specific
version
through
#setMajorVersion/{@link
#setMinorVersion;
default
is
30
Note
that
Servlet
30
support
is
limited:
servlet,
filter
and
listener
registration
methods
are
not
supported;
neither
is
JSP
configuration
We
generally
do
not
recommend
to
unit-test
your
ServletContainerInitializers
and
WebApplicationInitializers
which
is
where
those
registration
methods
would
be
used
<p>Used
for
testing
the
Spring
web
framework;
only
rarely
necessary
for
testing
application
controllers
As
long
as
application
components
don't
explicitly
access
the
ServletContext,
ClassPathXmlApplicationContext
or
FileSystemXmlApplicationContext
can
be
used
to
load
the
context
files
for
testing,
even
for
DispatcherServlet
context
definitions
<p>For
setting
up
a
full
WebApplicationContext
in
a
test
environment,
you
can
use
AnnotationConfigWebApplicationContext,
XmlWebApplicationContext,
or
GenericWebApplicationContext,
passing
in
an
appropriate
MockServletContext
instance
You
might
want
to
configure
your
MockServletContext
with
a
FileSystemResourceLoader
in
that
case
to
ensure
that
resource
paths
are
interpreted
as
relative
filesystem
locations
<p>A
common
setup
is
to
point
your
JVM
working
directory
to
the
root
of
your
web
application
directory,
in
combination
with
filesystem-based
resource
loading
This
allows
to
load
the
context
files
as
used
in
the
web
application,
with
relative
paths
getting
interpreted
correctly
Such
a
setup
will
work
with
both
FileSystemXmlApplicationContext
(which
will
load
straight
from
the
filesystem)
and
XmlWebApplicationContext
with
an
underlying
MockServletContext
(as
long
as
the
MockServletContext
has
been
configured
with
a
FileSystemResourceLoader)
:end
:start
Create
a
new
MockServletContext,
using
no
base
path
and
a
DefaultResourceLoader
(ie
the
classpath
root
as
WAR
root)
:end
:start
Create
a
new
MockServletContext,
using
a
DefaultResourceLoader
:end
:start
Create
a
new
MockServletContext,
using
the
specified
ResourceLoader
and
no
base
path
:end
:start
Create
a
new
MockServletContext
using
the
supplied
resource
base
path
and
resource
loader
<p>Registers
a
MockRequestDispatcher
for
the
Servlet
named
#COMMON_DEFAULT_SERVLET_NAME
:end
:start
Build
a
full
resource
location
for
the
given
path,
prepending
the
resource
base
path
of
this
MockServletContext
:end
:start
This
method
uses
the
Java
Activation
framework,
which
returns
"application/octet-stream"
when
the
mime
type
is
unknown
(ie
it
never
returns
null)
In
order
to
maintain
the
ServletContext#getMimeType(String)
contract,
this
method
returns
null
if
the
mimeType
is
"application/octet-stream",
as
of
Spring
322
:end
:start
Register
a
RequestDispatcher
(typically
a
MockRequestDispatcher)
that
acts
as
a
wrapper
for
the
named
Servlet
:end
:start
Unregister
the
RequestDispatcher
with
the
given
name
:end
:start
Get
the
name
of
the
<em>default</em>
Servlet
<p>Defaults
to
#COMMON_DEFAULT_SERVLET_NAME
:end
:start
Set
the
name
of
the
<em>default</em>
Servlet
<p>Also
#unregisterNamedDispatcher
unregisters
the
current
default
RequestDispatcher
and
#registerNamedDispatcher
replaces
it
with
a
MockRequestDispatcher
for
the
provided
defaultServletName
:end
:start
Mock
implementation
of
the
javaxservletSessionCookieConfig
interface
:end
:start
Implementation
of
the
javaxservletFilterConfig
interface
which
simply
passes
the
call
through
to
a
given
Filter/FilterChain
combo
(indicating
the
next
Filter
in
the
chain
along
with
the
FilterChain
that
it
is
supposed
to
work
on)
or
to
a
given
Servlet
(indicating
the
end
of
the
chain)
:end
:start
Create
a
new
PassThroughFilterChain
that
delegates
to
the
given
Filter,
calling
it
with
the
given
FilterChain
:end
:start
Create
a
new
PassThroughFilterChain
that
delegates
to
the
given
Servlet
:end
:start
Pass
the
call
on
to
the
Filter/Servlet
:end
:start
Mock
implementation
of
the
FacesContext
class
to
facilitate
standalone
Action
unit
tests
:end
:start
Supports
parameters
of
a
given
type
and
resolves
them
using
a
stub
value
Also
records
the
resolved
parameter
value
:end
:start
Supports
a
fixed
return
value
type
Records
the
last
handled
return
value
:end
:start
Extends
HandlerInterceptor
with
a
callback
method
invoked
during
asynchronous
request
handling
<p>When
a
handler
starts
asynchronous
request
handling,
the
DispatcherServlet
exits
without
invoking
postHandle
and
afterCompletion,
as
it
normally
does,
since
the
results
of
request
handling
(eg
ModelAndView)
will
be
produced
concurrently
in
another
thread
In
such
scenarios,
#afterConcurrentHandlingStarted(HttpServletRequest,
HttpServletResponse,
Object)
is
invoked
instead
allowing
implementations
to
perform
tasks
such
as
cleaning
up
thread
bound
attributes
<p>When
asynchronous
handling
completes,
the
request
is
dispatched
to
the
container
for
further
processing
At
this
stage
the
DispatcherServlet
invokes
preHandle,
postHandle
and
afterCompletion
as
usual
:end
:start
Called
instead
of
postHandle
and
afterCompletion,
when
the
a
handler
is
being
executed
concurrently
Implementations
may
use
the
provided
request
and
response
but
should
avoid
modifying
them
in
ways
that
would
conflict
with
the
concurrent
execution
of
the
handler
A
typical
use
of
this
method
would
be
to
clean
thread
local
variables
:end
:start
Helps
with
configuring
options
for
asynchronous
request
processing
:end
:start
Set
the
default
AsyncTaskExecutor
to
use
when
a
controller
method
returns
a
Callable
Controller
methods
can
override
this
default
on
a
per-request
basis
by
returning
a
WebAsyncTask
<p>By
default
a
SimpleAsyncTaskExecutor
instance
is
used,
and
it's
highly
recommended
to
change
that
default
in
production
since
the
simple
executor
does
not
re-use
threads
:end
:start
Specify
the
amount
of
time,
in
milliseconds,
before
asynchronous
request
handling
times
out
In
Servlet
3,
the
timeout
begins
after
the
main
request
processing
thread
has
exited
and
ends
when
the
request
is
dispatched
again
for
further
processing
of
the
concurrently
produced
result
<p>If
this
value
is
not
set,
the
default
timeout
of
the
underlying
implementation
is
used,
eg
10
seconds
on
Tomcat
with
Servlet
3
:end
:start
Configure
lifecycle
interceptors
with
callbacks
around
concurrent
request
execution
that
starts
when
a
controller
returns
a
javautilconcurrentCallable
:end
:start
Configure
lifecycle
interceptors
with
callbacks
around
concurrent
request
execution
that
starts
when
a
controller
returns
a
DeferredResult
:end
:start
Helps
with
configuring
a
ContentNegotiationManager
<p>By
default
strategies
for
checking
the
extension
of
the
request
path
and
the
Accept
header
are
registered
The
path
extension
check
will
perform
lookups
through
the
ServletContext
and
the
Java
Activation
Framework
(if
present)
unless
#mediaTypes(Map)
media
types
are
configured
:end
:start
Class
constructor
with
javaxservletServletContext
:end
:start
Indicate
whether
the
extension
of
the
request
path
should
be
used
to
determine
the
requested
media
type
with
the
<em>highest
priority</em>
<p>By
default
this
value
is
set
to
true
in
which
case
a
request
for
/hotelspdf
will
be
interpreted
as
a
request
for
"application/pdf"
regardless
of
the
Accept
header
:end
:start
Add
mappings
from
file
extensions
to
media
types
<p>If
this
property
is
not
set,
the
Java
Action
Framework,
if
available,
may
still
be
used
in
conjunction
with
#favorPathExtension(boolean)
:end
:start
Add
mappings
from
file
extensions
to
media
types
<p>If
this
property
is
not
set,
the
Java
Action
Framework,
if
available,
may
still
be
used
in
conjunction
with
#favorPathExtension(boolean)
:end
:start
Add
mappings
from
file
extensions
to
media
types
replacing
any
previous
mappings
<p>If
this
property
is
not
set,
the
Java
Action
Framework,
if
available,
may
still
be
used
in
conjunction
with
#favorPathExtension(boolean)
:end
:start
Indicate
whether
to
use
the
Java
Activation
Framework
as
a
fallback
option
to
map
from
file
extensions
to
media
types
This
is
used
only
when
#favorPathExtension(boolean)
is
set
to
true
<p>The
default
value
is
true
:end
:start
Indicate
whether
a
request
parameter
should
be
used
to
determine
the
requested
media
type
with
the
<em>2nd
highest
priority</em>,
ie
after
path
extensions
but
before
the
Accept
header
<p>The
default
value
is
false
If
set
to
to
true,
a
request
for
/hotels?format=pdf
will
be
interpreted
as
a
request
for
"application/pdf"
regardless
of
the
Accept
header
<p>To
use
this
option
effectively
you
must
also
configure
the
MediaType
type
mappings
via
#mediaTypes(Map)
:end
:start
Set
the
parameter
name
that
can
be
used
to
determine
the
requested
media
type
if
the
#favorParameter(boolean)
property
is
true
<p>The
default
parameter
name
is
"format"
:end
:start
Indicate
whether
the
HTTP
Accept
header
should
be
ignored
altogether
If
set
the
Accept
header
is
checked
at
the
<em>3rd
highest
priority</em>,
ie
after
the
request
path
extension
and
possibly
a
request
parameter
if
configured
<p>By
default
this
value
is
set
to
false
:end
:start
Set
the
default
content
type
<p>This
content
type
will
be
used
when
neither
the
request
path
extension,
nor
a
request
parameter,
nor
the
Accept
header
could
help
determine
the
requested
content
type
:end
:start
Return
the
configured
ContentNegotiationManager
instance
:end
:start
Configures
a
request
handler
for
serving
static
resources
by
forwarding
the
request
to
the
Servlet
container's
"default"
Servlet
This
is
intended
to
be
used
when
the
Spring
MVC
DispatcherServlet
is
mapped
to
"/"
thus
overriding
the
Servlet
container's
default
handling
of
static
resources
Since
this
handler
is
configured
at
the
lowest
precedence,
effectively
it
allows
all
other
handler
mappings
to
handle
the
request,
and
if
none
of
them
do,
this
handler
can
forward
it
to
the
"default"
Servlet
:end
:start
Create
a
DefaultServletHandlerConfigurer
instance
:end
:start
Enable
forwarding
to
the
"default"
Servlet
When
this
method
is
used
the
DefaultServletHttpRequestHandler
will
try
to
auto-detect
the
"default"
Servlet
name
Alternatively,
you
can
specify
the
name
of
the
default
Servlet
via
#enable(String)
:end
:start
Enable
forwarding
to
the
"default"
Servlet
identified
by
the
given
name
This
is
useful
when
the
default
Servlet
cannot
be
auto-detected,
for
example
when
it
has
been
manually
configured
:end
:start
Return
a
handler
mapping
instance
ordered
at
Integer#MAX_VALUE
containing
the
DefaultServletHttpRequestHandler
instance
mapped
to
"/**";
or
null
if
default
servlet
handling
was
not
been
enabled
:end
:start
A
sub-class
of
WebMvcConfigurationSupport
that
detects
and
delegates
to
all
beans
of
type
WebMvcConfigurer
allowing
them
to
customize
the
configuration
provided
by
WebMvcConfigurationSupport
This
is
the
class
actually
imported
by
EnableWebMvc
@EnableWebMvc
:end
:start
Add
this
annotation
to
an
@Configuration
class
to
have
the
Spring
MVC
configuration
defined
in
WebMvcConfigurationSupport
imported:
<pre
class="code">
&#064;Configuration
&#064;EnableWebMvc
&#064;ComponentScan(basePackageClasses
=
MyConfigurationclass
)
public
class
MyWebConfiguration

</pre>
<p>Customize
the
imported
configuration
by
implementing
the
WebMvcConfigurer
interface
or
more
likely
by
extending
the
WebMvcConfigurerAdapter
base
class
and
overriding
individual
methods:
<pre
class="code">
&#064;Configuration
&#064;EnableWebMvc
&#064;ComponentScan(basePackageClasses
=
MyConfigurationclass
)
public
class
MyConfiguration
extends
WebMvcConfigurerAdapter
&#064;Override
public
void
addFormatters(FormatterRegistry
formatterRegistry)
formatterRegistryaddConverter(new
MyConverter());

&#064;Override
public
void
configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt;
converters)
convertersadd(new
MyHttpMessageConverter());

//
More
overridden
methods


</pre>
<p>If
the
customization
options
of
WebMvcConfigurer
do
not
expose
something
you
need
to
configure,
consider
removing
the
@EnableWebMvc
annotation
and
extending
directly
from
WebMvcConfigurationSupport
overriding
selected
@Bean
methods:
<pre
class="code">
&#064;Configuration
&#064;ComponentScan(basePackageClasses
=
MyConfigurationclass
)
public
class
MyConfiguration
extends
WebMvcConfigurationSupport
&#064;Override
public
void
addFormatters(FormatterRegistry
formatterRegistry)
formatterRegistryaddConverter(new
MyConverter());

&#064;Bean
public
RequestMappingHandlerAdapter
requestMappingHandlerAdapter()
//
Create
or
delegate
to
"super"
to
create
and
//
customize
properties
of
RequestMapingHandlerAdapter


</pre>
:end
:start
Assists
with
the
creation
of
a
MappedInterceptor
:end
:start
Creates
an
InterceptorRegistration
instance
:end
:start
Add
URL
patterns
to
which
the
registered
interceptor
should
apply
to
:end
:start
Add
URL
patterns
to
which
the
registered
interceptor
should
not
apply
to
:end
:start
A
PathMatcher
implementation
to
use
with
this
interceptor
This
is
an
optional,
advanced
property
required
only
if
using
custom
PathMatcher
implementations
that
support
mapping
metadata
other
than
the
Ant
path
patterns
supported
by
default
:end
:start
Returns
the
underlying
interceptor
If
URL
patterns
are
provided
the
returned
type
is
MappedInterceptor;
otherwise
HandlerInterceptor
:end
:start
Helps
with
configuring
a
list
of
mapped
interceptors
:end
:start
Adds
the
provided
HandlerInterceptor
:end
:start
Adds
the
provided
WebRequestInterceptor
:end
:start
Returns
all
registered
interceptors
:end
:start
Helps
with
configuring
orgspringframeworkwebservletmvcmethodannotationRequestMappingHandlerMapping
path
matching
options
such
as
trailing
slash
match,
suffix
registration
or
path
matcher/helper
:end
:start
Whether
to
use
suffix
pattern
match
("*")
when
matching
patterns
to
requests
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users*"
<p>The
default
value
is
true
:end
:start
Whether
to
match
to
URLs
irrespective
of
the
presence
of
a
trailing
slash
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users/"
<p>The
default
value
is
true
:end
:start
Whether
to
use
suffix
pattern
match
for
registered
file
extensions
only
when
matching
patterns
to
requests
<p>If
enabled,
a
controller
method
mapped
to
"/users"
also
matches
to
"/usersjson"
assuming
"json"
is
a
file
extension
registered
with
the
provided
orgspringframeworkwebacceptContentNegotiationManager</p>
<p>The
orgspringframeworkwebacceptContentNegotiationManager
can
be
customized
using
a
ContentNegotiationConfigurer</p>
<p>If
enabled,
this
flag
also
enables
#setUseSuffixPatternMatch(Boolean)
useSuffixPatternMatch
The
default
value
is
false</p>
:end
:start
Set
the
UrlPathHelper
to
use
for
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
HandlerMappings
and
MethodNameResolvers
:end
:start
Set
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns
Default
is
AntPathMatcher
:end
:start
Encapsulates
information
required
to
create
a
resource
handlers
:end
:start
Create
a
ResourceHandlerRegistration
instance
:end
:start
Add
one
or
more
resource
locations
from
which
to
serve
static
content
Each
location
must
point
to
a
valid
directory
Multiple
locations
may
be
specified
as
a
comma-separated
list,
and
the
locations
will
be
checked
for
a
given
resource
in
the
order
specified
<p>For
example,
"/",
"classpath:/META-INF/public-web-resources/"
allows
resources
to
be
served
both
from
the
web
application
root
and
from
any
JAR
on
the
classpath
that
contains
a
/META-INF/public-web-resources/
directory,
with
resources
in
the
web
application
root
taking
precedence
:end
:start
Specify
the
cache
period
for
the
resources
served
by
the
resource
handler,
in
seconds
The
default
is
to
not
send
any
cache
headers
but
to
rely
on
last-modified
timestamps
only
Set
to
0
in
order
to
send
cache
headers
that
prevent
caching,
or
to
a
positive
number
of
seconds
to
send
cache
headers
with
the
given
max-age
value
:end
:start
Returns
the
URL
path
patterns
for
the
resource
handler
:end
:start
Returns
a
ResourceHttpRequestHandler
instance
:end
:start
Stores
registrations
of
resource
handlers
for
serving
static
resources
such
as
images,
css
files
and
others
through
Spring
MVC
including
setting
cache
headers
optimized
for
efficient
loading
in
a
web
browser
Resources
can
be
served
out
of
locations
under
web
application
root,
from
the
classpath,
and
others
<p>To
create
a
resource
handler,
use
#addResourceHandler(String)
providing
the
URL
path
patterns
for
which
the
handler
should
be
invoked
to
serve
static
resources
(eg
"/resources/**")
<p>Then
use
additional
methods
on
the
returned
ResourceHandlerRegistration
to
add
one
or
more
locations
from
which
to
serve
static
content
from
(eg
"/",
"classpath:/META-INF/public-web-resources/")
or
to
specify
a
cache
period
for
served
resources
:end
:start
Add
a
resource
handler
for
serving
static
resources
based
on
the
specified
URL
path
patterns
The
handler
will
be
invoked
for
every
incoming
request
that
matches
to
one
of
the
specified
path
patterns
:end
:start
Whether
a
resource
handler
has
already
been
registered
for
the
given
pathPattern
:end
:start
Specify
the
order
to
use
for
resource
handling
relative
to
other
HandlerMappings
configured
in
the
Spring
MVC
application
context
The
default
value
used
is
IntegerMAX_VALUE-1
:end
:start
Return
a
handler
mapping
with
the
mapped
resource
handlers;
or
null
in
case
of
no
registrations
:end
:start
Encapsulates
information
required
to
create
a
view
controller
:end
:start
Creates
a
ViewControllerRegistration
with
the
given
URL
path
When
a
request
matches
to
the
given
URL
path
this
view
controller
will
process
it
:end
:start
Sets
the
view
name
to
use
for
this
view
controller
This
field
is
optional
If
not
specified
the
view
controller
will
return
a
null
view
name,
which
will
be
resolved
through
the
configured
RequestToViewNameTranslator
By
default
that
means
"/foo/bar"
would
resolve
to
"foo/bar"
:end
:start
Returns
the
URL
path
for
the
view
controller
:end
:start
Returns
the
view
controllers
:end
:start
Stores
registrations
of
view
controllers
A
view
controller
does
nothing
more
than
return
a
specified
view
name
It
saves
you
from
having
to
write
a
controller
when
you
want
to
forward
the
request
straight
through
to
a
view
such
as
a
JSP
:end
:start
Specify
the
order
to
use
for
ViewControllers
mappings
relative
to
other
HandlerMappings
configured
in
the
Spring
MVC
application
context
The
default
value
for
view
controllers
is
1,
which
is
1
higher
than
the
value
used
for
annotated
controllers
:end
:start
Returns
a
handler
mapping
with
the
mapped
ViewControllers;
or
null
in
case
of
no
registrations
:end
:start
This
is
the
main
class
providing
the
configuration
behind
the
MVC
Java
config
It
is
typically
imported
by
adding
EnableWebMvc
@EnableWebMvc
to
an
application
Configuration
@Configuration
class
An
alternative
more
advanced
option
is
to
extend
directly
from
this
class
and
override
methods
as
necessary
remembering
to
add
Configuration
@Configuration
to
the
subclass
and
Bean
@Bean
to
overridden
Bean
@Bean
methods
For
more
details
see
the
Javadoc
of
EnableWebMvc
@EnableWebMvc
<p>This
class
registers
the
following
HandlerMappings:</p>
<ul>
<li>{@link
RequestMappingHandlerMapping
ordered
at
0
for
mapping
requests
to
annotated
controller
methods
<li>{@link
HandlerMapping
ordered
at
1
to
map
URL
paths
directly
to
view
names
<li>{@link
BeanNameUrlHandlerMapping
ordered
at
2
to
map
URL
paths
to
controller
bean
names
<li>{@link
HandlerMapping
ordered
at
IntegerMAX_VALUE-1
to
serve
static
resource
requests
<li>{@link
HandlerMapping
ordered
at
IntegerMAX_VALUE
to
forward
requests
to
the
default
servlet
</ul>
<p>Registers
these
HandlerAdapters:
<ul>
<li>{@link
RequestMappingHandlerAdapter
for
processing
requests
with
annotated
controller
methods
<li>{@link
HttpRequestHandlerAdapter
for
processing
requests
with
HttpRequestHandlers
<li>{@link
SimpleControllerHandlerAdapter
for
processing
requests
with
interface-based
Controllers
</ul>
<p>Registers
a
HandlerExceptionResolverComposite
with
this
chain
of
exception
resolvers:
<ul>
<li>{@link
ExceptionHandlerExceptionResolver
for
handling
exceptions
through
@{@link
ExceptionHandler
methods
<li>{@link
ResponseStatusExceptionResolver
for
exceptions
annotated
with
@{@link
ResponseStatus
<li>{@link
DefaultHandlerExceptionResolver
for
resolving
known
Spring
exception
types
</ul>
<p>Both
the
RequestMappingHandlerAdapter
and
the
ExceptionHandlerExceptionResolver
are
configured
with
default
instances
of
the
following
by
default:
<ul>
<li>A
ContentNegotiationManager
<li>A
DefaultFormattingConversionService
<li>A
orgspringframeworkvalidationbeanvalidationOptionalValidatorFactoryBean
if
a
JSR-303
implementation
is
available
on
the
classpath
<li>A
range
of
HttpMessageConverters
depending
on
the
3rd
party
libraries
available
on
the
classpath
</ul>
:end
:start
Set
the
javaxservletServletContext,
eg
for
resource
handling,
looking
up
file
extensions,
etc
:end
:start
Set
the
Spring
ApplicationContext,
eg
for
resource
loading
:end
:start
Return
a
RequestMappingHandlerMapping
ordered
at
0
for
mapping
requests
to
annotated
controllers
:end
:start
Provide
access
to
the
shared
handler
interceptors
used
to
configure
HandlerMapping
instances
with
This
method
cannot
be
overridden,
use
#addInterceptors(InterceptorRegistry)
instead
:end
:start
Override
this
method
to
add
Spring
MVC
interceptors
for
pre-
and
post-processing
of
controller
invocation
:end
:start
Return
a
ContentNegotiationManager
instance
to
use
to
determine
requested
MediaType
media
types
in
a
given
request
:end
:start
Override
this
method
to
configure
content
negotiation
:end
:start
Return
a
handler
mapping
ordered
at
1
to
map
URL
paths
directly
to
view
names
To
configure
view
controllers,
override
#addViewControllers
:end
:start
Override
this
method
to
add
view
controllers
:end
:start
Return
a
BeanNameUrlHandlerMapping
ordered
at
2
to
map
URL
paths
to
controller
bean
names
:end
:start
Return
a
handler
mapping
ordered
at
IntegerMAX_VALUE-1
with
mapped
resource
handlers
To
configure
resource
handling,
override
#addResourceHandlers
:end
:start
Override
this
method
to
add
resource
handlers
for
serving
static
resources
:end
:start
Return
a
handler
mapping
ordered
at
IntegerMAX_VALUE
with
a
mapped
default
servlet
handler
To
configure
"default"
Servlet
handling,
override
#configureDefaultServletHandling
:end
:start
Override
this
method
to
configure
"default"
Servlet
handling
:end
:start
Returns
a
RequestMappingHandlerAdapter
for
processing
requests
through
annotated
controller
methods
Consider
overriding
one
of
these
other
more
fine-grained
methods:
<ul>
<li>{@link
#addArgumentResolvers
for
adding
custom
argument
resolvers
<li>{@link
#addReturnValueHandlers
for
adding
custom
return
value
handlers
<li>{@link
#configureMessageConverters
for
adding
custom
message
converters
</ul>
:end
:start
Return
the
ConfigurableWebBindingInitializer
to
use
for
initializing
all
WebDataBinder
instances
:end
:start
Return
a
FormattingConversionService
for
use
with
annotated
controller
methods
and
the
spring:eval
JSP
tag
Also
see
#addFormatters
as
an
alternative
to
overriding
this
method
:end
:start
Return
a
global
Validator
instance
for
example
for
validating
@ModelAttribute
and
@RequestBody
method
arguments
Delegates
to
#getValidator()
first
and
if
that
returns
null
checks
the
classpath
for
the
presence
of
a
JSR-303
implementations
before
creating
a
OptionalValidatorFactoryBeanIf
a
JSR-303
implementation
is
not
available,
a
no-op
Validator
is
returned
:end
:start
Override
this
method
to
provide
a
custom
Validator
:end
:start
Override
this
method
to
provide
a
custom
MessageCodesResolver
:end
:start
Add
custom
HandlerMethodArgumentResolvers
to
use
in
addition
to
the
ones
registered
by
default
<p>Custom
argument
resolvers
are
invoked
before
built-in
resolvers
except
for
those
that
rely
on
the
presence
of
annotations
(eg
@RequestParameter,
@PathVariable,
etc)
The
latter
can
be
customized
by
configuring
the
RequestMappingHandlerAdapter
directly
:end
:start
Add
custom
HandlerMethodReturnValueHandlers
in
addition
to
the
ones
registered
by
default
<p>Custom
return
value
handlers
are
invoked
before
built-in
ones
except
for
those
that
rely
on
the
presence
of
annotations
(eg
@ResponseBody,
@ModelAttribute,
etc)
The
latter
can
be
customized
by
configuring
the
RequestMappingHandlerAdapter
directly
:end
:start
Provides
access
to
the
shared
HttpMessageConverters
used
by
the
RequestMappingHandlerAdapter
and
the
ExceptionHandlerExceptionResolver
This
method
cannot
be
overridden
Use
#configureMessageConverters(List)
instead
Also
see
#addDefaultHttpMessageConverters(List)
that
can
be
used
to
add
default
message
converters
:end
:start
Override
this
method
to
add
custom
HttpMessageConverters
to
use
with
the
RequestMappingHandlerAdapter
and
the
ExceptionHandlerExceptionResolver
Adding
converters
to
the
list
turns
off
the
default
converters
that
would
otherwise
be
registered
by
default
Also
see
#addDefaultHttpMessageConverters(List)
that
can
be
used
to
add
default
message
converters
:end
:start
Adds
a
set
of
default
HttpMessageConverter
instances
to
the
given
list
Subclasses
can
call
this
method
from
#configureMessageConverters(List)
:end
:start
Override
this
method
to
add
custom
Converters
and
Formatters
:end
:start
Override
this
method
to
configure
asynchronous
request
processing
options
:end
:start
Override
this
method
to
configure
path
matching
options
:end
:start
Return
an
instance
of
CompositeUriComponentsContributor
for
use
with
orgspringframeworkwebservletmvcmethodannotationMvcUriComponentsBuilder
:end
:start
Returns
a
HttpRequestHandlerAdapter
for
processing
requests
with
HttpRequestHandlers
:end
:start
Returns
a
SimpleControllerHandlerAdapter
for
processing
requests
with
interface-based
controllers
:end
:start
Returns
a
HandlerExceptionResolverComposite
containing
a
list
of
exception
resolvers
obtained
either
through
#configureHandlerExceptionResolvers(List)
or
through
#addDefaultHandlerExceptionResolvers(List)
<p><strong>Note:</strong>
This
method
cannot
be
made
final
due
to
CGLib
constraints
Rather
than
overriding
it,
consider
overriding
#configureHandlerExceptionResolvers(List),
which
allows
providing
a
list
of
resolvers
:end
:start
Override
this
method
to
configure
the
list
of
HandlerExceptionResolvers
to
use
Adding
resolvers
to
the
list
turns
off
the
default
resolvers
that
would
otherwise
be
registered
by
default
Also
see
#addDefaultHandlerExceptionResolvers(List)
that
can
be
used
to
add
the
default
exception
resolvers
:end
:start
A
method
available
to
subclasses
for
adding
default
HandlerExceptionResolvers
<p>Adds
the
following
exception
resolvers:
<ul>
<li>{@link
ExceptionHandlerExceptionResolver
for
handling
exceptions
through
@{@link
ExceptionHandler
methods
<li>{@link
ResponseStatusExceptionResolver
for
exceptions
annotated
with
@{@link
ResponseStatus
<li>{@link
DefaultHandlerExceptionResolver
for
resolving
known
Spring
exception
types
</ul>
:end
:start
Defines
callback
methods
to
customize
the
Java-based
configuration
for
Spring
MVC
enabled
via
@EnableWebMvc
<p>{@code
@EnableWebMvc-annotated
configuration
classes
may
implement
this
interface
to
be
called
back
and
given
a
chance
to
customize
the
default
configuration
Consider
extending
WebMvcConfigurerAdapter,
which
provides
a
stub
implementation
of
all
interface
methods
:end
:start
Add
Converters
and
Formatters
in
addition
to
the
ones
registered
by
default
:end
:start
Configure
the
HttpMessageConverters
to
use
in
argument
resolvers
and
return
value
handlers
that
support
reading
and/or
writing
to
the
body
of
the
request
and
response
If
no
message
converters
are
added
to
the
list,
default
converters
are
added
instead
:end
:start
Provide
a
custom
Validator
instead
of
the
one
created
by
default
The
default
implementation,
assuming
JSR-303
is
on
the
classpath,
is:
orgspringframeworkvalidationbeanvalidationOptionalValidatorFactoryBean
Leave
the
return
value
as
null
to
keep
the
default
:end
:start
Configure
content
negotiation
options
:end
:start
Configure
asynchronous
request
handling
options
:end
:start
Configure
path
matching
options
:end
:start
Add
resolvers
to
support
custom
controller
method
argument
types
<p>This
does
not
override
the
built-in
support
for
resolving
handler
method
arguments
To
customize
the
built-in
support
for
argument
resolution,
configure
RequestMappingHandlerAdapter
directly
:end
:start
Add
handlers
to
support
custom
controller
method
return
value
types
<p>Using
this
option
does
not
override
the
built-in
support
for
handling
return
values
To
customize
the
built-in
support
for
handling
return
values,
configure
RequestMappingHandlerAdapter
directly
:end
:start
Configure
the
HandlerExceptionResolvers
to
handle
unresolved
controller
exceptions
If
no
resolvers
are
added
to
the
list,
default
exception
resolvers
are
added
instead
:end
:start
Add
Spring
MVC
lifecycle
interceptors
for
pre-
and
post-processing
of
controller
method
invocations
Interceptors
can
be
registered
to
apply
to
all
requests
or
be
limited
to
a
subset
of
URL
patterns
:end
:start
Provide
a
custom
MessageCodesResolver
for
building
message
codes
from
data
binding
and
validation
error
codes
Leave
the
return
value
as
null
to
keep
the
default
:end
:start
Add
view
controllers
to
create
a
direct
mapping
between
a
URL
path
and
view
name
without
the
need
for
a
controller
in
between
:end
:start
Add
handlers
to
serve
static
resources
such
as
images,
js,
and,
css
files
from
specific
locations
under
web
application
root,
the
classpath,
and
others
:end
:start
Configure
a
handler
to
delegate
unhandled
requests
by
forwarding
to
the
Servlet
container's
"default"
servlet
A
common
use
case
for
this
is
when
the
DispatcherServlet
is
mapped
to
"/"
thus
overriding
the
Servlet
container's
default
handling
of
static
resources
:end
:start
An
implementation
of
WebMvcConfigurer
with
empty
methods
allowing
sub-classes
to
override
only
the
methods
they're
interested
in
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
returns
null
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
<p>This
implementation
is
empty
:end
:start
NamespaceHandler
for
Spring
MVC
configuration
namespace
:end
:start
Central
dispatcher
for
HTTP
request
handlers/controllers,
eg
for
web
UI
controllers
or
HTTP-based
remote
service
exporters
Dispatches
to
registered
handlers
for
processing
a
web
request,
providing
convenient
mapping
and
exception
handling
facilities
<p>This
servlet
is
very
flexible:
It
can
be
used
with
just
about
any
workflow,
with
the
installation
of
the
appropriate
adapter
classes
It
offers
the
following
functionality
that
distinguishes
it
from
other
request-driven
web
MVC
frameworks:
<ul>
<li>It
is
based
around
a
JavaBeans
configuration
mechanism
<li>It
can
use
any
HandlerMapping
implementation
-
pre-built
or
provided
as
part
of
an
application
-
to
control
the
routing
of
requests
to
handler
objects
Default
is
orgspringframeworkwebservlethandlerBeanNameUrlHandlerMapping
and
orgspringframeworkwebservletmvcannotationDefaultAnnotationHandlerMapping
HandlerMapping
objects
can
be
defined
as
beans
in
the
servlet's
application
context,
implementing
the
HandlerMapping
interface,
overriding
the
default
HandlerMapping
if
present
HandlerMappings
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>It
can
use
any
HandlerAdapter;
this
allows
for
using
any
handler
interface
Default
adapters
are
orgspringframeworkwebservletmvcHttpRequestHandlerAdapter,
orgspringframeworkwebservletmvcSimpleControllerHandlerAdapter,
for
Spring's
orgspringframeworkwebHttpRequestHandler
and
orgspringframeworkwebservletmvcController
interfaces,
respectively
A
default
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerAdapter
will
be
registered
as
well
HandlerAdapter
objects
can
be
added
as
beans
in
the
application
context,
overriding
the
default
HandlerAdapters
Like
HandlerMappings,
HandlerAdapters
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>The
dispatcher's
exception
resolution
strategy
can
be
specified
via
a
HandlerExceptionResolver,
for
example
mapping
certain
exceptions
to
error
pages
Default
are
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerExceptionResolver,
orgspringframeworkwebservletmvcannotationResponseStatusExceptionResolver,
and
orgspringframeworkwebservletmvcsupportDefaultHandlerExceptionResolver
These
HandlerExceptionResolvers
can
be
overridden
through
the
application
context
HandlerExceptionResolver
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>Its
view
resolution
strategy
can
be
specified
via
a
ViewResolver
implementation,
resolving
symbolic
view
names
into
View
objects
Default
is
orgspringframeworkwebservletviewInternalResourceViewResolver
ViewResolver
objects
can
be
added
as
beans
in
the
application
context,
overriding
the
default
ViewResolver
ViewResolvers
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>If
a
View
or
view
name
is
not
supplied
by
the
user,
then
the
configured
RequestToViewNameTranslator
will
translate
the
current
request
into
a
view
name
The
corresponding
bean
name
is
"viewNameTranslator";
the
default
is
orgspringframeworkwebservletviewDefaultRequestToViewNameTranslator
<li>The
dispatcher's
strategy
for
resolving
multipart
requests
is
determined
by
a
orgspringframeworkwebmultipartMultipartResolver
implementation
Implementations
for
Jakarta
Commons
FileUpload
and
Jason
Hunter's
COS
are
included;
the
typical
choise
is
orgspringframeworkwebmultipartcommonsCommonsMultipartResolver
The
MultipartResolver
bean
name
is
"multipartResolver";
default
is
none
<li>Its
locale
resolution
strategy
is
determined
by
a
LocaleResolver
Out-of-the-box
implementations
work
via
HTTP
accept
header,
cookie,
or
session
The
LocaleResolver
bean
name
is
"localeResolver";
default
is
orgspringframeworkwebservleti18nAcceptHeaderLocaleResolver
<li>Its
theme
resolution
strategy
is
determined
by
a
ThemeResolver
Implementations
for
a
fixed
theme
and
for
cookie
and
session
storage
are
included
The
ThemeResolver
bean
name
is
"themeResolver";
default
is
orgspringframeworkwebservletthemeFixedThemeResolver
</ul>
<p><b>NOTE:
The
@RequestMapping
annotation
will
only
be
processed
if
a
corresponding
HandlerMapping
(for
type
level
annotations)
and/or
HandlerAdapter
(for
method
level
annotations)
is
present
in
the
dispatcher</b>
This
is
the
case
by
default
However,
if
you
are
defining
custom
HandlerMappings
or
HandlerAdapters,
then
you
need
to
make
sure
that
a
corresponding
custom
DefaultAnnotationHandlerMapping
and/or
AnnotationMethodHandlerAdapter
is
defined
as
well
-
provided
that
you
intend
to
use
@RequestMapping
<p><b>A
web
application
can
define
any
number
of
DispatcherServlets</b>
Each
servlet
will
operate
in
its
own
namespace,
loading
its
own
application
context
with
mappings,
handlers,
etc
Only
the
root
application
context
as
loaded
by
orgspringframeworkwebcontextContextLoaderListener,
if
any,
will
be
shared
<p>As
of
Spring
31,
DispatcherServlet
may
now
be
injected
with
a
web
application
context,
rather
than
creating
its
own
internally
This
is
useful
in
Servlet
30+
environments,
which
support
programmatic
registration
of
servlet
instances
See
#DispatcherServlet(WebApplicationContext)
Javadoc
for
details
:end
:start
Well-known
name
for
the
MultipartResolver
object
in
the
bean
factory
for
this
namespace
:end
:start
Well-known
name
for
the
LocaleResolver
object
in
the
bean
factory
for
this
namespace
:end
:start
Well-known
name
for
the
ThemeResolver
object
in
the
bean
factory
for
this
namespace
:end
:start
Well-known
name
for
the
HandlerMapping
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerMappings"
is
turned
off
:end
:start
Well-known
name
for
the
HandlerAdapter
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerAdapters"
is
turned
off
:end
:start
Well-known
name
for
the
HandlerExceptionResolver
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerExceptionResolvers"
is
turned
off
:end
:start
Well-known
name
for
the
RequestToViewNameTranslator
object
in
the
bean
factory
for
this
namespace
:end
:start
Well-known
name
for
the
ViewResolver
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllViewResolvers"
is
turned
off
:end
:start
Well-known
name
for
the
FlashMapManager
object
in
the
bean
factory
for
this
namespace
:end
:start
Request
attribute
to
hold
the
current
web
application
context
Otherwise
only
the
global
web
app
context
is
obtainable
by
tags
etc
:end
:start
Request
attribute
to
hold
the
current
LocaleResolver,
retrievable
by
views
:end
:start
Request
attribute
to
hold
the
current
ThemeResolver,
retrievable
by
views
:end
:start
Request
attribute
to
hold
the
current
ThemeSource,
retrievable
by
views
:end
:start
Name
of
request
attribute
that
holds
a
read-only
Map<String,?>
with
"input"
flash
attributes
saved
by
a
previous
request,
if
any
:end
:start
Name
of
request
attribute
that
holds
the
"output"
FlashMap
with
attributes
to
save
for
a
subsequent
request
:end
:start
Name
of
request
attribute
that
holds
the
FlashMapManager
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Create
a
new
DispatcherServlet
that
will
create
its
own
internal
web
application
context
based
on
defaults
and
values
provided
through
servlet
init-params
Typically
used
in
Servlet
25
or
earlier
environments,
where
the
only
option
for
servlet
registration
is
through
webxml
which
requires
the
use
of
a
no-arg
constructor
<p>Calling
#setContextConfigLocation
(init-param
'contextConfigLocation')
will
dictate
which
XML
files
will
be
loaded
by
the
#DEFAULT_CONTEXT_CLASS
default
XmlWebApplicationContext
<p>Calling
#setContextClass
(init-param
'contextClass')
overrides
the
default
XmlWebApplicationContext
and
allows
for
specifying
an
alternative
class,
such
as
AnnotationConfigWebApplicationContext
<p>Calling
#setContextInitializerClasses
(init-param
'contextInitializerClasses')
indicates
which
ApplicationContextInitializer
classes
should
be
used
to
further
configure
the
internal
application
context
prior
to
refresh()
:end
:start
Create
a
new
DispatcherServlet
with
the
given
web
application
context
This
constructor
is
useful
in
Servlet
30+
environments
where
instance-based
registration
of
servlets
is
possible
through
the
ServletContext#addServlet
API
<p>Using
this
constructor
indicates
that
the
following
properties
/
init-params
will
be
ignored:
<ul>
<li>{@link
#setContextClass(Class)
/
'contextClass'</li>
<li>{@link
#setContextConfigLocation(String)
/
'contextConfigLocation'</li>
<li>{@link
#setContextAttribute(String)
/
'contextAttribute'</li>
<li>{@link
#setNamespace(String)
/
'namespace'</li>
</ul>
<p>The
given
web
application
context
may
or
may
not
yet
be
ConfigurableApplicationContext#refresh()
refreshed
If
it
has
<strong>not</strong>
already
been
refreshed
(the
recommended
approach),
then
the
following
will
occur:
<ul>
<li>If
the
given
context
does
not
already
have
a
ConfigurableApplicationContext#setParent
parent,
the
root
application
context
will
be
set
as
the
parent</li>
<li>If
the
given
context
has
not
already
been
assigned
an
ConfigurableApplicationContext#setId
id,
one
will
be
assigned
to
it</li>
<li>{@code
ServletContext
and
ServletConfig
objects
will
be
delegated
to
the
application
context</li>
<li>{@link
#postProcessWebApplicationContext
will
be
called</li>
<li>Any
ApplicationContextInitializers
specified
through
the
"contextInitializerClasses"
init-param
or
through
the
#setContextInitializers
property
will
be
applied</li>
<li>{@link
ConfigurableApplicationContext#refresh
refresh()
will
be
called
if
the
context
implements
ConfigurableApplicationContext</li>
</ul>
If
the
context
has
already
been
refreshed,
none
of
the
above
will
occur,
under
the
assumption
that
the
user
has
performed
these
actions
(or
not)
per
their
specific
needs
<p>See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
:end
:start
Set
whether
to
detect
all
HandlerMapping
beans
in
this
servlet's
context
Otherwise,
just
a
single
bean
with
name
"handlerMapping"
will
be
expected
<p>Default
is
"true"
Turn
this
off
if
you
want
this
servlet
to
use
a
single
HandlerMapping,
despite
multiple
HandlerMapping
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
HandlerAdapter
beans
in
this
servlet's
context
Otherwise,
just
a
single
bean
with
name
"handlerAdapter"
will
be
expected
<p>Default
is
"true"
Turn
this
off
if
you
want
this
servlet
to
use
a
single
HandlerAdapter,
despite
multiple
HandlerAdapter
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
HandlerExceptionResolver
beans
in
this
servlet's
context
Otherwise,
just
a
single
bean
with
name
"handlerExceptionResolver"
will
be
expected
<p>Default
is
"true"
Turn
this
off
if
you
want
this
servlet
to
use
a
single
HandlerExceptionResolver,
despite
multiple
HandlerExceptionResolver
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
ViewResolver
beans
in
this
servlet's
context
Otherwise,
just
a
single
bean
with
name
"viewResolver"
will
be
expected
<p>Default
is
"true"
Turn
this
off
if
you
want
this
servlet
to
use
a
single
ViewResolver,
despite
multiple
ViewResolver
beans
being
defined
in
the
context
:end
:start
Set
whether
to
throw
a
NoHandlerFoundException
when
no
Handler
was
found
for
this
request
This
exception
can
then
be
caught
with
a
HandlerExceptionResolver
or
an
@ExceptionHandler
controller
method
<p>Note
that
if
orgspringframeworkwebservletresourceDefaultServletHttpRequestHandler
is
used,
then
requests
will
always
be
forwarded
to
the
default
servlet
and
a
NoHandlerFoundException
would
never
be
thrown
in
that
case
<p>Default
is
"false",
meaning
the
DispatcherServlet
sends
a
NOT_FOUND
error
through
the
Servlet
response
:end
:start
Set
whether
to
perform
cleanup
of
request
attributes
after
an
include
request,
that
is,
whether
to
reset
the
original
state
of
all
request
attributes
after
the
DispatcherServlet
has
processed
within
an
include
request
Otherwise,
just
the
DispatcherServlet's
own
request
attributes
will
be
reset,
but
not
model
attributes
for
JSPs
or
special
attributes
set
by
views
(for
example,
JSTL's)
<p>Default
is
"true",
which
is
strongly
recommended
Views
should
not
rely
on
request
attributes
having
been
set
by
(dynamic)
includes
This
allows
JSP
views
rendered
by
an
included
controller
to
use
any
model
attributes,
even
with
the
same
names
as
in
the
main
JSP,
without
causing
side
effects
Only
turn
this
off
for
special
needs,
for
example
to
deliberately
allow
main
JSPs
to
access
attributes
from
JSP
views
rendered
by
an
included
controller
:end
:start
This
implementation
calls
#initStrategies
:end
:start
Initialize
the
strategy
objects
that
this
servlet
uses
<p>May
be
overridden
in
subclasses
in
order
to
initialize
further
strategy
objects
:end
:start
Return
this
servlet's
ThemeSource,
if
any;
else
return
null
<p>Default
is
to
return
the
WebApplicationContext
as
ThemeSource,
provided
that
it
implements
the
ThemeSource
interface
:end
:start
Obtain
this
servlet's
MultipartResolver,
if
any
:end
:start
Return
the
default
strategy
object
for
the
given
strategy
interface
<p>The
default
implementation
delegates
to
#getDefaultStrategies,
expecting
a
single
object
in
the
list
:end
:start
Create
a
List
of
default
strategy
objects
for
the
given
strategy
interface
<p>The
default
implementation
uses
the
"DispatcherServletproperties"
file
(in
the
same
package
as
the
DispatcherServlet
class)
to
determine
the
class
names
It
instantiates
the
strategy
objects
through
the
context's
BeanFactory
:end
:start
Create
a
default
strategy
<p>The
default
implementation
uses
orgspringframeworkbeansfactoryconfigAutowireCapableBeanFactory#createBean
:end
:start
Exposes
the
DispatcherServlet-specific
request
attributes
and
delegates
to
#doDispatch
for
the
actual
dispatching
:end
:start
Process
the
actual
dispatching
to
the
handler
<p>The
handler
will
be
obtained
by
applying
the
servlet's
HandlerMappings
in
order
The
HandlerAdapter
will
be
obtained
by
querying
the
servlet's
installed
HandlerAdapters
to
find
the
first
that
supports
the
handler
class
<p>All
HTTP
methods
are
handled
by
this
method
It's
up
to
HandlerAdapters
or
handlers
themselves
to
decide
which
methods
are
acceptable
:end
:start
Build
a
LocaleContext
for
the
given
request,
exposing
the
request's
primary
locale
as
current
locale
<p>The
default
implementation
uses
the
dispatcher's
LocaleResolver
to
obtain
the
current
locale,
which
might
change
during
a
request
:end
:start
Convert
the
request
into
a
multipart
request,
and
make
multipart
resolver
available
<p>If
no
multipart
resolver
is
set,
simply
use
the
existing
request
:end
:start
Clean
up
any
resources
used
by
the
given
multipart
request
(if
any)
:end
:start
Return
the
HandlerExecutionChain
for
this
request
<p>Tries
all
handler
mappings
in
order
:end
:start
No
handler
found
->
set
appropriate
HTTP
response
status
:end
:start
Return
the
HandlerAdapter
for
this
handler
object
:end
:start
Determine
an
error
ModelAndView
via
the
registered
HandlerExceptionResolvers
:end
:start
Render
the
given
ModelAndView
<p>This
is
the
last
stage
in
handling
a
request
It
may
involve
resolving
the
view
by
name
:end
:start
Translate
the
supplied
request
into
a
default
view
name
:end
:start
Resolve
the
given
view
name
into
a
View
object
(to
be
rendered)
<p>The
default
implementations
asks
all
ViewResolvers
of
this
dispatcher
Can
be
overridden
for
custom
resolution
strategies,
potentially
based
on
specific
model
attributes
or
request
parameters
:end
:start
A
FlashMap
provides
a
way
for
one
request
to
store
attributes
intended
for
use
in
another
This
is
most
commonly
needed
when
redirecting
from
one
URL
to
another
--
eg
the
Post/Redirect/Get
pattern
A
FlashMap
is
saved
before
the
redirect
(typically
in
the
session)
and
is
made
available
after
the
redirect
and
removed
immediately
<p>A
FlashMap
can
be
set
up
with
a
request
path
and
request
parameters
to
help
identify
the
target
request
Without
this
information,
a
FlashMap
is
made
available
to
the
next
request,
which
may
or
may
not
be
the
intended
recipient
On
a
redirect,
the
target
URL
is
known
and
a
FlashMap
can
be
updated
with
that
information
This
is
done
automatically
when
the
orgspringframeworkwebservletviewRedirectView
is
used
<p>Note:
annotated
controllers
will
usually
not
use
FlashMap
directly
See
orgspringframeworkwebservletmvcsupportRedirectAttributes
for
an
overview
of
using
flash
attributes
in
annotated
controllers
:end
:start
Provide
a
URL
path
to
help
identify
the
target
request
for
this
FlashMap
The
path
may
be
absolute
(eg
/application/resource)
or
relative
to
the
current
request
(eg
/resource)
:end
:start
Return
the
target
URL
path
or
null
:end
:start
Provide
request
parameters
identifying
the
request
for
this
FlashMap
:end
:start
Provide
a
request
parameter
identifying
the
request
for
this
FlashMap
:end
:start
Return
the
parameters
identifying
the
target
request,
or
an
empty
map
:end
:start
Start
the
expiration
period
for
this
instance
:end
:start
Whether
this
instance
has
expired
depending
on
the
amount
of
elapsed
time
since
the
call
to
#startExpirationPeriod
:end
:start
Compare
two
FlashMaps
and
prefer
the
one
that
specifies
a
target
URL
path
or
has
more
target
URL
parameters
Before
comparing
FlashMap
instances
ensure
that
they
match
a
given
request
:end
:start
A
strategy
interface
for
retrieving
and
saving
FlashMap
instances
See
FlashMap
for
a
general
overview
of
flash
attributes
:end
:start
Find
a
FlashMap
saved
by
a
previous
request
that
matches
to
the
current
request,
remove
it
from
underlying
storage,
and
also
remove
other
expired
FlashMap
instances
<p>This
method
is
invoked
in
the
beginning
of
every
request
in
contrast
to
#saveOutputFlashMap,
which
is
invoked
only
when
there
are
flash
attributes
to
be
saved
-
ie
before
a
redirect
:end
:start
Save
the
given
FlashMap,
in
some
underlying
storage
and
set
the
start
of
its
expiration
period
<p><strong>NOTE:</strong>
Invoke
this
method
prior
to
a
redirect
in
order
to
allow
saving
the
FlashMap
in
the
HTTP
session
or
in
a
response
cookie
before
the
response
is
committed
:end
:start
Base
servlet
for
Spring's
web
framework
Provides
integration
with
a
Spring
application
context,
in
a
JavaBean-based
overall
solution
<p>This
class
offers
the
following
functionality:
<ul>
<li>Manages
a
orgspringframeworkwebcontextWebApplicationContext
WebApplicationContext
instance
per
servlet
The
servlet's
configuration
is
determined
by
beans
in
the
servlet's
namespace
<li>Publishes
events
on
request
processing,
whether
or
not
a
request
is
successfully
handled
</ul>
<p>Subclasses
must
implement
#doService
to
handle
requests
Because
this
extends
HttpServletBean
rather
than
HttpServlet
directly,
bean
properties
are
automatically
mapped
onto
it
Subclasses
can
override
#initFrameworkServlet()
for
custom
initialization
<p>Detects
a
"contextClass"
parameter
at
the
servlet
init-param
level,
falling
back
to
the
default
context
class,
orgspringframeworkwebcontextsupportXmlWebApplicationContext
XmlWebApplicationContext,
if
not
found
Note
that,
with
the
default
FrameworkServlet,
a
custom
context
class
needs
to
implement
the
orgspringframeworkwebcontextConfigurableWebApplicationContext
ConfigurableWebApplicationContext
SPI
<p>Accepts
an
optional
"contextInitializerClasses"
servlet
init-param
that
specifies
one
or
more
orgspringframeworkcontextApplicationContextInitializer
ApplicationContextInitializer
classes
The
managed
web
application
context
will
be
delegated
to
these
initializers,
allowing
for
additional
programmatic
configuration,
eg
adding
property
sources
or
activating
profiles
against
the
orgspringframeworkcontextConfigurableApplicationContext#getEnvironment()
context's
environment
See
also
orgspringframeworkwebcontextContextLoader
which
supports
a
"contextInitializerClasses"
context-param
with
identical
semantics
for
the
"root"
web
application
context
<p>Passes
a
"contextConfigLocation"
servlet
init-param
to
the
context
instance,
parsing
it
into
potentially
multiple
file
paths
which
can
be
separated
by
any
number
of
commas
and
spaces,
like
"test-servletxml,
myServletxml"
If
not
explicitly
specified,
the
context
implementation
is
supposed
to
build
a
default
location
from
the
namespace
of
the
servlet
<p>Note:
In
case
of
multiple
config
locations,
later
bean
definitions
will
override
ones
defined
in
earlier
loaded
files,
at
least
when
using
Spring's
default
ApplicationContext
implementation
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
XML
file
<p>The
default
namespace
is
"'servlet-name'-servlet",
eg
"test-servlet"
for
a
servlet-name
"test"
(leading
to
a
"/WEB-INF/test-servletxml"
default
location
with
XmlWebApplicationContext)
The
namespace
can
also
be
set
explicitly
via
the
"namespace"
servlet
init-param
<p>As
of
Spring
31,
FrameworkServlet
may
now
be
injected
with
a
web
application
context,
rather
than
creating
its
own
internally
This
is
useful
in
Servlet
30+
environments,
which
support
programmatic
registration
of
servlet
instances
See
#FrameworkServlet(WebApplicationContext)
Javadoc
for
details
:end
:start
Suffix
for
WebApplicationContext
namespaces
If
a
servlet
of
this
class
is
given
the
name
"test"
in
a
context,
the
namespace
used
by
the
servlet
will
resolve
to
"test-servlet"
:end
:start
Default
context
class
for
FrameworkServlet
:end
:start
Prefix
for
the
ServletContext
attribute
for
the
WebApplicationContext
The
completion
is
the
servlet
name
:end
:start
Create
a
new
FrameworkServlet
that
will
create
its
own
internal
web
application
context
based
on
defaults
and
values
provided
through
servlet
init-params
Typically
used
in
Servlet
25
or
earlier
environments,
where
the
only
option
for
servlet
registration
is
through
webxml
which
requires
the
use
of
a
no-arg
constructor
<p>Calling
#setContextConfigLocation
(init-param
'contextConfigLocation')
will
dictate
which
XML
files
will
be
loaded
by
the
#DEFAULT_CONTEXT_CLASS
default
XmlWebApplicationContext
<p>Calling
#setContextClass
(init-param
'contextClass')
overrides
the
default
XmlWebApplicationContext
and
allows
for
specifying
an
alternative
class,
such
as
AnnotationConfigWebApplicationContext
<p>Calling
#setContextInitializerClasses
(init-param
'contextInitializerClasses')
indicates
which
ApplicationContextInitializer
classes
should
be
used
to
further
configure
the
internal
application
context
prior
to
refresh()
:end
:start
Create
a
new
FrameworkServlet
with
the
given
web
application
context
This
constructor
is
useful
in
Servlet
30+
environments
where
instance-based
registration
of
servlets
is
possible
through
the
ServletContext#addServlet
API
<p>Using
this
constructor
indicates
that
the
following
properties
/
init-params
will
be
ignored:
<ul>
<li>{@link
#setContextClass(Class)
/
'contextClass'</li>
<li>{@link
#setContextConfigLocation(String)
/
'contextConfigLocation'</li>
<li>{@link
#setContextAttribute(String)
/
'contextAttribute'</li>
<li>{@link
#setNamespace(String)
/
'namespace'</li>
</ul>
<p>The
given
web
application
context
may
or
may
not
yet
be
ConfigurableApplicationContext#refresh()
refreshed
If
it
(a)
is
an
implementation
of
ConfigurableWebApplicationContext
and
(b)
has
<strong>not</strong>
already
been
refreshed
(the
recommended
approach),
then
the
following
will
occur:
<ul>
<li>If
the
given
context
does
not
already
have
a
ConfigurableApplicationContext#setParent
parent,
the
root
application
context
will
be
set
as
the
parent</li>
<li>If
the
given
context
has
not
already
been
assigned
an
ConfigurableApplicationContext#setId
id,
one
will
be
assigned
to
it</li>
<li>{@code
ServletContext
and
ServletConfig
objects
will
be
delegated
to
the
application
context</li>
<li>{@link
#postProcessWebApplicationContext
will
be
called</li>
<li>Any
ApplicationContextInitializers
specified
through
the
"contextInitializerClasses"
init-param
or
through
the
#setContextInitializers
property
will
be
applied</li>
<li>{@link
ConfigurableApplicationContext#refresh
refresh()
will
be
called</li>
</ul>
If
the
context
has
already
been
refreshed
or
does
not
implement
ConfigurableWebApplicationContext,
none
of
the
above
will
occur
under
the
assumption
that
the
user
has
performed
these
actions
(or
not)
per
his
or
her
specific
needs
<p>See
orgspringframeworkwebWebApplicationInitializer
for
usage
examples
:end
:start
Set
the
name
of
the
ServletContext
attribute
which
should
be
used
to
retrieve
the
WebApplicationContext
that
this
servlet
is
supposed
to
use
:end
:start
Return
the
name
of
the
ServletContext
attribute
which
should
be
used
to
retrieve
the
WebApplicationContext
that
this
servlet
is
supposed
to
use
:end
:start
Set
a
custom
context
class
This
class
must
be
of
type
orgspringframeworkwebcontextWebApplicationContext
<p>When
using
the
default
FrameworkServlet
implementation,
the
context
class
must
also
implement
the
orgspringframeworkwebcontextConfigurableWebApplicationContext
interface
:end
:start
Return
the
custom
context
class
:end
:start
Specify
a
custom
WebApplicationContext
id,
to
be
used
as
serialization
id
for
the
underlying
BeanFactory
:end
:start
Return
the
custom
WebApplicationContext
id,
if
any
:end
:start
Set
a
custom
namespace
for
this
servlet,
to
be
used
for
building
a
default
context
config
location
:end
:start
Return
the
namespace
for
this
servlet,
falling
back
to
default
scheme
if
no
custom
namespace
was
set:
eg
"test-servlet"
for
a
servlet
named
"test"
:end
:start
Set
the
context
config
location
explicitly,
instead
of
relying
on
the
default
location
built
from
the
namespace
This
location
string
can
consist
of
multiple
locations
separated
by
any
number
of
commas
and
spaces
:end
:start
Return
the
explicit
context
config
location,
if
any
:end
:start
Specify
which
ApplicationContextInitializer
instances
should
be
used
to
initialize
the
application
context
used
by
this
FrameworkServlet
:end
:start
Specify
the
set
of
fully-qualified
ApplicationContextInitializer
class
names,
per
the
optional
"contextInitializerClasses"
servlet
init-param
:end
:start
Set
whether
to
publish
this
servlet's
context
as
a
ServletContext
attribute,
available
to
all
objects
in
the
web
container
Default
is
"true"
<p>This
is
especially
handy
during
testing,
although
it
is
debatable
whether
it's
good
practice
to
let
other
application
objects
access
the
context
this
way
:end
:start
Set
whether
this
servlet
should
publish
a
ServletRequestHandledEvent
at
the
end
of
each
request
Default
is
"true";
can
be
turned
off
for
a
slight
performance
improvement,
provided
that
no
ApplicationListeners
rely
on
such
events
:end
:start
Set
whether
to
expose
the
LocaleContext
and
RequestAttributes
as
inheritable
for
child
threads
(using
an
javalangInheritableThreadLocal)
<p>Default
is
"false",
to
avoid
side
effects
on
spawned
background
threads
Switch
this
to
"true"
to
enable
inheritance
for
custom
child
threads
which
are
spawned
during
request
processing
and
only
used
for
this
request
(that
is,
ending
after
their
initial
task,
without
reuse
of
the
thread)
<p><b>WARNING:</b>
Do
not
use
inheritance
for
child
threads
if
you
are
accessing
a
thread
pool
which
is
configured
to
potentially
add
new
threads
on
demand
(eg
a
JDK
javautilconcurrentThreadPoolExecutor),
since
this
will
expose
the
inherited
context
to
such
a
pooled
thread
:end
:start
Set
whether
this
servlet
should
dispatch
an
HTTP
OPTIONS
request
to
the
#doService
method
<p>Default
is
"false",
applying
javaxservlethttpHttpServlet's
default
behavior
(ie
enumerating
all
standard
HTTP
request
methods
as
a
response
to
the
OPTIONS
request)
<p>Turn
this
flag
on
if
you
prefer
OPTIONS
requests
to
go
through
the
regular
dispatching
chain,
just
like
other
HTTP
requests
This
usually
means
that
your
controllers
will
receive
those
requests;
make
sure
that
those
endpoints
are
actually
able
to
handle
an
OPTIONS
request
<p>Note
that
HttpServlet's
default
OPTIONS
processing
will
be
applied
in
any
case
if
your
controllers
happen
to
not
set
the
'Allow'
header
(as
required
for
an
OPTIONS
response)
:end
:start
Set
whether
this
servlet
should
dispatch
an
HTTP
TRACE
request
to
the
#doService
method
<p>Default
is
"false",
applying
javaxservlethttpHttpServlet's
default
behavior
(ie
reflecting
the
message
received
back
to
the
client)
<p>Turn
this
flag
on
if
you
prefer
TRACE
requests
to
go
through
the
regular
dispatching
chain,
just
like
other
HTTP
requests
This
usually
means
that
your
controllers
will
receive
those
requests;
make
sure
that
those
endpoints
are
actually
able
to
handle
a
TRACE
request
<p>Note
that
HttpServlet's
default
TRACE
processing
will
be
applied
in
any
case
if
your
controllers
happen
to
not
generate
a
response
of
content
type
'message/http'
(as
required
for
a
TRACE
response)
:end
:start
Called
by
Spring
via
ApplicationContextAware
to
inject
the
current
application
context
This
method
allows
FrameworkServlets
to
be
registered
as
Spring
beans
inside
an
existing
WebApplicationContext
rather
than
#findWebApplicationContext()
finding
a
orgspringframeworkwebcontextContextLoaderListener
bootstrapped
context
<p>Primarily
added
to
support
use
in
embedded
servlet
containers
:end
:start
Overridden
method
of
HttpServletBean,
invoked
after
any
bean
properties
have
been
set
Creates
this
servlet's
WebApplicationContext
:end
:start
Initialize
and
publish
the
WebApplicationContext
for
this
servlet
<p>Delegates
to
#createWebApplicationContext
for
actual
creation
of
the
context
Can
be
overridden
in
subclasses
:end
:start
Retrieve
a
WebApplicationContext
from
the
ServletContext
attribute
with
the
#setContextAttribute
configured
name
The
WebApplicationContext
must
have
already
been
loaded
and
stored
in
the
ServletContext
before
this
servlet
gets
initialized
(or
invoked)
<p>Subclasses
may
override
this
method
to
provide
a
different
WebApplicationContext
retrieval
strategy
:end
:start
Instantiate
the
WebApplicationContext
for
this
servlet,
either
a
default
orgspringframeworkwebcontextsupportXmlWebApplicationContext
or
a
#setContextClass
custom
context
class,
if
set
<p>This
implementation
expects
custom
contexts
to
implement
the
orgspringframeworkwebcontextConfigurableWebApplicationContext
interface
Can
be
overridden
in
subclasses
<p>Do
not
forget
to
register
this
servlet
instance
as
application
listener
on
the
created
context
(for
triggering
its
#onRefresh
callback,
and
to
call
orgspringframeworkcontextConfigurableApplicationContext#refresh()
before
returning
the
context
instance
:end
:start
Post-process
the
given
WebApplicationContext
before
it
is
refreshed
and
activated
as
context
for
this
servlet
<p>The
default
implementation
is
empty
refresh()
will
be
called
automatically
after
this
method
returns
<p>Note
that
this
method
is
designed
to
allow
subclasses
to
modify
the
application
context,
while
#initWebApplicationContext
is
designed
to
allow
end-users
to
modify
the
context
through
the
use
of
ApplicationContextInitializers
:end
:start
Delegate
the
WebApplicationContext
before
it
is
refreshed
to
any
ApplicationContextInitializer
instances
specified
by
the
"contextInitializerClasses"
servlet
init-param
<p>See
also
#postProcessWebApplicationContext,
which
is
designed
to
allow
subclasses
(as
opposed
to
end-users)
to
modify
the
application
context,
and
is
called
immediately
before
this
method
:end
:start
Return
the
ServletContext
attribute
name
for
this
servlet's
WebApplicationContext
<p>The
default
implementation
returns
SERVLET_CONTEXT_PREFIX
+
servlet
name
:end
:start
Return
this
servlet's
WebApplicationContext
:end
:start
This
method
will
be
invoked
after
any
bean
properties
have
been
set
and
the
WebApplicationContext
has
been
loaded
The
default
implementation
is
empty;
subclasses
may
override
this
method
to
perform
any
initialization
they
require
:end
:start
Refresh
this
servlet's
application
context,
as
well
as
the
dependent
state
of
the
servlet
:end
:start
Callback
that
receives
refresh
events
from
this
servlet's
WebApplicationContext
<p>The
default
implementation
calls
#onRefresh,
triggering
a
refresh
of
this
servlet's
context-dependent
state
:end
:start
Template
method
which
can
be
overridden
to
add
servlet-specific
refresh
work
Called
after
successful
context
refresh
<p>This
implementation
is
empty
:end
:start
Close
the
WebApplicationContext
of
this
servlet
:end
:start
Override
the
parent
class
implementation
in
order
to
intercept
PATCH
requests
:end
:start
Delegate
GET
requests
to
processRequest/doService
<p>Will
also
be
invoked
by
HttpServlet's
default
implementation
of
doHead,
with
a
NoBodyResponse
that
just
captures
the
content
length
:end
:start
Delegate
POST
requests
to
#processRequest
:end
:start
Delegate
PUT
requests
to
#processRequest
:end
:start
Delegate
DELETE
requests
to
#processRequest
:end
:start
Delegate
OPTIONS
requests
to
#processRequest,
if
desired
<p>Applies
HttpServlet's
standard
OPTIONS
processing
otherwise,
and
also
if
there
is
still
no
'Allow'
header
set
after
dispatching
:end
:start
Delegate
TRACE
requests
to
#processRequest,
if
desired
<p>Applies
HttpServlet's
standard
TRACE
processing
otherwise
:end
:start
Process
this
request,
publishing
an
event
regardless
of
the
outcome
<p>The
actual
event
handling
is
performed
by
the
abstract
#doService
template
method
:end
:start
Build
a
LocaleContext
for
the
given
request,
exposing
the
request's
primary
locale
as
current
locale
:end
:start
Build
ServletRequestAttributes
for
the
given
request
(potentially
also
holding
a
reference
to
the
response),
taking
pre-bound
attributes
(and
their
type)
into
consideration
:end
:start
Determine
the
username
for
the
given
request
<p>The
default
implementation
takes
the
name
of
the
UserPrincipal,
if
any
Can
be
overridden
in
subclasses
:end
:start
Subclasses
must
implement
this
method
to
do
the
work
of
request
handling,
receiving
a
centralized
callback
for
GET,
POST,
PUT
and
DELETE
<p>The
contract
is
essentially
the
same
as
that
for
the
commonly
overridden
doGet
or
doPost
methods
of
HttpServlet
<p>This
class
intercepts
calls
to
ensure
that
exception
handling
and
event
publication
takes
place
:end
:start
Abstract
implementation
of
the
orgspringframeworkwebservletHandlerMapping
interface,
detecting
URL
mappings
for
handler
beans
through
introspection
of
all
defined
beans
in
the
application
context
:end
:start
Set
whether
to
detect
handler
beans
in
ancestor
ApplicationContexts
<p>Default
is
"false":
Only
handler
beans
in
the
current
ApplicationContext
will
be
detected,
ie
only
in
the
context
that
this
HandlerMapping
itself
is
defined
in
(typically
the
current
DispatcherServlet's
context)
<p>Switch
this
flag
on
to
detect
handler
beans
in
ancestor
contexts
(typically
the
Spring
root
WebApplicationContext)
as
well
:end
:start
Calls
the
#detectHandlers()
method
in
addition
to
the
superclass's
initialization
:end
:start
Register
all
handlers
found
in
the
current
ApplicationContext
<p>The
actual
URL
determination
for
a
handler
is
up
to
the
concrete
#determineUrlsForHandler(String)
implementation
A
bean
for
which
no
such
URLs
could
be
determined
is
simply
not
considered
a
handler
:end
:start
Determine
the
URLs
for
the
given
handler
bean
:end
:start
Abstract
base
class
for
HandlerExceptionResolver
implementations
<p>Provides
a
set
of
mapped
handlers
that
the
resolver
should
map
to,
and
the
Ordered
implementation
:end
:start
Logger
available
to
subclasses
:end
:start
Specify
the
set
of
handlers
that
this
exception
resolver
should
apply
to
The
exception
mappings
and
the
default
error
view
will
only
apply
to
the
specified
handlers
<p>If
no
handlers
and
handler
classes
are
set,
the
exception
mappings
and
the
default
error
view
will
apply
to
all
handlers
This
means
that
a
specified
default
error
view
will
be
used
as
fallback
for
all
exceptions;
any
further
HandlerExceptionResolvers
in
the
chain
will
be
ignored
in
this
case
:end
:start
Specify
the
set
of
classes
that
this
exception
resolver
should
apply
to
The
exception
mappings
and
the
default
error
view
will
only
apply
to
handlers
of
the
specified
type;
the
specified
types
may
be
interfaces
and
superclasses
of
handlers
as
well
<p>If
no
handlers
and
handler
classes
are
set,
the
exception
mappings
and
the
default
error
view
will
apply
to
all
handlers
This
means
that
a
specified
default
error
view
will
be
used
as
fallback
for
all
exceptions;
any
further
HandlerExceptionResolvers
in
the
chain
will
be
ignored
in
this
case
:end
:start
Set
the
log
category
for
warn
logging
The
name
will
be
passed
to
the
underlying
logger
implementation
through
Commons
Logging,
getting
interpreted
as
log
category
according
to
the
logger's
configuration
<p>Default
is
no
warn
logging
Specify
this
setting
to
activate
warn
logging
into
a
specific
category
Alternatively,
override
the
#logException
method
for
custom
logging
:end
:start
Specify
whether
to
prevent
HTTP
response
caching
for
any
view
resolved
by
this
HandlerExceptionResolver
<p>Default
is
"false"
Switch
this
to
"true"
in
order
to
automatically
generate
HTTP
response
headers
that
suppress
response
caching
:end
:start
Checks
whether
this
resolver
is
supposed
to
apply
(ie
the
handler
matches
in
case
of
"mappedHandlers"
having
been
specified),
then
delegates
to
the
#doResolveException
template
method
:end
:start
Check
whether
this
resolver
is
supposed
to
apply
to
the
given
handler
<p>The
default
implementation
checks
against
the
specified
mapped
handlers
and
handler
classes,
if
any
:end
:start
Log
the
given
exception
at
warn
level,
provided
that
warn
logging
has
been
activated
through
the
#setWarnLogCategory
"warnLogCategory"
property
<p>Calls
#buildLogMessage
in
order
to
determine
the
concrete
message
to
log
Always
passes
the
full
exception
to
the
logger
:end
:start
Build
a
log
message
for
the
given
exception,
occurred
during
processing
the
given
request
:end
:start
Prepare
the
response
for
the
exceptional
case
<p>The
default
implementation
prevents
the
response
from
being
cached,
if
the
#setPreventResponseCaching
"preventResponseCaching"
property
has
been
set
to
"true"
:end
:start
Prevents
the
response
from
being
cached,
through
setting
corresponding
HTTP
headers
See
http://wwwmnotnet/cache_docs
:end
:start
Actually
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
<p>May
be
overridden
in
subclasses,
in
order
to
apply
specific
exception
checks
Note
that
this
template
method
will
be
invoked
<i>after</i>
checking
whether
this
resolved
applies
("mappedHandlers"
etc),
so
an
implementation
may
simply
proceed
with
its
actual
exception
handling
:end
:start
Abstract
base
class
for
orgspringframeworkwebservletHandlerMapping
implementations
Supports
ordering,
a
default
handler,
handler
interceptors,
including
handler
interceptors
mapped
by
path
patterns
<p>Note:
This
base
class
does
<i>not</i>
support
exposure
of
the
#PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE
Support
for
this
attribute
is
up
to
concrete
subclasses,
typically
based
on
request
URL
mappings
:end
:start
Specify
the
order
value
for
this
HandlerMapping
bean
<p>Default
value
is
IntegerMAX_VALUE,
meaning
that
it's
non-ordered
:end
:start
Set
the
default
handler
for
this
handler
mapping
This
handler
will
be
returned
if
no
specific
mapping
was
found
<p>Default
is
null,
indicating
no
default
handler
:end
:start
Return
the
default
handler
for
this
handler
mapping,
or
null
if
none
:end
:start
Set
if
URL
lookup
should
always
use
the
full
path
within
the
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(that
is,
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
<p>Default
is
"false"
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
:end
:start
Set
if
";"
(semicolon)
content
should
be
stripped
from
the
request
URI
<p>The
default
value
is
true
:end
:start
Set
the
UrlPathHelper
to
use
for
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
HandlerMappings
and
MethodNameResolvers
:end
:start
Return
the
UrlPathHelper
implementation
to
use
for
resolution
of
lookup
paths
:end
:start
Set
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns
Default
is
AntPathMatcher
:end
:start
Return
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns
:end
:start
Set
the
interceptors
to
apply
for
all
handlers
mapped
by
this
handler
mapping
<p>Supported
interceptor
types
are
HandlerInterceptor,
WebRequestInterceptor,
and
MappedInterceptor
Mapped
interceptors
apply
only
to
request
URLs
that
match
its
path
patterns
Mapped
interceptor
beans
are
also
detected
by
type
during
initialization
:end
:start
Initializes
the
interceptors
:end
:start
Extension
hook
that
subclasses
can
override
to
register
additional
interceptors,
given
the
configured
interceptors
(see
#setInterceptors)
<p>Will
be
invoked
before
#initInterceptors()
adapts
the
specified
interceptors
into
HandlerInterceptor
instances
<p>The
default
implementation
is
empty
:end
:start
Detect
beans
of
type
MappedInterceptor
and
add
them
to
the
list
of
mapped
interceptors
<p>This
is
called
in
addition
to
any
MappedInterceptors
that
may
have
been
provided
via
#setInterceptors,
by
default
adding
all
beans
of
type
MappedInterceptor
from
the
current
context
and
its
ancestors
Subclasses
can
override
and
refine
this
policy
:end
:start
Initialize
the
specified
interceptors,
checking
for
MappedInterceptors
and
adapting
HandlerInterceptors
and
WebRequestInterceptors
if
necessary
:end
:start
Adapt
the
given
interceptor
object
to
the
HandlerInterceptor
interface
<p>By
default,
the
supported
interceptor
types
are
HandlerInterceptor
and
WebRequestInterceptor
Each
given
WebRequestInterceptor
will
be
wrapped
in
a
WebRequestHandlerInterceptorAdapter
Can
be
overridden
in
subclasses
:end
:start
Return
the
adapted
interceptors
as
HandlerInterceptor
array
:end
:start
Return
all
configured
MappedInterceptors
as
an
array
:end
:start
Look
up
a
handler
for
the
given
request,
falling
back
to
the
default
handler
if
no
specific
one
is
found
:end
:start
Look
up
a
handler
for
the
given
request,
returning
null
if
no
specific
one
is
found
This
method
is
called
by
#getHandler;
a
null
return
value
will
lead
to
the
default
handler,
if
one
is
set
<p>Note:
This
method
may
also
return
a
pre-built
HandlerExecutionChain,
combining
a
handler
object
with
dynamically
determined
interceptors
Statically
specified
interceptors
will
get
merged
into
such
an
existing
chain
:end
:start
Build
a
HandlerExecutionChain
for
the
given
handler,
including
applicable
interceptors
<p>The
default
implementation
builds
a
standard
HandlerExecutionChain
with
the
given
handler,
the
handler
mapping's
common
interceptors,
and
any
MappedInterceptors
matching
to
the
current
request
URL
Subclasses
may
override
this
in
order
to
extend/rearrange
the
list
of
interceptors
<p><b>NOTE:</b>
The
passed-in
handler
object
may
be
a
raw
handler
or
a
pre-built
HandlerExecutionChain
This
method
should
handle
those
two
cases
explicitly,
either
building
a
new
HandlerExecutionChain
or
extending
the
existing
chain
<p>For
simply
adding
an
interceptor
in
a
custom
subclass,
consider
calling
supergetHandlerExecutionChain(handler,
request)
and
invoking
HandlerExecutionChain#addInterceptor
on
the
returned
chain
object
:end
:start
Abstract
base
class
for
orgspringframeworkwebservletHandlerExceptionResolver
HandlerExceptionResolver
implementations
that
support
handling
exceptions
from
handlers
of
type
HandlerMethod
:end
:start
Checks
if
the
handler
is
a
HandlerMethod
and
then
delegates
to
the
base
class
implementation
of
#shouldApplyTo(HttpServletRequest,
Object)
passing
the
bean
of
the
HandlerMethod
Otherwise
returns
false
:end
:start
Actually
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
<p>May
be
overridden
in
subclasses,
in
order
to
apply
specific
exception
checks
Note
that
this
template
method
will
be
invoked
<i>after</i>
checking
whether
this
resolved
applies
("mappedHandlers"
etc),
so
an
implementation
may
simply
proceed
with
its
actual
exception
handling
:end
:start
Abstract
base
class
for
HandlerMapping
implementations
that
define
a
mapping
between
a
request
and
a
HandlerMethod
<p>For
each
registered
handler
method,
a
unique
mapping
is
maintained
with
subclasses
defining
the
details
of
the
mapping
type
<T>
:end
:start
Whether
to
detect
handler
methods
in
beans
in
ancestor
ApplicationContexts
<p>Default
is
"false":
Only
beans
in
the
current
ApplicationContext
are
considered,
ie
only
in
the
context
that
this
HandlerMapping
itself
is
defined
in
(typically
the
current
DispatcherServlet's
context)
<p>Switch
this
flag
on
to
detect
handler
beans
in
ancestor
contexts
(typically
the
Spring
root
WebApplicationContext)
as
well
:end
:start
Return
a
map
with
all
handler
methods
and
their
mappings
:end
:start
Detects
handler
methods
at
initialization
:end
:start
Scan
beans
in
the
ApplicationContext,
detect
and
register
handler
methods
:end
:start
Whether
the
given
type
is
a
handler
with
handler
methods
:end
:start
Look
for
handler
methods
in
a
handler
:end
:start
Provide
the
mapping
for
a
handler
method
A
method
for
which
no
mapping
can
be
provided
is
not
a
handler
method
:end
:start
Register
a
handler
method
and
its
unique
mapping
:end
:start
Create
the
HandlerMethod
instance
:end
:start
Extract
and
return
the
URL
paths
contained
in
a
mapping
:end
:start
Invoked
after
all
handler
methods
have
been
detected
:end
:start
Look
up
a
handler
method
for
the
given
request
:end
:start
Look
up
the
best-matching
handler
method
for
the
current
request
If
multiple
matches
are
found,
the
best
match
is
selected
:end
:start
Check
if
a
mapping
matches
the
current
request
and
return
a
(potentially
new)
mapping
with
conditions
relevant
to
the
current
request
:end
:start
Return
a
comparator
for
sorting
matching
mappings
The
returned
comparator
should
sort
'better'
matches
higher
:end
:start
Invoked
when
a
matching
mapping
is
found
:end
:start
Invoked
when
no
matching
mapping
is
not
found
:end
:start
Abstract
base
class
for
URL-mapped
orgspringframeworkwebservletHandlerMapping
implementations
Provides
infrastructure
for
mapping
handlers
to
URLs
and
configurable
URL
lookup
For
information
on
the
latter,
see
"alwaysUseFullPath"
property
<p>Supports
direct
matches,
eg
a
registered
"/test"
matches
"/test",
and
various
Ant-style
pattern
matches,
eg
a
registered
"/t*"
pattern
matches
both
"/test"
and
"/team",
"/test/*"
matches
all
paths
in
the
"/test"
directory,
"/test/**"
matches
all
paths
below
"/test"
For
details,
see
the
orgspringframeworkutilAntPathMatcher
AntPathMatcher
javadoc
<p>Will
search
all
path
patterns
to
find
the
most
exact
match
for
the
current
request
path
The
most
exact
match
is
defined
as
the
longest
path
pattern
that
matches
the
current
request
path
:end
:start
Set
the
root
handler
for
this
handler
mapping,
that
is,
the
handler
to
be
registered
for
the
root
path
("/")
<p>Default
is
null,
indicating
no
root
handler
:end
:start
Return
the
root
handler
for
this
handler
mapping
(registered
for
"/"),
or
null
if
none
:end
:start
Set
whether
to
lazily
initialize
handlers
Only
applicable
to
singleton
handlers,
as
prototypes
are
always
lazily
initialized
Default
is
"false",
as
eager
initialization
allows
for
more
efficiency
through
referencing
the
controller
objects
directly
<p>If
you
want
to
allow
your
controllers
to
be
lazily
initialized,
make
them
"lazy-init"
and
set
this
flag
to
true
Just
making
them
"lazy-init"
will
not
work,
as
they
are
initialized
through
the
references
from
the
handler
mapping
in
this
case
:end
:start
Look
up
a
handler
for
the
URL
path
of
the
given
request
:end
:start
Look
up
a
handler
instance
for
the
given
URL
path
<p>Supports
direct
matches,
eg
a
registered
"/test"
matches
"/test",
and
various
Ant-style
pattern
matches,
eg
a
registered
"/t*"
matches
both
"/test"
and
"/team"
For
details,
see
the
AntPathMatcher
class
<p>Looks
for
the
most
exact
pattern,
where
most
exact
is
defined
as
the
longest
path
pattern
:end
:start
Validate
the
given
handler
against
the
current
request
<p>The
default
implementation
is
empty
Can
be
overridden
in
subclasses,
for
example
to
enforce
specific
preconditions
expressed
in
URL
mappings
:end
:start
Build
a
handler
object
for
the
given
raw
handler,
exposing
the
actual
handler,
the
#PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE,
as
well
as
the
#URI_TEMPLATE_VARIABLES_ATTRIBUTE
before
executing
the
handler
<p>The
default
implementation
builds
a
HandlerExecutionChain
with
a
special
interceptor
that
exposes
the
path
attribute
and
uri
template
variables
:end
:start
Expose
the
path
within
the
current
mapping
as
request
attribute
:end
:start
Expose
the
URI
templates
variables
as
request
attribute
:end
:start
Register
the
specified
handler
for
the
given
URL
paths
:end
:start
Register
the
specified
handler
for
the
given
URL
path
:end
:start
Return
the
registered
handlers
as
an
unmodifiable
Map,
with
the
registered
path
as
key
and
the
handler
object
(or
handler
bean
name
in
case
of
a
lazy-init
handler)
as
value
:end
:start
Indicates
whether
this
handler
mapping
support
type-level
mappings
Default
to
false
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerMapping
interface
that
map
from
URLs
to
beans
with
names
that
start
with
a
slash
("/"),
similar
to
how
Struts
maps
URLs
to
action
names
<p>This
is
the
default
implementation
used
by
the
orgspringframeworkwebservletDispatcherServlet,
along
with
orgspringframeworkwebservletmvcannotationDefaultAnnotationHandlerMapping
(on
Java
5
and
higher)
Alternatively,
SimpleUrlHandlerMapping
allows
for
customizing
a
handler
mapping
declaratively
<p>The
mapping
is
from
URL
to
bean
name
Thus
an
incoming
URL
"/foo"
would
map
to
a
handler
named
"/foo",
or
to
"/foo
/foo2"
in
case
of
multiple
mappings
to
a
single
handler
Note:
In
XML
definitions,
you'll
need
to
use
an
alias
name="/foo"
in
the
bean
definition,
as
the
XML
id
may
not
contain
slashes
<p>Supports
direct
matches
(given
"/test"
->
registered
"/test")
and
"*"
matches
(given
"/test"
->
registered
"/t*")
Note
that
the
default
is
to
map
within
the
current
servlet
mapping
if
applicable;
see
the
#setAlwaysUseFullPath
"alwaysUseFullPath"
property
for
details
For
details
on
the
pattern
options,
see
the
orgspringframeworkutilAntPathMatcher
javadoc
:end
:start
Checks
name
and
aliases
of
the
given
bean
for
URLs,
starting
with
"/"
:end
:start
Interceptor
that
places
the
configured
ConversionService
in
request
scope
so
it's
available
during
request
processing
The
request
attribute
name
is
"orgspringframeworkcoreconvertConversionService",
the
value
of
ConversionServiceclassgetName()
<p>Mainly
for
use
within
JSP
tags
such
as
the
spring:eval
tag
:end
:start
Creates
a
new
ConversionServiceExposingInterceptor
:end
:start
ServletWebRequest
subclass
that
is
aware
of
orgspringframeworkwebservletDispatcherServlet's
request
context,
such
as
the
Locale
determined
by
the
configured
orgspringframeworkwebservletLocaleResolver
:end
:start
Create
a
new
DispatcherServletWebRequest
instance
for
the
given
request
:end
:start
Create
a
new
DispatcherServletWebRequest
instance
for
the
given
request
and
response
:end
:start
A
HandlerExceptionResolver
that
delegates
to
a
list
of
other
HandlerExceptionResolvers
:end
:start
Set
the
list
of
exception
resolvers
to
delegate
to
:end
:start
Return
the
list
of
exception
resolvers
to
delegate
to
:end
:start
Resolve
the
exception
by
iterating
over
the
list
of
configured
exception
resolvers
The
first
one
to
return
a
ModelAndView
instance
wins
Otherwise
null
is
returned
:end
:start
Abstract
adapter
class
for
the
HandlerInterceptor
interface,
for
simplified
implementation
of
pre-only/post-only
interceptors
:end
:start
This
implementation
always
returns
true
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
Holds
information
about
a
HandlerInterceptor
mapped
to
a
path
into
the
application
Provides
a
method
to
match
a
request
path
to
the
mapped
path
patterns
:end
:start
Create
a
new
MappedInterceptor
instance
:end
:start
Create
a
new
MappedInterceptor
instance
:end
:start
Create
a
new
MappedInterceptor
instance
:end
:start
Create
a
new
MappedInterceptor
instance
:end
:start
Configure
a
PathMatcher
to
use
with
this
MappedInterceptor
instead
of
the
one
passed
by
default
to
the
#matches(String,
orgspringframeworkutilPathMatcher)
method
This
is
an
advanced
property
that
is
only
required
when
using
custom
PathMatcher
implementations
that
support
mapping
metadata
other
than
the
Ant-style
path
patterns
supported
by
default
:end
:start
The
configured
PathMatcher,
or
null
:end
:start
The
path
into
the
application
the
interceptor
is
mapped
to
:end
:start
The
actual
Interceptor
reference
:end
:start
Returns
true
if
the
interceptor
applies
to
the
given
request
path
:end
:start
orgspringframeworkwebservletHandlerExceptionResolver
implementation
that
allows
for
mapping
exception
class
names
to
view
names,
either
for
a
set
of
given
handlers
or
for
all
handlers
in
the
DispatcherServlet
<p>Error
views
are
analogous
to
error
page
JSPs,
but
can
be
used
with
any
kind
of
exception
including
any
checked
one,
with
fine-granular
mappings
for
specific
handlers
:end
:start
The
default
name
of
the
exception
attribute:
"exception"
:end
:start
Set
the
mappings
between
exception
class
names
and
error
view
names
The
exception
class
name
can
be
a
substring,
with
no
wildcard
support
at
present
A
value
of
"ServletException"
would
match
javaxservletServletException
and
subclasses,
for
example
<p><b>NB:</b>
Consider
carefully
how
specific
the
pattern
is,
and
whether
to
include
package
information
(which
isn't
mandatory)
For
example,
"Exception"
will
match
nearly
anything,
and
will
probably
hide
other
rules
"javalangException"
would
be
correct
if
"Exception"
was
meant
to
define
a
rule
for
all
checked
exceptions
With
more
unusual
exception
names
such
as
"BaseBusinessException"
there's
no
need
to
use
a
FQN
:end
:start
Set
one
or
more
exceptions
to
be
excluded
from
the
exception
mappings
Excluded
exceptions
are
checked
first
and
if
one
of
them
equals
the
actual
exception,
the
exception
will
remain
unresolved
:end
:start
Set
the
name
of
the
default
error
view
This
view
will
be
returned
if
no
specific
mapping
was
found
<p>Default
is
none
:end
:start
Set
the
HTTP
status
code
that
this
exception
resolver
will
apply
for
a
given
resolved
error
view
Keys
are
view
names;
values
are
status
codes
<p>Note
that
this
error
code
will
only
get
applied
in
case
of
a
top-level
request
It
will
not
be
set
for
an
include
request,
since
the
HTTP
status
cannot
be
modified
from
within
an
include
<p>If
not
specified,
the
default
status
code
will
be
applied
:end
:start
An
alternative
to
#setStatusCodes(Properties)
for
use
with
Java-based
configuration
:end
:start
Returns
the
HTTP
status
codes
provided
via
#setStatusCodes(Properties)
Keys
are
view
names;
values
are
status
codes
:end
:start
Set
the
default
HTTP
status
code
that
this
exception
resolver
will
apply
if
it
resolves
an
error
view
and
if
there
is
no
status
code
mapping
defined
<p>Note
that
this
error
code
will
only
get
applied
in
case
of
a
top-level
request
It
will
not
be
set
for
an
include
request,
since
the
HTTP
status
cannot
be
modified
from
within
an
include
<p>If
not
specified,
no
status
code
will
be
applied,
either
leaving
this
to
the
controller
or
view,
or
keeping
the
servlet
engine's
default
of
200
(OK)
:end
:start
Set
the
name
of
the
model
attribute
as
which
the
exception
should
be
exposed
Default
is
"exception"
<p>This
can
be
either
set
to
a
different
attribute
name
or
to
null
for
not
exposing
an
exception
attribute
at
all
:end
:start
Actually
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
<p>May
be
overridden
in
subclasses,
in
order
to
apply
specific
exception
checks
Note
that
this
template
method
will
be
invoked
<i>after</i>
checking
whether
this
resolved
applies
("mappedHandlers"
etc),
so
an
implementation
may
simply
proceed
with
its
actual
exception
handling
:end
:start
Determine
the
view
name
for
the
given
exception,
first
checking
against
the
#setExcludedExceptions(Class[])
"excludedExecptions",
then
searching
the
#setExceptionMappings
"exceptionMappings",
and
finally
using
the
#setDefaultErrorView
"defaultErrorView"
as
a
fallback
:end
:start
Find
a
matching
view
name
in
the
given
exception
mappings
:end
:start
Return
the
depth
to
the
superclass
matching
<p>0
means
ex
matches
exactly
Returns
-1
if
there's
no
match
Otherwise,
returns
depth
Lowest
depth
wins
:end
:start
Determine
the
HTTP
status
code
to
apply
for
the
given
error
view
<p>The
default
implementation
returns
the
status
code
for
the
given
view
name
(specified
through
the
#setStatusCodes(Properties)
statusCodes
property),
or
falls
back
to
the
#setDefaultStatusCode
defaultStatusCode
if
there
is
no
match
<p>Override
this
in
a
custom
subclass
to
customize
this
behavior
:end
:start
Apply
the
specified
HTTP
status
code
to
the
given
response,
if
possible
(that
is,
if
not
executing
within
an
include
request)
:end
:start
Return
a
ModelAndView
for
the
given
request,
view
name
and
exception
<p>The
default
implementation
delegates
to
#getModelAndView(String,
Exception)
:end
:start
Return
a
ModelAndView
for
the
given
view
name
and
exception
<p>The
default
implementation
adds
the
specified
exception
attribute
Can
be
overridden
in
subclasses
:end
:start
Adapter
to
use
the
Servlet
interface
with
the
generic
DispatcherServlet
Calls
the
Servlet's
service
method
to
handle
a
request
<p>Last-modified
checking
is
not
explicitly
supported:
This
is
typically
handled
by
the
Servlet
implementation
itself
(usually
deriving
from
the
HttpServlet
base
class)
<p>This
adapter
is
not
activated
by
default;
it
needs
to
be
defined
as
a
bean
in
the
DispatcherServlet
context
It
will
automatically
apply
to
mapped
handler
beans
that
implement
the
Servlet
interface
then
<p>Note
that
Servlet
instances
defined
as
bean
will
not
receive
initialization
and
destruction
callbacks,
unless
a
special
post-processor
such
as
SimpleServletPostProcessor
is
defined
in
the
DispatcherServlet
context
<p><b>Alternatively,
consider
wrapping
a
Servlet
with
Spring's
ServletWrappingController</b>
This
is
particularly
appropriate
for
existing
Servlet
classes,
allowing
to
specify
Servlet
initialization
parameters
etc
:end
:start
orgspringframeworkbeansfactoryconfigBeanPostProcessor
that
applies
initialization
and
destruction
callbacks
to
beans
that
implement
the
javaxservletServlet
interface
<p>After
initialization
of
the
bean
instance,
the
Servlet
init
method
will
be
called
with
a
ServletConfig
that
contains
the
bean
name
of
the
Servlet
and
the
ServletContext
that
it
is
running
in
<p>Before
destruction
of
the
bean
instance,
the
Servlet
destroy
will
be
called
<p><b>Note
that
this
post-processor
does
not
support
Servlet
initialization
parameters</b>
Bean
instances
that
implement
the
Servlet
interface
are
supposed
to
be
configured
like
any
other
Spring
bean,
that
is,
through
constructor
arguments
or
bean
properties
<p>For
reuse
of
a
Servlet
implementation
in
a
plain
Servlet
container
and
as
a
bean
in
a
Spring
context,
consider
deriving
from
Spring's
orgspringframeworkwebservletHttpServletBean
base
class
that
applies
Servlet
initialization
parameters
as
bean
properties,
supporting
both
the
standard
Servlet
and
the
Spring
bean
initialization
style
<p><b>Alternatively,
consider
wrapping
a
Servlet
with
Spring's
orgspringframeworkwebservletmvcServletWrappingController</b>
This
is
particularly
appropriate
for
existing
Servlet
classes,
allowing
to
specify
Servlet
initialization
parameters
etc
:end
:start
Set
whether
to
use
the
shared
ServletConfig
object
passed
in
through
setServletConfig,
if
available
<p>Default
is
"true"
Turn
this
setting
to
"false"
to
pass
in
a
mock
ServletConfig
object
with
the
bean
name
as
servlet
name,
holding
the
current
ServletContext
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerMapping
interface
to
map
from
URLs
to
request
handler
beans
Supports
both
mapping
to
bean
instances
and
mapping
to
bean
names;
the
latter
is
required
for
non-singleton
handlers
<p>The
"urlMap"
property
is
suitable
for
populating
the
handler
map
with
bean
references,
eg
via
the
map
element
in
XML
bean
definitions
<p>Mappings
to
bean
names
can
be
set
via
the
"mappings"
property,
in
a
form
accepted
by
the
javautilProperties
class,
like
as
follows:<br>
/welcomehtml=ticketController
/showhtml=ticketController
<br>
The
syntax
is
PATH=HANDLER_BEAN_NAME
If
the
path
doesn't
begin
with
a
slash,
one
is
prepended
<p>Supports
direct
matches
(given
"/test"
->
registered
"/test")
and
"*"
matches
(given
"/test"
->
registered
"/t*")
Note
that
the
default
is
to
map
within
the
current
servlet
mapping
if
applicable;
see
the
#setAlwaysUseFullPath
"alwaysUseFullPath"
property
for
details
For
details
on
the
pattern
options,
see
the
orgspringframeworkutilAntPathMatcher
javadoc
:end
:start
Map
URL
paths
to
handler
bean
names
This
is
the
typical
way
of
configuring
this
HandlerMapping
<p>Supports
direct
URL
matches
and
Ant-style
pattern
matches
For
syntax
details,
see
the
orgspringframeworkutilAntPathMatcher
javadoc
:end
:start
Set
a
Map
with
URL
paths
as
keys
and
handler
beans
(or
handler
bean
names)
as
values
Convenient
for
population
with
bean
references
<p>Supports
direct
URL
matches
and
Ant-style
pattern
matches
For
syntax
details,
see
the
orgspringframeworkutilAntPathMatcher
javadoc
:end
:start
Allow
Map
access
to
the
URL
path
mappings,
with
the
option
to
add
or
override
specific
entries
<p>Useful
for
specifying
entries
directly,
for
example
via
"urlMap[myKey]"
This
is
particularly
useful
for
adding
or
overriding
entries
in
child
bean
definitions
:end
:start
Calls
the
#registerHandlers
method
in
addition
to
the
superclass's
initialization
:end
:start
Register
all
handlers
specified
in
the
URL
map
for
the
corresponding
paths
:end
:start
Interceptor
that
checks
the
authorization
of
the
current
user
via
the
user's
roles,
as
evaluated
by
HttpServletRequest's
isUserInRole
method
:end
:start
Set
the
roles
that
this
interceptor
should
treat
as
authorized
:end
:start
Handle
a
request
that
is
not
authorized
according
to
this
interceptor
Default
implementation
sends
HTTP
status
code
403
("forbidden")
<p>This
method
can
be
overridden
to
write
a
custom
message,
forward
or
redirect
to
some
error
page
or
login
page,
or
throw
a
ServletException
:end
:start
Adapter
that
implements
the
Servlet
HandlerInterceptor
interface
and
wraps
an
underlying
WebRequestInterceptor
:end
:start
Create
a
new
WebRequestHandlerInterceptorAdapter
for
the
given
WebRequestInterceptor
:end
:start
MVC
framework
SPI,
allowing
parameterization
of
the
core
MVC
workflow
<p>Interface
that
must
be
implemented
for
each
handler
type
to
handle
a
request
This
interface
is
used
to
allow
the
DispatcherServlet
to
be
indefinitely
extensible
The
DispatcherServlet
accesses
all
installed
handlers
through
this
interface,
meaning
that
it
does
not
contain
code
specific
to
any
handler
type
<p>Note
that
a
handler
can
be
of
type
Object
This
is
to
enable
handlers
from
other
frameworks
to
be
integrated
with
this
framework
without
custom
coding,
as
well
as
to
allow
for
annotation-driven
handler
objects
that
do
not
obey
any
specific
Java
interface
<p>This
interface
is
not
intended
for
application
developers
It
is
available
to
handlers
who
want
to
develop
their
own
web
workflow
<p>Note:
HandlerAdapter
implementors
may
implement
the
orgspringframeworkcoreOrdered
interface
to
be
able
to
specify
a
sorting
order
(and
thus
a
priority)
for
getting
applied
by
the
DispatcherServlet
Non-Ordered
instances
get
treated
as
lowest
priority
:end
:start
Given
a
handler
instance,
return
whether
or
not
this
HandlerAdapter
can
support
it
Typical
HandlerAdapters
will
base
the
decision
on
the
handler
type
HandlerAdapters
will
usually
only
support
one
handler
type
each
<p>A
typical
implementation:
<p>{@code
return
(handler
instanceof
MyHandler);

:end
:start
Use
the
given
handler
to
handle
this
request
The
workflow
that
is
required
may
vary
widely
:end
:start
Same
contract
as
for
HttpServlet's
getLastModified
method
Can
simply
return
-1
if
there's
no
support
in
the
handler
class
:end
:start
Interface
to
be
implemented
by
objects
than
can
resolve
exceptions
thrown
during
handler
mapping
or
execution,
in
the
typical
case
to
error
views
Implementors
are
typically
registered
as
beans
in
the
application
context
<p>Error
views
are
analogous
to
the
error
page
JSPs,
but
can
be
used
with
any
kind
of
exception
including
any
checked
exception,
with
potentially
fine-granular
mappings
for
specific
handlers
:end
:start
Try
to
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
<p>The
returned
ModelAndView
may
be
ModelAndView#isEmpty()
empty
to
indicate
that
the
exception
has
been
resolved
successfully
but
that
no
view
should
be
rendered,
for
instance
by
setting
a
status
code
:end
:start
Handler
execution
chain,
consisting
of
handler
object
and
any
handler
interceptors
Returned
by
HandlerMapping's
HandlerMapping#getHandler
method
:end
:start
Create
a
new
HandlerExecutionChain
:end
:start
Create
a
new
HandlerExecutionChain
:end
:start
Return
the
handler
object
to
execute
:end
:start
Return
the
array
of
interceptors
to
apply
(in
the
given
order)
:end
:start
Delegates
to
the
handler's
toString()
:end
:start
Workflow
interface
that
allows
for
customized
handler
execution
chains
Applications
can
register
any
number
of
existing
or
custom
interceptors
for
certain
groups
of
handlers,
to
add
common
preprocessing
behavior
without
needing
to
modify
each
handler
implementation
<p>A
HandlerInterceptor
gets
called
before
the
appropriate
HandlerAdapter
triggers
the
execution
of
the
handler
itself
This
mechanism
can
be
used
for
a
large
field
of
preprocessing
aspects,
eg
for
authorization
checks,
or
common
handler
behavior
like
locale
or
theme
changes
Its
main
purpose
is
to
allow
for
factoring
out
repetitive
handler
code
<p>In
an
async
processing
scenario,
the
handler
may
be
executed
in
a
separate
thread
while
the
main
thread
exits
without
rendering
or
invoking
the
postHandle
and
afterCompletion
callbacks
When
concurrent
handler
execution
completes,
the
request
is
dispatched
back
in
order
to
proceed
with
rendering
the
model
and
all
methods
of
this
contract
are
invoked
again
For
further
options
and
details
see
orgspringframeworkwebservletAsyncHandlerInterceptor
<p>Typically
an
interceptor
chain
is
defined
per
HandlerMapping
bean,
sharing
its
granularity
To
be
able
to
apply
a
certain
interceptor
chain
to
a
group
of
handlers,
one
needs
to
map
the
desired
handlers
via
one
HandlerMapping
bean
The
interceptors
themselves
are
defined
as
beans
in
the
application
context,
referenced
by
the
mapping
bean
definition
via
its
"interceptors"
property
(in
XML:
a
&lt;list&gt;
of
&lt;ref&gt;)
<p>HandlerInterceptor
is
basically
similar
to
a
Servlet
23
Filter,
but
in
contrast
to
the
latter
it
just
allows
custom
pre-processing
with
the
option
of
prohibiting
the
execution
of
the
handler
itself,
and
custom
post-processing
Filters
are
more
powerful,
for
example
they
allow
for
exchanging
the
request
and
response
objects
that
are
handed
down
the
chain
Note
that
a
filter
gets
configured
in
webxml,
a
HandlerInterceptor
in
the
application
context
<p>As
a
basic
guideline,
fine-grained
handler-related
preprocessing
tasks
are
candidates
for
HandlerInterceptor
implementations,
especially
factored-out
common
handler
code
and
authorization
checks
On
the
other
hand,
a
Filter
is
well-suited
for
request
content
and
view
content
handling,
like
multipart
forms
and
GZIP
compression
This
typically
shows
when
one
needs
to
map
the
filter
to
certain
content
types
(eg
images),
or
to
all
requests
:end
:start
Intercept
the
execution
of
a
handler
Called
after
HandlerMapping
determined
an
appropriate
handler
object,
but
before
HandlerAdapter
invokes
the
handler
<p>DispatcherServlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
decide
to
abort
the
execution
chain,
typically
sending
a
HTTP
error
or
writing
a
custom
response
:end
:start
Intercept
the
execution
of
a
handler
Called
after
HandlerAdapter
actually
invoked
the
handler,
but
before
the
DispatcherServlet
renders
the
view
Can
expose
additional
model
objects
to
the
view
via
the
given
ModelAndView
<p>DispatcherServlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
post-process
an
execution,
getting
applied
in
inverse
order
of
the
execution
chain
:end
:start
Callback
after
completion
of
request
processing,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allows
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
preHandle
method
has
successfully
completed
and
returned
true!
<p>As
with
the
postHandle
method,
the
method
will
be
invoked
on
each
interceptor
in
the
chain
in
reverse
order,
so
the
first
interceptor
will
be
the
last
to
be
invoked
:end
:start
Interface
to
be
implemented
by
objects
that
define
a
mapping
between
requests
and
handler
objects
<p>This
class
can
be
implemented
by
application
developers,
although
this
is
not
necessary,
as
orgspringframeworkwebservlethandlerBeanNameUrlHandlerMapping
and
orgspringframeworkwebservlethandlerSimpleUrlHandlerMapping
are
included
in
the
framework
The
former
is
the
default
if
no
HandlerMapping
bean
is
registered
in
the
application
context
<p>HandlerMapping
implementations
can
support
mapped
interceptors
but
do
not
have
to
A
handler
will
always
be
wrapped
in
a
HandlerExecutionChain
instance,
optionally
accompanied
by
some
HandlerInterceptor
instances
The
DispatcherServlet
will
first
call
each
HandlerInterceptor's
preHandle
method
in
the
given
order,
finally
invoking
the
handler
itself
if
all
preHandle
methods
have
returned
true
<p>The
ability
to
parameterize
this
mapping
is
a
powerful
and
unusual
capability
of
this
MVC
framework
For
example,
it
is
possible
to
write
a
custom
mapping
based
on
session
state,
cookie
state
or
many
other
variables
No
other
MVC
framework
seems
to
be
equally
flexible
<p>Note:
Implementations
can
implement
the
orgspringframeworkcoreOrdered
interface
to
be
able
to
specify
a
sorting
order
and
thus
a
priority
for
getting
applied
by
DispatcherServlet
Non-Ordered
instances
get
treated
as
lowest
priority
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
the
path
within
the
handler
mapping,
in
case
of
a
pattern
match,
or
the
full
relevant
URI
(typically
within
the
DispatcherServlet's
mapping)
else
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
URL-based
HandlerMappings
will
typically
support
it,
but
handlers
should
not
necessarily
expect
this
request
attribute
to
be
present
in
all
scenarios
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
the
best
matching
pattern
within
the
handler
mapping
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
URL-based
HandlerMappings
will
typically
support
it,
but
handlers
should
not
necessarily
expect
this
request
attribute
to
be
present
in
all
scenarios
:end
:start
Name
of
the
boolean
HttpServletRequest
attribute
that
indicates
whether
type-level
mappings
should
be
inspected
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
the
URI
templates
map,
mapping
variable
names
to
values
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
URL-based
HandlerMappings
will
typically
support
it,
but
handlers
should
not
necessarily
expect
this
request
attribute
to
be
present
in
all
scenarios
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
a
map
with
URI
matrix
variables
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
and
may
also
not
be
present
depending
on
whether
the
HandlerMapping
is
configured
to
keep
matrix
variable
content
in
the
request
URI
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
the
set
of
producible
MediaTypes
applicable
to
the
mapped
handler
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
HandlerMapping
implementations
Handlers
should
not
necessarily
expect
this
request
attribute
to
be
present
in
all
scenarios
:end
:start
Return
a
handler
and
any
interceptors
for
this
request
The
choice
may
be
made
on
request
URL,
session
state,
or
any
factor
the
implementing
class
chooses
<p>The
returned
HandlerExecutionChain
contains
a
handler
Object,
rather
than
even
a
tag
interface,
so
that
handlers
are
not
constrained
in
any
way
For
example,
a
HandlerAdapter
could
be
written
to
allow
another
framework's
handler
objects
to
be
used
<p>Returns
null
if
no
match
was
found
This
is
not
an
error
The
DispatcherServlet
will
query
all
registered
HandlerMapping
beans
to
find
a
match,
and
only
decide
there
is
an
error
if
none
can
find
a
handler
:end
:start
Simple
extension
of
javaxservlethttpHttpServlet
which
treats
its
config
parameters
({@code
init-param
entries
within
the
servlet
tag
in
webxml)
as
bean
properties
<p>A
handy
superclass
for
any
type
of
servlet
Type
conversion
of
config
parameters
is
automatic,
with
the
corresponding
setter
method
getting
invoked
with
the
converted
value
It
is
also
possible
for
subclasses
to
specify
required
properties
Parameters
without
matching
bean
property
setter
will
simply
be
ignored
<p>This
servlet
leaves
request
handling
to
subclasses,
inheriting
the
default
behavior
of
HttpServlet
({@code
doGet,
doPost,
etc)
<p>This
generic
servlet
base
class
has
no
dependency
on
the
Spring
orgspringframeworkcontextApplicationContext
concept
Simple
servlets
usually
don't
load
their
own
context
but
rather
access
service
beans
from
the
Spring
root
application
context,
accessible
via
the
filter's
#getServletContext()
ServletContext
(see
orgspringframeworkwebcontextsupportWebApplicationContextUtils)
<p>The
FrameworkServlet
class
is
a
more
specific
servlet
base
class
which
loads
its
own
application
context
FrameworkServlet
serves
as
direct
base
class
of
Spring's
full-fledged
DispatcherServlet
:end
:start
Logger
available
to
subclasses
:end
:start
Subclasses
can
invoke
this
method
to
specify
that
this
property
(which
must
match
a
JavaBean
property
they
expose)
is
mandatory,
and
must
be
supplied
as
a
config
parameter
This
should
be
called
from
the
constructor
of
a
subclass
<p>This
method
is
only
relevant
in
case
of
traditional
initialization
driven
by
a
ServletConfig
instance
:end
:start
Map
config
parameters
onto
bean
properties
of
this
servlet,
and
invoke
subclass
initialization
:end
:start
Initialize
the
BeanWrapper
for
this
HttpServletBean,
possibly
with
custom
editors
<p>This
default
implementation
is
empty
:end
:start
Overridden
method
that
simply
returns
null
when
no
ServletConfig
set
yet
:end
:start
Overridden
method
that
simply
returns
null
when
no
ServletConfig
set
yet
:end
:start
Subclasses
may
override
this
to
perform
custom
initialization
All
bean
properties
of
this
servlet
will
have
been
set
before
this
method
is
invoked
<p>This
default
implementation
is
empty
:end
:start
:end
:start
<p>If
null,
a
new
environment
will
be
initialized
via
#createEnvironment()
:end
:start
Create
and
return
a
new
StandardServletEnvironment
Subclasses
may
override
in
order
to
configure
the
environment
or
specialize
the
environment
type
returned
:end
:start
Abstract
base
class
for
LocaleContextResolver
implementations
Provides
support
for
a
default
locale
and
a
default
time
zone
<p>Also
provides
pre-implemented
versions
of
#resolveLocale
and
#setLocale,
delegating
to
#resolveLocaleContext
and
#setLocaleContext
:end
:start
Set
a
default
TimeZone
that
this
resolver
will
return
if
no
other
time
zone
found
:end
:start
Return
the
default
TimeZone
that
this
resolver
is
supposed
to
fall
back
to,
if
any
:end
:start
Abstract
base
class
for
LocaleResolver
implementations
Provides
support
for
a
default
locale
:end
:start
Set
a
default
Locale
that
this
resolver
will
return
if
no
other
locale
found
:end
:start
Return
the
default
Locale
that
this
resolver
is
supposed
to
fall
back
to,
if
any
:end
:start
LocaleResolver
implementation
that
simply
uses
the
primary
locale
specified
in
the
"accept-language"
header
of
the
HTTP
request
(that
is,
the
locale
sent
by
the
client
browser,
normally
that
of
the
client's
OS)
<p>Note:
Does
not
support
setLocale,
since
the
accept
header
can
only
be
changed
through
changing
the
client's
locale
settings
:end
:start
LocaleResolver
implementation
that
uses
a
cookie
sent
back
to
the
user
in
case
of
a
custom
setting,
with
a
fallback
to
the
specified
default
locale
or
the
request's
accept-header
locale
<p>This
is
particularly
useful
for
stateless
applications
without
user
sessions
The
cookie
may
optionally
contain
an
associated
time
zone
value
as
well;
alternatively,
you
may
specify
a
default
time
zone
<p>Custom
controllers
can
override
the
user's
locale
and
time
zone
by
calling
#setLocale(Context)
on
the
resolver,
eg
responding
to
a
locale
change
request
As
a
more
convenient
alternative,
consider
using
orgspringframeworkwebservletsupportRequestContext#changeLocale
:end
:start
The
name
of
the
request
attribute
that
holds
the
Locale
<p>Only
used
for
overriding
a
cookie
value
if
the
locale
has
been
changed
in
the
course
of
the
current
request!
<p>Use
RequestContext(Utils)getLocale()
to
retrieve
the
current
locale
in
controllers
or
views
:end
:start
The
name
of
the
request
attribute
that
holds
the
TimeZone
<p>Only
used
for
overriding
a
cookie
value
if
the
locale
has
been
changed
in
the
course
of
the
current
request!
<p>Use
RequestContext(Utils)getTimeZone()
to
retrieve
the
current
time
zone
in
controllers
or
views
:end
:start
The
default
cookie
name
used
if
none
is
explicitly
set
:end
:start
Create
a
new
instance
of
the
CookieLocaleResolver
class
using
the
#DEFAULT_COOKIE_NAME
default
cookie
name
:end
:start
Set
a
fixed
Locale
that
this
resolver
will
return
if
no
cookie
found
:end
:start
Return
the
fixed
Locale
that
this
resolver
will
return
if
no
cookie
found,
if
any
:end
:start
Set
a
fixed
TimeZone
that
this
resolver
will
return
if
no
cookie
found
:end
:start
Return
the
fixed
TimeZone
that
this
resolver
will
return
if
no
cookie
found,
if
any
:end
:start
Determine
the
default
locale
for
the
given
request,
Called
if
no
locale
cookie
has
been
found
<p>The
default
implementation
returns
the
specified
default
locale,
if
any,
else
falls
back
to
the
request's
accept-header
locale
:end
:start
Determine
the
default
time
zone
for
the
given
request,
Called
if
no
TimeZone
cookie
has
been
found
<p>The
default
implementation
returns
the
specified
default
time
zone,
if
any,
or
null
otherwise
:end
:start
orgspringframeworkwebservletLocaleResolver
implementation
that
always
returns
a
fixed
default
locale
and
optionally
time
zone
Default
is
the
current
JVM's
default
locale
<p>Note:
Does
not
support
setLocale(Context),
as
the
fixed
locale
and
time
zone
cannot
be
changed
:end
:start
Create
a
default
FixedLocaleResolver,
exposing
a
configured
default
locale
(or
the
JVM's
default
locale
as
fallback)
:end
:start
Create
a
FixedLocaleResolver
that
exposes
the
given
locale
:end
:start
Create
a
FixedLocaleResolver
that
exposes
the
given
locale
and
time
zone
:end
:start
Interceptor
that
allows
for
changing
the
current
locale
on
every
request,
via
a
configurable
request
parameter
(default
parameter
name:
"locale")
:end
:start
Default
name
of
the
locale
specification
parameter:
"locale"
:end
:start
Set
the
name
of
the
parameter
that
contains
a
locale
specification
in
a
locale
change
request
Default
is
"locale"
:end
:start
Return
the
name
of
the
parameter
that
contains
a
locale
specification
in
a
locale
change
request
:end
:start
orgspringframeworkwebservletLocaleResolver
implementation
that
uses
a
locale
attribute
in
the
user's
session
in
case
of
a
custom
setting,
with
a
fallback
to
the
specified
default
locale
or
the
request's
accept-header
locale
<p>This
is
most
appropriate
if
the
application
needs
user
sessions
anyway,
that
is,
when
the
HttpSession
does
not
have
to
be
created
for
the
locale
The
session
may
optionally
contain
an
associated
time
zone
attribute
as
well;
alternatively,
you
may
specify
a
default
time
zone
<p>Custom
controllers
can
override
the
user's
locale
and
time
zone
by
calling
#setLocale(Context)
on
the
resolver,
eg
responding
to
a
locale
change
request
As
a
more
convenient
alternative,
consider
using
orgspringframeworkwebservletsupportRequestContext#changeLocale
:end
:start
Name
of
the
session
attribute
that
holds
the
Locale
Only
used
internally
by
this
implementation
<p>Use
RequestContext(Utils)getLocale()
to
retrieve
the
current
locale
in
controllers
or
views
:end
:start
Name
of
the
session
attribute
that
holds
the
TimeZone
Only
used
internally
by
this
implementation
<p>Use
RequestContext(Utils)getTimeZone()
to
retrieve
the
current
time
zone
in
controllers
or
views
:end
:start
Determine
the
default
locale
for
the
given
request,
Called
if
no
Locale
session
attribute
has
been
found
<p>The
default
implementation
returns
the
specified
default
locale,
if
any,
else
falls
back
to
the
request's
accept-header
locale
:end
:start
Determine
the
default
time
zone
for
the
given
request,
Called
if
no
TimeZone
session
attribute
has
been
found
<p>The
default
implementation
returns
the
specified
default
time
zone,
if
any,
or
null
otherwise
:end
:start
Extension
of
LocaleResolver,
adding
support
for
a
rich
locale
context
(potentially
including
locale
and
time
zone
information)
:end
:start
Resolve
the
current
locale
context
via
the
given
request
<p>This
is
primarily
intended
for
framework-level
processing;
consider
using
orgspringframeworkwebservletsupportRequestContextUtils
or
orgspringframeworkwebservletsupportRequestContext
for
application-level
access
to
the
current
locale
and/or
time
zone
<p>The
returned
context
may
be
a
orgspringframeworkcontexti18nTimeZoneAwareLocaleContext,
containing
a
locale
with
associated
time
zone
information
Simply
apply
an
instanceof
check
and
downcast
accordingly
<p>Custom
resolver
implementations
may
also
return
extra
settings
in
the
returned
context,
which
again
can
be
accessed
through
downcasting
:end
:start
Set
the
current
locale
context
to
the
given
one,
potentially
including
a
locale
with
associated
time
zone
information
:end
:start
Interface
for
web-based
locale
resolution
strategies
that
allows
for
both
locale
resolution
via
the
request
and
locale
modification
via
request
and
response
<p>This
interface
allows
for
implementations
based
on
request,
session,
cookies,
etc
The
default
implementation
is
orgspringframeworkwebservleti18nAcceptHeaderLocaleResolver,
simply
using
the
request's
locale
provided
by
the
respective
HTTP
header
<p>Use
orgspringframeworkwebservletsupportRequestContext#getLocale()
to
retrieve
the
current
locale
in
controllers
or
views,
independent
of
the
actual
resolution
strategy
<p>Note:
As
of
Spring
40,
there
is
an
extended
strategy
interface
called
LocaleContextResolver,
allowing
for
resolution
of
a
orgspringframeworkcontexti18nLocaleContext
object,
potentially
including
associated
time
zone
information
Spring's
provided
resolver
implementations
implement
the
extended
LocaleContextResolver
interface
wherever
appropriate
:end
:start
Resolve
the
current
locale
via
the
given
request
Can
return
a
default
locale
as
fallback
in
any
case
:end
:start
Set
the
current
locale
to
the
given
one
:end
:start
Holder
for
both
Model
and
View
in
the
web
MVC
framework
Note
that
these
are
entirely
distinct
This
class
merely
holds
both
to
make
it
possible
for
a
controller
to
return
both
model
and
view
in
a
single
return
value
<p>Represents
a
model
and
view
returned
by
a
handler,
to
be
resolved
by
a
DispatcherServlet
The
view
can
take
the
form
of
a
String
view
name
which
will
need
to
be
resolved
by
a
ViewResolver
object;
alternatively
a
View
object
can
be
specified
directly
The
model
is
a
Map,
allowing
the
use
of
multiple
objects
keyed
by
name
:end
:start
Default
constructor
for
bean-style
usage:
populating
bean
properties
instead
of
passing
in
constructor
arguments
:end
:start
Convenient
constructor
when
there
is
no
model
data
to
expose
Can
also
be
used
in
conjunction
with
addObject
:end
:start
Convenient
constructor
when
there
is
no
model
data
to
expose
Can
also
be
used
in
conjunction
with
addObject
:end
:start
Creates
new
ModelAndView
given
a
view
name
and
a
model
:end
:start
Creates
new
ModelAndView
given
a
View
object
and
a
model
<emphasis>Note:
the
supplied
model
data
is
copied
into
the
internal
storage
of
this
class
You
should
not
consider
to
modify
the
supplied
Map
after
supplying
it
to
this
class</emphasis>
:end
:start
Convenient
constructor
to
take
a
single
model
object
:end
:start
Convenient
constructor
to
take
a
single
model
object
:end
:start
Set
a
view
name
for
this
ModelAndView,
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
Will
override
any
pre-existing
view
name
or
View
:end
:start
Return
the
view
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver,
or
null
if
we
are
using
a
View
object
:end
:start
Set
a
View
object
for
this
ModelAndView
Will
override
any
pre-existing
view
name
or
View
:end
:start
Return
the
View
object,
or
null
if
we
are
using
a
view
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
:end
:start
Indicate
whether
or
not
this
ModelAndView
has
a
view,
either
as
a
view
name
or
as
a
direct
View
instance
:end
:start
Return
whether
we
use
a
view
reference,
ie
true
if
the
view
has
been
specified
via
a
name
to
be
resolved
by
the
DispatcherServlet
via
a
ViewResolver
:end
:start
Return
the
model
map
May
return
null
Called
by
DispatcherServlet
for
evaluation
of
the
model
:end
:start
Return
the
underlying
ModelMap
instance
(never
null)
:end
:start
Return
the
model
map
Never
returns
null
To
be
called
by
application
code
for
modifying
the
model
:end
:start
Add
an
attribute
to
the
model
:end
:start
Add
an
attribute
to
the
model
using
parameter
name
generation
:end
:start
Add
all
attributes
contained
in
the
provided
Map
to
the
model
:end
:start
Clear
the
state
of
this
ModelAndView
object
The
object
will
be
empty
afterwards
<p>Can
be
used
to
suppress
rendering
of
a
given
ModelAndView
object
in
the
postHandle
method
of
a
HandlerInterceptor
:end
:start
Return
whether
this
ModelAndView
object
is
empty,
ie
whether
it
does
not
hold
any
view
and
does
not
contain
a
model
:end
:start
Return
whether
this
ModelAndView
object
is
empty
as
a
result
of
a
call
to
#clear
ie
whether
it
does
not
hold
any
view
and
does
not
contain
a
model
<p>Returns
false
if
any
additional
state
was
added
to
the
instance
<strong>after</strong>
the
call
to
#clear
:end
:start
Return
diagnostic
information
about
this
model
and
view
:end
:start
Exception
to
be
thrown
on
error
conditions
that
should
forward
to
a
specific
view
with
a
specific
model
<p>Can
be
thrown
at
any
time
during
handler
processing
This
includes
any
template
methods
of
pre-built
controllers
For
example,
a
form
controller
might
abort
to
a
specific
error
page
if
certain
parameters
do
not
allow
to
proceed
with
the
normal
workflow
:end
:start
Create
new
ModelAndViewDefiningException
with
the
given
ModelAndView,
typically
representing
a
specific
error
page
:end
:start
Return
the
ModelAndView
that
this
exception
contains
for
forwarding
to
:end
:start
<p>Convenient
superclass
for
controller
implementations,
using
the
Template
Method
design
pattern</p>
<p>As
stated
in
the
Controller
Controller
interface,
a
lot
of
functionality
is
already
provided
by
certain
abstract
base
controllers
The
AbstractController
is
one
of
the
most
important
abstract
base
controller
providing
basic
features
such
as
the
generation
of
caching
headers
and
the
enabling
or
disabling
of
supported
methods
(GET/POST)</p>
<p><b><a
name="workflow">Workflow
(<a
href="Controllerhtml#workflow">and
that
defined
by
interface</a>):</b><br>
<ol>
<li>{@link
#handleRequest(HttpServletRequest,
HttpServletResponse)
handleRequest()
will
be
called
by
the
DispatcherServlet</li>
<li>Inspection
of
supported
methods
(ServletException
if
request
method
is
not
support)</li>
<li>If
session
is
required,
try
to
get
it
(ServletException
if
not
found)</li>
<li>Set
caching
headers
if
needed
according
to
the
cacheSeconds
property</li>
<li>Call
abstract
method
#handleRequestInternal(HttpServletRequest,
HttpServletResponse)
handleRequestInternal()
(optionally
synchronizing
around
the
call
on
the
HttpSession),
which
should
be
implemented
by
extending
classes
to
provide
actual
functionality
to
return
orgspringframeworkwebservletModelAndView
ModelAndView
objects</li>
</ol>
</p>
<p><b><a
name="config">Exposed
configuration
properties</a>
(<a
href="Controllerhtml#config">and
those
defined
by
interface</a>):</b><br>
<table
border="1">
<tr>
<td><b>name</b></th>
<td><b>default</b></td>
<td><b>description</b></td>
</tr>
<tr>
<td>supportedMethods</td>
<td>GET,POST</td>
<td>comma-separated
(CSV)
list
of
methods
supported
by
this
controller,
such
as
GET,
POST
and
PUT</td>
</tr>
<tr>
<td>requireSession</td>
<td>false</td>
<td>whether
a
session
should
be
required
for
requests
to
be
able
to
be
handled
by
this
controller
This
ensures
that
derived
controller
can
-
without
fear
of
null
pointers
-
call
requestgetSession()
to
retrieve
a
session
If
no
session
can
be
found
while
processing
the
request,
a
ServletException
will
be
thrown</td>
</tr>
<tr>
<td>cacheSeconds</td>
<td>-1</td>
<td>indicates
the
amount
of
seconds
to
include
in
the
cache
header
for
the
response
following
on
this
request
0
(zero)
will
include
headers
for
no
caching
at
all,
-1
(the
default)
will
not
generate
<i>any
headers</i>
and
any
positive
number
will
generate
headers
that
state
the
amount
indicated
as
seconds
to
cache
the
content</td>
</tr>
<tr>
<td>synchronizeOnSession</td>
<td>false</td>
<td>whether
the
call
to
handleRequestInternal
should
be
synchronized
around
the
HttpSession,
to
serialize
invocations
from
the
same
client
No
effect
if
there
is
no
HttpSession
</td>
</tr>
</table>
:end
:start
Set
if
controller
execution
should
be
synchronized
on
the
session,
to
serialize
parallel
invocations
from
the
same
client
<p>More
specifically,
the
execution
of
the
handleRequestInternal
method
will
get
synchronized
if
this
flag
is
"true"
The
best
available
session
mutex
will
be
used
for
the
synchronization;
ideally,
this
will
be
a
mutex
exposed
by
HttpSessionMutexListener
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
HttpSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Return
whether
controller
execution
should
be
synchronized
on
the
session
:end
:start
Template
method
Subclasses
must
implement
this
The
contract
is
the
same
as
for
handleRequest
:end
:start
Abstract
base
class
for
Controllers
that
return
a
view
name
based
on
the
request
URL
<p>Provides
infrastructure
for
determining
view
names
from
URLs
and
configurable
URL
lookup
For
information
on
the
latter,
see
alwaysUseFullPath
and
urlDecode
properties
:end
:start
Set
if
URL
lookup
should
always
use
full
path
within
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(ie
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
Default
is
"false"
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
:end
:start
Set
if
";"
(semicolon)
content
should
be
stripped
from
the
request
URI
:end
:start
Set
the
UrlPathHelper
to
use
for
the
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
MethodNameResolvers
and
HandlerMappings
:end
:start
Return
the
UrlPathHelper
to
use
for
the
resolution
of
lookup
paths
:end
:start
Retrieves
the
URL
path
to
use
for
lookup
and
delegates
to
#getViewNameForRequest
Also
adds
the
content
of
RequestContextUtils#getInputFlashMap
to
the
model
:end
:start
Return
the
name
of
the
view
to
render
for
this
request,
based
on
the
given
lookup
path
Called
by
#handleRequestInternal
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerAdapter
interface
that
maps
handler
methods
based
on
HTTP
paths,
HTTP
methods
and
request
parameters
expressed
through
the
RequestMapping
annotation
<p>Supports
request
parameter
binding
through
the
RequestParam
annotation
Also
supports
the
ModelAttribute
annotation
for
exposing
model
attribute
values
to
the
view,
as
well
as
InitBinder
for
binder
initialization
methods
and
SessionAttributes
for
automatic
session
management
of
specific
attributes
<p>This
adapter
can
be
customized
through
various
bean
properties
A
common
use
case
is
to
apply
shared
binder
initialization
logic
through
a
custom
#setWebBindingInitializer
WebBindingInitializer
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Set
if
URL
lookup
should
always
use
the
full
path
within
the
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(that
is,
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
<p>Default
is
"false"
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
:end
:start
Set
the
UrlPathHelper
to
use
for
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
HandlerMappings
and
HandlerAdapters
:end
:start
Set
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns
<p>Default
is
orgspringframeworkutilAntPathMatcher
:end
:start
Set
the
MethodNameResolver
to
use
for
resolving
default
handler
methods
(carrying
an
empty
@RequestMapping
annotation)
<p>Will
only
kick
in
when
the
handler
method
cannot
be
resolved
uniquely
through
the
annotation
metadata
already
:end
:start
Specify
a
WebBindingInitializer
which
will
apply
pre-configured
configuration
to
every
DataBinder
that
this
controller
uses
:end
:start
Specify
the
strategy
to
store
session
attributes
with
<p>Default
is
orgspringframeworkwebbindsupportDefaultSessionAttributeStore,
storing
session
attributes
in
the
HttpSession,
using
the
same
attribute
name
as
in
the
model
:end
:start
Cache
content
produced
by
@SessionAttributes
annotated
handlers
for
the
given
number
of
seconds
Default
is
0,
preventing
caching
completely
<p>In
contrast
to
the
"cacheSeconds"
property
which
will
apply
to
all
general
handlers
(but
not
to
@SessionAttributes
annotated
handlers),
this
setting
will
apply
to
@SessionAttributes
annotated
handlers
only
:end
:start
Set
if
controller
execution
should
be
synchronized
on
the
session,
to
serialize
parallel
invocations
from
the
same
client
<p>More
specifically,
the
execution
of
the
handleRequestInternal
method
will
get
synchronized
if
this
flag
is
"true"
The
best
available
session
mutex
will
be
used
for
the
synchronization;
ideally,
this
will
be
a
mutex
exposed
by
HttpSessionMutexListener
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
HttpSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Set
the
ParameterNameDiscoverer
to
use
for
resolving
method
parameter
names
if
needed
(eg
for
default
attribute
names)
<p>Default
is
a
orgspringframeworkcoreDefaultParameterNameDiscoverer
:end
:start
Set
a
custom
WebArgumentResolvers
to
use
for
special
method
parameter
types
<p>Such
a
custom
WebArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
one
or
more
custom
WebArgumentResolvers
to
use
for
special
method
parameter
types
<p>Any
such
custom
WebArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
a
custom
ModelAndViewResolvers
to
use
for
special
method
return
types
<p>Such
a
custom
ModelAndViewResolver
will
kick
in
first,
having
a
chance
to
resolve
a
return
value
before
the
standard
ModelAndView
handling
kicks
in
:end
:start
Set
one
or
more
custom
ModelAndViewResolvers
to
use
for
special
method
return
types
<p>Any
such
custom
ModelAndViewResolver
will
kick
in
first,
having
a
chance
to
resolve
a
return
value
before
the
standard
ModelAndView
handling
kicks
in
:end
:start
Set
the
message
body
converters
to
use
<p>These
converters
are
used
to
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Return
the
message
body
converters
that
this
adapter
has
been
configured
with
:end
:start
Specify
the
order
value
for
this
HandlerAdapter
bean
<p>Default
value
is
IntegerMAX_VALUE,
meaning
that
it's
non-ordered
:end
:start
This
method
always
returns
-1
since
an
annotated
controller
can
have
many
methods,
each
requiring
separate
lastModified
calculations
Instead,
an
RequestMapping-annotated
method
can
calculate
the
lastModified
value,
call
orgspringframeworkwebcontextrequestWebRequest#checkNotModified(long)
to
check
it,
and
return
null
if
that
returns
true
:end
:start
Template
method
for
creating
a
new
ServletRequestDataBinder
instance
<p>The
default
implementation
creates
a
standard
ServletRequestDataBinder
This
can
be
overridden
for
custom
ServletRequestDataBinder
subclasses
:end
:start
Template
method
for
creating
a
new
HttpInputMessage
instance
<p>The
default
implementation
creates
a
standard
ServletServerHttpRequest
This
can
be
overridden
for
custom
HttpInputMessage
implementations
:end
:start
Template
method
for
creating
a
new
HttpOutputMessage
instance
<p>The
default
implementation
creates
a
standard
ServletServerHttpResponse
This
can
be
overridden
for
custom
HttpOutputMessage
implementations
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerExceptionResolver
interface
that
handles
exceptions
through
the
ExceptionHandler
annotation
<p>This
exception
resolver
is
enabled
by
default
in
the
orgspringframeworkwebservletDispatcherServlet
:end
:start
Set
a
custom
ArgumentResolvers
to
use
for
special
method
parameter
types
<p>Such
a
custom
ArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
one
or
more
custom
ArgumentResolvers
to
use
for
special
method
parameter
types
<p>Any
such
custom
ArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
the
message
body
converters
to
use
<p>These
converters
are
used
to
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Returns
all
the
exception
classes
handled
by
the
given
method
<p>The
default
implementation
looks
for
exceptions
in
the
annotation,
or
-
if
that
annotation
element
is
empty
-
any
exceptions
listed
in
the
method
parameters
if
the
method
is
annotated
with
@ExceptionHandler
:end
:start
Resolves
common
method
arguments
Delegates
to
registered
#setCustomArgumentResolver(WebArgumentResolver)
argumentResolvers
first,
then
checking
#resolveStandardArgument
:end
:start
Resolves
standard
method
arguments
The
default
implementation
handles
NativeWebRequest,
ServletRequest,
ServletResponse,
HttpSession,
Principal,
Locale,
request
InputStream,
request
Reader,
response
OutputStream,
response
Writer,
and
the
given
thrownException
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerMapping
interface
that
maps
handlers
based
on
HTTP
paths
expressed
through
the
RequestMapping
annotation
at
the
type
or
method
level
<p>Registered
by
default
in
orgspringframeworkwebservletDispatcherServlet
on
Java
5+
<b>NOTE:</b>
If
you
define
custom
HandlerMapping
beans
in
your
DispatcherServlet
context,
you
need
to
add
a
DefaultAnnotationHandlerMapping
bean
explicitly,
since
custom
HandlerMapping
beans
replace
the
default
mapping
strategies
Defining
a
DefaultAnnotationHandlerMapping
also
allows
for
registering
custom
interceptors:
<pre
class="code">
&lt;bean
class="orgspringframeworkwebservletmvcannotationDefaultAnnotationHandlerMapping"&gt;
&lt;property
name="interceptors"&gt;

&lt;/property&gt;
&lt;/bean&gt;</pre>
Annotated
controllers
are
usually
marked
with
the
Controller
stereotype
at
the
type
level
This
is
not
strictly
necessary
when
RequestMapping
is
applied
at
the
type
level
(since
such
a
handler
usually
implements
the
orgspringframeworkwebservletmvcController
interface)
However,
Controller
is
required
for
detecting
RequestMapping
annotations
at
the
method
level
if
RequestMapping
is
not
present
at
the
type
level
<p><b>NOTE:</b>
Method-level
mappings
are
only
allowed
to
narrow
the
mapping
expressed
at
the
class
level
(if
any)
HTTP
paths
need
to
uniquely
map
onto
specific
handler
beans,
with
any
given
HTTP
path
only
allowed
to
be
mapped
onto
one
specific
handler
bean
(not
spread
across
multiple
handler
beans)
It
is
strongly
recommended
to
co-locate
related
handler
methods
into
the
same
bean
<p>The
AnnotationMethodHandlerAdapter
is
responsible
for
processing
annotated
handler
methods,
as
mapped
by
this
HandlerMapping
For
RequestMapping
at
the
type
level,
specific
HandlerAdapters
such
as
orgspringframeworkwebservletmvcSimpleControllerHandlerAdapter
apply
:end
:start
Set
whether
to
register
paths
using
the
default
suffix
pattern
as
well:
ie
whether
"/users"
should
be
registered
as
"/users*"
and
"/users/"
too
<p>Default
is
"true"
Turn
this
convention
off
if
you
intend
to
interpret
your
@RequestMapping
paths
strictly
<p>Note
that
paths
which
include
a
"xxx"
suffix
or
end
with
"/"
already
will
not
be
transformed
using
the
default
suffix
pattern
in
any
case
:end
:start
Checks
for
presence
of
the
orgspringframeworkwebbindannotationRequestMapping
annotation
on
the
handler
class
and
on
any
of
its
methods
:end
:start
Derive
URL
mappings
from
the
handler's
method-level
mappings
:end
:start
Derive
URL
mappings
from
the
handler's
method-level
mappings
:end
:start
Add
URLs
and/or
URL
patterns
for
the
given
path
:end
:start
Validate
the
given
annotated
handler
against
the
current
request
:end
:start
Validate
the
given
type-level
mapping
metadata
against
the
current
request,
checking
HTTP
request
method
and
parameter
conditions
:end
:start
SPI
for
resolving
custom
return
values
from
a
specific
handler
method
Typically
implemented
to
detect
special
return
types,
resolving
well-known
result
values
for
them
<p>A
typical
implementation
could
look
like
as
follows:
<pre
class="code">
public
class
MyModelAndViewResolver
implements
ModelAndViewResolver
public
ModelAndView
resolveModelAndView(Method
handlerMethod,
Class
handlerType,
Object
returnValue,
ExtendedModelMap
implicitModel,
NativeWebRequest
webRequest)
if
(returnValue
instanceof
MySpecialRetValclass))
return
new
MySpecialRetVal(returnValue);

return
UNRESOLVED;

</pre>
:end
:start
Marker
to
be
returned
when
the
resolver
does
not
know
how
to
handle
the
given
method
parameter
:end
:start
Implementation
of
the
orgspringframeworkwebservletHandlerExceptionResolver
HandlerExceptionResolver
interface
that
uses
the
ResponseStatus
@ResponseStatus
annotation
to
map
exceptions
to
HTTP
status
codes
<p>This
exception
resolver
is
enabled
by
default
in
the
orgspringframeworkwebservletDispatcherServlet
:end
:start
Template
method
that
handles
ResponseStatus
@ResponseStatus
annotation
<p>Default
implementation
send
a
response
error
using
HttpServletResponse#sendError(int),
or
HttpServletResponse#sendError(int,
String)
if
the
annotation
has
a
ResponseStatus#reason()
reason
Returns
an
empty
ModelAndView
:end
:start
A
base
class
for
RequestCondition
types
providing
implementations
of
#equals(Object),
#hashCode(),
and
#toString()
:end
:start
Return
the
discrete
items
a
request
condition
is
composed
of
For
example
URL
patterns,
HTTP
request
methods,
param
expressions,
etc
:end
:start
The
notation
to
use
when
printing
discrete
items
of
content
For
example
"
||
"
for
URL
patterns
or
"
&&
"
for
param
expressions
:end
:start
Implements
the
RequestCondition
contract
by
delegating
to
multiple
RequestCondition
types
and
using
a
logical
conjunction
('
&&
')
to
ensure
all
conditions
match
a
given
request
<p>When
CompositeRequestCondition
instances
are
combined
or
compared
they
are
expected
to
(a)
contain
the
same
number
of
conditions
and
(b)
that
conditions
in
the
respective
index
are
of
the
same
type
It
is
acceptable
to
provide
null
conditions
or
no
conditions
at
all
to
the
constructor
:end
:start
Create
an
instance
with
0
or
more
RequestCondition
types
It
is
important
to
create
CompositeRequestCondition
instances
with
the
same
number
of
conditions
so
they
may
be
compared
and
combined
It
is
acceptable
to
provide
null
conditions
:end
:start
Whether
this
instance
contains
0
conditions
or
not
:end
:start
Return
the
underlying
conditions,
possibly
empty
but
never
null
:end
:start
If
one
instance
is
empty,
return
the
other
If
both
instances
have
conditions,
combine
the
individual
conditions
after
ensuring
they
are
of
the
same
type
and
number
:end
:start
Delegate
to
<em>all</em>
contained
conditions
to
match
the
request
and
return
the
resulting
"matching"
condition
instances
<p>An
empty
CompositeRequestCondition
matches
to
all
requests
:end
:start
If
one
instance
is
empty,
the
other
"wins"
If
both
instances
have
conditions,
compare
them
in
the
order
in
which
they
were
provided
:end
:start
A
logical
disjunction
('
||
')
request
condition
to
match
a
request's
'Content-Type'
header
to
a
list
of
media
type
expressions
Two
kinds
of
media
type
expressions
are
supported,
which
are
described
in
RequestMapping#consumes()
and
RequestMapping#headers()
where
the
header
name
is
'Content-Type'
Regardless
of
which
syntax
is
used,
the
semantics
are
the
same
:end
:start
Creates
a
new
instance
from
0
or
more
"consumes"
expressions
:end
:start
Creates
a
new
instance
with
"consumes"
and
"header"
expressions
"Header"
expressions
where
the
header
name
is
not
'Content-Type'
or
have
no
header
value
defined
are
ignored
If
0
expressions
are
provided
in
total,
the
condition
will
match
to
every
request
:end
:start
Return
the
contained
MediaType
expressions
:end
:start
Returns
the
media
types
for
this
condition
excluding
negated
expressions
:end
:start
Whether
the
condition
has
any
media
type
expressions
:end
:start
Returns
the
"other"
instance
if
it
has
any
expressions;
returns
"this"
instance
otherwise
Practically
that
means
a
method-level
"consumes"
overrides
a
type-level
"consumes"
condition
:end
:start
Checks
if
any
of
the
contained
media
type
expressions
match
the
given
request
'Content-Type'
header
and
returns
an
instance
that
is
guaranteed
to
contain
matching
expressions
only
The
match
is
performed
via
MediaType#includes(MediaType)
:end
:start
Returns:
<ul>
<li>0
if
the
two
conditions
have
the
same
number
of
expressions
<li>Less
than
0
if
"this"
has
more
or
more
specific
media
type
expressions
<li>Greater
than
0
if
"other"
has
more
or
more
specific
media
type
expressions
</ul>
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
and
each
instance
contains
the
matching
consumable
media
type
expression
only
or
is
otherwise
empty
:end
:start
A
logical
conjunction
('
&&
')
request
condition
that
matches
a
request
against
a
set
of
header
expressions
with
syntax
defined
in
RequestMapping#headers()
<p>Expressions
passed
to
the
constructor
with
header
names
'Accept'
or
'Content-Type'
are
ignored
See
ConsumesRequestCondition
and
ProducesRequestCondition
for
those
:end
:start
Create
a
new
instance
from
the
given
header
expressions
Expressions
with
header
names
'Accept'
or
'Content-Type'
are
ignored
See
ConsumesRequestCondition
and
ProducesRequestCondition
for
those
:end
:start
Return
the
contained
request
header
expressions
:end
:start
Returns
a
new
instance
with
the
union
of
the
header
expressions
from
"this"
and
the
"other"
instance
:end
:start
Returns
"this"
instance
if
the
request
matches
all
expressions;
or
null
otherwise
:end
:start
Returns:
<ul>
<li>0
if
the
two
conditions
have
the
same
number
of
header
expressions
<li>Less
than
0
if
"this"
instance
has
more
header
expressions
<li>Greater
than
0
if
the
"other"
instance
has
more
header
expressions
</ul>
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
and
each
instance
contains
the
matching
header
expression
only
or
is
otherwise
empty
:end
:start
A
contract
for
media
type
expressions
(eg
"text/plain",
"!text/plain")
as
defined
in
the
@RequestMapping
annotation
for
"consumes"
and
"produces"
conditions
:end
:start
A
contract
for
"name!=value"
style
expression
used
to
specify
request
parameters
and
request
header
conditions
in
@RequestMapping
:end
:start
A
logical
conjunction
('
&&
')
request
condition
that
matches
a
request
against
a
set
parameter
expressions
with
syntax
defined
in
RequestMapping#params()
:end
:start
Create
a
new
instance
from
the
given
param
expressions
:end
:start
Return
the
contained
request
parameter
expressions
:end
:start
Returns
a
new
instance
with
the
union
of
the
param
expressions
from
"this"
and
the
"other"
instance
:end
:start
Returns
"this"
instance
if
the
request
matches
all
param
expressions;
or
null
otherwise
:end
:start
Returns:
<ul>
<li>0
if
the
two
conditions
have
the
same
number
of
parameter
expressions
<li>Less
than
0
if
"this"
instance
has
more
parameter
expressions
<li>Greater
than
0
if
the
"other"
instance
has
more
parameter
expressions
</ul>
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
and
each
instance
contains
the
matching
parameter
expressions
only
or
is
otherwise
empty
:end
:start
A
logical
disjunction
('
||
')
request
condition
that
matches
a
request
against
a
set
of
URL
path
patterns
:end
:start
Creates
a
new
instance
with
the
given
URL
patterns
Each
pattern
that
is
not
empty
and
does
not
start
with
"/"
is
prepended
with
"/"
:end
:start
Additional
constructor
with
flags
for
using
suffix
pattern
(*)
and
trailing
slash
matches
:end
:start
Creates
a
new
instance
with
the
given
URL
patterns
Each
pattern
that
is
not
empty
and
does
not
start
with
"/"
is
pre-pended
with
"/"
:end
:start
Returns
a
new
instance
with
URL
patterns
from
the
current
instance
("this")
and
the
"other"
instance
as
follows:
<ul>
<li>If
there
are
patterns
in
both
instances,
combine
the
patterns
in
"this"
with
the
patterns
in
"other"
using
PathMatcher#combine(String,
String)
<li>If
only
one
instance
has
patterns,
use
them
<li>If
neither
instance
has
patterns,
use
an
empty
String
(ie
"")
</ul>
:end
:start
Checks
if
any
of
the
patterns
match
the
given
request
and
returns
an
instance
that
is
guaranteed
to
contain
matching
patterns,
sorted
via
PathMatcher#getPatternComparator(String)
<p>A
matching
pattern
is
obtained
by
making
checks
in
the
following
order:
<ul>
<li>Direct
match
<li>Pattern
match
with
"*"
appended
if
the
pattern
doesn't
already
contain
a
""
<li>Pattern
match
<li>Pattern
match
with
"/"
appended
if
the
pattern
doesn't
already
end
in
"/"
</ul>
:end
:start
Find
the
patterns
matching
the
given
lookup
path
Invoking
this
method
should
yield
results
equivalent
to
those
of
calling
#getMatchingCondition(javaxservlethttpHttpServletRequest)
This
method
is
provided
as
an
alternative
to
be
used
if
no
request
is
available
(eg
introspection,
tooling,
etc)
:end
:start
Compare
the
two
conditions
based
on
the
URL
patterns
they
contain
Patterns
are
compared
one
at
a
time,
from
top
to
bottom
via
PathMatcher#getPatternComparator(String)
If
all
compared
patterns
match
equally,
but
one
instance
has
more
patterns,
it
is
considered
a
closer
match
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
to
ensure
they
contain
only
patterns
that
match
the
request
and
are
sorted
with
the
best
matches
on
top
:end
:start
A
logical
disjunction
('
||
')
request
condition
to
match
a
request's
'Accept'
header
to
a
list
of
media
type
expressions
Two
kinds
of
media
type
expressions
are
supported,
which
are
described
in
RequestMapping#produces()
and
RequestMapping#headers()
where
the
header
name
is
'Accept'
Regardless
of
which
syntax
is
used,
the
semantics
are
the
same
:end
:start
Creates
a
new
instance
from
"produces"
expressions
If
0
expressions
are
provided
in
total,
this
condition
will
match
to
any
request
:end
:start
Creates
a
new
instance
with
"produces"
and
"header"
expressions
"Header"
expressions
where
the
header
name
is
not
'Accept'
or
have
no
header
value
defined
are
ignored
If
0
expressions
are
provided
in
total,
this
condition
will
match
to
any
request
:end
:start
Same
as
#ProducesRequestCondition(String[],
String[])
but
also
accepting
a
ContentNegotiationManager
:end
:start
Return
the
contained
"produces"
expressions
:end
:start
Return
the
contained
producible
media
types
excluding
negated
expressions
:end
:start
Whether
the
condition
has
any
media
type
expressions
:end
:start
Returns
the
"other"
instance
if
it
has
any
expressions;
returns
"this"
instance
otherwise
Practically
that
means
a
method-level
"produces"
overrides
a
type-level
"produces"
condition
:end
:start
Checks
if
any
of
the
contained
media
type
expressions
match
the
given
request
'Content-Type'
header
and
returns
an
instance
that
is
guaranteed
to
contain
matching
expressions
only
The
match
is
performed
via
MediaType#isCompatibleWith(MediaType)
:end
:start
Compares
this
and
another
"produces"
condition
as
follows:
<ol>
<li>Sort
'Accept'
header
media
types
by
quality
value
via
MediaType#sortByQualityValue(List)
and
iterate
the
list
<li>Get
the
first
index
of
matching
media
types
in
each
"produces"
condition
first
matching
with
MediaType#equals(Object)
and
then
with
MediaType#includes(MediaType)
<li>If
a
lower
index
is
found,
the
condition
at
that
index
wins
<li>If
both
indexes
are
equal,
the
media
types
at
the
index
are
compared
further
with
MediaType#SPECIFICITY_COMPARATOR
</ol>
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
and
each
instance
contains
the
matching
producible
media
type
expression
only
or
is
otherwise
empty
:end
:start
The
contract
for
request
conditions
in
Spring
MVC's
mapping
infrastructure
<p>Request
conditions
can
be
combined
via
#combine(Object),
matched
to
a
request
via
#getMatchingCondition(HttpServletRequest),
and
compared
to
each
other
via
#compareTo(Object,
HttpServletRequest)
to
determine
which
matches
a
request
more
closely
:end
:start
Defines
the
rules
for
combining
this
condition
(ie
the
current
instance)
with
another
condition
For
example
combining
type-
and
method-level
RequestMapping
conditions
:end
:start
Checks
if
this
condition
matches
the
given
request
and
returns
a
potentially
new
request
condition
with
content
tailored
to
the
current
request
For
example
a
condition
with
URL
patterns
might
return
a
new
condition
that
contains
matching
patterns
sorted
with
best
matching
patterns
on
top
:end
:start
Compares
this
condition
to
another
condition
in
the
context
of
a
specific
request
This
method
assumes
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
to
ensure
they
have
content
relevant
to
current
request
only
:end
:start
A
holder
for
a
RequestCondition
useful
when
the
type
of
the
request
condition
is
not
known
ahead
of
time,
eg
custom
condition
Since
this
class
is
also
an
implementation
of
RequestCondition,
effectively
it
decorates
the
held
request
condition
and
allows
it
to
be
combined
and
compared
with
other
request
conditions
in
a
type
and
null
safe
way
<p>When
two
RequestConditionHolder
instances
are
combined
or
compared
with
each
other,
it
is
expected
the
conditions
they
hold
are
of
the
same
type
If
they
are
not,
a
ClassCastException
is
raised
:end
:start
Create
a
new
holder
to
wrap
the
given
request
condition
:end
:start
Return
the
held
request
condition,
or
null
if
not
holding
one
:end
:start
Combine
the
request
conditions
held
by
the
two
RequestConditionHolder
instances
after
making
sure
the
conditions
are
of
the
same
type
Or
if
one
holder
is
empty,
the
other
holder
is
returned
:end
:start
Get
the
matching
condition
for
the
held
request
condition
wrap
it
in
a
new
RequestConditionHolder
instance
Or
otherwise
if
this
is
an
empty
holder,
return
the
same
holder
instance
:end
:start
Compare
the
request
conditions
held
by
the
two
RequestConditionHolder
instances
after
making
sure
the
conditions
are
of
the
same
type
Or
if
one
holder
is
empty,
the
other
holder
is
preferred
:end
:start
A
logical
disjunction
('
||
')
request
condition
that
matches
a
request
against
a
set
of
RequestMethods
:end
:start
Create
a
new
instance
with
the
given
request
methods
:end
:start
Returns
all
RequestMethods
contained
in
this
condition
:end
:start
Returns
a
new
instance
with
a
union
of
the
HTTP
request
methods
from
"this"
and
the
"other"
instance
:end
:start
Check
if
any
of
the
HTTP
request
methods
match
the
given
request
and
return
an
instance
that
contains
the
matching
HTTP
request
method
only
:end
:start
Returns:
<ul>
<li>0
if
the
two
conditions
contain
the
same
number
of
HTTP
request
methods
<li>Less
than
0
if
"this"
instance
has
an
HTTP
request
method
but
"other"
doesn't
<li>Greater
than
0
"other"
has
an
HTTP
request
method
but
"this"
doesn't
</ul>
<p>It
is
assumed
that
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
and
therefore
each
instance
contains
the
matching
HTTP
request
method
only
or
is
otherwise
empty
:end
:start
Base
Controller
interface,
representing
a
component
that
receives
HttpServletRequest
and
HttpServletResponse
instances
just
like
a
HttpServlet
but
is
able
to
participate
in
an
MVC
workflow
Controllers
are
comparable
to
the
notion
of
a
Struts
Action
<p>Any
implementation
of
the
Controller
interface
should
be
a
<i>reusable,
thread-safe</i>
class,
capable
of
handling
multiple
HTTP
requests
throughout
the
lifecycle
of
an
application
To
be
able
to
configure
a
Controller
easily,
Controller
implementations
are
encouraged
to
be
(and
usually
are)
JavaBeans
</p>
<p><b><a
name="workflow">Workflow</a></b></p>
<p>
After
a
<cde>DispatcherServlet</code>
has
received
a
request
and
has
done
its
work
to
resolve
locales,
themes
and
suchlike,
it
then
tries
to
resolve
a
Controller,
using
a
orgspringframeworkwebservletHandlerMapping
HandlerMapping
When
a
Controller
has
been
found
to
handle
the
request,
the
#handleRequest(HttpServletRequest,
HttpServletResponse)
handleRequest
method
of
the
located
Controller
will
be
invoked;
the
located
Controller
is
then
responsible
for
handling
the
actual
request
and
-
if
applicable
-
returning
an
appropriate
orgspringframeworkwebservletModelAndView
ModelAndView
So
actually,
this
method
is
the
main
entrypoint
for
the
orgspringframeworkwebservletDispatcherServlet
DispatcherServlet
which
delegates
requests
to
controllers</p>
<p>So
basically
any
<i>direct</i>
implementation
of
the
Controller
interface
just
handles
HttpServletRequests
and
should
return
a
ModelAndView,
to
be
further
interpreted
by
the
DispatcherServlet
Any
additional
functionality
such
as
optional
validation,
form
handling,
etc
should
be
obtained
through
extending
one
of
the
abstract
controller
classes
mentioned
above</p>
<p><b>Notes
on
design
and
testing</b></p>
<p>The
Controller
interface
is
explicitly
designed
to
operate
on
HttpServletRequest
and
HttpServletResponse
objects,
just
like
an
HttpServlet
It
does
not
aim
to
decouple
itself
from
the
Servlet
API,
in
contrast
to,
for
example,
WebWork,
JSF
or
Tapestry
Instead,
the
full
power
of
the
Servlet
API
is
available,
allowing
Controllers
to
be
general-purpose:
a
Controller
is
able
to
not
only
handle
web
user
interface
requests
but
also
to
process
remoting
protocols
or
to
generate
reports
on
demand</p>
<p>Controllers
can
easily
be
tested
by
passing
in
mock
objects
for
the
HttpServletRequest
and
HttpServletResponse
objects
as
parameters
to
the
#handleRequest(HttpServletRequest,
HttpServletResponse)
handleRequest
method
As
a
convenience,
Spring
ships
with
a
set
of
Servlet
API
mocks
that
are
suitable
for
testing
any
kind
of
web
components,
but
are
particularly
suitable
for
testing
Spring
web
controllers
In
contrast
to
a
Struts
Action,
there
is
no
need
to
mock
the
ActionServlet
or
any
other
infrastructure;
HttpServletRequest
and
HttpServletResponse
are
sufficient</p>
<p>If
Controllers
need
to
be
aware
of
specific
environment
references,
they
can
choose
to
implement
specific
awareness
interfaces,
just
like
any
other
bean
in
a
Spring
(web)
application
context
can
do,
for
example:</p>
<ul>
<li>{@code
orgspringframeworkcontextApplicationContextAware</li>
<li>{@code
orgspringframeworkcontextResourceLoaderAware</li>
<li>{@code
orgspringframeworkwebcontextServletContextAware</li>
</ul>
<p>Such
environment
references
can
easily
be
passed
in
testing
environments,
through
the
corresponding
setters
defined
in
the
respective
awareness
interfaces
In
general,
it
is
recommended
to
keep
the
dependencies
as
minimal
as
possible:
for
example,
if
all
you
need
is
resource
loading,
implement
ResourceLoaderAware
only
Alternatively,
derive
from
the
WebApplicationObjectSupport
base
class,
which
gives
you
all
those
references
through
convenient
accessors
-
but
requires
an
ApplicationContext
reference
on
initialization
<p>Controllers
can
optionally
implement
the
LastModified
interface
:end
:start
Process
the
request
and
return
a
ModelAndView
object
which
the
DispatcherServlet
will
render
A
null
return
value
is
not
an
error:
It
indicates
that
this
object
completed
request
processing
itself,
thus
there
is
no
ModelAndView
to
render
:end
:start
Adapter
to
use
the
plain
orgspringframeworkwebHttpRequestHandler
interface
with
the
generic
orgspringframeworkwebservletDispatcherServlet
Supports
handlers
that
implement
the
LastModified
interface
<p>This
is
an
SPI
class,
not
used
directly
by
application
code
:end
:start
Supports
last-modified
HTTP
requests
to
facilitate
content
caching
Same
contract
as
for
the
Servlet
API's
getLastModified
method
<p>Delegated
to
by
a
orgspringframeworkwebservletHandlerAdapter#getLastModified
implementation
By
default,
any
Controller
or
HttpRequestHandler
within
Spring's
default
framework
can
implement
this
interface
to
enable
last-modified
checking
<p><b>Note:</b>
Alternative
handler
implementation
approaches
have
different
last-modified
handling
styles
For
example,
Spring
25's
annotated
controller
approach
(using
@RequestMapping)
provides
last-modified
support
through
the
orgspringframeworkwebcontextrequestWebRequest#checkNotModified
method,
allowing
for
last-modified
checking
within
the
main
handler
method
:end
:start
Same
contract
as
for
HttpServlet's
getLastModified
method
Invoked
<b>before</b>
request
processing
<p>The
return
value
will
be
sent
to
the
HTTP
client
as
Last-Modified
header,
and
compared
with
If-Modified-Since
headers
that
the
client
sends
back
The
content
will
only
get
regenerated
if
there
has
been
a
modification
:end
:start
Abstract
base
class
for
HandlerAdapter
implementations
that
support
handlers
of
type
HandlerMethod
:end
:start
Specify
the
order
value
for
this
HandlerAdapter
bean
<p>Default
value
is
IntegerMAX_VALUE,
meaning
that
it's
non-ordered
:end
:start
<p>This
implementation
expects
the
handler
to
be
an
HandlerMethod
:end
:start
Given
a
handler
method,
return
whether
or
not
this
adapter
can
support
it
:end
:start
<p>This
implementation
expects
the
handler
to
be
an
HandlerMethod
:end
:start
Use
the
given
handler
method
to
handle
the
request
:end
:start
<p>This
implementation
expects
the
handler
to
be
an
HandlerMethod
:end
:start
Same
contract
as
for
javaxservlethttpHttpServlet#getLastModified(HttpServletRequest)
:end
:start
A
base
class
for
resolving
method
argument
values
by
reading
from
the
body
of
a
request
with
HttpMessageConverters
:end
:start
Create
the
method
argument
value
of
the
expected
parameter
type
by
reading
from
the
given
request
:end
:start
Create
the
method
argument
value
of
the
expected
parameter
type
by
reading
from
the
given
HttpInputMessage
:end
:start
Create
a
new
HttpInputMessage
from
the
given
NativeWebRequest
:end
:start
Extends
AbstractMessageConverterMethodArgumentResolver
with
the
ability
to
handle
method
return
values
by
writing
to
the
response
with
HttpMessageConverters
:end
:start
Creates
a
new
HttpOutputMessage
from
the
given
NativeWebRequest
:end
:start
Writes
the
given
return
value
to
the
given
web
request
Delegates
to
#writeWithMessageConverters(Object,
MethodParameter,
ServletServerHttpRequest,
ServletServerHttpResponse)
:end
:start
Writes
the
given
return
type
to
the
given
output
message
:end
:start
Returns
the
media
types
that
can
be
produced:
<ul>
<li>The
producible
media
types
specified
in
the
request
mappings,
or
<li>Media
types
of
configured
converters
that
can
write
the
specific
return
value,
or
<li>{@link
MediaType#ALL
</ul>
:end
:start
Handles
return
values
of
type
WebAsyncTask
:end
:start
Handles
return
values
of
type
Callable
:end
:start
Handles
return
values
of
type
DeferredResult
:end
:start
An
AbstractHandlerMethodExceptionResolver
that
resolves
exceptions
through
@ExceptionHandler
methods
<p>Support
for
custom
argument
and
return
value
types
can
be
added
via
#setCustomArgumentResolvers
and
#setCustomReturnValueHandlers
Or
alternatively
to
re-configure
all
argument
and
return
value
types
use
#setArgumentResolvers
and
#setReturnValueHandlers(List)
:end
:start
Default
constructor
:end
:start
Provide
resolvers
for
custom
argument
types
Custom
resolvers
are
ordered
after
built-in
ones
To
override
the
built-in
support
for
argument
resolution
use
#setArgumentResolvers
instead
:end
:start
Return
the
custom
argument
resolvers,
or
null
:end
:start
Configure
the
complete
list
of
supported
argument
types
thus
overriding
the
resolvers
that
would
otherwise
be
configured
by
default
:end
:start
Return
the
configured
argument
resolvers,
or
possibly
null
if
not
initialized
yet
via
#afterPropertiesSet()
:end
:start
Provide
handlers
for
custom
return
value
types
Custom
handlers
are
ordered
after
built-in
ones
To
override
the
built-in
support
for
return
value
handling
use
#setReturnValueHandlers
:end
:start
Return
the
custom
return
value
handlers,
or
null
:end
:start
Configure
the
complete
list
of
supported
return
value
types
thus
overriding
handlers
that
would
otherwise
be
configured
by
default
:end
:start
Return
the
configured
handlers,
or
possibly
null
if
not
initialized
yet
via
#afterPropertiesSet()
:end
:start
Set
the
message
body
converters
to
use
<p>These
converters
are
used
to
convert
from
and
to
HTTP
requests
and
responses
:end
:start
Return
the
configured
message
body
converters
:end
:start
Set
the
ContentNegotiationManager
to
use
to
determine
requested
media
types
If
not
set,
the
default
constructor
is
used
:end
:start
Return
the
configured
ContentNegotiationManager
:end
:start
Return
an
unmodifiable
Map
with
the
ControllerAdvice
@ControllerAdvice
beans
discovered
in
the
ApplicationContext
The
returned
map
will
be
empty
if
the
method
is
invoked
before
the
bean
has
been
initialized
via
#afterPropertiesSet()
:end
:start
Return
the
list
of
argument
resolvers
to
use
including
built-in
resolvers
and
custom
resolvers
provided
via
#setCustomArgumentResolvers
:end
:start
Return
the
list
of
return
value
handlers
to
use
including
built-in
and
custom
handlers
provided
via
#setReturnValueHandlers
:end
:start
Find
an
@ExceptionHandler
method
and
invoke
it
to
handle
the
raised
exception
:end
:start
Find
an
@ExceptionHandler
method
for
the
given
exception
The
default
implementation
searches
methods
in
the
class
hierarchy
of
the
controller
first
and
if
not
found,
it
continues
searching
for
additional
@ExceptionHandler
methods
assuming
some
ControllerAdvice
@ControllerAdvice
Spring-managed
beans
were
detected
:end
:start
Subclass
of
ServletRequestDataBinder
that
adds
URI
template
variables
to
the
values
used
for
data
binding
:end
:start
Create
a
new
instance,
with
default
object
name
:end
:start
Create
a
new
instance
:end
:start
Merge
URI
variables
into
the
property
values
to
use
for
data
binding
:end
:start
Resolves
HttpEntity
method
argument
values
and
also
handles
both
HttpEntity
and
ResponseEntity
return
values
<p>An
HttpEntity
return
type
has
a
set
purpose
Therefore
this
handler
should
be
configured
ahead
of
handlers
that
support
any
return
value
type
annotated
with
@ModelAttribute
or
@ResponseBody
to
ensure
they
don't
take
over
:end
:start
Handles
HttpHeaders
return
values
:end
:start
Resolves
method
arguments
of
type
Map
annotated
with
MatrixVariable
@MatrixVariable
where
the
annotation
the
does
not
specify
a
name
If
a
name
specified
then
the
argument
will
by
resolved
by
the
MatrixVariableMethodArgumentResolver
instead
:end
:start
Resolves
method
arguments
annotated
with
an
MatrixVariable
@PathParam
<p>If
the
method
parameter
is
of
type
Map
and
no
name
is
specified,
then
it
will
by
resolved
by
the
MatrixVariableMapMethodArgumentResolver
instead
:end
:start
Handles
return
values
of
type
ModelAndView
copying
view
and
model
information
to
the
ModelAndViewContainer
<p>If
the
return
value
is
null,
the
ModelAndViewContainer#setRequestHandled(boolean)
flag
is
set
to
true
to
indicate
the
request
was
handled
directly
<p>A
ModelAndView
return
type
has
a
set
purpose
Therefore
this
handler
should
be
configured
ahead
of
handlers
that
support
any
return
value
type
annotated
with
@ModelAttribute
or
@ResponseBody
to
ensure
they
don't
take
over
:end
:start
This
return
value
handler
is
intended
to
be
ordered
after
all
others
as
it
attempts
to
handle
_any_
return
value
type
(ie
returns
true
for
all
return
types)
<p>The
return
value
is
handled
either
with
a
ModelAndViewResolver
or
otherwise
by
regarding
it
as
a
model
attribute
if
it
is
a
non-simple
type
If
neither
of
these
succeeds
(essentially
simple
type
other
than
String),
UnsupportedOperationException
is
raised
<p><strong>Note:</strong>
This
class
is
primarily
needed
to
support
ModelAndViewResolver,
which
unfortunately
cannot
be
properly
adapted
to
the
HandlerMethodReturnValueHandler
contract
since
the
HandlerMethodReturnValueHandler#supportsReturnType
method
cannot
be
implemented
Hence
ModelAndViewResolvers
are
limited
to
always
being
invoked
at
the
end
after
all
other
return
value
handlers
have
been
given
a
chance
It
is
recommended
to
re-implement
a
ModelAndViewResolver
as
HandlerMethodReturnValueHandler,
which
also
provides
better
access
to
the
return
type
and
method
information
:end
:start
Create
a
new
instance
:end
:start
Always
returns
true
See
class-level
note
:end
:start
A
UriComponentsBuilder
that
helps
to
build
URIs
to
Spring
MVC
controllers
and
methods
from
their
request
mappings
:end
:start
Well-known
name
for
the
CompositeUriComponentsContributor
object
in
the
bean
factory
:end
:start
Create
a
UriComponentsBuilder
from
the
mapping
of
a
controller
class
and
current
request
information
including
Servlet
mapping
If
the
controller
contains
multiple
mappings,
only
the
first
one
is
used
:end
:start
Create
a
UriComponentsBuilder
from
the
mapping
of
a
controller
method
and
an
array
of
method
argument
values
This
method
delegates
to
#fromMethod(javalangreflectMethod,
Object)
:end
:start
Create
a
UriComponentsBuilder
by
invoking
a
"mock"
controller
method
The
controller
method
and
the
supplied
argument
values
are
then
used
to
delegate
to
#fromMethod(javalangreflectMethod,
Object)
<p>
For
example
given
this
controller:
<pre
class="code">
&#064;RequestMapping("/people/{id/addresses")
class
AddressController
&#064;RequestMapping("/{country")
public
HttpEntity<Void>
getAddressesForCountry(&#064;PathVariable
String
country)


&#064;RequestMapping(value="/",
method=RequestMethodPOST)
public
void
addAddress(Address
address)



</pre>
A
UriComponentsBuilder
can
be
created:
<pre
class="code">
//
Inline
style
with
static
import
of
"MvcUriComponentsBuilderon"
MvcUriComponentsBuilderfromMethodCall(
on(CustomerControllerclass)showAddresses("US"))buildAndExpand(1);
//
Longer
form
useful
for
repeated
invocation
(and
void
controller
methods)
CustomerController
controller
=
MvcUriComponentsBuilderon(CustomControllerclass);
controlleraddAddress(null);
builder
=
MvcUriComponentsBuilderfromMethodCall(controller);
controllergetAddressesForCountry("US")
builder
=
MvcUriComponentsBuilderfromMethodCall(controller);
</pre>
:end
:start
Create
a
UriComponentsBuilder
from
the
mapping
of
a
controller
method
and
an
array
of
method
argument
values
The
array
of
values
must
match
the
signature
of
the
controller
method
Values
for
@RequestParam
and
@PathVariable
are
used
for
building
the
URI
(via
implementations
of
orgspringframeworkwebmethodsupportUriComponentsContributor)
while
remaining
argument
values
are
ignored
and
can
be
null
:end
:start
Return
a
"mock"
controller
instance
When
an
@RequestMapping
method
on
the
controller
is
invoked,
the
supplied
argument
values
are
remembered
and
the
result
can
then
be
used
to
create
a
UriComponentsBuilder
via
#fromMethodCall(Object)
<p>
Note
that
this
is
a
shorthand
version
of
#controller(Class)
intended
for
inline
use
(with
a
static
import),
for
example:
<pre
class="code">
MvcUriComponentsBuilderfromMethodCall(on(FooControllerclass)getFoo(1))build();
</pre>
:end
:start
Return
a
"mock"
controller
instance
When
an
@RequestMapping
method
on
the
controller
is
invoked,
the
supplied
argument
values
are
remembered
and
the
result
can
then
be
used
to
create
UriComponentsBuilder
via
#fromMethodCall(Object)
<p>
This
is
a
longer
version
of
#on(Class)
It
is
needed
with
controller
methods
returning
void
as
well
for
repeated
invocations
<pre
class="code">
FooController
fooController
=
controller(FooControllerclass);
fooControllersaveFoo(1,
null);
builder
=
MvcUriComponentsBuilderfromMethodCall(fooController);
fooControllersaveFoo(2,
null);
builder
=
MvcUriComponentsBuilderfromMethodCall(fooController);
</pre>
:end
:start
Resolves
Map
method
arguments
annotated
with
an
@{@link
PathVariable
where
the
annotation
does
not
specify
a
path
variable
name
The
created
Map
contains
all
URI
template
name/value
pairs
:end
:start
Return
a
Map
with
all
URI
template
variables
or
an
empty
map
:end
:start
Resolves
method
arguments
annotated
with
an
@{@link
PathVariable
<p>An
@{@link
PathVariable
is
a
named
value
that
gets
resolved
from
a
URI
template
variable
It
is
always
required
and
does
not
have
a
default
value
to
fall
back
on
See
the
base
class
orgspringframeworkwebmethodannotationAbstractNamedValueMethodArgumentResolver
for
more
information
on
how
named
values
are
processed
<p>If
the
method
parameter
type
is
Map,
the
name
specified
in
the
annotation
is
used
to
resolve
the
URI
variable
String
value
The
value
is
then
converted
to
a
Map
via
type
conversion
assuming
a
suitable
Converter
or
PropertyEditor
has
been
registered
Or
if
the
annotation
does
not
specify
name
the
RequestParamMapMethodArgumentResolver
is
used
instead
to
provide
access
to
all
URI
variables
in
a
map
<p>A
WebDataBinder
is
invoked
to
apply
type
conversion
to
resolved
path
variable
values
that
don't
yet
match
the
method
parameter
type
:end
:start
Resolves
method
arguments
of
type
RedirectAttributes
<p>This
resolver
must
be
listed
ahead
of
orgspringframeworkwebmethodannotationModelMethodProcessor
and
orgspringframeworkwebmethodannotationMapMethodProcessor,
which
support
Map
and
Model
arguments
both
of
which
are
"super"
types
of
RedirectAttributes
and
would
also
attempt
to
resolve
a
RedirectAttributes
argument
:end
:start
An
AbstractHandlerMethodAdapter
that
supports
HandlerMethods
with
the
signature
--
method
argument
and
return
types,
defined
in
@RequestMapping
<p>Support
for
custom
argument
and
return
value
types
can
be
added
via
#setCustomArgumentResolvers
and
#setCustomReturnValueHandlers
Or
alternatively
to
re-configure
all
argument
and
return
value
types
use
#setArgumentResolvers
and
#setReturnValueHandlers(List)
:end
:start
MethodFilter
that
matches
InitBinder
@InitBinder
methods
:end
:start
MethodFilter
that
matches
ModelAttribute
@ModelAttribute
methods
:end
:start
Default
constructor
:end
:start
Provide
resolvers
for
custom
argument
types
Custom
resolvers
are
ordered
after
built-in
ones
To
override
the
built-in
support
for
argument
resolution
use
#setArgumentResolvers
instead
:end
:start
Return
the
custom
argument
resolvers,
or
null
:end
:start
Configure
the
complete
list
of
supported
argument
types
thus
overriding
the
resolvers
that
would
otherwise
be
configured
by
default
:end
:start
Return
the
configured
argument
resolvers,
or
possibly
null
if
not
initialized
yet
via
#afterPropertiesSet()
:end
:start
Configure
the
supported
argument
types
in
@InitBinder
methods
:end
:start
Return
the
argument
resolvers
for
@InitBinder
methods,
or
possibly
null
if
not
initialized
yet
via
#afterPropertiesSet()
:end
:start
Provide
handlers
for
custom
return
value
types
Custom
handlers
are
ordered
after
built-in
ones
To
override
the
built-in
support
for
return
value
handling
use
#setReturnValueHandlers
:end
:start
Return
the
custom
return
value
handlers,
or
null
:end
:start
Configure
the
complete
list
of
supported
return
value
types
thus
overriding
handlers
that
would
otherwise
be
configured
by
default
:end
:start
Return
the
configured
handlers,
or
possibly
null
if
not
initialized
yet
via
#afterPropertiesSet()
:end
:start
Provide
custom
ModelAndViewResolvers
<p><strong>Note:</strong>
This
method
is
available
for
backwards
compatibility
only
However,
it
is
recommended
to
re-write
a
ModelAndViewResolver
as
HandlerMethodReturnValueHandler
An
adapter
between
the
two
interfaces
is
not
possible
since
the
HandlerMethodReturnValueHandler#supportsReturnType
method
cannot
be
implemented
Hence
ModelAndViewResolvers
are
limited
to
always
being
invoked
at
the
end
after
all
other
return
value
handlers
have
been
given
a
chance
<p>A
HandlerMethodReturnValueHandler
provides
better
access
to
the
return
type
and
controller
method
information
and
can
be
ordered
freely
relative
to
other
return
value
handlers
:end
:start
Return
the
configured
ModelAndViewResolvers,
or
null
:end
:start
Provide
the
converters
to
use
in
argument
resolvers
and
return
value
handlers
that
support
reading
and/or
writing
to
the
body
of
the
request
and
response
:end
:start
Set
the
ContentNegotiationManager
to
use
to
determine
requested
media
types
If
not
set,
the
default
constructor
is
used
:end
:start
Return
the
configured
message
body
converters
:end
:start
Provide
a
WebBindingInitializer
with
"global"
initialization
to
apply
to
every
DataBinder
instance
:end
:start
Return
the
configured
WebBindingInitializer,
or
null
:end
:start
Set
the
default
AsyncTaskExecutor
to
use
when
a
controller
method
return
a
Callable
Controller
methods
can
override
this
default
on
a
per-request
basis
by
returning
an
WebAsyncTask
<p>By
default
a
SimpleAsyncTaskExecutor
instance
is
used
It's
recommended
to
change
that
default
in
production
as
the
simple
executor
does
not
re-use
threads
:end
:start
Specify
the
amount
of
time,
in
milliseconds,
before
concurrent
handling
should
time
out
In
Servlet
3,
the
timeout
begins
after
the
main
request
processing
thread
has
exited
and
ends
when
the
request
is
dispatched
again
for
further
processing
of
the
concurrently
produced
result
<p>If
this
value
is
not
set,
the
default
timeout
of
the
underlying
implementation
is
used,
eg
10
seconds
on
Tomcat
with
Servlet
3
:end
:start
Configure
CallableProcessingInterceptor's
to
register
on
async
requests
:end
:start
Configure
DeferredResultProcessingInterceptor's
to
register
on
async
requests
:end
:start
By
default
the
content
of
the
"default"
model
is
used
both
during
rendering
and
redirect
scenarios
Alternatively
a
controller
method
can
declare
a
RedirectAttributes
argument
and
use
it
to
provide
attributes
for
a
redirect
<p>Setting
this
flag
to
true
guarantees
the
"default"
model
is
never
used
in
a
redirect
scenario
even
if
a
RedirectAttributes
argument
is
not
declared
Setting
it
to
false
means
the
"default"
model
may
be
used
in
a
redirect
if
the
controller
method
doesn't
declare
a
RedirectAttributes
argument
<p>The
default
setting
is
false
but
new
applications
should
consider
setting
it
to
true
:end
:start
Specify
the
strategy
to
store
session
attributes
with
The
default
is
orgspringframeworkwebbindsupportDefaultSessionAttributeStore,
storing
session
attributes
in
the
HttpSession
with
the
same
attribute
name
as
in
the
model
:end
:start
Cache
content
produced
by
@SessionAttributes
annotated
handlers
for
the
given
number
of
seconds
Default
is
0,
preventing
caching
completely
<p>In
contrast
to
the
"cacheSeconds"
property
which
will
apply
to
all
general
handlers
(but
not
to
@SessionAttributes
annotated
handlers),
this
setting
will
apply
to
@SessionAttributes
handlers
only
:end
:start
Set
if
controller
execution
should
be
synchronized
on
the
session,
to
serialize
parallel
invocations
from
the
same
client
<p>More
specifically,
the
execution
of
the
handleRequestInternal
method
will
get
synchronized
if
this
flag
is
"true"
The
best
available
session
mutex
will
be
used
for
the
synchronization;
ideally,
this
will
be
a
mutex
exposed
by
HttpSessionMutexListener
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
HttpSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Set
the
ParameterNameDiscoverer
to
use
for
resolving
method
parameter
names
if
needed
(eg
for
default
attribute
names)
<p>Default
is
a
orgspringframeworkcoreDefaultParameterNameDiscoverer
:end
:start
<p>A
ConfigurableBeanFactory
is
expected
for
resolving
expressions
in
method
argument
default
values
:end
:start
Return
the
owning
factory
of
this
bean
instance,
or
null
:end
:start
Always
return
true
since
any
method
argument
and
return
value
type
will
be
processed
in
some
way
A
method
argument
not
recognized
by
any
HandlerMethodArgumentResolver
is
interpreted
as
a
request
parameter
if
it
is
a
simple
type,
or
as
a
model
attribute
otherwise
A
return
value
not
recognized
by
any
HandlerMethodReturnValueHandler
will
be
interpreted
as
a
model
attribute
:end
:start
This
implementation
always
returns
-1
An
@RequestMapping
method
can
calculate
the
lastModified
value,
call
WebRequest#checkNotModified(long),
and
return
null
if
the
result
of
that
call
is
true
:end
:start
Template
method
to
create
a
new
InitBinderDataBinderFactory
instance
<p>The
default
implementation
creates
a
ServletRequestDataBinderFactory
This
can
be
overridden
for
custom
ServletRequestDataBinder
subclasses
:end
:start
Creates
RequestMappingInfo
instances
from
type
and
method-level
RequestMapping
@RequestMapping
annotations
in
Controller
@Controller
classes
:end
:start
Whether
to
use
suffix
pattern
match
("*")
when
matching
patterns
to
requests
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users*"
<p>The
default
value
is
true
<p>Also
see
#setUseRegisteredSuffixPatternMatch(boolean)
for
more
fine-grained
control
over
specific
suffixes
to
allow
:end
:start
Whether
to
use
suffix
pattern
match
for
registered
file
extensions
only
when
matching
patterns
to
requests
<p>If
enabled,
a
controller
method
mapped
to
"/users"
also
matches
to
"/usersjson"
assuming
"json"
is
a
file
extension
registered
with
the
provided
#setContentNegotiationManager(ContentNegotiationManager)
contentNegotiationManager
This
can
be
useful
for
allowing
only
specific
URL
extensions
to
be
used
as
well
as
in
cases
where
a
""
in
the
URL
path
can
lead
to
ambiguous
interpretation
of
path
variable
content,
(eg
given
"/users/{user"
and
incoming
URLs
such
as
"/users/johnjjoe"
and
"/users/johnjjoejson")
<p>If
enabled,
this
flag
also
enables
#setUseSuffixPatternMatch(boolean)
useSuffixPatternMatch
The
default
value
is
false
:end
:start
Whether
to
match
to
URLs
irrespective
of
the
presence
of
a
trailing
slash
If
enabled
a
method
mapped
to
"/users"
also
matches
to
"/users/"
<p>The
default
value
is
true
:end
:start
Set
the
ContentNegotiationManager
to
use
to
determine
requested
media
types
If
not
set,
the
default
constructor
is
used
:end
:start
Whether
to
use
suffix
pattern
matching
:end
:start
Whether
to
use
registered
suffixes
for
pattern
matching
:end
:start
Whether
to
match
to
URLs
irrespective
of
the
presence
of
a
trailing
slash
:end
:start
Return
the
configured
ContentNegotiationManager
:end
:start
Return
the
file
extensions
to
use
for
suffix
pattern
matching
:end
:start
Expects
a
handler
to
have
a
type-level
@{@link
Controller
annotation
:end
:start
Uses
method
and
type-level
@{@link
RequestMapping
annotations
to
create
the
RequestMappingInfo
:end
:start
Provide
a
custom
type-level
request
condition
The
custom
RequestCondition
can
be
of
any
type
so
long
as
the
same
condition
type
is
returned
from
all
calls
to
this
method
in
order
to
ensure
custom
request
conditions
can
be
combined
and
compared
<p>Consider
extending
AbstractRequestCondition
for
custom
condition
types
and
using
CompositeRequestCondition
to
provide
multiple
custom
conditions
:end
:start
Provide
a
custom
method-level
request
condition
The
custom
RequestCondition
can
be
of
any
type
so
long
as
the
same
condition
type
is
returned
from
all
calls
to
this
method
in
order
to
ensure
custom
request
conditions
can
be
combined
and
compared
<p>Consider
extending
AbstractRequestCondition
for
custom
condition
types
and
using
CompositeRequestCondition
to
provide
multiple
custom
conditions
:end
:start
Created
a
RequestMappingInfo
from
a
RequestMapping
annotation
:end
:start
Resolve
placeholder
values
in
the
given
array
of
patterns
:end
:start
Resolves
the
following
method
arguments:
<ul>
<li>Annotated
with
@RequestPart
<li>Of
type
MultipartFile
in
conjunction
with
Spring's
MultipartResolver
abstraction
<li>Of
type
javaxservlethttpPart
in
conjunction
with
Servlet
30
multipart
requests
</ul>
<p>When
a
parameter
is
annotated
with
@RequestPart,
the
content
of
the
part
is
passed
through
an
HttpMessageConverter
to
resolve
the
method
argument
with
the
'Content-Type'
of
the
request
part
in
mind
This
is
analogous
to
what
@{@link
RequestBody
does
to
resolve
an
argument
based
on
the
content
of
a
regular
request
<p>When
a
parameter
is
not
annotated
or
the
name
of
the
part
is
not
specified,
it
is
derived
from
the
name
of
the
method
argument
<p>Automatic
validation
may
be
applied
if
the
argument
is
annotated
with
@javaxvalidationValid
In
case
of
validation
failure,
a
MethodArgumentNotValidException
is
raised
and
a
400
response
status
code
returned
if
DefaultHandlerExceptionResolver
is
configured
:end
:start
Supports
the
following:
<ul>
<li>Annotated
with
@RequestPart
<li>Of
type
MultipartFile
unless
annotated
with
@RequestParam
<li>Of
type
javaxservlethttpPart
unless
annotated
with
@RequestParam
</ul>
:end
:start
Resolves
method
arguments
annotated
with
@RequestBody
and
handles
return
values
from
methods
annotated
with
@ResponseBody
by
reading
and
writing
to
the
body
of
the
request
or
response
with
an
HttpMessageConverter
<p>An
@RequestBody
method
argument
is
also
validated
if
it
is
annotated
with
@javaxvalidationValid
In
case
of
validation
failure,
MethodArgumentNotValidException
is
raised
and
results
in
a
400
response
status
code
if
DefaultHandlerExceptionResolver
is
configured
:end
:start
:end
:start
A
convenient
base
class
for
ControllerAdvice
@ControllerAdvice
classes
that
wish
to
provide
centralized
exception
handling
across
all
@RequestMapping
methods
through
@ExceptionHandler
methods
<p>This
base
class
provides
an
@ExceptionHandler
for
handling
standard
Spring
MVC
exceptions
that
returns
a
ResponseEntity
to
be
written
with
HttpMessageConverter
message
converters
This
is
in
contrast
to
orgspringframeworkwebservletmvcsupportDefaultHandlerExceptionResolver
DefaultHandlerExceptionResolver
which
returns
a
ModelAndView
instead
<p>If
there
is
no
need
to
write
error
content
to
the
response
body,
or
if
using
view
resolution,
eg
ContentNegotiatingViewResolver,
then
use
DefaultHandlerExceptionResolver
instead
<p>Note
that
in
order
for
an
@ControllerAdvice
sub-class
to
be
detected,
ExceptionHandlerExceptionResolver
must
be
configured
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Provides
handling
for
standard
Spring
MVC
exceptions
:end
:start
A
single
place
to
customize
the
response
body
of
all
Exception
types
This
method
returns
null
by
default
:end
:start
Customize
the
response
for
NoSuchRequestHandlingMethodException
This
method
logs
a
warning
and
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
HttpRequestMethodNotSupportedException
This
method
logs
a
warning,
sets
the
"Allow"
header,
and
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
HttpMediaTypeNotSupportedException
This
method
sets
the
"Accept"
header
and
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
HttpMediaTypeNotAcceptableException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
MissingServletRequestParameterException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
ServletRequestBindingException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
ConversionNotSupportedException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
TypeMismatchException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
HttpMessageNotReadableException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
HttpMessageNotWritableException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
MethodArgumentNotValidException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
MissingServletRequestPartException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
BindException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
Customize
the
response
for
NoHandlerFoundException
This
method
delegates
to
#handleExceptionInternal(Exception,
Object,
HttpHeaders,
HttpStatus,
WebRequest)
:end
:start
An
orgspringframeworkwebmethodannotationAbstractCookieValueMethodArgumentResolver
that
resolves
cookie
values
from
an
HttpServletRequest
:end
:start
Extends
InvocableHandlerMethod
with
the
ability
to
handle
return
values
through
a
registered
HandlerMethodReturnValueHandler
and
also
supports
setting
the
response
status
based
on
a
method-level
@ResponseStatus
annotation
<p>A
null
return
value
(including
void)
may
be
interpreted
as
the
end
of
request
processing
in
combination
with
a
@ResponseStatus
annotation,
a
not-modified
check
condition
(see
ServletWebRequest#checkNotModified(long)),
or
a
method
argument
that
provides
access
to
the
response
stream
:end
:start
Creates
an
instance
from
the
given
handler
and
method
:end
:start
Create
an
instance
from
a
HandlerMethod
:end
:start
Register
HandlerMethodReturnValueHandler
instances
to
use
to
handle
return
values
:end
:start
Invokes
the
method
and
handles
the
return
value
through
a
registered
HandlerMethodReturnValueHandler
:end
:start
A
Servlet-specific
orgspringframeworkwebmethodannotationModelAttributeMethodProcessor
that
applies
data
binding
through
a
WebDataBinder
of
type
ServletRequestDataBinder
<p>Also
adds
a
fall-back
strategy
to
instantiate
the
model
attribute
from
a
URI
template
variable
or
from
a
request
parameter
if
the
name
matches
the
model
attribute
name
and
there
is
an
appropriate
type
conversion
strategy
:end
:start
Instantiate
the
model
attribute
from
a
URI
template
variable
or
from
a
request
parameter
if
the
name
matches
to
the
model
attribute
name
and
if
there
is
an
appropriate
type
conversion
strategy
If
none
of
these
are
true
delegate
back
to
the
base
class
:end
:start
Obtain
a
value
from
the
request
that
may
be
used
to
instantiate
the
model
attribute
through
type
conversion
from
String
to
the
target
type
<p>The
default
implementation
looks
for
the
attribute
name
to
match
a
URI
variable
first
and
then
a
request
parameter
:end
:start
Create
a
model
attribute
from
a
String
request
value
(eg
URI
template
variable,
request
parameter)
using
type
conversion
<p>The
default
implementation
converts
only
if
there
a
registered
Converter
that
can
perform
the
conversion
:end
:start
<p>Downcast
WebDataBinder
to
ServletRequestDataBinder
before
binding
:end
:start
Creates
a
ServletRequestDataBinder
:end
:start
Create
a
new
instance
:end
:start
Returns
an
instance
of
ExtendedServletRequestDataBinder
:end
:start
Resolves
request-related
method
argument
values
of
the
following
types:
<ul>
<li>{@link
WebRequest
<li>{@link
ServletRequest
<li>{@link
MultipartRequest
<li>{@link
HttpSession
<li>{@link
Principal
<li>{@link
Locale
<li>{@link
TimeZone
(as
of
Spring
40)
<li>{@link
javatimeZoneId
(as
of
Spring
40
and
Java
8)</li>
<li>{@link
InputStream
<li>{@link
Reader
<li>{@link
orgspringframeworkhttpHttpMethod
(as
of
Spring
40)</li>
</ul>
:end
:start
Resolves
response-related
method
argument
values
of
types:
<ul>
<li>{@link
ServletResponse
<li>{@link
OutputStream
<li>{@link
Writer
</ul>
:end
:start
Set
ModelAndViewContainer#setRequestHandled(boolean)
to
false
to
indicate
that
the
method
signature
provides
access
to
the
response
If
subsequently
the
underlying
method
returns
null,
the
request
is
considered
directly
handled
:end
:start
A
Servlet-specific
orgspringframeworkwebmethodannotationAbstractWebArgumentResolverAdapter
that
creates
a
NativeWebRequest
from
ServletRequestAttributes
<p><strong>Note:</strong>
This
class
is
provided
for
backwards
compatibility
However
it
is
recommended
to
re-write
a
WebArgumentResolver
as
HandlerMethodArgumentResolver
For
more
details
see
javadoc
of
orgspringframeworkwebmethodannotationAbstractWebArgumentResolverAdapter
:end
:start
Resolvers
argument
values
of
type
UriComponentsBuilder
<p>The
returned
instance
is
initialized
via
ServletUriComponentsBuilder#fromServletMapping(HttpServletRequest)
:end
:start
Handles
return
values
that
are
of
type
View
<p>A
null
return
value
is
left
as-is
leaving
it
to
the
configured
RequestToViewNameTranslator
to
select
a
view
name
by
convention
<p>A
View
return
type
has
a
set
purpose
Therefore
this
handler
should
be
configured
ahead
of
handlers
that
support
any
return
value
type
annotated
with
@ModelAttribute
or
@ResponseBody
to
ensure
they
don't
take
over
:end
:start
Handles
return
values
of
types
void
and
String
interpreting
them
as
view
name
reference
<p>A
null
return
value,
either
due
to
a
void
return
type
or
as
the
actual
return
value
is
left
as-is
allowing
the
configured
RequestToViewNameTranslator
to
select
a
view
name
by
convention
<p>A
String
return
value
can
be
interpreted
in
more
than
one
ways
depending
on
the
presence
of
annotations
like
@ModelAttribute
or
@ResponseBody
Therefore
this
handler
should
be
configured
after
the
handlers
that
support
these
annotations
:end
:start
Whether
the
given
view
name
is
a
redirect
view
reference
:end
:start
Encapsulates
the
following
request
mapping
conditions:
<ol>
<li>{@link
PatternsRequestCondition
<li>{@link
RequestMethodsRequestCondition
<li>{@link
ParamsRequestCondition
<li>{@link
HeadersRequestCondition
<li>{@link
ConsumesRequestCondition
<li>{@link
ProducesRequestCondition
<li>{@code
RequestCondition
(optional,
custom
request
condition)
</ol>
:end
:start
Creates
a
new
instance
with
the
given
request
conditions
:end
:start
Re-create
a
RequestMappingInfo
with
the
given
custom
request
condition
:end
:start
Returns
the
URL
patterns
of
this
RequestMappingInfo;
or
instance
with
0
patterns,
never
null
:end
:start
Returns
the
HTTP
request
methods
of
this
RequestMappingInfo;
or
instance
with
0
request
methods,
never
null
:end
:start
Returns
the
"parameters"
condition
of
this
RequestMappingInfo;
or
instance
with
0
parameter
expressions,
never
null
:end
:start
Returns
the
"headers"
condition
of
this
RequestMappingInfo;
or
instance
with
0
header
expressions,
never
null
:end
:start
Returns
the
"consumes"
condition
of
this
RequestMappingInfo;
or
instance
with
0
consumes
expressions,
never
null
:end
:start
Returns
the
"produces"
condition
of
this
RequestMappingInfo;
or
instance
with
0
produces
expressions,
never
null
:end
:start
Returns
the
"custom"
condition
of
this
RequestMappingInfo;
or
null
:end
:start
Combines
"this"
request
mapping
info
(ie
the
current
instance)
with
another
request
mapping
info
instance
<p>Example:
combine
type-
and
method-level
request
mappings
:end
:start
Checks
if
all
conditions
in
this
request
mapping
info
match
the
provided
request
and
returns
a
potentially
new
request
mapping
info
with
conditions
tailored
to
the
current
request
<p>For
example
the
returned
instance
may
contain
the
subset
of
URL
patterns
that
match
to
the
current
request,
sorted
with
best
matching
patterns
on
top
:end
:start
Compares
"this"
info
(ie
the
current
instance)
with
another
info
in
the
context
of
a
request
<p>Note:
It
is
assumed
both
instances
have
been
obtained
via
#getMatchingCondition(HttpServletRequest)
to
ensure
they
have
conditions
with
content
relevant
to
current
request
:end
:start
Abstract
base
class
for
classes
for
which
RequestMappingInfo
defines
the
mapping
between
a
request
and
a
handler
method
:end
:start
Get
the
URL
path
patterns
associated
with
this
RequestMappingInfo
:end
:start
Check
if
the
given
RequestMappingInfo
matches
the
current
request
and
return
a
(potentially
new)
instance
with
conditions
that
match
the
current
request
--
for
example
with
a
subset
of
URL
patterns
:end
:start
Provide
a
Comparator
to
sort
RequestMappingInfos
matched
to
a
request
:end
:start
Expose
URI
template
variables,
matrix
variables,
and
producible
media
types
in
the
request
:end
:start
Iterate
all
RequestMappingInfos
once
again,
look
if
any
match
by
URL
at
least
and
raise
exceptions
accordingly
:end
:start
Abstract
base
class
for
URL-based
MethodNameResolver
implementations
<p>Provides
infrastructure
for
mapping
handlers
to
URLs
and
configurable
URL
lookup
For
information
on
the
latter,
see
the
#setAlwaysUseFullPath
"alwaysUseFullPath"
and
#setUrlDecode
"urlDecode"
properties
:end
:start
Logger
available
to
subclasses
:end
:start
Set
if
URL
lookup
should
always
use
full
path
within
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(ie
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
Default
is
"false"
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
:end
:start
Set
the
UrlPathHelper
to
use
for
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
MethodNameResolvers
and
HandlerMappings
:end
:start
Retrieves
the
URL
path
to
use
for
lookup
and
delegates
to
getHandlerMethodNameForUrlPath
Converts
null
values
to
NoSuchRequestHandlingMethodExceptions
:end
:start
Return
a
method
name
that
can
handle
this
request,
based
on
the
given
lookup
path
Called
by
getHandlerMethodName
:end
:start
Simple
implementation
of
MethodNameResolver
that
maps
URL
to
method
name
Although
this
is
the
default
implementation
used
by
the
MultiActionController
class
(because
it
requires
no
configuration),
it's
bit
naive
for
most
applications
In
particular,
we
don't
usually
want
to
tie
URL
to
implementation
methods
<p>Maps
the
resource
name
after
the
last
slash,
ignoring
an
extension
Eg
"/foo/bar/bazhtml"
to
"baz",
assuming
a
"/foo/bar/bazhtml"
controller
mapping
to
the
corresponding
MultiActionController
handler
method
Doesn't
support
wildcards
:end
:start
Specify
a
common
prefix
for
handler
method
names
Will
be
prepended
to
the
internal
path
found
in
the
URL:
eg
internal
path
"baz",
prefix
"my"
->
method
name
"mybaz"
:end
:start
Return
the
common
prefix
for
handler
method
names
:end
:start
Specify
a
common
suffix
for
handler
method
names
Will
be
appended
to
the
internal
path
found
in
the
URL:
eg
internal
path
"baz",
suffix
"Handler"
->
method
name
"bazHandler"
:end
:start
Return
the
common
suffix
for
handler
method
names
:end
:start
Extracts
the
method
name
indicated
by
the
URL
path
:end
:start
Extract
the
handler
method
name
from
the
given
request
URI
Delegates
to
WebUtilsextractViewNameFromUrlPath(String)
:end
:start
Build
the
full
handler
method
name
based
on
the
given
method
name
as
indicated
by
the
URL
path
<p>The
default
implementation
simply
applies
prefix
and
suffix
This
can
be
overridden,
for
example,
to
manipulate
upper
case
/
lower
case,
etc
:end
:start
Interface
that
parameterizes
the
MultiActionController
class
using
the
<b>Strategy</b>
GoF
Design
pattern,
allowing
the
mapping
from
incoming
request
to
handler
method
name
to
be
varied
without
affecting
other
application
code
<p>Illustrates
how
delegation
can
be
more
flexible
than
subclassing
:end
:start
Return
a
method
name
that
can
handle
this
request
Such
mappings
are
typically,
but
not
necessarily,
based
on
URL
:end
:start
orgspringframeworkwebservletmvcController
Controller
implementation
that
allows
multiple
request
types
to
be
handled
by
the
same
class
Subclasses
of
this
class
can
handle
several
different
types
of
request
with
methods
of
the
form
<pre
class="code">public
(ModelAndView
|
Map
|
String
|
void)
actionName(HttpServletRequest
request,
HttpServletResponse
response,
[,HttpSession]
[,AnyObject]);</pre>
A
Map
return
value
indicates
a
model
that
is
supposed
to
be
passed
to
a
default
view
(determined
through
a
orgspringframeworkwebservletRequestToViewNameTranslator)
A
String
return
value
indicates
the
name
of
a
view
to
be
rendered
without
a
specific
model
<p>May
take
a
third
parameter
(of
type
HttpSession)
in
which
an
existing
session
will
be
required,
or
a
third
parameter
of
an
arbitrary
class
that
gets
treated
as
the
command
(that
is,
an
instance
of
the
class
gets
created,
and
request
parameters
get
bound
to
it)
<p>These
methods
can
throw
any
kind
of
exception,
but
should
only
let
propagate
those
that
they
consider
fatal,
or
which
their
class
or
superclass
is
prepared
to
catch
by
implementing
an
exception
handler
<p>When
returning
just
a
Map
instance
view
name
translation
will
be
used
to
generate
the
view
name
The
configured
orgspringframeworkwebservletRequestToViewNameTranslator
will
be
used
to
determine
the
view
name
<p>When
returning
void
a
return
value
of
null
is
assumed
meaning
that
the
handler
method
is
responsible
for
writing
the
response
directly
to
the
supplied
HttpServletResponse
<p>This
model
allows
for
rapid
coding,
but
loses
the
advantage
of
compile-time
checking
It
is
similar
to
a
Struts
DispatchAction,
but
more
sophisticated
Also
supports
delegation
to
another
object
<p>An
implementation
of
the
MethodNameResolver
interface
defined
in
this
package
should
return
a
method
name
for
a
given
request,
based
on
any
aspect
of
the
request,
such
as
its
URL
or
an
"action"
parameter
The
actual
strategy
can
be
configured
via
the
"methodNameResolver"
bean
property,
for
each
MultiActionController
<p>The
default
MethodNameResolver
is
InternalPathMethodNameResolver;
further
included
strategies
are
PropertiesMethodNameResolver
and
ParameterMethodNameResolver
<p>Subclasses
can
implement
custom
exception
handler
methods
with
names
such
as:
<pre
class="code">public
ModelAndView
anyMeaningfulName(HttpServletRequest
request,
HttpServletResponse
response,
ExceptionClass
exception);</pre>
The
third
parameter
can
be
any
subclass
or
Exception
or
RuntimeException
<p>There
can
also
be
an
optional
xxxLastModified
method
for
handlers,
of
signature:
<pre
class="code">public
long
anyMeaningfulNameLastModified(HttpServletRequest
request)</pre>
If
such
a
method
is
present,
it
will
be
invoked
Default
return
from
getLastModified
is
-1,
meaning
that
the
content
must
always
be
regenerated
<p><b>Note
that
all
handler
methods
need
to
be
public
and
that
method
overloading
is
<i>not</i>
allowed</b>
<p>See
also
the
description
of
the
workflow
performed
by
AbstractController
the
superclass
(in
that
section
of
the
class
level
Javadoc
entitled
'workflow')
<p><b>Note:</b>
For
maximum
data
binding
flexibility,
consider
direct
usage
of
a
ServletRequestDataBinder
in
your
controller
method,
instead
of
relying
on
a
declared
command
argument
This
allows
for
full
control
over
the
entire
binder
setup
and
usage,
including
the
invocation
of
Validator
Validators
and
the
subsequent
evaluation
of
binding/validation
errors
:end
:start
Suffix
for
last-modified
methods
:end
:start
Default
command
name
used
for
binding
command
objects:
"command"
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Constructor
for
MultiActionController
that
looks
for
handler
methods
in
the
present
subclass
:end
:start
Constructor
for
MultiActionController
that
looks
for
handler
methods
in
delegate,
rather
than
a
subclass
of
this
class
:end
:start
Set
the
delegate
used
by
this
class;
the
default
is
this,
assuming
that
handler
methods
have
been
added
by
a
subclass
<p>This
method
does
not
get
invoked
once
the
class
is
configured
:end
:start
Set
the
method
name
resolver
that
this
class
should
use
<p>Allows
parameterization
of
handler
method
mappings
:end
:start
Return
the
MethodNameResolver
used
by
this
class
:end
:start
Set
the
Validator
Validators
for
this
controller
<p>The
Validators
must
support
the
specified
command
class
:end
:start
Return
the
Validators
for
this
controller
:end
:start
Specify
a
WebBindingInitializer
which
will
apply
pre-configured
configuration
to
every
DataBinder
that
this
controller
uses
<p>Allows
for
factoring
out
the
entire
binder
configuration
to
separate
objects,
as
an
alternative
to
#initBinder
:end
:start
Return
the
WebBindingInitializer
(if
any)
which
will
apply
pre-configured
configuration
to
every
DataBinder
that
this
controller
uses
:end
:start
Try
to
find
an
XXXXLastModified
method,
where
XXXX
is
the
name
of
a
handler
Return
-1
if
there's
no
such
handler,
indicating
that
content
must
be
updated
:end
:start
Determine
a
handler
method
and
invoke
it
:end
:start
Handle
the
case
where
no
request
handler
method
was
found
<p>The
default
implementation
logs
a
warning
and
sends
an
HTTP
404
error
Alternatively,
a
fallback
view
could
be
chosen,
or
the
NoSuchRequestHandlingMethodException
could
be
rethrown
as-is
:end
:start
Invokes
the
named
method
<p>Uses
a
custom
exception
handler
if
possible;
otherwise,
throw
an
unchecked
exception;
wrap
a
checked
exception
or
Throwable
:end
:start
Create
a
new
command
object
of
the
given
class
<p>This
implementation
uses
BeanUtilsinstantiateClass,
so
commands
need
to
have
public
no-arg
constructors
Subclasses
can
override
this
implementation
if
desired
:end
:start
Bind
request
parameters
onto
the
given
command
bean
:end
:start
Create
a
new
binder
instance
for
the
given
command
and
request
<p>Called
by
bind
Can
be
overridden
to
plug
in
custom
ServletRequestDataBinder
subclasses
<p>The
default
implementation
creates
a
standard
ServletRequestDataBinder,
and
invokes
initBinder
Note
that
initBinder
will
not
be
invoked
if
you
override
this
method!
:end
:start
Return
the
command
name
to
use
for
the
given
command
object
<p>Default
is
"command"
:end
:start
Initialize
the
given
binder
instance,
for
example
with
custom
editors
Called
by
createBinder
<p>This
method
allows
you
to
register
custom
editors
for
certain
fields
of
your
command
class
For
instance,
you
will
be
able
to
transform
Date
objects
into
a
String
pattern
and
back,
in
order
to
allow
your
JavaBeans
to
have
Date
properties
and
still
be
able
to
set
and
display
them
in
an
HTML
interface
<p>The
default
implementation
is
empty
<p>Note:
the
command
object
is
not
directly
passed
to
this
method,
but
it's
available
via
orgspringframeworkvalidationDataBinder#getTarget()
:end
:start
Determine
the
exception
handler
method
for
the
given
exception
<p>Can
return
null
if
not
found
:end
:start
Exception
thrown
when
there
is
no
handler
method
("action"
method)
for
a
specific
HTTP
request
:end
:start
Create
a
new
NoSuchRequestHandlingMethodException
for
the
given
request
:end
:start
Create
a
new
NoSuchRequestHandlingMethodException
:end
:start
Create
a
new
NoSuchRequestHandlingMethodException
for
the
given
request
:end
:start
Return
the
name
of
the
offending
method,
if
known
:end
:start
Implementation
of
MethodNameResolver
which
supports
several
strategies
for
mapping
parameter
values
to
the
names
of
methods
to
invoke
<p>The
simplest
strategy
looks
for
a
specific
named
parameter,
whose
value
is
considered
the
name
of
the
method
to
invoke
The
name
of
the
parameter
may
be
specified
as
a
JavaBean
property,
if
the
default
action
is
not
acceptable
<p>The
alternative
strategy
uses
the
very
existence
of
a
request
parameter
(
ie
a
request
parameter
with
a
certain
name
is
found)
as
an
indication
that
a
method
with
the
same
name
should
be
dispatched
to
In
this
case,
the
actual
request
parameter
value
is
ignored
The
list
of
parameter/method
names
may
be
set
via
the
methodParamNames
JavaBean
property
<p>The
second
resolution
strategy
is
primarily
expected
to
be
used
with
web
pages
containing
multiple
submit
buttons
The
'name'
attribute
of
each
button
should
be
set
to
the
mapped
method
name,
while
the
'value'
attribute
is
normally
displayed
as
the
button
label
by
the
browser,
and
will
be
ignored
by
the
resolver
<p>Note
that
the
second
strategy
also
supports
the
use
of
submit
buttons
of
type
'image'
That
is,
an
image
submit
button
named
'reset'
will
normally
be
submitted
by
the
browser
as
two
request
parameters
called
'resetx',
and
'resety'
When
checking
for
the
existence
of
a
parameter
from
the
methodParamNames
list,
to
indicate
that
a
specific
method
should
be
called,
the
code
will
look
for
a
request
parameter
in
the
"reset"
form
(exactly
as
specified
in
the
list),
and
in
the
"resetx"
form
('x'
appended
to
the
name
in
the
list)
In
this
way
it
can
handle
both
normal
and
image
submit
buttons
The
actual
method
name
resolved,
if
there
is
a
match,
will
always
be
the
bare
form
without
the
"x"
<p><b>Note:</b>
If
both
strategies
are
configured,
ie
both
"paramName"
and
"methodParamNames"
are
specified,
then
both
will
be
checked
for
any
given
request
A
match
for
an
explicit
request
parameter
in
the
"methodParamNames"
list
always
wins
over
a
value
specified
for
a
"paramName"
action
parameter
<p>For
use
with
either
strategy,
the
name
of
a
default
handler
method
to
use
when
there
is
no
match,
can
be
specified
as
a
JavaBean
property
<p>For
both
resolution
strategies,
the
method
name
is
of
course
coming
from
some
sort
of
view
code,
(such
as
a
JSP
page)
While
this
may
be
acceptable,
it
is
sometimes
desirable
to
treat
this
only
as
a
'logical'
method
name,
with
a
further
mapping
to
a
'real'
method
name
As
such,
an
optional
'logical'
mapping
may
be
specified
for
this
purpose
:end
:start
Default
name
for
the
parameter
whose
value
identifies
the
method
to
invoke:
"action"
:end
:start
Set
the
name
of
the
parameter
whose
<i>value</i>
identifies
the
name
of
the
method
to
invoke
Default
is
"action"
<p>Alternatively,
specify
parameter
names
where
the
very
existence
of
each
parameter
means
that
a
method
of
the
same
name
should
be
invoked,
via
the
"methodParamNames"
property
:end
:start
Set
a
String
array
of
parameter
names,
where
the
<i>very
existence
of
a
parameter</i>
in
the
list
(with
value
ignored)
means
that
a
method
of
the
same
name
should
be
invoked
This
target
method
name
may
then
be
optionally
further
mapped
via
the
#logicalMappings
property,
in
which
case
it
can
be
considered
a
logical
name
only
:end
:start
Specifies
a
set
of
optional
logical
method
name
mappings
For
both
resolution
strategies,
the
method
name
initially
comes
in
from
the
view
layer
If
that
needs
to
be
treated
as
a
'logical'
method
name,
and
mapped
to
a
'real'
method
name,
then
a
name/value
pair
for
that
purpose
should
be
added
to
this
Properties
instance
Any
method
name
not
found
in
this
mapping
will
be
considered
to
already
be
the
real
method
name
<p>Note
that
in
the
case
of
no
match,
where
the
#defaultMethodName
property
is
used
if
available,
that
method
name
is
considered
to
already
be
the
real
method
name,
and
is
not
run
through
the
logical
mapping
:end
:start
Set
the
name
of
the
default
handler
method
that
should
be
used
when
no
parameter
was
found
in
the
request
:end
:start
The
most
flexible
out-of-the-box
implementation
of
the
MethodNameResolver
interface
Uses
javautilProperties
to
define
the
mapping
between
the
URL
of
incoming
requests
and
the
corresponding
method
name
Such
properties
can
be
held
in
an
XML
document
<p>Properties
format
is
/welcomehtml=displayGenresPage

Note
that
method
overloading
isn't
allowed,
so
there's
no
need
to
specify
arguments
<p>Supports
direct
matches,
eg
a
registered
"/test"
matches
"/test",
and
a
various
Ant-style
pattern
matches,
eg
a
registered
"/t*"
matches
both
"/test"
and
"/team"
For
details,
see
the
AntPathMatcher
javadoc
:end
:start
Set
explicit
URL
to
method
name
mappings
through
a
Properties
object
:end
:start
Set
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns
Default
is
AntPathMatcher
:end
:start
<p>Trivial
controller
that
always
returns
a
named
view
The
view
can
be
configured
using
an
exposed
configuration
property
This
controller
offers
an
alternative
to
sending
a
request
straight
to
a
view
such
as
a
JSP
The
advantage
here
is
that
the
client
is
not
exposed
to
the
concrete
view
technology
but
rather
just
to
the
controller
URL;
the
concrete
view
will
be
determined
by
the
ViewResolver
<p>An
alternative
to
the
ParameterizableViewController
is
a
orgspringframeworkwebservletmvcmultiactionMultiActionController
MultiActionController,
which
can
define
a
variety
of
handler
methods
that
just
return
a
plain
ModelAndView
instance
for
a
given
view
name
<p><b><a
name="workflow">Workflow
(<a
href="AbstractControllerhtml#workflow">and
that
defined
by
superclass</a>):</b><br>
<ol>
<li>Request
is
received
by
the
controller</li>
<li>call
to
#handleRequestInternal
handleRequestInternal
which
just
returns
the
view,
named
by
the
configuration
property
viewName
Nothing
more,
nothing
less</li>
</ol>
</p>
<p><b><a
name="config">Exposed
configuration
properties</a>
(<a
href="AbstractControllerhtml#config">and
those
defined
by
superclass</a>):</b><br>
<table
border="1">
<tr>
<td><b>name</b></td>
<td><b>default</b></td>
<td><b>description</b></td>
</tr>
<tr>
<td>viewName</td>
<td><i>null</i></td>
<td>the
name
of
the
view
the
viewResolver
will
use
to
forward
to
(if
this
property
is
not
set,
a
null
view
name
will
be
returned
directing
the
caller
to
calculate
the
view
name
from
the
current
request)</td>
</tr>
</table>
</p>
:end
:start
Set
the
name
of
the
view
to
delegate
to
:end
:start
Return
the
name
of
the
view
to
delegate
to
:end
:start
Return
a
ModelAndView
object
with
the
specified
view
name
The
content
of
RequestContextUtils#getInputFlashMap
is
also
added
to
the
model
:end
:start
Spring
Controller
implementation
that
forwards
to
a
named
servlet,
ie
the
"servlet-name"
in
webxml
rather
than
a
URL
path
mapping
A
target
servlet
doesn't
even
need
a
"servlet-mapping"
in
webxml
in
the
first
place:
A
"servlet"
declaration
is
sufficient
<p>Useful
to
invoke
an
existing
servlet
via
Spring's
dispatching
infrastructure,
for
example
to
apply
Spring
HandlerInterceptors
to
its
requests
This
will
work
even
in
a
minimal
Servlet
container
that
does
not
support
Servlet
filters
<p><b>Example:</b>
webxml,
mapping
all
"/myservlet"
requests
to
a
Spring
dispatcher
Also
defines
a
custom
"myServlet",
but
<i>without</i>
servlet
mapping
<pre
class="code">
&lt;servlet&gt;
&lt;servlet-name&gt;myServlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;mypackageTestServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet&gt;
&lt;servlet-name&gt;myDispatcher&lt;/servlet-name&gt;
&lt;servlet-class&gt;orgspringframeworkwebservletDispatcherServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
&lt;servlet-name&gt;myDispatcher&lt;/servlet-name&gt;
&lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre>
<b>Example:</b>
myDispatcher-servletxml,
in
turn
forwarding
"/myservlet"
to
your
servlet
(identified
by
servlet
name)
All
such
requests
will
go
through
the
configured
HandlerInterceptor
chain
(eg
an
OpenSessionInViewInterceptor)
From
the
servlet
point
of
view,
everything
will
work
as
usual
<pre
class="code">
&lt;bean
id="urlMapping"
class="orgspringframeworkwebservlethandlerSimpleUrlHandlerMapping"&gt;
&lt;property
name="interceptors"&gt;
&lt;list&gt;
&lt;ref
bean="openSessionInViewInterceptor"/&gt;
&lt;/list&gt;
&lt;/property&gt;
&lt;property
name="mappings"&gt;
&lt;props&gt;
&lt;prop
key="/myservlet"&gt;myServletForwardingController&lt;/prop&gt;
&lt;/props&gt;
&lt;/property&gt;
&lt;/bean&gt;
&lt;bean
id="myServletForwardingController"
class="orgspringframeworkwebservletmvcServletForwardingController"&gt;
&lt;property
name="servletName"&gt;&lt;value&gt;myServlet&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;</pre>
:end
:start
Set
the
name
of
the
servlet
to
forward
to,
ie
the
"servlet-name"
of
the
target
servlet
in
webxml
<p>Default
is
the
bean
name
of
this
controller
:end
:start
Determine
whether
to
use
RequestDispatcher's
include
or
forward
method
<p>Performs
a
check
whether
an
include
URI
attribute
is
found
in
the
request,
indicating
an
include
request,
and
whether
the
response
has
already
been
committed
In
both
cases,
an
include
will
be
performed,
as
a
forward
is
not
possible
anymore
:end
:start
Spring
Controller
implementation
that
wraps
a
servlet
instance
which
it
manages
internally
Such
a
wrapped
servlet
is
not
known
outside
of
this
controller;
its
entire
lifecycle
is
covered
here
(in
contrast
to
ServletForwardingController)
<p>Useful
to
invoke
an
existing
servlet
via
Spring's
dispatching
infrastructure,
for
example
to
apply
Spring
HandlerInterceptors
to
its
requests
<p>Note
that
Struts
has
a
special
requirement
in
that
it
parses
webxml
to
find
its
servlet
mapping
Therefore,
you
need
to
specify
the
DispatcherServlet's
servlet
name
as
"servletName"
on
this
controller,
so
that
Struts
finds
the
DispatcherServlet's
mapping
(thinking
that
it
refers
to
the
ActionServlet)
<p><b>Example:</b>
a
DispatcherServlet
XML
context,
forwarding
"*do"
to
the
Struts
ActionServlet
wrapped
by
a
ServletWrappingController
All
such
requests
will
go
through
the
configured
HandlerInterceptor
chain
(eg
an
OpenSessionInViewInterceptor)
From
the
Struts
point
of
view,
everything
will
work
as
usual
<pre
class="code">
&lt;bean
id="urlMapping"
class="orgspringframeworkwebservlethandlerSimpleUrlHandlerMapping"&gt;
&lt;property
name="interceptors"&gt;
&lt;list&gt;
&lt;ref
bean="openSessionInViewInterceptor"/&gt;
&lt;/list&gt;
&lt;/property&gt;
&lt;property
name="mappings"&gt;
&lt;props&gt;
&lt;prop
key="*do"&gt;strutsWrappingController&lt;/prop&gt;
&lt;/props&gt;
&lt;/property&gt;
&lt;/bean&gt;
&lt;bean
id="strutsWrappingController"
class="orgspringframeworkwebservletmvcServletWrappingController"&gt;
&lt;property
name="servletClass"&gt;
&lt;value&gt;orgapachestrutsactionActionServlet&lt;/value&gt;
&lt;/property&gt;
&lt;property
name="servletName"&gt;
&lt;value&gt;action&lt;/value&gt;
&lt;/property&gt;
&lt;property
name="initParameters"&gt;
&lt;props&gt;
&lt;prop
key="config"&gt;/WEB-INF/struts-configxml&lt;/prop&gt;
&lt;/props&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
:end
:start
Set
the
class
of
the
servlet
to
wrap
Needs
to
implement
javaxservletServlet
:end
:start
Set
the
name
of
the
servlet
to
wrap
Default
is
the
bean
name
of
this
controller
:end
:start
Specify
init
parameters
for
the
servlet
to
wrap,
as
name-value
pairs
:end
:start
Initialize
the
wrapped
Servlet
instance
:end
:start
Invoke
the
the
wrapped
Servlet
instance
:end
:start
Destroy
the
wrapped
Servlet
instance
:end
:start
Adapter
to
use
the
plain
Controller
workflow
interface
with
the
generic
orgspringframeworkwebservletDispatcherServlet
Supports
handlers
that
implement
the
LastModified
interface
<p>This
is
an
SPI
class,
not
used
directly
by
application
code
:end
:start
Base
class
for
orgspringframeworkwebservletHandlerMapping
implementations
that
derive
URL
paths
according
to
conventions
for
specific
controller
types
:end
:start
Set
whether
to
activate
or
deactivate
detection
of
annotated
controllers
:end
:start
Specify
Java
packages
that
should
be
excluded
from
this
mapping
Any
classes
in
such
a
package
(or
any
of
its
subpackages)
will
be
ignored
by
this
HandlerMapping
<p>Default
is
to
exclude
the
entire
"orgspringframeworkwebservletmvc"
package,
including
its
subpackages,
since
none
of
Spring's
out-of-the-box
Controller
implementations
is
a
reasonable
candidate
for
this
mapping
strategy
Such
controllers
are
typically
handled
by
a
separate
HandlerMapping,
eg
a
orgspringframeworkwebservlethandlerBeanNameUrlHandlerMapping,
alongside
this
ControllerClassNameHandlerMapping
for
application
controllers
:end
:start
Specify
controller
classes
that
should
be
excluded
from
this
mapping
Any
such
classes
will
simply
be
ignored
by
this
HandlerMapping
:end
:start
This
implementation
delegates
to
#buildUrlsForHandler,
provided
that
#isEligibleForMapping
returns
true
:end
:start
Determine
whether
the
specified
controller
is
excluded
from
this
mapping
:end
:start
Determine
whether
the
given
bean
class
indicates
a
controller
type
that
is
supported
by
this
mapping
strategy
:end
:start
Determine
whether
the
given
bean
class
indicates
a
controller
type
that
dispatches
to
multiple
action
methods
:end
:start
Abstract
template
method
to
be
implemented
by
subclasses
:end
:start
Implementation
of
orgspringframeworkwebservletHandlerMapping
that
follows
a
simple
convention
for
generating
URL
path
mappings
from
the
<i>bean
names</i>
of
registered
orgspringframeworkwebservletmvcController
beans
as
well
as
@Controller
annotated
beans
<p>This
is
similar
to
orgspringframeworkwebservlethandlerBeanNameUrlHandlerMapping
but
doesn't
expect
bean
names
to
follow
the
URL
convention:
It
turns
plain
bean
names
into
URLs
by
prepending
a
slash
and
optionally
applying
a
specified
prefix
and/or
suffix
However,
it
only
does
so
for
well-known
#isControllerType
controller
types,
as
listed
above
(analogous
to
ControllerClassNameHandlerMapping)
:end
:start
Set
an
optional
prefix
to
prepend
to
generated
URL
mappings
<p>By
default
this
is
an
empty
String
If
you
want
a
prefix
like
"/myapp/",
you
can
set
it
for
all
beans
mapped
by
this
mapping
:end
:start
Set
an
optional
suffix
to
append
to
generated
URL
mappings
<p>By
default
this
is
an
empty
String
If
you
want
a
suffix
like
"do",
you
can
set
it
for
all
beans
mapped
by
this
mapping
:end
:start
Prepends
a
'/'
if
required
and
appends
the
URL
suffix
to
the
name
:end
:start
Implementation
of
orgspringframeworkwebservletHandlerMapping
that
follows
a
simple
convention
for
generating
URL
path
mappings
from
the
<i>class
names</i>
of
registered
orgspringframeworkwebservletmvcController
beans
as
well
as
@Controller
annotated
beans
<p>For
simple
orgspringframeworkwebservletmvcController
implementations
(those
that
handle
a
single
request
type),
the
convention
is
to
take
the
ClassUtils#getShortName
short
name
of
the
Class,
remove
the
'Controller'
suffix
if
it
exists
and
return
the
remaining
text,
lower-cased,
as
the
mapping,
with
a
leading
/
For
example:
<ul>
<li>{@code
WelcomeController
->
/welcome*</li>
<li>{@code
HomeController
->
/home*</li>
</ul>
<p>For
MultiActionController
MultiActionControllers
and
@Controller
beans,
a
similar
mapping
is
registered,
except
that
all
sub-paths
are
registered
using
the
trailing
wildcard
pattern
/*
For
example:
<ul>
<li>{@code
WelcomeController
->
/welcome,
/welcome/*</li>
<li>{@code
CatalogController
->
/catalog,
/catalog/*</li>
</ul>
<p>For
MultiActionController
it
is
often
useful
to
use
this
mapping
strategy
in
conjunction
with
the
orgspringframeworkwebservletmvcmultiactionInternalPathMethodNameResolver
<p>Thanks
to
Warren
Oliver
for
suggesting
the
"caseSensitive",
"pathPrefix"
and
"basePackage"
properties
which
have
been
added
in
Spring
25
:end
:start
Set
whether
to
apply
case
sensitivity
to
the
generated
paths,
eg
turning
the
class
name
"BuyForm"
into
"buyForm"
<p>Default
is
"false",
using
pure
lower
case
paths,
eg
turning
the
class
name
"BuyForm"
into
"buyform"
:end
:start
Specify
a
prefix
to
prepend
to
the
path
generated
from
the
controller
name
<p>Default
is
a
plain
slash
("/")
A
path
like
"/mymodule"
can
be
specified
in
order
to
have
controller
path
mappings
prefixed
with
that
path,
eg
"/mymodule/buyform"
instead
of
"/buyform"
for
the
class
name
"BuyForm"
:end
:start
Set
the
base
package
to
be
used
for
generating
path
mappings,
including
all
subpackages
underneath
this
packages
as
path
elements
<p>Default
is
null,
using
the
short
class
name
for
the
generated
path,
with
the
controller's
package
not
represented
in
the
path
Specify
a
base
package
like
"commycompanymyapp"
to
include
subpackages
within
that
base
package
as
path
elements,
eg
generating
the
path
"/mymodule/buyform"
for
the
class
name
"commycompanymyappmymoduleBuyForm"
Subpackage
hierarchies
are
represented
as
individual
path
elements,
eg
"/mymodule/mysubmodule/buyform"
for
the
class
name
"commycompanymyappmymodulemysubmoduleBuyForm"
:end
:start
Generate
the
actual
URL
paths
for
the
given
controller
class
<p>Subclasses
may
choose
to
customize
the
paths
that
are
generated
by
overriding
this
method
:end
:start
Default
implementation
of
the
orgspringframeworkwebservletHandlerExceptionResolver
HandlerExceptionResolver
interface
that
resolves
standard
Spring
exceptions
and
translates
them
to
corresponding
HTTP
status
codes
<p>This
exception
resolver
is
enabled
by
default
in
the
orgspringframeworkwebservletDispatcherServlet
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Sets
the
#setOrder(int)
order
to
#LOWEST_PRECEDENCE
:end
:start
Handle
the
case
where
no
request
handler
method
was
found
<p>The
default
implementation
logs
a
warning,
sends
an
HTTP
404
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
NoSuchRequestHandlingMethodException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
no
request
handler
method
was
found
for
the
particular
HTTP
request
method
<p>The
default
implementation
logs
a
warning,
sends
an
HTTP
405
error,
sets
the
"Allow"
header,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
HttpRequestMethodNotSupportedException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
no
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
were
found
for
the
PUT
or
POSTed
content
<p>The
default
implementation
sends
an
HTTP
415
error,
sets
the
"Accept"
header,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
HttpMediaTypeNotSupportedException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
no
orgspringframeworkhttpconverterHttpMessageConverter
message
converters
were
found
that
were
acceptable
for
the
client
(expressed
via
the
Accept
header
<p>The
default
implementation
sends
an
HTTP
406
error
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
HttpMediaTypeNotAcceptableException
could
be
rethrown
as-is
:end
:start
Handle
the
case
when
a
required
parameter
is
missing
<p>The
default
implementation
sends
an
HTTP
400
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
MissingServletRequestParameterException
could
be
rethrown
as-is
:end
:start
Handle
the
case
when
an
unrecoverable
binding
exception
occurs
-
eg
required
header,
required
cookie
<p>The
default
implementation
sends
an
HTTP
400
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
exception
could
be
rethrown
as-is
:end
:start
Handle
the
case
when
a
orgspringframeworkwebbindWebDataBinder
conversion
cannot
occur
<p>The
default
implementation
sends
an
HTTP
500
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
TypeMismatchException
could
be
rethrown
as-is
:end
:start
Invoked
to
send
a
server
error
Sets
the
status
to
500
and
also
sets
the
request
attribute
"javaxservleterrorexception"
to
the
Exception
:end
:start
Handle
the
case
when
a
orgspringframeworkwebbindWebDataBinder
conversion
error
occurs
<p>The
default
implementation
sends
an
HTTP
400
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
TypeMismatchException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
a
orgspringframeworkhttpconverterHttpMessageConverter
message
converter
cannot
read
from
a
HTTP
request
<p>The
default
implementation
sends
an
HTTP
400
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
HttpMediaTypeNotSupportedException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
a
orgspringframeworkhttpconverterHttpMessageConverter
message
converter
cannot
write
to
a
HTTP
request
<p>The
default
implementation
sends
an
HTTP
500
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
HttpMediaTypeNotSupportedException
could
be
rethrown
as-is
:end
:start
Handle
the
case
where
an
argument
annotated
with
@Valid
such
as
an
RequestBody
or
RequestPart
argument
fails
validation
An
HTTP
400
error
is
sent
back
to
the
client
:end
:start
Handle
the
case
where
an
RequestPart
@RequestPart,
a
MultipartFile,
or
a
javaxservlethttpPart
argument
is
required
but
is
missing
An
HTTP
400
error
is
sent
back
to
the
client
:end
:start
Handle
the
case
where
an
ModelAttribute
@ModelAttribute
method
argument
has
binding
or
validation
errors
and
is
not
followed
by
another
method
argument
of
type
BindingResult
By
default
an
HTTP
400
error
is
sent
back
to
the
client
:end
:start
Handle
the
case
where
no
handler
was
found
during
the
dispatch
<p>The
default
sends
an
HTTP
404
error,
and
returns
an
empty
ModelAndView
Alternatively,
a
fallback
view
could
be
chosen,
or
the
NoHandlerFoundException
could
be
rethrown
as-is
:end
:start
A
specialization
of
the
Model
interface
that
controllers
can
use
to
select
attributes
for
a
redirect
scenario
Since
the
intent
of
adding
redirect
attributes
is
very
explicit
--
ie
to
be
used
for
a
redirect
URL,
attribute
values
may
be
formatted
as
Strings
and
stored
that
way
to
make
them
eligible
to
be
appended
to
the
query
string
or
expanded
as
URI
variables
in
orgspringframeworkwebservletviewRedirectView
<p>This
interface
also
provides
a
way
to
add
flash
attributes
For
a
general
overview
of
flash
attributes
see
FlashMap
You
can
use
RedirectAttributes
to
store
flash
attributes
and
they
will
be
automatically
propagated
to
the
"output"
FlashMap
of
the
current
request
<p>Example
usage
in
an
@Controller:
<pre
class="code">
&#064;RequestMapping(value
=
"/accounts",
method
=
RequestMethodPOST)
public
String
handle(Account
account,
BindingResult
result,
RedirectAttributes
redirectAttrs)
if
(resulthasErrors())
return
"accounts/new";

//
Save
account

redirectAttrsaddAttribute("id",
accountgetId())addFlashAttribute("message",
"Account
created!");
return
"redirect:/accounts/{id";

</pre>
<p>A
RedirectAttributes
model
is
empty
when
the
method
is
called
and
is
never
used
unless
the
method
returns
a
redirect
view
name
or
a
RedirectView
<p>After
the
redirect,
flash
attributes
are
automatically
added
to
the
model
of
the
controller
that
serves
the
target
URL
:end
:start
Add
the
given
flash
attribute
:end
:start
Add
the
given
flash
storage
using
a
orgspringframeworkcoreConventions#getVariableName
generated
name
:end
:start
Return
the
attributes
candidate
for
flash
storage
or
an
empty
Map
:end
:start
A
ModelMap
implementation
of
RedirectAttributes
that
formats
values
as
Strings
using
a
DataBinder
Also
provides
a
place
to
store
flash
attributes
so
they
can
survive
a
redirect
without
the
need
to
be
embedded
in
the
redirect
URL
:end
:start
Class
constructor
:end
:start
Default
constructor
without
a
DataBinder
Attribute
values
are
converted
to
String
via
#toString()
:end
:start
Return
the
attributes
candidate
for
flash
storage
or
an
empty
Map
:end
:start
<p>Formats
the
attribute
value
as
a
String
before
adding
it
:end
:start
<p>Formats
the
attribute
value
as
a
String
before
adding
it
:end
:start
<p>Each
attribute
value
is
formatted
as
a
String
before
being
added
:end
:start
<p>Each
attribute
value
is
formatted
as
a
String
before
being
added
:end
:start
<p>Each
attribute
value
is
formatted
as
a
String
before
being
merged
:end
:start
<p>The
value
is
formatted
as
a
String
before
being
added
:end
:start
<p>Each
value
is
formatted
as
a
String
before
being
added
:end
:start
Simple
Controller
implementation
that
transforms
the
virtual
path
of
a
URL
into
a
view
name
and
returns
that
view
<p>Can
optionally
prepend
a
#setPrefix
prefix
and/or
append
a
#setSuffix
suffix
to
build
the
viewname
from
the
URL
filename
<p>Find
below
some
examples:
<ol>
<li>{@code
"/index"
->
"index"</li>
<li>{@code
"/indexhtml"
->
"index"</li>
<li>{@code
"/indexhtml"
+
prefix
"pre_"
and
suffix
"_suf"
->
"pre_index_suf"</li>
<li>{@code
"/products/viewhtml"
->
"products/view"</li>
</ol>
<p>Thanks
to
David
Barri
for
suggesting
prefix/suffix
support!
:end
:start
Set
the
prefix
to
prepend
to
the
request
URL
filename
to
build
a
view
name
:end
:start
Return
the
prefix
to
prepend
to
the
request
URL
filename
:end
:start
Set
the
suffix
to
append
to
the
request
URL
filename
to
build
a
view
name
:end
:start
Return
the
suffix
to
append
to
the
request
URL
filename
:end
:start
Returns
view
name
based
on
the
URL
filename,
with
prefix/suffix
applied
when
appropriate
:end
:start
Extract
a
URL
path
from
the
given
request,
suitable
for
view
name
extraction
:end
:start
Returns
view
name
based
on
the
URL
filename,
with
prefix/suffix
applied
when
appropriate
:end
:start
Extract
the
URL
filename
from
the
given
request
URI
:end
:start
Build
the
full
view
name
based
on
the
given
view
name
as
indicated
by
the
URL
path
<p>The
default
implementation
simply
applies
prefix
and
suffix
This
can
be
overridden,
for
example,
to
manipulate
upper
case
/
lower
case,
etc
:end
:start
Interceptor
that
checks
and
prepares
request
and
response
Checks
for
supported
methods
and
a
required
session,
and
applies
the
specified
number
of
cache
seconds
See
superclass
bean
properties
for
configuration
options
<p>All
the
settings
supported
by
this
interceptor
can
also
be
set
on
AbstractController
This
interceptor
is
mainly
intended
for
applying
checks
and
preparations
to
a
set
of
controllers
mapped
by
a
HandlerMapping
:end
:start
Set
if
URL
lookup
should
always
use
full
path
within
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(ie
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
Default
is
"false"
<p>Only
relevant
for
the
"cacheMappings"
setting
:end
:start
Set
if
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
<p>Only
relevant
for
the
"cacheMappings"
setting
:end
:start
Set
the
UrlPathHelper
to
use
for
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
HandlerMappings
and
MethodNameResolvers
<p>Only
relevant
for
the
"cacheMappings"
setting
:end
:start
Map
specific
URL
paths
to
specific
cache
seconds
<p>Overrides
the
default
cache
seconds
setting
of
this
interceptor
Can
specify
"-1"
to
exclude
a
URL
path
from
default
caching
<p>Supports
direct
matches,
eg
a
registered
"/test"
matches
"/test",
and
a
various
Ant-style
pattern
matches,
eg
a
registered
"/t*"
matches
both
"/test"
and
"/team"
For
details,
see
the
AntPathMatcher
javadoc
:end
:start
Set
the
PathMatcher
implementation
to
use
for
matching
URL
paths
against
registered
URL
patterns,
for
determining
cache
mappings
Default
is
AntPathMatcher
:end
:start
Look
up
a
cache
seconds
value
for
the
given
URL
path
<p>Supports
direct
matches,
eg
a
registered
"/test"
matches
"/test",
and
various
Ant-style
pattern
matches,
eg
a
registered
"/t*"
matches
both
"/test"
and
"/team"
For
details,
see
the
AntPathMatcher
class
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
is
empty
:end
:start
Exception
to
be
thrown
if
DispatcherServlet
is
unable
to
determine
a
corresponding
handler
for
an
incoming
HTTP
request
The
DispatcherServlet
throws
this
exception
only
if
its
throwExceptionIfNoHandlerFound
property
is
set
to
"true"
:end
:start
Constructor
for
NoHandlerFoundException
:end
:start
Strategy
interface
for
translating
an
incoming
javaxservlethttpHttpServletRequest
into
a
logical
view
name
when
no
view
name
is
explicitly
supplied
:end
:start
Translate
the
given
HttpServletRequest
into
a
view
name
:end
:start
An
HttpRequestHandler
for
serving
static
files
using
the
Servlet
container's
"default"
Servlet
<p>This
handler
is
intended
to
be
used
with
a
"/*"
mapping
when
the
orgspringframeworkwebservletDispatcherServlet
DispatcherServlet
is
mapped
to
"/",
thus
overriding
the
Servlet
container's
default
handling
of
static
resources
The
mapping
to
this
handler
should
generally
be
ordered
as
the
last
in
the
chain
so
that
it
will
only
execute
when
no
other
more
specific
mappings
(ie,
to
controllers)
can
be
matched
<p>Requests
are
handled
by
forwarding
through
the
RequestDispatcher
obtained
via
the
name
specified
through
the
#setDefaultServletName
"defaultServletName"
property
In
most
cases,
the
defaultServletName
does
not
need
to
be
set
explicitly,
as
the
handler
checks
at
initialization
time
for
the
presence
of
the
default
Servlet
of
well-known
containers
such
as
Tomcat,
Jetty,
Resin,
WebLogic
and
WebSphere
However,
when
running
in
a
container
where
the
default
Servlet's
name
is
not
known,
or
where
it
has
been
customized
via
server
configuration,
the
defaultServletName
will
need
to
be
set
explicitly
:end
:start
Set
the
name
of
the
default
Servlet
to
be
forwarded
to
for
static
resource
requests
:end
:start
If
the
defaultServletName
property
has
not
been
explicitly
set,
attempts
to
locate
the
default
Servlet
using
the
known
common
container-specific
names
:end
:start
HttpRequestHandler
that
serves
static
resources
optimized
for
superior
browser
performance
(according
to
the
guidelines
of
Page
Speed,
YSlow,
etc)
by
allowing
for
flexible
cache
settings
({@linkplain
#setCacheSeconds
"cacheSeconds"
property,
last-modified
support)
<p>The
#setLocations
"locations"
property
takes
a
list
of
Spring
Resource
locations
from
which
static
resources
are
allowed
to
be
served
by
this
handler
For
a
given
request,
the
list
of
locations
will
be
consulted
in
order
for
the
presence
of
the
requested
resource,
and
the
first
found
match
will
be
written
to
the
response,
with
Expires
and
Cache-Control
headers
set
as
configured
The
handler
also
properly
evaluates
the
Last-Modified
header
(if
present)
so
that
a
304
status
code
will
be
returned
as
appropriate,
avoiding
unnecessary
overhead
for
resources
that
are
already
cached
by
the
client
The
use
of
Resource
locations
allows
resource
requests
to
easily
be
mapped
to
locations
other
than
the
web
application
root
For
example,
resources
could
be
served
from
a
classpath
location
such
as
"classpath:/META-INF/public-web-resources/",
allowing
convenient
packaging
and
serving
of
resources
such
as
a
JavaScript
library
from
within
jar
files
<p>To
ensure
that
users
with
a
primed
browser
cache
get
the
latest
changes
to
application-specific
resources
upon
deployment
of
new
versions
of
the
application,
it
is
recommended
that
a
version
string
is
used
in
the
URL
mapping
pattern
that
selects
this
handler
Such
patterns
can
be
easily
parameterized
using
Spring
EL
See
the
reference
manual
for
further
examples
of
this
approach
<p>Rather
than
being
directly
configured
as
a
bean,
this
handler
will
typically
be
configured
through
use
of
the
<mvc:resources/>
XML
configuration
element
:end
:start
Set
a
List
of
Resource
paths
to
use
as
sources
for
serving
static
resources
:end
:start
Processes
a
resource
request
<p>Checks
for
the
existence
of
the
requested
resource
in
the
configured
list
of
locations
If
the
resource
does
not
exist,
a
404
response
will
be
returned
to
the
client
If
the
resource
exists,
the
request
will
be
checked
for
the
presence
of
the
Last-Modified
header,
and
its
value
will
be
compared
against
the
last-modified
timestamp
of
the
given
resource,
returning
a
304
status
code
if
the
Last-Modified
value
is
greater
If
the
resource
is
newer
than
the
Last-Modified
value,
or
the
header
is
not
present,
the
content
resource
of
the
resource
will
be
written
to
the
response
with
caching
headers
set
to
expire
one
year
in
the
future
:end
:start
Validates
the
given
path:
returns
true
if
the
given
path
is
not
a
valid
resource
path
<p>The
default
implementation
rejects
paths
containing
"WEB-INF"
or
"META-INF"
as
well
as
paths
with
relative
paths
("/")
that
result
in
access
of
a
parent
directory
:end
:start
Determine
an
appropriate
media
type
for
the
given
resource
:end
:start
Set
headers
on
the
given
servlet
response
Called
for
GET
requests
as
well
as
HEAD
requests
:end
:start
Write
the
actual
content
out
to
the
given
servlet
response,
streaming
the
resource's
content
:end
:start
Simple
servlet
that
can
expose
an
internal
resource,
including
a
default
URL
if
the
specified
resource
is
not
found
An
alternative,
for
example,
to
trying
and
catching
exceptions
when
using
JSP
include
<p>A
further
usage
of
this
servlet
is
the
ability
to
apply
last-modified
timestamps
to
quasi-static
resources
(typically
JSPs)
This
can
happen
as
bridge
to
parameter-specified
resources,
or
as
proxy
for
a
specific
target
resource
(or
a
list
of
specific
target
resources
to
combine)
<p>A
typical
usage
would
map
a
URL
like
"/ResourceServlet"
onto
an
instance
of
this
servlet,
and
use
the
"JSP
include"
action
to
include
this
URL,
with
the
"resource"
parameter
indicating
the
actual
target
path
in
the
WAR
<p>The
defaultUrl
property
can
be
set
to
the
internal
resource
path
of
a
default
URL,
to
be
rendered
when
the
target
resource
is
not
found
or
not
specified
in
the
first
place
<p>The
"resource"
parameter
and
the
defaultUrl
property
can
also
specify
a
list
of
target
resources
to
combine
Those
resources
will
be
included
one
by
one
to
build
the
response
If
last-modified
determination
is
active,
the
newest
timestamp
among
those
files
will
be
used
<p>The
allowedResources
property
can
be
set
to
a
URL
pattern
of
resources
that
should
be
available
via
this
servlet
If
not
set,
any
target
resource
can
be
requested,
including
resources
in
the
WEB-INF
directory!
<p>If
using
this
servlet
for
direct
access
rather
than
via
includes,
the
contentType
property
should
be
specified
to
apply
a
proper
content
type
Note
that
a
content
type
header
in
the
target
JSP
will
be
ignored
when
including
the
resource
via
a
RequestDispatcher
include
<p>To
apply
last-modified
timestamps
for
the
target
resource,
set
the
applyLastModified
property
to
true
This
servlet
will
then
return
the
file
timestamp
of
the
target
resource
as
last-modified
value,
falling
back
to
the
startup
time
of
this
servlet
if
not
retrievable
<p>Note
that
applying
the
last-modified
timestamp
in
the
above
fashion
just
makes
sense
if
the
target
resource
does
not
generate
content
that
depends
on
the
HttpSession
or
cookies;
it
is
just
allowed
to
evaluate
request
parameters
<p>A
typical
case
for
such
last-modified
usage
is
a
JSP
that
just
makes
minimal
usage
of
basic
means
like
includes
or
message
resolution
to
build
quasi-static
content
Regenerating
such
content
on
every
request
is
unnecessary;
it
can
be
cached
as
long
as
the
file
hasn't
changed
<p>Note
that
this
servlet
will
apply
the
last-modified
timestamp
if
you
tell
it
to
do
so:
It's
your
decision
whether
the
content
of
the
target
resource
can
be
cached
in
such
a
fashion
Typical
use
cases
are
helper
resources
that
are
not
fronted
by
a
controller,
like
JavaScript
files
that
are
generated
by
a
JSP
(without
depending
on
the
HttpSession)
:end
:start
Any
number
of
these
characters
are
considered
delimiters
between
multiple
resource
paths
in
a
single
String
value
:end
:start
Name
of
the
parameter
that
must
contain
the
actual
resource
path
:end
:start
Set
the
URL
within
the
current
web
application
from
which
to
include
content
if
the
requested
path
isn't
found,
or
if
none
is
specified
in
the
first
place
<p>If
specifying
multiple
URLs,
they
will
be
included
one
by
one
to
build
the
response
If
last-modified
determination
is
active,
the
newest
timestamp
among
those
files
will
be
used
:end
:start
Set
allowed
resources
as
URL
pattern,
eg
"/WEB-INF/res/*jsp",
The
parameter
can
be
any
Ant-style
pattern
parsable
by
AntPathMatcher
:end
:start
Set
the
content
type
of
the
target
resource
(typically
a
JSP)
Default
is
none,
which
is
appropriate
when
including
resources
<p>For
directly
accessing
resources,
for
example
to
leverage
this
servlet's
last-modified
support,
specify
a
content
type
here
Note
that
a
content
type
header
in
the
target
JSP
will
be
ignored
when
including
the
resource
via
a
RequestDispatcher
include
:end
:start
Set
whether
to
apply
the
file
timestamp
of
the
target
resource
as
last-modified
value
Default
is
"false"
<p>This
is
mainly
intended
for
JSP
targets
that
don't
generate
session-specific
or
database-driven
content:
Such
files
can
be
cached
by
the
browser
as
long
as
the
last-modified
timestamp
of
the
JSP
file
doesn't
change
<p>This
will
only
work
correctly
with
expanded
WAR
files
that
allow
access
to
the
file
timestamps
Else,
the
startup
time
of
this
servlet
is
returned
:end
:start
Remember
the
startup
time,
using
no
last-modified
time
before
it
:end
:start
Return
a
PathMatcher
to
use
for
matching
the
"allowedResources"
URL
pattern
Default
is
AntPathMatcher
:end
:start
Determine
the
URL
of
the
target
resource
and
include
it
:end
:start
Determine
the
URL
of
the
target
resource
of
this
request
<p>Default
implementation
returns
the
value
of
the
"resource"
parameter
Can
be
overridden
in
subclasses
:end
:start
Return
the
last-modified
timestamp
of
the
file
that
corresponds
to
the
target
resource
URL
(ie
typically
the
request
"jsp"
file)
Will
simply
return
-1
if
"applyLastModified"
is
false
(the
default)
<p>Returns
no
last-modified
date
before
the
startup
time
of
this
servlet,
to
allow
for
message
resolution
etc
that
influences
JSP
contents,
assuming
that
those
background
resources
might
have
changed
on
restart
<p>Returns
the
startup
time
of
this
servlet
if
the
file
that
corresponds
to
the
target
resource
URL
couldn't
be
resolved
(for
example,
because
the
WAR
is
not
expanded)
:end
:start
Return
the
file
timestamp
for
the
given
resource
:end
:start
Provides
additional
information
about
a
View
such
as
whether
it
performs
redirects
:end
:start
Whether
the
view
performs
a
redirect
:end
:start
Base
class
for
orgspringframeworkwebWebApplicationInitializer
implementations
that
register
a
orgspringframeworkwebservletDispatcherServlet
DispatcherServlet
configured
with
annotated
classes,
eg
Spring's
orgspringframeworkcontextannotationConfiguration
@Configuration
classes
<p>Concrete
implementations
are
required
to
implement
#getRootConfigClasses()
and
#getServletConfigClasses()
as
well
as
#getServletMappings()
Further
template
and
customization
methods
are
provided
by
AbstractDispatcherServletInitializer
:end
:start
<p>This
implementation
creates
an
AnnotationConfigWebApplicationContext,
providing
it
the
annotated
classes
returned
by
#getRootConfigClasses()
Returns
null
if
#getRootConfigClasses()
returns
null
:end
:start
<p>This
implementation
creates
an
AnnotationConfigWebApplicationContext,
providing
it
the
annotated
classes
returned
by
#getServletConfigClasses()
:end
:start
Specify
orgspringframeworkcontextannotationConfiguration
@Configuration
and/or
orgspringframeworkstereotypeComponent
@Component
classes
to
be
provided
to
the
#createRootApplicationContext()
root
application
context
:end
:start
Specify
orgspringframeworkcontextannotationConfiguration
@Configuration
and/or
orgspringframeworkstereotypeComponent
@Component
classes
to
be
provided
to
the
#createServletApplicationContext()
dispatcher
servlet
application
context
:end
:start
Base
class
for
orgspringframeworkwebWebApplicationInitializer
implementations
that
register
a
DispatcherServlet
in
the
servlet
context
<p>Concrete
implementations
are
required
to
implement
#createServletApplicationContext(),
as
well
as
#getServletMappings(),
both
of
which
get
invoked
from
#registerDispatcherServlet(ServletContext)
Further
customization
can
be
achieved
by
overriding
#customizeRegistration(ServletRegistrationDynamic)
<p>Because
this
class
extends
from
AbstractContextLoaderInitializer,
concrete
implementations
are
also
required
to
implement
#createRootApplicationContext()
to
set
up
a
parent
"<strong>root</strong>"
application
context
If
a
root
context
is
not
desired,
implementations
can
simply
return
null
in
the
createRootApplicationContext()
implementation
:end
:start
The
default
servlet
name
Can
be
customized
by
overriding
#getServletName
:end
:start
Register
a
DispatcherServlet
against
the
given
servlet
context
<p>This
method
will
create
a
DispatcherServlet
with
the
name
returned
by
#getServletName(),
initializing
it
with
the
application
context
returned
from
#createServletApplicationContext(),
and
mapping
it
to
the
patterns
returned
from
#getServletMappings()
<p>Further
customization
can
be
achieved
by
overriding
#customizeRegistration(ServletRegistrationDynamic)
:end
:start
Return
the
name
under
which
the
DispatcherServlet
will
be
registered
Defaults
to
#DEFAULT_SERVLET_NAME
:end
:start
Create
a
servlet
application
context
to
be
provided
to
the
DispatcherServlet
<p>The
returned
context
is
delegated
to
Spring's
DispatcherServlet#DispatcherServlet(WebApplicationContext)
As
such,
it
typically
contains
controllers,
view
resolvers,
locale
resolvers,
and
other
web-related
beans
:end
:start
Specify
the
servlet
mapping(s)
for
the
DispatcherServlet
&mdash;
for
example
"/",
"/app",
etc
:end
:start
Specify
filters
to
add
and
map
to
the
DispatcherServlet
:end
:start
Add
the
given
filter
to
the
ServletContext
and
map
it
to
the
DispatcherServlet
as
follows:
<ul>
<li>a
default
filter
name
is
chosen
based
on
its
concrete
type
<li>the
asyncSupported
flag
is
set
depending
on
the
return
value
of
#isAsyncSupported()
asyncSupported
<li>a
filter
mapping
is
created
with
dispatcher
types
REQUEST,
FORWARD,
INCLUDE,
and
conditionally
ASYNC
depending
on
the
return
value
of
#isAsyncSupported()
asyncSupported
</ul>
<p>If
the
above
defaults
are
not
suitable
or
insufficient,
override
this
method
and
register
filters
directly
with
the
ServletContext
:end
:start
A
single
place
to
control
the
asyncSupported
flag
for
the
DispatcherServlet
and
all
filters
added
via
#getServletFilters()
<p>The
default
value
is
"true"
:end
:start
Optionally
perform
further
registration
customization
once
#registerDispatcherServlet(ServletContext)
has
completed
:end
:start
A
base
class
for
FlashMapManager
implementations
:end
:start
Set
the
amount
of
time
in
seconds
after
a
FlashMap
is
saved
(at
request
completion)
and
before
it
expires
<p>The
default
value
is
180
seconds
:end
:start
Return
the
amount
of
time
in
seconds
before
a
FlashMap
expires
:end
:start
Set
the
UrlPathHelper
to
use
to
match
FlashMap
instances
to
requests
:end
:start
Return
the
UrlPathHelper
implementation
to
use
:end
:start
Whether
the
given
FlashMap
matches
the
current
request
Uses
the
expected
request
path
and
query
parameters
saved
in
the
FlashMap
:end
:start
Retrieve
saved
FlashMap
instances
from
the
underlying
storage
:end
:start
Update
the
FlashMap
instances
in
the
underlying
storage
:end
:start
Obtain
a
mutex
for
modifying
the
FlashMap
List
as
handled
by
#retrieveFlashMaps
and
#updateFlashMaps,
<p>The
default
implementation
returns
a
shared
static
mutex
Subclasses
are
encouraged
to
return
a
more
specific
mutex,
or
null
to
indicate
that
no
synchronization
is
necessary
:end
:start
Simple
adapter
to
expose
the
bind
status
of
a
field
or
object
Set
as
a
variable
both
by
the
JSP
bind
tag
and
Velocity/FreeMarker
macros
<p>Obviously,
object
status
representations
(ie
errors
at
the
object
level
rather
than
the
field
level)
do
not
have
an
expression
and
a
value
but
only
error
codes
and
messages
For
simplicity's
sake
and
to
be
able
to
use
the
same
tags
and
macros,
the
same
status
class
is
used
for
both
scenarios
:end
:start
Create
a
new
BindStatus
instance,
representing
a
field
or
object
status
:end
:start
Return
the
bean
and
property
path
for
which
values
and
errors
will
be
resolved
(eg
"customeraddressstreet")
:end
:start
Return
a
bind
expression
that
can
be
used
in
HTML
forms
as
input
name
for
the
respective
field,
or
null
if
not
field-specific
<p>Returns
a
bind
path
appropriate
for
resubmission,
eg
"addressstreet"
Note
that
the
complete
bind
path
as
required
by
the
bind
tag
is
"customeraddressstreet",
if
bound
to
a
"customer"
bean
:end
:start
Return
the
current
value
of
the
field,
ie
either
the
property
value
or
a
rejected
update,
or
null
if
not
field-specific
<p>This
value
will
be
an
HTML-escaped
String
if
the
original
value
already
was
a
String
:end
:start
Get
the
'{@code
Class'
type
of
the
field
Favor
this
instead
of
'{@code
getValue()getClass()'
since
'{@code
getValue()'
may
return
'{@code
null'
:end
:start
Return
the
actual
value
of
the
field,
ie
the
raw
property
value,
or
null
if
not
available
:end
:start
Return
a
suitable
display
value
for
the
field,
ie
the
stringified
value
if
not
null,
and
an
empty
string
in
case
of
a
null
value
<p>This
value
will
be
an
HTML-escaped
String
if
the
original
value
was
non-null:
the
toString
result
of
the
original
value
will
get
HTML-escaped
:end
:start
Return
if
this
status
represents
a
field
or
object
error
:end
:start
Return
the
error
codes
for
the
field
or
object,
if
any
Returns
an
empty
array
instead
of
null
if
none
:end
:start
Return
the
first
error
codes
for
the
field
or
object,
if
any
:end
:start
Return
the
resolved
error
messages
for
the
field
or
object,
if
any
Returns
an
empty
array
instead
of
null
if
none
:end
:start
Return
the
first
error
message
for
the
field
or
object,
if
any
:end
:start
Return
an
error
message
string,
concatenating
all
messages
separated
by
the
given
delimiter
:end
:start
Return
the
Errors
instance
(typically
a
BindingResult)
that
this
bind
status
is
currently
associated
with
:end
:start
Return
the
PropertyEditor
for
the
property
that
this
bind
status
is
currently
bound
to
:end
:start
Find
a
PropertyEditor
for
the
given
value
class,
associated
with
the
property
that
this
bound
status
is
currently
bound
to
:end
:start
JSP-aware
(and
JSTL-aware)
subclass
of
RequestContext,
allowing
for
population
of
the
context
from
a
javaxservletjspPageContext
<p>This
context
will
detect
a
JSTL
locale
attribute
in
page/request/session/application
scope,
in
addition
to
the
fallback
locale
strategy
provided
by
the
base
class
:end
:start
Create
a
new
JspAwareRequestContext
for
the
given
page
context,
using
the
request
attributes
for
Errors
retrieval
:end
:start
Create
a
new
JspAwareRequestContext
for
the
given
page
context,
using
the
given
model
attributes
for
Errors
retrieval
:end
:start
Initialize
this
context
with
the
given
page
context,
using
the
given
model
attributes
for
Errors
retrieval
:end
:start
Return
the
underlying
PageContext
Only
intended
for
cooperating
classes
in
this
package
:end
:start
This
implementation
checks
for
a
JSTL
locale
attribute
in
page,
request,
session
or
application
scope;
if
not
found,
returns
the
HttpServletRequestgetLocale()
:end
:start
Helper
class
for
preparing
JSTL
views,
in
particular
for
exposing
a
JSTL
localization
context
:end
:start
Checks
JSTL's
"javaxservletjspjstlfmtlocalizationContext"
context-param
and
creates
a
corresponding
child
message
source,
with
the
provided
Spring-defined
MessageSource
as
parent
:end
:start
Exposes
JSTL-specific
request
attributes
specifying
locale
and
resource
bundle
for
JSTL's
formatting
and
message
tags,
using
Spring's
locale
and
MessageSource
:end
:start
Exposes
JSTL-specific
request
attributes
specifying
locale
and
resource
bundle
for
JSTL's
formatting
and
message
tags,
using
Spring's
locale
and
MessageSource
:end
:start
Context
holder
for
request-specific
state,
like
current
web
application
context,
current
locale,
current
theme,
and
potential
binding
errors
Provides
easy
access
to
localized
messages
and
Errors
instances
<p>Suitable
for
exposition
to
views,
and
usage
within
JSP's
"useBean"
tag,
JSP
scriptlets,
JSTL
EL,
Velocity
templates,
etc
Necessary
for
views
that
do
not
have
access
to
the
servlet
request,
like
Velocity
templates
<p>Can
be
instantiated
manually,
or
automatically
exposed
to
views
as
model
attribute
via
AbstractView's
"requestContextAttribute"
property
<p>Will
also
work
outside
of
DispatcherServlet
requests,
accessing
the
root
WebApplicationContext
and
using
an
appropriate
fallback
for
the
locale
(the
HttpServletRequest's
primary
locale)
:end
:start
Default
theme
name
used
if
the
RequestContext
cannot
find
a
ThemeResolver
Only
applies
to
non-DispatcherServlet
requests
<p>Same
as
AbstractThemeResolver's
default,
but
not
linked
in
here
to
avoid
package
interdependencies
:end
:start
Request
attribute
to
hold
the
current
web
application
context
for
RequestContext
usage
By
default,
the
DispatcherServlet's
context
(or
the
root
context
as
fallback)
is
exposed
:end
:start
Create
a
new
RequestContext
for
the
given
request,
using
the
request
attributes
for
Errors
retrieval
<p>This
only
works
with
InternalResourceViews,
as
Errors
instances
are
part
of
the
model
and
not
normally
exposed
as
request
attributes
It
will
typically
be
used
within
JSPs
or
custom
tags
<p><b>Will
only
work
within
a
DispatcherServlet
request</b>
Pass
in
a
ServletContext
to
be
able
to
fallback
to
the
root
WebApplicationContext
:end
:start
Create
a
new
RequestContext
for
the
given
request,
using
the
request
attributes
for
Errors
retrieval
<p>This
only
works
with
InternalResourceViews,
as
Errors
instances
are
part
of
the
model
and
not
normally
exposed
as
request
attributes
It
will
typically
be
used
within
JSPs
or
custom
tags
<p><b>Will
only
work
within
a
DispatcherServlet
request</b>
Pass
in
a
ServletContext
to
be
able
to
fallback
to
the
root
WebApplicationContext
:end
:start
Create
a
new
RequestContext
for
the
given
request,
using
the
request
attributes
for
Errors
retrieval
<p>This
only
works
with
InternalResourceViews,
as
Errors
instances
are
part
of
the
model
and
not
normally
exposed
as
request
attributes
It
will
typically
be
used
within
JSPs
or
custom
tags
<p>If
a
ServletContext
is
specified,
the
RequestContext
will
also
work
with
the
root
WebApplicationContext
(outside
a
DispatcherServlet)
:end
:start
Create
a
new
RequestContext
for
the
given
request,
using
the
given
model
attributes
for
Errors
retrieval
<p>This
works
with
all
View
implementations
It
will
typically
be
used
by
View
implementations
<p><b>Will
only
work
within
a
DispatcherServlet
request</b>
Pass
in
a
ServletContext
to
be
able
to
fallback
to
the
root
WebApplicationContext
:end
:start
Create
a
new
RequestContext
for
the
given
request,
using
the
given
model
attributes
for
Errors
retrieval
<p>This
works
with
all
View
implementations
It
will
typically
be
used
by
View
implementations
<p>If
a
ServletContext
is
specified,
the
RequestContext
will
also
work
with
a
root
WebApplicationContext
(outside
a
DispatcherServlet)
:end
:start
Default
constructor
for
subclasses
:end
:start
Initialize
this
context
with
the
given
request,
using
the
given
model
attributes
for
Errors
retrieval
<p>Delegates
to
getFallbackLocale
and
getFallbackTheme
for
determining
the
fallback
locale
and
theme,
respectively,
if
no
LocaleResolver
and/or
ThemeResolver
can
be
found
in
the
request
:end
:start
Determine
the
fallback
locale
for
this
context
<p>The
default
implementation
checks
for
a
JSTL
locale
attribute
in
request,
session
or
application
scope;
if
not
found,
returns
the
HttpServletRequestgetLocale()
:end
:start
Determine
the
fallback
time
zone
for
this
context
<p>The
default
implementation
checks
for
a
JSTL
time
zone
attribute
in
request,
session
or
application
scope;
returns
null
if
not
found
:end
:start
Determine
the
fallback
theme
for
this
context
<p>The
default
implementation
returns
the
default
theme
(with
name
"theme")
:end
:start
Return
the
underlying
HttpServletRequest
Only
intended
for
cooperating
classes
in
this
package
:end
:start
Return
the
underlying
ServletContext
Only
intended
for
cooperating
classes
in
this
package
:end
:start
Return
the
current
WebApplicationContext
:end
:start
Return
the
current
WebApplicationContext
as
MessageSource
:end
:start
Return
the
model
Map
that
this
RequestContext
encapsulates,
if
any
:end
:start
Return
the
current
Locale
(falling
back
to
the
request
locale;
never
null)
<p>Typically
coming
from
a
DispatcherServlet's
LocaleResolver
Also
includes
a
fallback
check
for
JSTL's
Locale
attribute
:end
:start
Return
the
current
TimeZone
(or
null
if
none
derivable
from
the
request)
<p>Typically
coming
from
a
DispatcherServlet's
LocaleContextResolver
Also
includes
a
fallback
check
for
JSTL's
TimeZone
attribute
:end
:start
Change
the
current
locale
to
the
specified
one,
storing
the
new
locale
through
the
configured
LocaleResolver
:end
:start
Change
the
current
locale
to
the
specified
locale
and
time
zone
context,
storing
the
new
locale
context
through
the
configured
LocaleResolver
:end
:start
Return
the
current
theme
(never
null)
<p>Resolved
lazily
for
more
efficiency
when
theme
support
is
not
being
used
:end
:start
Change
the
current
theme
to
the
specified
one,
storing
the
new
theme
name
through
the
configured
ThemeResolver
:end
:start
(De)activate
default
HTML
escaping
for
messages
and
errors,
for
the
scope
of
this
RequestContext
<p>The
default
is
the
application-wide
setting
(the
"defaultHtmlEscape"
context-param
in
webxml)
:end
:start
Is
default
HTML
escaping
active?
Falls
back
to
false
in
case
of
no
explicit
default
given
:end
:start
Return
the
default
HTML
escape
setting,
differentiating
between
no
default
specified
and
an
explicit
value
:end
:start
Set
the
UrlPathHelper
to
use
for
context
path
and
request
URI
decoding
Can
be
used
to
pass
a
shared
UrlPathHelper
instance
in
<p>A
default
UrlPathHelper
is
always
available
:end
:start
Return
the
UrlPathHelper
used
for
context
path
and
request
URI
decoding
Can
be
used
to
configure
the
current
UrlPathHelper
<p>A
default
UrlPathHelper
is
always
available
:end
:start
Return
the
RequestDataValueProcessor
instance
to
use
obtained
from
the
WebApplicationContext
under
the
name
"requestDataValueProcessor"
Or
null
if
no
matching
bean
was
found
:end
:start
Return
the
context
path
of
the
original
request,
that
is,
the
path
that
indicates
the
current
web
application
This
is
useful
for
building
links
to
other
resources
within
the
application
<p>Delegates
to
the
UrlPathHelper
for
decoding
:end
:start
Return
a
context-aware
URl
for
the
given
relative
URL
:end
:start
Return
a
context-aware
URl
for
the
given
relative
URL
with
placeholders
(named
keys
with
braces
For
example,
send
in
a
relative
URL
foo/{bar?spam={spam
and
a
parameter
map
and
the
result
will
be
[contextpath]/foo/baz?spam=nuts
:end
:start
Return
the
path
to
URL
mappings
within
the
current
servlet
including
the
context
path
and
the
servlet
path
of
the
original
request
This
is
useful
for
building
links
to
other
resources
within
the
application
where
a
servlet
mapping
of
the
style
"/main/*"
is
used
<p>Delegates
to
the
UrlPathHelper
to
determine
the
context
and
servlet
path
:end
:start
Return
the
request
URI
of
the
original
request,
that
is,
the
invoked
URL
without
parameters
This
is
particularly
useful
as
HTML
form
action
target,
possibly
in
combination
with
the
original
query
string
<p>Delegates
to
the
UrlPathHelper
for
decoding
:end
:start
Return
the
query
string
of
the
current
request,
that
is,
the
part
after
the
request
path
This
is
particularly
useful
for
building
an
HTML
form
action
target
in
combination
with
the
original
request
URI
<p>Delegates
to
the
UrlPathHelper
for
decoding
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
message
for
the
given
code
:end
:start
Retrieve
the
given
MessageSourceResolvable
(eg
an
ObjectError
instance),
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
given
MessageSourceResolvable
(eg
an
ObjectError
instance)
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
theme
message
for
the
given
code
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
given
MessageSourceResolvable
in
the
current
theme
<p>Note
that
theme
messages
are
never
HTML-escaped,
as
they
typically
denote
theme-specific
resource
paths
and
not
client-visible
messages
:end
:start
Retrieve
the
Errors
instance
for
the
given
bind
object,
using
the
"defaultHtmlEscape"
setting
:end
:start
Retrieve
the
Errors
instance
for
the
given
bind
object
:end
:start
Retrieve
the
model
object
for
the
given
model
name,
either
from
the
model
or
from
the
request
attributes
:end
:start
Create
a
BindStatus
for
the
given
bind
object,
using
the
"defaultHtmlEscape"
setting
:end
:start
Create
a
BindStatus
for
the
given
bind
object,
using
the
"defaultHtmlEscape"
setting
:end
:start
Utility
class
for
easy
access
to
request-specific
state
which
has
been
set
by
the
orgspringframeworkwebservletDispatcherServlet
<p>Supports
lookup
of
current
WebApplicationContext,
LocaleResolver,
Locale,
ThemeResolver,
Theme,
and
MultipartResolver
:end
:start
Look
for
the
WebApplicationContext
associated
with
the
DispatcherServlet
that
has
initiated
request
processing
:end
:start
Look
for
the
WebApplicationContext
associated
with
the
DispatcherServlet
that
has
initiated
request
processing,
and
for
the
global
context
if
none
was
found
associated
with
the
current
request
This
method
is
useful
to
allow
components
outside
the
framework,
such
as
JSP
tag
handlers,
to
access
the
most
specific
application
context
available
:end
:start
Return
the
LocaleResolver
that
has
been
bound
to
the
request
by
the
DispatcherServlet
:end
:start
Retrieve
the
current
locale
from
the
given
request,
using
the
LocaleResolver
bound
to
the
request
by
the
DispatcherServlet
(if
available),
falling
back
to
the
request's
accept-header
Locale
<p>This
method
serves
as
a
straightforward
alternative
to
the
standard
Servlet
javaxservlethttpHttpServletRequest#getLocale()
method,
falling
back
to
the
latter
if
no
more
specific
locale
has
been
found
<p>Consider
using
orgspringframeworkcontexti18nLocaleContextHolder#getLocale()
which
will
normally
be
populated
with
the
same
Locale
:end
:start
Retrieve
the
current
time
zone
from
the
given
request,
using
the
TimeZoneAwareLocaleResolver
bound
to
the
request
by
the
DispatcherServlet
(if
available),
falling
back
to
the
system's
default
time
zone
<p>Note:
This
method
returns
null
if
no
specific
time
zone
can
be
resolved
for
the
given
request
This
is
in
contrast
to
#getLocale
where
there
is
always
the
request's
accept-header
locale
to
fall
back
to
<p>Consider
using
orgspringframeworkcontexti18nLocaleContextHolder#getTimeZone()
which
will
normally
be
populated
with
the
same
TimeZone:
That
method
only
differs
in
terms
of
its
fallback
to
the
system
time
zone
if
the
LocaleResolver
hasn't
provided
provided
a
specific
time
zone
(instead
of
this
method's
null)
:end
:start
Return
the
ThemeResolver
that
has
been
bound
to
the
request
by
the
DispatcherServlet
:end
:start
Return
the
ThemeSource
that
has
been
bound
to
the
request
by
the
DispatcherServlet
:end
:start
Retrieves
the
current
theme
from
the
given
request,
using
the
ThemeResolver
and
ThemeSource
bound
to
the
request
by
the
DispatcherServlet
:end
:start
Return
a
read-only
Map
with
"input"
flash
attributes
saved
on
a
previous
request
:end
:start
Return
the
"output"
FlashMap
with
attributes
to
save
for
a
subsequent
request
:end
:start
Return
the
FlashMapManager
instance
to
save
flash
attributes
with
before
a
redirect
:end
:start
A
contract
for
inspecting
and
potentially
modifying
request
data
values
such
as
URL
query
parameters
or
form
field
values
before
they
are
rendered
by
a
view
or
before
a
redirect
<p>Implementations
may
use
this
contract
for
example
as
part
of
a
solution
to
provide
data
integrity,
confidentiality,
protection
against
cross-site
request
forgery
(CSRF),
and
others
or
for
other
tasks
such
as
automatically
adding
a
hidden
field
to
all
forms
and
URLs
<p>View
technologies
that
support
this
contract
can
obtain
an
instance
to
delegate
to
via
RequestContext#getRequestDataValueProcessor()
:end
:start
Invoked
when
a
new
form
action
is
rendered
:end
:start
Invoked
when
a
form
field
value
is
rendered
:end
:start
Invoked
after
all
form
fields
have
been
rendered
:end
:start
Invoked
when
a
URL
is
about
to
be
rendered
or
redirected
to
:end
:start
A
UriComponentsBuilder
that
extracts
information
from
an
HttpServletRequest
:end
:start
Default
constructor
Protected
to
prevent
direct
instantiation
:end
:start
Prepare
a
builder
from
the
host,
port,
scheme,
and
context
path
of
an
HttpServletRequest
:end
:start
Prepare
a
builder
from
the
host,
port,
scheme,
context
path,
and
servlet
mapping
of
an
HttpServletRequest
The
results
may
vary
depending
on
the
type
of
servlet
mapping
used
<p>If
the
servlet
is
mapped
by
name,
eg
"/main/*",
the
path
will
end
with
"/main"
If
the
servlet
is
mapped
otherwise,
eg
"/"
or
"*do",
the
result
will
be
the
same
as
if
calling
#fromContextPath(HttpServletRequest)
:end
:start
Prepare
a
builder
from
the
host,
port,
scheme,
and
path
of
an
HttpServletRequest
:end
:start
Prepare
a
builder
by
copying
the
scheme,
host,
port,
path,
and
query
string
of
an
HttpServletRequest
:end
:start
Same
as
#fromContextPath(HttpServletRequest)
except
the
request
is
obtained
through
RequestContextHolder
:end
:start
Same
as
#fromServletMapping(HttpServletRequest)
except
the
request
is
obtained
through
RequestContextHolder
:end
:start
Same
as
#fromRequestUri(HttpServletRequest)
except
the
request
is
obtained
through
RequestContextHolder
:end
:start
Same
as
#fromRequest(HttpServletRequest)
except
the
request
is
obtained
through
RequestContextHolder
:end
:start
Obtain
the
request
through
RequestContextHolder
:end
:start
Removes
any
path
extension
from
the
HttpServletRequest#getRequestURI()
requestURI
This
method
must
be
invoked
before
any
calls
to
#path(String)
or
#pathSegment(String)
<pre>
//
GET
http://foocom/rest/books/6json
ServletUriComponentsBuilder
builder
=
ServletUriComponentsBuilderfromRequestUri(thisrequest);
String
ext
=
builderremovePathExtension();
String
uri
=
builderpath("/pages/1{ext")buildAndExpand(ext)toUriString();
assertEquals("http://foocom/rest/books/6/pages/1json",
result);
</pre>
:end
:start
Store
and
retrieve
FlashMap
instances
to
and
from
the
HTTP
session
:end
:start
Retrieves
saved
FlashMap
instances
from
the
HTTP
session,
if
any
:end
:start
Saves
the
given
FlashMap
instances
in
the
HTTP
session
:end
:start
Exposes
the
best
available
session
mutex
:end
:start
Convenient
superclass
for
any
kind
of
web
content
generator,
like
orgspringframeworkwebservletmvcAbstractController
and
orgspringframeworkwebservletmvcWebContentInterceptor
Can
also
be
used
for
custom
handlers
that
have
their
own
orgspringframeworkwebservletHandlerAdapter
<p>Supports
HTTP
cache
control
options
The
usage
of
corresponding
HTTP
headers
can
be
controlled
via
the
"useExpiresHeader",
"useCacheControlHeader"
and
"useCacheControlNoStore"
properties
:end
:start
HTTP
method
"GET"
:end
:start
HTTP
method
"HEAD"
:end
:start
HTTP
method
"POST"
:end
:start
Create
a
new
WebContentGenerator
which
supports
HTTP
methods
GET,
HEAD
and
POST
by
default
:end
:start
Create
a
new
WebContentGenerator
:end
:start
Create
a
new
WebContentGenerator
:end
:start
Set
the
HTTP
methods
that
this
content
generator
should
support
<p>Default
is
GET,
HEAD
and
POST
for
simple
form
controller
types;
unrestricted
for
general
controllers
and
interceptors
:end
:start
Return
the
HTTP
methods
that
this
content
generator
supports
:end
:start
Set
whether
a
session
should
be
required
to
handle
requests
:end
:start
Return
whether
a
session
is
required
to
handle
requests
:end
:start
Set
whether
to
use
the
HTTP
10
expires
header
Default
is
"true"
<p>Note:
Cache
headers
will
only
get
applied
if
caching
is
enabled
(or
explicitly
prevented)
for
the
current
request
:end
:start
Return
whether
the
HTTP
10
expires
header
is
used
:end
:start
Set
whether
to
use
the
HTTP
11
cache-control
header
Default
is
"true"
<p>Note:
Cache
headers
will
only
get
applied
if
caching
is
enabled
(or
explicitly
prevented)
for
the
current
request
:end
:start
Return
whether
the
HTTP
11
cache-control
header
is
used
:end
:start
Set
whether
to
use
the
HTTP
11
cache-control
header
value
"no-store"
when
preventing
caching
Default
is
"true"
:end
:start
Return
whether
the
HTTP
11
cache-control
header
value
"no-store"
is
used
:end
:start
An
option
to
add
'must-revalidate'
to
every
Cache-Control
header
This
may
be
useful
with
annotated
controller
methods,
which
can
programmatically
do
a
lastModified
calculation
as
described
in
WebRequest#checkNotModified(long)
Default
is
"false",
effectively
relying
on
whether
the
handler
implements
orgspringframeworkwebservletmvcLastModified
or
not
:end
:start
Return
whether
'must-revalidate'
is
added
to
every
Cache-Control
header
:end
:start
Cache
content
for
the
given
number
of
seconds
Default
is
-1,
indicating
no
generation
of
cache-related
headers
<p>Only
if
this
is
set
to
0
(no
cache)
or
a
positive
value
(cache
for
this
many
seconds)
will
this
class
generate
cache
headers
<p>The
headers
can
be
overwritten
by
subclasses,
before
content
is
generated
:end
:start
Return
the
number
of
seconds
that
content
is
cached
:end
:start
Check
and
prepare
the
given
request
and
response
according
to
the
settings
of
this
generator
Checks
for
supported
methods
and
a
required
session,
and
applies
the
number
of
cache
seconds
specified
for
this
generator
:end
:start
Check
and
prepare
the
given
request
and
response
according
to
the
settings
of
this
generator
Checks
for
supported
methods
and
a
required
session,
and
applies
the
given
number
of
cache
seconds
:end
:start
Prevent
the
response
from
being
cached
See
http://wwwmnotnet/cache_docs
:end
:start
Set
HTTP
headers
to
allow
caching
for
the
given
number
of
seconds
Does
not
tell
the
browser
to
revalidate
the
resource
:end
:start
Set
HTTP
headers
to
allow
caching
for
the
given
number
of
seconds
Tells
the
browser
to
revalidate
the
resource
if
mustRevalidate
is
true
:end
:start
Apply
the
given
cache
seconds
and
generate
corresponding
HTTP
headers,
ie
allow
caching
for
the
given
number
of
seconds
in
case
of
a
positive
value,
prevent
caching
if
given
a
0
value,
do
nothing
else
Does
not
tell
the
browser
to
revalidate
the
resource
:end
:start
Apply
the
given
cache
seconds
and
generate
respective
HTTP
headers
<p>That
is,
allow
caching
for
the
given
number
of
seconds
in
the
case
of
a
positive
value,
prevent
caching
if
given
a
0
value,
else
do
nothing
(ie
leave
caching
to
the
client)
:end
:start
Allows
implementing
tag
to
utilize
nested
spring:argument
tags
:end
:start
Callback
hook
for
nested
spring:argument
tags
to
pass
their
value
to
the
parent
tag
:end
:start
JSP
tag
for
collecting
arguments
and
passing
them
to
an
ArgumentAware
ancestor
in
the
tag
hierarchy
<p>This
tag
must
be
nested
under
an
argument
aware
tag
:end
:start
Sets
the
value
of
the
argument
<p>
Optional
If
not
set,
the
tag's
body
content
is
evaluated
:end
:start
JSP
tag
that
evaluates
content
if
there
are
binding
errors
for
a
certain
bean
Exports
an
"errors"
variable
of
type
orgspringframeworkvalidationErrors
for
the
given
bean
:end
:start
Set
the
name
of
the
bean
that
this
tag
should
check
:end
:start
Return
the
name
of
the
bean
that
this
tag
checks
:end
:start
Retrieve
the
Errors
instance
that
this
tag
is
currently
bound
to
<p>Intended
for
cooperating
nesting
tags
:end
:start
Bind
tag,
supporting
evaluation
of
binding
errors
for
a
certain
bean
or
bean
property
Exposes
a
"status"
variable
of
type
orgspringframeworkwebservletsupportBindStatus,
to
both
Java
expressions
and
JSP
EL
expressions
<p>Can
be
used
to
bind
to
any
bean
or
bean
property
in
the
model
The
specified
path
determines
whether
the
tag
exposes
the
status
of
the
bean
itself
(showing
object-level
errors),
a
specific
bean
property
(showing
field
errors),
or
a
matching
set
of
bean
properties
(showing
all
corresponding
field
errors)
<p>The
orgspringframeworkvalidationErrors
object
that
has
been
bound
using
this
tag
is
exposed
to
collaborating
tags,
as
well
as
the
bean
property
that
this
errors
object
applies
to
Nested
tags
such
as
the
TransformTag
can
access
those
exposed
properties
:end
:start
Name
of
the
exposed
variable
within
the
scope
of
this
tag:
"status"
:end
:start
Set
the
path
that
this
tag
should
apply
Can
be
a
bean
(eg
"person")
to
get
global
errors,
or
a
bean
property
(eg
"personname")
to
get
field
errors
(also
supporting
nested
fields
and
"personna*"
mappings)
"person*"
will
return
all
errors
for
the
specified
bean,
both
global
and
field
errors
:end
:start
Return
the
path
that
this
tag
applies
to
:end
:start
Set
whether
to
ignore
a
nested
path,
if
any
Default
is
to
not
ignore
:end
:start
Return
whether
to
ignore
a
nested
path,
if
any
:end
:start
Retrieve
the
property
that
this
tag
is
currently
bound
to,
or
null
if
bound
to
an
object
rather
than
a
specific
property
Intended
for
cooperating
nesting
tags
:end
:start
Retrieve
the
Errors
instance
that
this
tag
is
currently
bound
to
Intended
for
cooperating
nesting
tags
:end
:start
Interface
to
be
implemented
by
JSP
tags
that
expose
a
PropertyEditor
for
a
property
that
they
are
currently
bound
to
:end
:start
Retrieve
the
PropertyEditor
for
the
property
that
this
tag
is
currently
bound
to
Intended
for
cooperating
nesting
tags
:end
:start
Custom
JSP
tag
to
escape
its
enclosed
body
content,
applying
HTML
escaping
and/or
JavaScript
escaping
<p>Provides
a
"htmlEscape"
property
for
explicitly
specifying
whether
to
apply
HTML
escaping
If
not
set,
a
page-level
default
(eg
from
the
HtmlEscapeTag)
or
an
application-wide
default
(the
"defaultHtmlEscape"
context-param
in
webxml)
is
used
<p>Provides
a
"javaScriptEscape"
property
for
specifying
whether
to
apply
JavaScript
escaping
Can
be
combined
with
HTML
escaping
or
used
standalone
:end
:start
Set
JavaScript
escaping
for
this
tag,
as
boolean
value
Default
is
"false"
:end
:start
Read
the
unescaped
body
content
from
the
page
:end
:start
Write
the
escaped
body
content
to
the
page
<p>Can
be
overridden
in
subclasses,
eg
for
testing
purposes
:end
:start
JSP
tag
for
evaluating
expressions
with
the
Spring
Expression
Language
(SpEL)
Supports
the
standard
JSP
evaluation
context
consisting
of
implicit
variables
and
scoped
attributes
:end
:start
Set
the
expression
to
evaluate
:end
:start
Set
the
variable
name
to
expose
the
evaluation
result
under
Defaults
to
rendering
the
result
to
the
current
JspWriter
:end
:start
Set
the
scope
to
export
the
evaluation
result
to
This
attribute
has
no
meaning
unless
var
is
also
defined
:end
:start
Set
JavaScript
escaping
for
this
tag,
as
boolean
value
Default
is
"false"
:end
:start
Abstract
base
class
to
provide
common
methods
for
implementing
databinding-aware
JSP
tags
for
rendering
an
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
checkbox'
or
'{@code
radio'
:end
:start
Render
the
'{@code
input(checkbox)'
with
the
supplied
value,
marking
the
'{@code
input'
element
as
'checked'
if
the
supplied
value
matches
the
bound
value
:end
:start
Render
the
'{@code
input(checkbox)'
with
the
supplied
value,
marking
the
'{@code
input'
element
as
'checked'
if
the
supplied
value
matches
the
bound
value
:end
:start
Render
the
'{@code
input(checkbox)'
with
the
supplied
value,
marking
the
'{@code
input'
element
as
'checked'
if
the
supplied
Boolean
is
true
:end
:start
Return
a
unique
ID
for
the
bound
name
within
the
current
PageContext
:end
:start
Writes
the
'{@code
input'
element
to
the
supplied
TagWriter,
marking
it
as
'checked'
if
appropriate
:end
:start
Flags
"type"
as
an
illegal
dynamic
attribute
:end
:start
Return
the
type
of
the
HTML
input
element
to
generate:
"checkbox"
or
"radio"
:end
:start
Base
tag
for
all
data-binding
aware
JSP
form
tags
<p>Provides
the
common
#setPath
path
and
#setId
id
properties
Provides
sub-classes
with
utility
methods
for
accessing
the
BindStatus
of
their
bound
value
and
also
for
#writeOptionalAttribute
interacting
with
the
TagWriter
:end
:start
Name
of
the
exposed
path
variable
within
the
scope
of
this
tag:
"nestedPath"
Same
value
as
orgspringframeworkwebservlettagsNestedPathTag#NESTED_PATH_VARIABLE_NAME
:end
:start
Set
the
property
path
from
the
FormTag#setModelAttribute
form
object
May
be
a
runtime
expression
:end
:start
Get
the
#evaluate
resolved
property
path
for
the
FormTag#setModelAttribute
form
object
:end
:start
Set
the
value
of
the
'{@code
id'
attribute
<p>May
be
a
runtime
expression;
defaults
to
the
value
of
#getName()
Note
that
the
default
value
may
not
be
valid
for
certain
tags
:end
:start
Get
the
value
of
the
'{@code
id'
attribute
:end
:start
Writes
the
default
set
of
attributes
to
the
supplied
TagWriter
Further
abstract
sub-classes
should
override
this
method
to
add
in
any
additional
default
attributes
but
<strong>must</strong>
remember
to
call
the
super
method
<p>Concrete
sub-classes
should
call
this
method
when/if
they
want
to
render
default
attributes
:end
:start
Determine
the
'{@code
id'
attribute
value
for
this
tag,
autogenerating
one
if
none
specified
:end
:start
Autogenerate
the
'{@code
id'
attribute
value
for
this
tag
<p>The
default
implementation
simply
delegates
to
#getName(),
deleting
invalid
characters
(such
as
"["
or
"]")
:end
:start
Get
the
value
for
the
HTML
'{@code
name'
attribute
<p>The
default
implementation
simply
delegates
to
#getPropertyPath()
to
use
the
property
path
as
the
name
For
the
most
part
this
is
desirable
as
it
links
with
the
server-side
expectation
for
data
binding
However,
some
subclasses
may
wish
to
change
the
value
of
the
'{@code
name'
attribute
without
changing
the
bind
path
:end
:start
Get
the
BindStatus
for
this
tag
:end
:start
Get
the
value
of
the
nested
path
that
may
have
been
exposed
by
the
NestedPathTag
:end
:start
Build
the
property
path
for
this
tag,
including
the
nested
path
but
<i>not</i>
prefixed
with
the
name
of
the
form
attribute
:end
:start
Get
the
bound
value
:end
:start
Get
the
PropertyEditor,
if
any,
in
use
for
value
bound
to
this
tag
:end
:start
Exposes
the
PropertyEditor
for
EditorAwareTag
<p>Use
#getPropertyEditor()
for
internal
rendering
purposes
:end
:start
Get
a
display
String
for
the
given
value,
converted
by
a
PropertyEditor
that
the
BindStatus
may
have
registered
for
the
value's
Class
:end
:start
Process
the
given
form
field
through
a
RequestDataValueProcessor
instance
if
one
is
configured
or
otherwise
returns
the
same
value
:end
:start
Disposes
of
the
BindStatus
instance
:end
:start
Base
class
for
all
JSP
form
tags
Provides
utility
methods
for
null-safe
EL
evaluation
and
for
accessing
and
working
with
a
TagWriter
<p>Subclasses
should
implement
the
#writeTagContent(TagWriter)
to
perform
actual
tag
rendering
<p>Subclasses
(or
test
classes)
can
override
the
#createTagWriter()
method
to
redirect
output
to
a
javaioWriter
other
than
the
javaxservletjspJspWriter
associated
with
the
current
javaxservletjspPageContext
:end
:start
Evaluate
the
supplied
value
for
the
supplied
attribute
name
<p>The
default
implementation
simply
returns
the
given
value
as-is
:end
:start
Optionally
writes
the
supplied
value
under
the
supplied
attribute
name
into
the
supplied
TagWriter
In
this
case,
the
supplied
value
is
#evaluate
evaluated
first
and
then
the
ObjectUtils#getDisplayString
String
representation
is
written
as
the
attribute
value
If
the
resultant
String
representation
is
null
or
empty,
no
attribute
is
written
:end
:start
Create
the
TagWriter
which
all
output
will
be
written
to
By
default,
the
TagWriter
writes
its
output
to
the
javaxservletjspJspWriter
for
the
current
javaxservletjspPageContext
Subclasses
may
choose
to
change
the
javaioWriter
to
which
output
is
actually
written
:end
:start
Provide
a
simple
template
method
that
calls
#createTagWriter()
and
passes
the
created
TagWriter
to
the
#writeTagContent(TagWriter)
method
:end
:start
Get
the
display
value
of
the
supplied
Object,
HTML
escaped
as
required
This
version
is
<strong>not</strong>
PropertyEditor-aware
:end
:start
Get
the
display
value
of
the
supplied
Object,
HTML
escaped
as
required
If
the
supplied
value
is
not
a
String
and
the
supplied
PropertyEditor
is
not
null
then
the
PropertyEditor
is
used
to
obtain
the
display
value
:end
:start
Overridden
to
default
to
true
in
case
of
no
explicit
default
given
:end
:start
Subclasses
should
implement
this
method
to
perform
tag
content
rendering
:end
:start
Convenient
super
class
for
many
html
tags
that
render
content
using
the
databinding
features
of
the
AbstractHtmlElementTag
AbstractHtmlElementTag
The
only
thing
sub
tags
need
to
do
is
override
#renderDefaultContent(TagWriter)
:end
:start
If
#shouldRender
rendering,
flush
any
buffered
BodyContent
or,
if
no
BodyContent
is
supplied,
#renderDefaultContent
render
the
default
content
:end
:start
Render
the
tag
contents
based
on
the
supplied
BodyContent
<p>The
default
implementation
simply
#flushBufferedBodyContent
flushes
the
BodyContent
directly
to
the
output
Subclasses
may
choose
to
override
this
to
add
additional
content
to
the
output
:end
:start
Clean
up
any
attributes
and
stored
resources
:end
:start
Called
at
the
start
of
#writeTagContent
allowing
subclasses
to
perform
any
precondition
checks
or
setup
tasks
that
might
be
necessary
:end
:start
Should
rendering
of
this
tag
proceed
at
all
Returns
'{@code
true'
by
default
causing
rendering
to
occur
always,
Subclasses
can
override
this
if
they
provide
conditional
rendering
:end
:start
Called
during
#writeTagContent
allowing
subclasses
to
add
any
attributes
to
the
javaxservletjspPageContext
as
needed
:end
:start
Called
by
#doFinally
allowing
subclasses
to
remove
any
attributes
from
the
javaxservletjspPageContext
as
needed
:end
:start
The
user
customised
the
output
of
the
error
messages
-
flush
the
buffered
content
into
the
main
javaxservletjspJspWriter
:end
:start
Base
class
for
databinding-aware
JSP
tags
that
render
HTML
element
Provides
a
set
of
properties
corresponding
to
the
set
of
HTML
attributes
that
are
common
across
elements
<p>Additionally,
this
base
class
allows
for
rendering
non-standard
attributes
as
part
of
the
tag's
output
These
attributes
are
accessible
to
subclasses
if
needed
via
the
AbstractHtmlElementTag#getDynamicAttributes()
dynamicAttributes
map
:end
:start
Set
the
value
of
the
'{@code
class'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
class'
attribute
May
be
a
runtime
expression
:end
:start
The
CSS
class
to
use
when
the
field
bound
to
a
particular
tag
has
errors
May
be
a
runtime
expression
:end
:start
The
CSS
class
to
use
when
the
field
bound
to
a
particular
tag
has
errors
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
style'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
style'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
lang'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
lang'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
title'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
title'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
dir'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
dir'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
tabindex'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
tabindex'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onclick'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onclick'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
ondblclick'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
ondblclick'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onmousedown'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onmousedown'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onmouseup'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onmouseup'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onmouseover'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onmouseover'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onmousemove'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onmousemove'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onmouseout'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onmouseout'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onkeypress'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onkeypress'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onkeyup'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onkeyup'
attribute
May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
'{@code
onkeydown'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onkeydown'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
map
of
dynamic
attributes
:end
:start
:end
:start
Whether
the
given
name-value
pair
is
a
valid
dynamic
attribute
:end
:start
Writes
the
default
attributes
configured
via
this
base
class
to
the
supplied
TagWriter
Subclasses
should
call
this
when
they
want
the
base
attribute
set
to
be
written
to
the
output
:end
:start
Writes
the
optional
attributes
configured
via
this
base
class
to
the
supplied
TagWriter
The
set
of
optional
attributes
that
will
be
rendered
includes
any
non-standard
dynamic
attributes
Called
by
#writeDefaultAttributes(TagWriter)
:end
:start
Gets
the
appropriate
CSS
class
to
use
based
on
the
state
of
the
current
orgspringframeworkwebservletsupportBindStatus
object
:end
:start
Base
class
for
databinding-aware
JSP
tags
that
render
HTML
form
input
element
<p>Provides
a
set
of
properties
corresponding
to
the
set
of
HTML
attributes
that
are
common
across
form
input
elements
:end
:start
The
name
of
the
'{@code
onfocus'
attribute
:end
:start
The
name
of
the
'{@code
onblur'
attribute
:end
:start
The
name
of
the
'{@code
onchange'
attribute
:end
:start
The
name
of
the
'{@code
accesskey'
attribute
:end
:start
The
name
of
the
'{@code
disabled'
attribute
:end
:start
The
name
of
the
'{@code
readonly'
attribute
:end
:start
Set
the
value
of
the
'{@code
onfocus'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onfocus'
attribute
:end
:start
Set
the
value
of
the
'{@code
onblur'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onblur'
attribute
:end
:start
Set
the
value
of
the
'{@code
onchange'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onchange'
attribute
:end
:start
Set
the
value
of
the
'{@code
accesskey'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
accesskey'
attribute
:end
:start
Set
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Get
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Sets
the
value
of
the
'{@code
readonly'
attribute
:end
:start
Gets
the
value
of
the
'{@code
readonly'
attribute
:end
:start
Adds
input-specific
optional
attributes
as
defined
by
this
base
class
:end
:start
Abstract
base
class
to
provide
common
methods
for
implementing
databinding-aware
JSP
tags
for
rendering
<i>multiple</i>
HTML
'{@code
input'
elements
with
a
'{@code
type'
of
'{@code
checkbox'
or
'{@code
radio'
:end
:start
Set
the
javautilCollection,
javautilMap
or
array
of
objects
used
to
generate
the
'{@code
input
type="checkbox/radio"'
tags
<p>Typically
a
runtime
expression
:end
:start
Get
the
javautilCollection,
javautilMap
or
array
of
objects
used
to
generate
the
'{@code
input
type="checkbox/radio"'
tags
:end
:start
Set
the
name
of
the
property
mapped
to
the
'{@code
value'
attribute
of
the
'{@code
input
type="checkbox/radio"'
tag
<p>May
be
a
runtime
expression
:end
:start
Get
the
name
of
the
property
mapped
to
the
'{@code
value'
attribute
of
the
'{@code
input
type="checkbox/radio"'
tag
:end
:start
Set
the
value
to
be
displayed
as
part
of
the
'{@code
input
type="checkbox/radio"'
tag
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
to
be
displayed
as
part
of
the
'{@code
input
type="checkbox/radio"'
tag
:end
:start
Set
the
delimiter
to
be
used
between
each
'{@code
input
type="checkbox/radio"'
tag
<p>By
default,
there
is
<em>no</em>
delimiter
:end
:start
Return
the
delimiter
to
be
used
between
each
'{@code
input
type="radio"'
tag
:end
:start
Set
the
HTML
element
used
to
enclose
the
'{@code
input
type="checkbox/radio"'
tag
<p>Defaults
to
an
HTML
'{@code
&lt;span/&gt;'
tag
:end
:start
Get
the
HTML
element
used
to
enclose
'{@code
input
type="checkbox/radio"'
tag
:end
:start
Appends
a
counter
to
a
specified
id
as
well,
since
we're
dealing
with
multiple
HTML
elements
:end
:start
Renders
the
'{@code
input
type="radio"'
element
with
the
configured
#setItems(Object)
values
Marks
the
element
as
checked
if
the
value
matches
the
bound
value
:end
:start
Abstract
base
class
to
provide
common
methods
for
implementing
databinding-aware
JSP
tags
for
rendering
a
<i>single</i>
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
checkbox'
or
'{@code
radio'
:end
:start
Set
the
value
of
the
'{@code
value'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
value'
attribute
:end
:start
Set
the
value
of
the
'{@code
label'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
label'
attribute
:end
:start
Renders
the
'{@code
input(radio)'
element
with
the
configured
#setValue(Object)
value
Marks
the
element
as
checked
if
the
value
matches
the
#getValue
bound
value
:end
:start
Write
the
details
for
the
given
primary
tag:
ie
special
attributes
and
the
tag's
value
:end
:start
An
HTML
button
tag
This
tag
is
provided
for
completeness
if
the
application
relies
on
a
RequestDataValueProcessor
:end
:start
The
name
of
the
'{@code
disabled'
attribute
:end
:start
Get
the
value
of
the
'{@code
name'
attribute
:end
:start
Set
the
value
of
the
'{@code
name'
attribute
:end
:start
Set
the
value
of
the
'{@code
value'
attribute
:end
:start
Get
the
value
of
the
'{@code
value'
attribute
:end
:start
Set
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Get
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Writes
the
'{@code
value'
attribute
to
the
supplied
TagWriter
Subclasses
may
choose
to
override
this
implementation
to
control
exactly
when
the
value
is
written
:end
:start
Return
the
default
value
:end
:start
Get
the
value
of
the
'{@code
type'
attribute
Subclasses
can
override
this
to
change
the
type
of
'{@code
input'
element
rendered
Default
value
is
'{@code
submit'
:end
:start
Closes
the
'{@code
button'
block
tag
:end
:start
Databinding-aware
JSP
tag
for
rendering
multiple
HTML
'{@code
input'
elements
with
a
'{@code
type'
of
'{@code
checkbox'
<p>Intended
to
be
used
with
a
Collection
as
the
#getItems()
bound
value
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
checkbox'
<p>May
be
used
in
one
of
three
different
approaches
depending
on
the
type
of
the
#getValue
bound
value
<h3>Approach
One</h3>
When
the
bound
value
is
of
type
Boolean
then
the
'{@code
input(checkbox)'
is
marked
as
'checked'
if
the
bound
value
is
true
The
'{@code
value'
attribute
corresponds
to
the
resolved
value
of
the
#setValue(Object)
value
property
<h3>Approach
Two</h3>
When
the
bound
value
is
of
type
Collection
then
the
'{@code
input(checkbox)'
is
marked
as
'checked'
if
the
configured
#setValue(Object)
value
is
present
in
the
bound
Collection
<h3>Approach
Three</h3>
For
any
other
bound
value
type,
the
'{@code
input(checkbox)'
is
marked
as
'checked'
if
the
the
configured
#setValue(Object)
value
is
equal
to
the
bound
value
:end
:start
Form
tag
for
displaying
errors
for
a
particular
field
or
object
<p>This
tag
supports
three
main
usage
patterns:
<ol>
<li>Field
only
-
set
'{@code
path'
to
the
field
name
(or
path)</li>
<li>Object
errors
only
-
omit
'{@code
path'</li>
<li>All
errors
-
set
'{@code
path'
to
'{@code
*'</li>
</ol>
:end
:start
The
key
under
which
this
tag
exposes
error
messages
in
the
PageContext#PAGE_SCOPE
page
context
scope
:end
:start
The
HTML
'{@code
span'
tag
:end
:start
Set
the
HTML
element
must
be
used
to
render
the
error
messages
<p>Defaults
to
an
HTML
'{@code
&lt;span/&gt;'
tag
:end
:start
Get
the
HTML
element
must
be
used
to
render
the
error
messages
:end
:start
Set
the
delimiter
to
be
used
between
error
messages
<p>Defaults
to
an
HTML
'{@code
&lt;br/&gt;'
tag
:end
:start
Return
the
delimiter
to
be
used
between
error
messages
:end
:start
Get
the
value
for
the
HTML
'{@code
id'
attribute
<p>Appends
'{@code
errors'
to
the
value
returned
by
#getPropertyPath()
or
to
the
model
attribute
name
if
the
&lt;form:errors/&gt;
tag's
'{@code
path'
attribute
has
been
omitted
:end
:start
Get
the
value
for
the
HTML
'{@code
name'
attribute
<p>Simply
returns
null
because
the
'{@code
name'
attribute
is
not
a
validate
attribute
for
the
'{@code
span'
element
:end
:start
Should
rendering
of
this
tag
proceed
at
all?
<p>Only
renders
output
when
there
are
errors
for
the
configured
#setPath
path
:end
:start
Exposes
any
bind
status
error
messages
under
#MESSAGES_ATTRIBUTE
this
key
in
the
PageContext#PAGE_SCOPE
<p>Only
called
if
#shouldRender()
returns
true
:end
:start
Removes
any
bind
status
error
messages
that
were
previously
stored
under
#MESSAGES_ATTRIBUTE
this
key
in
the
PageContext#PAGE_SCOPE
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
form'
whose
inner
elements
are
bound
to
properties
on
a
<em>form
object</em>
<p>Users
should
place
the
form
object
into
the
orgspringframeworkwebservletModelAndView
ModelAndView
when
populating
the
data
for
their
view
The
name
of
this
form
object
can
be
configured
using
the
#setModelAttribute
"modelAttribute"
property
:end
:start
The
default
attribute
name:
&quot;command&quot;
:end
:start
The
name
of
the
javaxservletjspPageContext
attribute
under
which
the
form
object
name
is
exposed
:end
:start
Set
the
name
of
the
form
attribute
in
the
model
<p>May
be
a
runtime
expression
:end
:start
Get
the
name
of
the
form
attribute
in
the
model
:end
:start
Set
the
name
of
the
form
attribute
in
the
model
<p>May
be
a
runtime
expression
:end
:start
Get
the
name
of
the
form
attribute
in
the
model
:end
:start
Set
the
value
of
the
'{@code
name'
attribute
<p>May
be
a
runtime
expression
<p>Name
is
not
a
valid
attribute
for
form
on
XHTML
10
However,
it
is
sometimes
needed
for
backward
compatibility
:end
:start
Get
the
value
of
the
'{@code
name'
attribute
:end
:start
Set
the
value
of
the
'{@code
action'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
action'
attribute
:end
:start
Set
the
value
of
the
'{@code
action'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
action'
attribute
:end
:start
Set
the
value
of
the
'{@code
method'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
method'
attribute
:end
:start
Set
the
value
of
the
'{@code
target'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
target'
attribute
:end
:start
Set
the
value
of
the
'{@code
enctype'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
enctype'
attribute
:end
:start
Set
the
value
of
the
'{@code
acceptCharset'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
acceptCharset'
attribute
:end
:start
Set
the
value
of
the
'{@code
onsubmit'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onsubmit'
attribute
:end
:start
Set
the
value
of
the
'{@code
onreset'
attribute
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onreset'
attribute
:end
:start
Set
the
value
of
the
'{@code
autocomplete'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
autocomplete'
attribute
:end
:start
Set
the
name
of
the
request
param
for
non-browser
supported
HTTP
methods
:end
:start
Get
the
name
of
the
request
param
for
non-browser
supported
HTTP
methods
:end
:start
Determine
if
the
HTTP
method
is
supported
by
browsers
(ie
GET
or
POST)
:end
:start
Writes
the
opening
part
of
the
block
'{@code
form'
tag
and
exposes
the
form
object
name
in
the
javaxservletjspPageContext
:end
:start
Autogenerated
IDs
correspond
to
the
form
object
name
:end
:start
#evaluate
Resolves
and
returns
the
name
of
the
form
object
:end
:start
Resolve
the
value
of
the
'{@code
action'
attribute
<p>If
the
user
configured
an
'{@code
action'
value
then
the
result
of
evaluating
this
value
is
used
If
the
user
configured
an
'{@code
servletRelativeAction'
value
then
the
value
is
prepended
with
the
context
and
servlet
paths,
and
the
result
is
used
Otherwise,
the
orgspringframeworkwebservletsupportRequestContext#getRequestUri()
originating
URI
is
used
:end
:start
Closes
the
'{@code
form'
block
tag
and
removes
the
form
object
name
from
the
javaxservletjspPageContext
:end
:start
Clears
the
stored
TagWriter
:end
:start
Override
resolve
CSS
class
since
error
class
is
not
supported
:end
:start
Unsupported
for
forms
:end
:start
Unsupported
for
forms
:end
:start
Data-binding
aware
JSP
tag
for
rendering
a
hidden
HTML
'{@code
input'
field
containing
the
databound
value
<p>Example
(binding
to
'name'
property
of
form
backing
object):
<pre
class="code>
&lt;form:hidden
path=&quot;name&quot;/&gt;
</pre>
:end
:start
The
name
of
the
'{@code
disabled'
attribute
:end
:start
Set
the
value
of
the
'{@code
disabled'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Flags
"type"
as
an
illegal
dynamic
attribute
:end
:start
Writes
the
HTML
'{@code
input'
tag
to
the
supplied
TagWriter
including
the
databound
value
:end
:start
Data-binding-aware
JSP
tag
for
rendering
an
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
text'
:end
:start
Set
the
value
of
the
'{@code
size'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
size'
attribute
:end
:start
Set
the
value
of
the
'{@code
maxlength'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
maxlength'
attribute
:end
:start
Set
the
value
of
the
'{@code
alt'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
alt'
attribute
:end
:start
Set
the
value
of
the
'{@code
onselect'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onselect'
attribute
:end
:start
Set
the
value
of
the
'{@code
autocomplete'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
autocomplete'
attribute
:end
:start
Writes
the
'{@code
input'
tag
to
the
supplied
TagWriter
Uses
the
value
returned
by
#getType()
to
determine
which
type
of
'{@code
input'
element
to
render
:end
:start
Writes
the
'{@code
value'
attribute
to
the
supplied
TagWriter
Subclasses
may
choose
to
override
this
implementation
to
control
exactly
when
the
value
is
written
:end
:start
Flags
type="checkbox"
and
type="radio"
as
illegal
dynamic
attributes
:end
:start
Get
the
value
of
the
'{@code
type'
attribute
Subclasses
can
override
this
to
change
the
type
of
'{@code
input'
element
rendered
Default
value
is
'{@code
text'
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
label'
element
that
defines
text
that
is
associated
with
a
single
form
element
<p>The
#setFor(String)
'for'
attribute
is
required
<p>See
the
"formTags"
showcase
application
that
ships
with
the
full
Spring
distribution
for
an
example
of
this
class
in
action
:end
:start
Set
the
value
of
the
'{@code
for'
attribute
<p>Defaults
to
the
value
of
#getPath;
may
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
id'
attribute
<p>May
be
a
runtime
expression
:end
:start
Writes
the
opening
'{@code
label'
tag
and
forces
a
block
tag
so
that
body
content
is
written
correctly
:end
:start
Overrides
#getName()
to
always
return
null,
because
the
'{@code
name'
attribute
is
not
supported
by
the
'{@code
label'
tag
:end
:start
Determine
the
'{@code
for'
attribute
value
for
this
tag,
autogenerating
one
if
none
specified
:end
:start
Autogenerate
the
'{@code
for'
attribute
value
for
this
tag
<p>The
default
implementation
delegates
to
#getPropertyPath(),
deleting
invalid
characters
(such
as
"["
or
"]")
:end
:start
Close
the
'{@code
label'
tag
:end
:start
Disposes
of
the
TagWriter
instance
:end
:start
Convenient
tag
that
allows
one
to
supply
a
collection
of
objects
that
are
to
be
rendered
as
'{@code
option'
tags
within
a
'{@code
select'
tag
<p><i>Must</i>
be
used
within
a
SelectTag
'select'
tag
:end
:start
Set
the
javautilCollection,
javautilMap
or
array
of
objects
used
to
generate
the
inner
'{@code
option'
tags
<p>Required
when
wishing
to
render
'{@code
option'
tags
from
an
array,
javautilCollection
or
javautilMap
<p>Typically
a
runtime
expression
:end
:start
Get
the
javautilCollection,
javautilMap
or
array
of
objects
used
to
generate
the
inner
'{@code
option'
tags
<p>Typically
a
runtime
expression
:end
:start
Set
the
name
of
the
property
mapped
to
the
'{@code
value'
attribute
of
the
'{@code
option'
tag
<p>Required
when
wishing
to
render
'{@code
option'
tags
from
an
array
or
javautilCollection
:end
:start
Return
the
name
of
the
property
mapped
to
the
'{@code
value'
attribute
of
the
'{@code
option'
tag
:end
:start
Set
the
name
of
the
property
mapped
to
the
label
(inner
text)
of
the
'{@code
option'
tag
:end
:start
Get
the
name
of
the
property
mapped
to
the
label
(inner
text)
of
the
'{@code
option'
tag
:end
:start
Set
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Get
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Appends
a
counter
to
a
specified
id,
since
we're
dealing
with
multiple
HTML
elements
:end
:start
JSP
tag
for
rendering
an
HTML
'{@code
option'
tag
<p><b>Must
be
used
nested
inside
a
SelectTag</b>
<p>Provides
full
support
for
databinding
by
marking
an
'{@code
option'
as
'selected'
if
the
#setValue
value
matches
the
value
bound
to
the
out
SelectTag
<p>The
#setValue
value
property
is
required
and
corresponds
to
the
'{@code
value'
attribute
of
the
rendered
'{@code
option'
<p>An
optional
#setLabel
label
property
can
be
specified,
the
value
of
which
corresponds
to
inner
text
of
the
rendered
'{@code
option'
tag
If
no
#setLabel
label
is
specified
then
the
#setValue
value
property
will
be
used
when
rendering
the
inner
text
:end
:start
The
name
of
the
JSP
variable
used
to
expose
the
value
for
this
tag
:end
:start
The
name
of
the
JSP
variable
used
to
expose
the
display
value
for
this
tag
:end
:start
Set
the
'value'
attribute
of
the
rendered
HTML
&lt;option&gt;
tag
:end
:start
Get
the
'value'
attribute
of
the
rendered
HTML
&lt;option&gt;
tag
:end
:start
Set
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Get
the
value
of
the
'{@code
disabled'
attribute
:end
:start
Set
the
text
body
of
the
rendered
HTML
&lt;option&gt;
tag
<p>May
be
a
runtime
expression
:end
:start
Get
the
text
body
of
the
rendered
HTML
&lt;option&gt;
tag
:end
:start
Make
sure
we
are
under
a
'{@code
select'
tag
before
proceeding
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
password'
:end
:start
Is
the
password
value
to
be
rendered?
:end
:start
Is
the
password
value
to
be
rendered?
:end
:start
Flags
"type"
as
an
illegal
dynamic
attribute
:end
:start
Return
'{@code
password'
causing
the
rendered
HTML
'{@code
input'
element
to
have
a
'{@code
type'
of
'{@code
password'
:end
:start
The
PasswordInputTag
only
writes
it's
value
if
the
#setShowPassword(boolean)
'showPassword'
property
value
is
Boolean#TRUE
true
:end
:start
Databinding-aware
JSP
tag
for
rendering
multiple
HTML
'{@code
input'
elements
with
a
'{@code
type'
of
'{@code
radio'
<p>Rendered
elements
are
marked
as
'checked'
if
the
configured
#setItems(Object)
value
matches
the
bound
value
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
input'
element
with
a
'{@code
type'
of
'{@code
radio'
<p>Rendered
elements
are
marked
as
'checked'
if
the
configured
#setValue(Object)
value
matches
the
#getValue
bound
value
<p>A
typical
usage
pattern
will
involved
multiple
tag
instances
bound
to
the
same
property
but
with
different
values
:end
:start
Databinding-aware
JSP
tag
that
renders
an
HTML
'{@code
select'
element
<p>Inner
'{@code
option'
tags
can
be
rendered
using
one
of
the
approaches
supported
by
the
OptionWriter
class
<p>Also
supports
the
use
of
nested
OptionTag
OptionTags
or
(typically
one)
nested
OptionsTag
:end
:start
The
javaxservletjspPageContext
attribute
under
which
the
bound
value
is
exposed
to
inner
OptionTag
OptionTags
:end
:start
Set
the
Collection,
Map
or
array
of
objects
used
to
generate
the
inner
'{@code
option'
tags
<p>Required
when
wishing
to
render
'{@code
option'
tags
from
an
array,
Collection
or
Map
<p>Typically
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
items'
attribute
<p>May
be
a
runtime
expression
:end
:start
Set
the
name
of
the
property
mapped
to
the
'{@code
value'
attribute
of
the
'{@code
option'
tag
<p>Required
when
wishing
to
render
'{@code
option'
tags
from
an
array
or
Collection
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
itemValue'
attribute
<p>May
be
a
runtime
expression
:end
:start
Set
the
name
of
the
property
mapped
to
the
label
(inner
text)
of
the
'{@code
option'
tag
<p>May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
itemLabel'
attribute
<p>May
be
a
runtime
expression
:end
:start
Set
the
value
of
the
HTML
'{@code
size'
attribute
rendered
on
the
final
'{@code
select'
element
:end
:start
Get
the
value
of
the
'{@code
size'
attribute
:end
:start
Set
the
value
of
the
HTML
'{@code
multiple'
attribute
rendered
on
the
final
'{@code
select'
element
:end
:start
Get
the
value
of
the
HTML
'{@code
multiple'
attribute
rendered
on
the
final
'{@code
select'
element
:end
:start
Renders
the
HTML
'{@code
select'
tag
to
the
supplied
TagWriter
<p>Renders
nested
'{@code
option'
tags
if
the
#setItems
items
property
is
set,
otherwise
exposes
the
bound
value
for
the
nested
OptionTag
OptionTags
:end
:start
Closes
any
block
tag
that
might
have
been
opened
when
using
nested
OptionTag
options
:end
:start
Clears
the
TagWriter
that
might
have
been
left
over
when
using
nested
OptionTag
options
:end
:start
Utility
class
for
writing
HTML
content
to
a
Writer
instance
<p>Intended
to
support
output
from
JSP
tag
libraries
:end
:start
Create
a
new
instance
of
the
TagWriter
class
that
writes
to
the
supplied
PageContext
:end
:start
Start
a
new
tag
with
the
supplied
name
Leaves
the
tag
open
so
that
attributes,
inner
text
or
nested
tags
can
be
written
into
it
:end
:start
Write
an
HTML
attribute
with
the
specified
name
and
value
<p>Be
sure
to
write
all
attributes
<strong>before</strong>
writing
any
inner
text
or
nested
tags
:end
:start
Write
an
HTML
attribute
if
the
supplied
value
is
not
null
or
zero
length
:end
:start
Close
the
current
opening
tag
(if
necessary)
and
appends
the
supplied
value
as
inner
text
:end
:start
Indicate
that
the
currently
open
tag
should
be
closed
and
marked
as
a
block
level
element
<p>Useful
when
you
plan
to
write
additional
content
in
the
body
outside
the
context
of
the
current
TagWriter
:end
:start
Close
the
current
tag
<p>Correctly
writes
an
empty
tag
if
no
inner
text
or
nested
tags
have
been
written
:end
:start
Close
the
current
tag,
allowing
to
enforce
a
full
closing
tag
<p>Correctly
writes
an
empty
tag
if
no
inner
text
or
nested
tags
have
been
written
:end
:start
Databinding-aware
JSP
tag
for
rendering
an
HTML
'{@code
textarea'
:end
:start
Set
the
value
of
the
'{@code
rows'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
rows'
attribute
:end
:start
Set
the
value
of
the
'{@code
cols'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
cols'
attribute
:end
:start
Set
the
value
of
the
'{@code
onselect'
attribute
May
be
a
runtime
expression
:end
:start
Get
the
value
of
the
'{@code
onselect'
attribute
:end
:start
Sets
default
HTML
escape
value
for
the
current
page
The
actual
value
can
be
overridden
by
escaping-aware
tags
The
default
is
"false"
<p>Note:
You
can
also
set
a
"defaultHtmlEscape"
webxml
context-param
A
page-level
setting
overrides
a
context-param
:end
:start
Set
the
default
value
for
HTML
escaping,
to
be
put
into
the
current
PageContext
:end
:start
Superclass
for
tags
that
output
content
that
might
get
HTML-escaped
<p>Provides
a
"htmlEscape"
property
for
explicitly
specifying
whether
to
apply
HTML
escaping
If
not
set,
a
page-level
default
(eg
from
the
HtmlEscapeTag)
or
an
application-wide
default
(the
"defaultHtmlEscape"
context-param
in
webxml)
is
used
:end
:start
Set
HTML
escaping
for
this
tag,
as
boolean
value
Overrides
the
default
HTML
escaping
setting
for
the
current
page
:end
:start
Return
the
HTML
escaping
setting
for
this
tag,
or
the
default
setting
if
not
overridden
:end
:start
Return
the
applicable
default
HTML
escape
setting
for
this
tag
<p>The
default
implementation
checks
the
RequestContext's
setting,
falling
back
to
false
in
case
of
no
explicit
default
given
:end
:start
Custom
JSP
tag
to
look
up
a
message
in
the
scope
of
this
page
Messages
are
resolved
using
the
ApplicationContext
and
thus
support
internationalization
<p>Detects
an
HTML
escaping
setting,
either
on
this
tag
instance,
the
page
level,
or
the
webxml
level
Can
also
apply
JavaScript
escaping
<p>If
"code"
isn't
set
or
cannot
be
resolved,
"text"
will
be
used
as
default
message
Thus,
this
tag
can
also
be
used
for
HTML
escaping
of
any
texts
<p>Message
arguments
can
be
specified
via
the
#setArguments(Object)
arguments
attribute
or
by
using
nested
<spring:argument>
tags
:end
:start
Default
separator
for
splitting
an
arguments
String:
a
comma
(",")
:end
:start
Set
the
MessageSourceResolvable
for
this
tag
<p>If
a
MessageSourceResolvable
is
specified,
it
effectively
overrides
any
code,
arguments
or
text
specified
on
this
tag
:end
:start
Set
the
message
code
for
this
tag
:end
:start
Set
optional
message
arguments
for
this
tag,
as
a
comma-delimited
String
(each
String
argument
can
contain
JSP
EL),
an
Object
array
(used
as
argument
array),
or
a
single
Object
(used
as
single
argument)
:end
:start
Set
the
separator
to
use
for
splitting
an
arguments
String
Default
is
a
comma
(",")
:end
:start
Set
the
message
text
for
this
tag
:end
:start
Set
PageContext
attribute
name
under
which
to
expose
a
variable
that
contains
the
resolved
message
:end
:start
Set
the
scope
to
export
the
variable
to
Default
is
SCOPE_PAGE
("page")
:end
:start
Set
JavaScript
escaping
for
this
tag,
as
boolean
value
Default
is
"false"
:end
:start
Resolves
the
message,
escapes
it
if
demanded,
and
writes
it
to
the
page
(or
exposes
it
as
variable)
:end
:start
Resolve
the
specified
message
into
a
concrete
message
String
The
returned
message
String
should
be
unescaped
:end
:start
Resolve
the
given
arguments
Object
into
an
arguments
array
:end
:start
Write
the
message
to
the
page
<p>Can
be
overridden
in
subclasses,
eg
for
testing
purposes
:end
:start
Use
the
current
RequestContext's
application
context
as
MessageSource
:end
:start
Return
default
exception
message
:end
:start
<p>Nested-path
tag,
to
support
and
assist
with
nested
beans
or
bean
properties
in
the
model
Exports
a
"nestedPath"
variable
of
type
String
in
request
scope,
visible
to
the
current
page
and
also
included
pages,
if
any
<p>The
BindTag
will
auto-detect
the
current
nested
path
and
automatically
prepend
it
to
its
own
path
to
form
a
complete
path
to
the
bean
or
bean
property
<p>This
tag
will
also
prepend
any
existing
nested
path
that
is
currently
set
Thus,
you
can
nest
multiple
nested-path
tags
<p>Thanks
to
Seth
Ladd
for
the
suggestion
and
the
original
implementation!
:end
:start
Name
of
the
exposed
variable
within
the
scope
of
this
tag:
"nestedPath"
:end
:start
Set
the
path
that
this
tag
should
apply
<p>Eg
"customer"
to
allow
bind
paths
like
"addressstreet"
rather
than
"customeraddressstreet"
:end
:start
Return
the
path
that
this
tag
applies
to
:end
:start
Reset
any
previous
nestedPath
value
:end
:start
Bean
used
to
pass
name-value
pair
parameters
from
a
ParamTag
to
a
ParamAware
tag
<p>Attributes
are
the
raw
values
passed
to
the
spring:param
tag
and
have
not
been
encoded
or
escaped
:end
:start
Set
the
raw
name
of
the
parameter
:end
:start
Set
the
raw
value
of
the
parameter
:end
:start
Allows
implementing
tag
to
utilize
nested
spring:param
tags
:end
:start
Callback
hook
for
nested
spring:param
tags
to
pass
their
value
to
the
parent
tag
:end
:start
JSP
tag
for
collecting
name-value
parameters
and
passing
them
to
a
ParamAware
ancestor
in
the
tag
hierarchy
<p>This
tag
must
be
nested
under
a
param
aware
tag
:end
:start
Sets
the
name
of
the
parameter
<p>
Required
:end
:start
Sets
the
value
of
the
parameter
<p>
Optional
If
not
set,
the
tag's
body
content
is
evaluated
:end
:start
Superclass
for
all
tags
that
require
a
RequestContext
<p>The
RequestContext
instance
provides
easy
access
to
current
state
like
the
orgspringframeworkwebcontextWebApplicationContext,
the
javautilLocale,
the
orgspringframeworkuicontextTheme,
etc
<p>Mainly
intended
for
orgspringframeworkwebservletDispatcherServlet
requests;
will
use
fallbacks
when
used
outside
DispatcherServlet
:end
:start
javaxservletjspPageContext
attribute
for
the
page-level
RequestContext
instance
:end
:start
Logger
available
to
subclasses
:end
:start
Create
and
expose
the
current
RequestContext
Delegates
to
#doStartTagInternal()
for
actual
work
:end
:start
Return
the
current
RequestContext
:end
:start
Called
by
doStartTag
to
perform
the
actual
work
:end
:start
Custom
tag
to
look
up
a
theme
message
in
the
scope
of
this
page
Messages
are
looked
up
using
the
ApplicationContext's
ThemeSource,
and
thus
should
support
internationalization
<p>Regards
a
HTML
escaping
setting,
either
on
this
tag
instance,
the
page
level,
or
the
webxml
level
<p>If
"code"
isn't
set
or
cannot
be
resolved,
"text"
will
be
used
as
default
message
<p>Message
arguments
can
be
specified
via
the
#setArguments(Object)
arguments
attribute
or
by
using
nested
<spring:argument>
tags
:end
:start
Use
the
theme
MessageSource
for
theme
message
resolution
:end
:start
Return
exception
message
that
indicates
the
current
theme
:end
:start
Tag
for
transforming
reference
data
values
from
form
controllers
and
other
objects
inside
a
spring:bind
tag
(or
a
data-bound
form
element
tag
from
Spring's
form
tag
library)
<p>The
BindTag
has
a
PropertyEditor
that
it
uses
to
transform
properties
of
a
bean
to
a
String,
usable
in
HTML
forms
This
tag
uses
that
PropertyEditor
to
transform
objects
passed
into
this
tag
:end
:start
Set
the
value
to
transform,
using
the
appropriate
PropertyEditor
from
the
enclosing
BindTag
<p>The
value
can
either
be
a
plain
value
to
transform
(a
hard-coded
String
value
in
a
JSP
or
a
JSP
expression),
or
a
JSP
EL
expression
to
be
evaluated
(transforming
the
result
of
the
expression)
:end
:start
Set
PageContext
attribute
name
under
which
to
expose
a
variable
that
contains
the
result
of
the
transformation
:end
:start
Set
the
scope
to
export
the
variable
to
Default
is
SCOPE_PAGE
("page")
:end
:start
JSP
tag
for
creating
URLs
Modeled
after
the
JSTL
c:url
tag
with
backwards
compatibility
in
mind
<p>Enhancements
to
the
JSTL
functionality
include:
<ul>
<li>URL
encoded
template
URI
variables</li>
<li>HTML/XML
escaping
of
URLs</li>
<li>JavaScript
escaping
of
URLs</li>
</ul>
<p>Template
URI
variables
are
indicated
in
the
#setValue(String)
'value'
attribute
and
marked
by
braces
'{variableName'
The
braces
and
attribute
name
are
replaced
by
the
URL
encoded
value
of
a
parameter
defined
with
the
spring:param
tag
in
the
body
of
the
url
tag
If
no
parameter
is
available
the
literal
value
is
passed
through
Params
matched
to
template
variables
will
not
be
added
to
the
query
string
<p>Use
of
the
spring:param
tag
for
URI
template
variables
is
strongly
recommended
over
direct
EL
substitution
as
the
values
are
URL
encoded
Failure
to
properly
encode
URL
can
leave
an
application
vulnerable
to
XSS
and
other
injection
attacks
<p>URLs
can
be
HTML/XML
escaped
by
setting
the
#setHtmlEscape(boolean)
'htmlEscape'
attribute
to
'true'
Detects
an
HTML
escaping
setting,
either
on
this
tag
instance,
the
page
level,
or
the
webxml
level
The
default
is
'false'
When
setting
the
URL
value
into
a
variable,
escaping
is
not
recommended
<p>Example
usage:
<pre
class="code">&lt;spring:url
value="/url/path/{variableName"&gt;
&lt;spring:param
name="variableName"
value="more
than
JSTL
c:url"
/&gt;
&lt;/spring:url&gt;</pre>
Results
in:
/currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl
:end
:start
Sets
the
value
of
the
URL
:end
:start
Set
the
context
path
for
the
URL
Defaults
to
the
current
context
:end
:start
Set
the
variable
name
to
expose
the
URL
under
Defaults
to
rendering
the
URL
to
the
current
JspWriter
:end
:start
Set
the
scope
to
export
the
URL
variable
to
This
attribute
has
no
meaning
unless
var
is
also
defined
:end
:start
Set
JavaScript
escaping
for
this
tag,
as
boolean
value
Default
is
"false"
:end
:start
Build
the
query
string
from
available
parameters
that
have
not
already
been
applied
as
template
params
<p>The
names
and
values
of
parameters
are
URL
encoded
:end
:start
Replace
template
markers
in
the
URL
matching
available
parameters
The
name
of
matched
parameters
are
added
to
the
used
parameters
set
<p>Parameter
values
are
URL
encoded
:end
:start
Abstract
base
class
for
ThemeResolver
implementations
Provides
support
for
a
default
theme
name
:end
:start
Out-of-the-box
value
for
the
default
theme
name:
"theme"
:end
:start
Set
the
name
of
the
default
theme
Out-of-the-box
value
is
"theme"
:end
:start
Return
the
name
of
the
default
theme
:end
:start
ThemeResolver
implementation
that
uses
a
cookie
sent
back
to
the
user
in
case
of
a
custom
setting,
with
a
fallback
to
the
default
theme
This
is
particularly
useful
for
stateless
applications
without
user
sessions
<p>Custom
controllers
can
thus
override
the
user's
theme
by
calling
setThemeName,
eg
responding
to
a
certain
theme
change
request
:end
:start
Name
of
the
request
attribute
that
holds
the
theme
name
Only
used
for
overriding
a
cookie
value
if
the
theme
has
been
changed
in
the
course
of
the
current
request!
Use
RequestContextgetTheme()
to
retrieve
the
current
theme
in
controllers
or
views
:end
:start
Set
the
name
of
the
default
theme
:end
:start
Return
the
name
of
the
default
theme
:end
:start
orgspringframeworkwebservletThemeResolver
implementation
that
simply
uses
a
fixed
theme
The
fixed
name
can
be
defined
via
the
"defaultThemeName"
property;
out
of
the
box,
it
is
"theme"
<p>Note:
Does
not
support
setThemeName,
as
the
fixed
theme
cannot
be
changed
:end
:start
orgspringframeworkwebservletThemeResolver
implementation
that
uses
a
theme
attribute
in
the
user's
session
in
case
of
a
custom
setting,
with
a
fallback
to
the
default
theme
This
is
most
appropriate
if
the
application
needs
user
sessions
anyway
<p>Custom
controllers
can
override
the
user's
theme
by
calling
setThemeName,
eg
responding
to
a
theme
change
request
:end
:start
Name
of
the
session
attribute
that
holds
the
theme
name
Only
used
internally
by
this
implementation
Use
RequestContext(Utils)getTheme()
to
retrieve
the
current
theme
in
controllers
or
views
:end
:start
Interceptor
that
allows
for
changing
the
current
theme
on
every
request,
via
a
configurable
request
parameter
(default
parameter
name:
"theme")
:end
:start
Default
name
of
the
theme
specification
parameter:
"theme"
:end
:start
Set
the
name
of
the
parameter
that
contains
a
theme
specification
in
a
theme
change
request
Default
is
"theme"
:end
:start
Return
the
name
of
the
parameter
that
contains
a
theme
specification
in
a
theme
change
request
:end
:start
Interface
for
web-based
theme
resolution
strategies
that
allows
for
both
theme
resolution
via
the
request
and
theme
modification
via
request
and
response
<p>This
interface
allows
for
implementations
based
on
session,
cookies,
etc
The
default
implementation
is
orgspringframeworkwebservletthemeFixedThemeResolver,
simply
using
a
configured
default
theme
<p>Note
that
this
resolver
is
only
responsible
for
determining
the
current
theme
name
The
Theme
instance
for
the
resolved
theme
name
gets
looked
up
by
DispatcherServlet
via
the
respective
ThemeSource,
ie
the
current
WebApplicationContext
<p>Use
orgspringframeworkwebservletsupportRequestContext#getTheme()
to
retrieve
the
current
theme
in
controllers
or
views,
independent
of
the
actual
resolution
strategy
:end
:start
Resolve
the
current
theme
name
via
the
given
request
Should
return
a
default
theme
as
fallback
in
any
case
:end
:start
Set
the
current
theme
name
to
the
given
one
:end
:start
Convenient
base
class
for
orgspringframeworkwebservletViewResolver
implementations
Caches
orgspringframeworkwebservletView
objects
once
resolved:
This
means
that
view
resolution
won't
be
a
performance
problem,
no
matter
how
costly
initial
view
retrieval
is
<p>Subclasses
need
to
implement
the
#loadView
template
method,
building
the
View
object
for
a
specific
view
name
and
locale
:end
:start
Default
maximum
number
of
entries
for
the
view
cache:
1024
:end
:start
Specify
the
maximum
number
of
entries
for
the
view
cache
Default
is
1024
:end
:start
Return
the
maximum
number
of
entries
for
the
view
cache
:end
:start
Enable
or
disable
caching
<p>This
is
equivalent
to
setting
the
#setCacheLimit
"cacheLimit"
property
to
the
default
limit
(1024)
or
to
0,
respectively
<p>Default
is
"true":
caching
is
enabled
Disable
this
only
for
debugging
and
development
:end
:start
Return
if
caching
is
enabled
:end
:start
Whether
a
view
name
once
resolved
to
null
should
be
cached
and
automatically
resolved
to
null
subsequently
<p>Default
is
"true":
unresolved
view
names
are
being
cached,
as
of
Spring
31
Note
that
this
flag
only
applies
if
the
general
#setCache
"cache"
flag
is
kept
at
its
default
of
"true"
as
well
<p>Of
specific
interest
is
the
ability
for
some
AbstractUrlBasedView
implementations
(FreeMarker,
Velocity,
Tiles)
to
check
if
an
underlying
resource
exists
via
AbstractUrlBasedView#checkResource(Locale)
With
this
flag
set
to
"false",
an
underlying
resource
that
re-appears
is
noticed
and
used
With
the
flag
set
to
"true",
one
check
is
made
only
:end
:start
Return
if
caching
of
unresolved
views
is
enabled
:end
:start
Return
the
cache
key
for
the
given
view
name
and
the
given
locale
<p>Default
is
a
String
consisting
of
view
name
and
locale
suffix
Can
be
overridden
in
subclasses
<p>Needs
to
respect
the
locale
in
general,
as
a
different
locale
can
lead
to
a
different
view
resource
:end
:start
Provides
functionality
to
clear
the
cache
for
a
certain
view
<p>This
can
be
handy
in
case
developer
are
able
to
modify
views
(eg
Velocity
templates)
at
runtime
after
which
you'd
need
to
clear
the
cache
for
the
specified
view
:end
:start
Clear
the
entire
view
cache,
removing
all
cached
view
objects
Subsequent
resolve
calls
will
lead
to
recreation
of
demanded
view
objects
:end
:start
Create
the
actual
View
object
<p>The
default
implementation
delegates
to
#loadView
This
can
be
overridden
to
resolve
certain
view
names
in
a
special
fashion,
before
delegating
to
the
actual
loadView
implementation
provided
by
the
subclass
:end
:start
Subclasses
must
implement
this
method,
building
a
View
object
for
the
specified
view
The
returned
View
objects
will
be
cached
by
this
ViewResolver
base
class
<p>Subclasses
are
not
forced
to
support
internationalization:
A
subclass
that
does
not
may
simply
ignore
the
locale
parameter
:end
:start
Adapter
base
class
for
template-based
view
technologies
such
as
Velocity
and
FreeMarker,
with
the
ability
to
use
request
and
session
attributes
in
their
model
and
the
option
to
expose
helper
objects
for
Spring's
Velocity/FreeMarker
macro
library
<p>JSP/JSTL
and
other
view
technologies
automatically
have
access
to
the
HttpServletRequest
object
and
thereby
the
request/session
attributes
for
the
current
user
Furthermore,
they
are
able
to
create
and
cache
helper
objects
as
request
attributes
themselves
:end
:start
Variable
name
of
the
RequestContext
instance
in
the
template
model,
available
to
Spring's
macros:
eg
for
creating
BindStatus
objects
:end
:start
Set
whether
all
request
attributes
should
be
added
to
the
model
prior
to
merging
with
the
template
Default
is
"false"
:end
:start
Set
whether
HttpServletRequest
attributes
are
allowed
to
override
(hide)
controller
generated
model
attributes
of
the
same
name
Default
is
"false",
which
causes
an
exception
to
be
thrown
if
request
attributes
of
the
same
name
as
model
attributes
are
found
:end
:start
Set
whether
all
HttpSession
attributes
should
be
added
to
the
model
prior
to
merging
with
the
template
Default
is
"false"
:end
:start
Set
whether
HttpSession
attributes
are
allowed
to
override
(hide)
controller
generated
model
attributes
of
the
same
name
Default
is
"false",
which
causes
an
exception
to
be
thrown
if
session
attributes
of
the
same
name
as
model
attributes
are
found
:end
:start
Set
whether
to
expose
a
RequestContext
for
use
by
Spring's
macro
library,
under
the
name
"springMacroRequestContext"
Default
is
"true"
<p>Currently
needed
for
Spring's
Velocity
and
FreeMarker
default
macros
Note
that
this
is
<i>not</i>
required
for
templates
that
use
HTML
forms
<i>unless</i>
you
wish
to
take
advantage
of
the
Spring
helper
macros
:end
:start
Apply
this
view's
content
type
as
specified
in
the
"contentType"
bean
property
to
the
given
response
<p>When
running
on
Servlet
24,
only
applies
the
view's
contentType
if
no
content
type
has
been
set
on
the
response
before
This
allows
handlers
to
override
the
default
content
type
beforehand
:end
:start
Subclasses
must
implement
this
method
to
actually
render
the
view
:end
:start
Abstract
base
class
for
template
view
resolvers,
in
particular
for
Velocity
and
FreeMarker
views
<p>Provides
a
convenient
way
to
specify
AbstractTemplateView's
exposure
flags
for
request
attributes,
session
attributes,
and
Spring's
macro
helpers
:end
:start
Set
whether
all
request
attributes
should
be
added
to
the
model
prior
to
merging
with
the
template
Default
is
"false"
:end
:start
Set
whether
HttpServletRequest
attributes
are
allowed
to
override
(hide)
controller
generated
model
attributes
of
the
same
name
Default
is
"false",
which
causes
an
exception
to
be
thrown
if
request
attributes
of
the
same
name
as
model
attributes
are
found
:end
:start
Set
whether
all
HttpSession
attributes
should
be
added
to
the
model
prior
to
merging
with
the
template
Default
is
"false"
:end
:start
Set
whether
HttpSession
attributes
are
allowed
to
override
(hide)
controller
generated
model
attributes
of
the
same
name
Default
is
"false",
which
causes
an
exception
to
be
thrown
if
session
attributes
of
the
same
name
as
model
attributes
are
found
:end
:start
Set
whether
to
expose
a
RequestContext
for
use
by
Spring's
macro
library,
under
the
name
"springMacroRequestContext"
Default
is
"true"
:end
:start
Abstract
base
class
for
URL-based
views
Provides
a
consistent
way
of
holding
the
URL
that
a
View
wraps,
in
the
form
of
a
"url"
bean
property
:end
:start
Constructor
for
use
as
a
bean
:end
:start
Create
a
new
AbstractUrlBasedView
with
the
given
URL
:end
:start
Set
the
URL
of
the
resource
that
this
view
wraps
The
URL
must
be
appropriate
for
the
concrete
View
implementation
:end
:start
Return
the
URL
of
the
resource
that
this
view
wraps
:end
:start
Return
whether
the
'url'
property
is
required
<p>The
default
implementation
returns
true
This
can
be
overridden
in
subclasses
:end
:start
Check
whether
the
underlying
resource
that
the
configured
URL
points
to
actually
exists
:end
:start
Abstract
base
class
for
orgspringframeworkwebservletView
implementations
Subclasses
should
be
JavaBeans,
to
allow
for
convenient
configuration
as
Spring-managed
bean
instances
<p>Provides
support
for
static
attributes,
to
be
made
available
to
the
view,
with
a
variety
of
ways
to
specify
them
Static
attributes
will
be
merged
with
the
given
dynamic
attributes
(the
model
that
the
controller
returned)
for
each
render
operation
<p>Extends
WebApplicationObjectSupport,
which
will
be
helpful
to
some
views
Subclasses
just
need
to
implement
the
actual
rendering
:end
:start
Default
content
type
Overridable
as
bean
property
:end
:start
Set
the
view's
name
Helpful
for
traceability
<p>Framework
code
must
call
this
when
constructing
views
:end
:start
Return
the
view's
name
Should
never
be
null,
if
the
view
was
correctly
configured
:end
:start
Set
the
content
type
for
this
view
Default
is
"text/html;charset=ISO-8859-1"
<p>May
be
ignored
by
subclasses
if
the
view
itself
is
assumed
to
set
the
content
type,
eg
in
case
of
JSPs
:end
:start
Return
the
content
type
for
this
view
:end
:start
Set
the
name
of
the
RequestContext
attribute
for
this
view
Default
is
none
:end
:start
Return
the
name
of
the
RequestContext
attribute,
if
any
:end
:start
Set
static
attributes
as
a
CSV
string
Format
is:
attname0={value1,attname1={value1
<p>"Static"
attributes
are
fixed
attributes
that
are
specified
in
the
View
instance
configuration
"Dynamic"
attributes,
on
the
other
hand,
are
values
passed
in
as
part
of
the
model
:end
:start
Set
static
attributes
for
this
view
from
a
javautilProperties
object
<p>"Static"
attributes
are
fixed
attributes
that
are
specified
in
the
View
instance
configuration
"Dynamic"
attributes,
on
the
other
hand,
are
values
passed
in
as
part
of
the
model
<p>This
is
the
most
convenient
way
to
set
static
attributes
Note
that
static
attributes
can
be
overridden
by
dynamic
attributes,
if
a
value
with
the
same
name
is
included
in
the
model
<p>Can
be
populated
with
a
String
"value"
(parsed
via
PropertiesEditor)
or
a
"props"
element
in
XML
bean
definitions
:end
:start
Set
static
attributes
for
this
view
from
a
Map
This
allows
to
set
any
kind
of
attribute
values,
for
example
bean
references
<p>"Static"
attributes
are
fixed
attributes
that
are
specified
in
the
View
instance
configuration
"Dynamic"
attributes,
on
the
other
hand,
are
values
passed
in
as
part
of
the
model
<p>Can
be
populated
with
a
"map"
or
"props"
element
in
XML
bean
definitions
:end
:start
Allow
Map
access
to
the
static
attributes
of
this
view,
with
the
option
to
add
or
override
specific
entries
<p>Useful
for
specifying
entries
directly,
for
example
via
"attributesMap[myKey]"
This
is
particularly
useful
for
adding
or
overriding
entries
in
child
view
definitions
:end
:start
Add
static
data
to
this
view,
exposed
in
each
view
<p>"Static"
attributes
are
fixed
attributes
that
are
specified
in
the
View
instance
configuration
"Dynamic"
attributes,
on
the
other
hand,
are
values
passed
in
as
part
of
the
model
<p>Must
be
invoked
before
any
calls
to
render
:end
:start
Return
the
static
attributes
for
this
view
Handy
for
testing
<p>Returns
an
unmodifiable
Map,
as
this
is
not
intended
for
manipulating
the
Map
but
rather
just
for
checking
the
contents
:end
:start
Whether
to
add
path
variables
in
the
model
or
not
<p>Path
variables
are
commonly
bound
to
URI
template
variables
through
the
@PathVariable
annotation
They're
are
effectively
URI
template
variables
with
type
conversion
applied
to
them
to
derive
typed
Object
values
Such
values
are
frequently
needed
in
views
for
constructing
links
to
the
same
and
other
URLs
<p>Path
variables
added
to
the
model
override
static
attributes
(see
#setAttributes(Properties))
but
not
attributes
already
present
in
the
model
<p>By
default
this
flag
is
set
to
true
Concrete
view
types
can
override
this
:end
:start
Returns
the
value
of
the
flag
indicating
whether
path
variables
should
be
added
to
the
model
or
not
:end
:start
Prepares
the
view
given
the
specified
model,
merging
it
with
static
attributes
and
a
RequestContext
attribute,
if
necessary
Delegates
to
renderMergedOutputModel
for
the
actual
rendering
:end
:start
Creates
a
combined
output
Map
(never
null)
that
includes
dynamic
values
and
static
attributes
Dynamic
values
take
precedence
over
static
attributes
:end
:start
Create
a
RequestContext
to
expose
under
the
specified
attribute
name
<p>Default
implementation
creates
a
standard
RequestContext
instance
for
the
given
request
and
model
Can
be
overridden
in
subclasses
for
custom
instances
:end
:start
Prepare
the
given
response
for
rendering
<p>The
default
implementation
applies
a
workaround
for
an
IE
bug
when
sending
download
content
via
HTTPS
:end
:start
Return
whether
this
view
generates
download
content
(typically
binary
content
like
PDF
or
Excel
files)
<p>The
default
implementation
returns
false
Subclasses
are
encouraged
to
return
true
here
if
they
know
that
they
are
generating
download
content
that
requires
temporary
caching
on
the
client
side,
typically
via
the
response
OutputStream
:end
:start
Subclasses
must
implement
this
method
to
actually
render
the
view
<p>The
first
step
will
be
preparing
the
request:
In
the
JSP
case,
this
would
mean
setting
model
objects
as
request
attributes
The
second
step
will
be
the
actual
rendering
of
the
view,
for
example
including
the
JSP
via
a
RequestDispatcher
:end
:start
Expose
the
model
objects
in
the
given
map
as
request
attributes
Names
will
be
taken
from
the
model
Map
This
method
is
suitable
for
all
resources
reachable
by
javaxservletRequestDispatcher
:end
:start
Create
a
temporary
OutputStream
for
this
view
<p>This
is
typically
used
as
IE
workaround,
for
setting
the
content
length
header
from
the
temporary
stream
before
actually
writing
the
content
to
the
HTTP
response
:end
:start
Write
the
given
temporary
OutputStream
to
the
HTTP
response
:end
:start
Set
the
content
type
of
the
response
to
the
configured
#setContentType(String)
content
type
unless
the
View#SELECTED_CONTENT_TYPE
request
attribute
is
present
and
set
to
a
concrete
media
type
:end
:start
Simple
implementation
of
ViewResolver
that
interprets
a
view
name
as
bean
name
in
the
current
application
context,
ie
in
the
XML
file
of
the
executing
DispatcherServlet
<p>This
resolver
can
be
handy
for
small
applications,
keeping
all
definitions
ranging
from
controllers
to
views
in
the
same
place
For
normal
applications,
XmlViewResolver
will
be
the
better
choice,
as
it
separates
the
XML
view
bean
definitions
into
a
dedicated
views
file
View
beans
should
virtually
never
have
references
to
any
other
application
beans
-
such
a
separation
will
make
this
clear
<p>This
ViewResolver
does
not
support
internationalization
Consider
ResourceBundleViewResolver
if
you
need
to
apply
different
view
resources
per
locale
<p>Note:
This
ViewResolver
implements
the
Ordered
interface
to
allow
for
flexible
participation
in
ViewResolver
chaining
For
example,
some
special
views
could
be
defined
via
this
ViewResolver
(giving
it
0
as
"order"
value),
while
all
remaining
views
could
be
resolved
by
a
UrlBasedViewResolver
:end
:start
Implementation
of
ViewResolver
that
resolves
a
view
based
on
the
request
file
name
or
Accept
header
<p>The
ContentNegotiatingViewResolver
does
not
resolve
views
itself,
but
delegates
to
other
ViewResolvers
By
default,
these
other
view
resolvers
are
picked
up
automatically
from
the
application
context,
though
they
can
also
be
set
explicitly
by
using
the
#setViewResolvers(List)
viewResolvers
property
<strong>Note</strong>
that
in
order
for
this
view
resolver
to
work
properly,
the
#setOrder(int)
order
property
needs
to
be
set
to
a
higher
precedence
than
the
others
(the
default
is
Ordered#HIGHEST_PRECEDENCE)
<p>This
view
resolver
uses
the
requested
MediaType
media
type
to
select
a
suitable
View
for
a
request
The
requested
media
type
is
determined
through
the
configured
ContentNegotiationManager
Once
the
requested
media
type
has
been
determined,
this
resolver
queries
each
delegate
view
resolver
for
a
View
and
determines
if
the
requested
media
type
is
MediaType#includes(MediaType)
compatible
with
the
view's
View#getContentType()
content
type)
The
most
compatible
view
is
returned
<p>Additionally,
this
view
resolver
exposes
the
#setDefaultViews(List)
defaultViews
property,
allowing
you
to
override
the
views
provided
by
the
view
resolvers
Note
that
these
default
views
are
offered
as
candidates,
and
still
need
have
the
content
type
requested
(via
file
extension,
parameter,
or
Accept
header,
described
above)
You
can
also
set
the
#setDefaultContentType(MediaType)
default
content
type
directly,
which
will
be
returned
when
the
other
mechanisms
({@code
Accept
header,
file
extension
or
parameter)
do
not
result
in
a
match
<p>For
example,
if
the
request
path
is
/viewhtml,
this
view
resolver
will
look
for
a
view
that
has
the
text/html
content
type
(based
on
the
html
file
extension)
A
request
for
/view
with
a
text/html
request
Accept
header
has
the
same
result
:end
:start
Set
the
ContentNegotiationManager
to
use
to
determine
requested
media
types
<p>If
not
set,
ContentNegotiationManager's
default
constructor
will
be
used,
applying
a
orgspringframeworkwebacceptHeaderContentNegotiationStrategy
:end
:start
Indicate
whether
the
extension
of
the
request
path
should
be
used
to
determine
the
requested
media
type,
in
favor
of
looking
at
the
Accept
header
The
default
value
is
true
<p>For
instance,
when
this
flag
is
true
(the
default),
a
request
for
/hotelspdf
will
result
in
an
AbstractPdfView
being
resolved,
while
the
Accept
header
can
be
the
browser-defined
text/html,application/xhtml+xml
:end
:start
Indicate
whether
to
use
the
Java
Activation
Framework
to
map
from
file
extensions
to
media
types
<p>Default
is
true,
ie
the
Java
Activation
Framework
is
used
(if
available)
:end
:start
Indicate
whether
a
request
parameter
should
be
used
to
determine
the
requested
media
type,
in
favor
of
looking
at
the
Accept
header
The
default
value
is
false
<p>For
instance,
when
this
flag
is
true,
a
request
for
/hotels?format=pdf
will
result
in
an
AbstractPdfView
being
resolved,
while
the
Accept
header
can
be
the
browser-defined
text/html,application/xhtml+xml
:end
:start
Set
the
parameter
name
that
can
be
used
to
determine
the
requested
media
type
if
the
#setFavorParameter
property
is
true
The
default
parameter
name
is
format
:end
:start
Indicate
whether
the
HTTP
Accept
header
should
be
ignored
Default
is
false
<p>If
set
to
true,
this
view
resolver
will
only
refer
to
the
file
extension
and/or
parameter,
as
indicated
by
the
#setFavorPathExtension
favorPathExtension
and
#setFavorParameter
favorParameter
properties
:end
:start
Set
the
mapping
from
file
extensions
to
media
types
<p>When
this
mapping
is
not
set
or
when
an
extension
is
not
present,
this
view
resolver
will
fall
back
to
using
a
FileTypeMap
when
the
Java
Action
Framework
is
available
:end
:start
Set
the
default
content
type
<p>This
content
type
will
be
used
when
file
extension,
parameter,
nor
Accept
header
define
a
content-type,
either
through
being
disabled
or
empty
:end
:start
Indicate
whether
a
HttpServletResponse#SC_NOT_ACCEPTABLE
406
Not
Acceptable
status
code
should
be
returned
if
no
suitable
view
can
be
found
<p>Default
is
false,
meaning
that
this
view
resolver
returns
null
for
#resolveViewName(String,
Locale)
when
an
acceptable
view
cannot
be
found
This
will
allow
for
view
resolvers
chaining
When
this
property
is
set
to
true,
#resolveViewName(String,
Locale)
will
respond
with
a
view
that
sets
the
response
status
to
406
Not
Acceptable
instead
:end
:start
Set
the
default
views
to
use
when
a
more
specific
view
can
not
be
obtained
from
the
ViewResolver
chain
:end
:start
Sets
the
view
resolvers
to
be
wrapped
by
this
view
resolver
<p>If
this
property
is
not
set,
view
resolvers
will
be
detected
automatically
:end
:start
Determines
the
list
of
MediaType
for
the
given
HttpServletRequest
:end
:start
orgspringframeworkwebservletRequestToViewNameTranslator
that
simply
transforms
the
URI
of
the
incoming
request
into
a
view
name
<p>Can
be
explicitly
defined
as
the
"viewNameTranslator"
bean
in
a
orgspringframeworkwebservletDispatcherServlet
context
Otherwise,
a
plain
default
instance
will
be
used
<p>The
default
transformation
simply
strips
leading
and
trailing
slashes
as
well
as
the
file
extension
of
the
URI,
and
returns
the
result
as
the
view
name
with
the
configured
#setPrefix
"prefix"
and
a
#setSuffix
"suffix"
added
as
appropriate
<p>The
stripping
of
the
leading
slash
and
file
extension
can
be
disabled
using
the
#setStripLeadingSlash
"stripLeadingSlash"
and
#setStripExtension
"stripExtension"
properties,
respectively
<p>Find
below
some
examples
of
request
to
view
name
translation
<pre
class="code">http://localhost:8080/gamecast/displayhtml
->
display
http://localhost:8080/gamecast/displayShoppingCarthtml
->
displayShoppingCart
http://localhost:8080/gamecast/admin/indexhtml
->
admin/index
</pre>
:end
:start
Set
the
prefix
to
prepend
to
generated
view
names
:end
:start
Set
the
suffix
to
append
to
generated
view
names
:end
:start
Set
the
value
that
will
replace
'{@code
/'
as
the
separator
in
the
view
name
The
default
behavior
simply
leaves
'{@code
/'
as
the
separator
:end
:start
Set
whether
or
not
leading
slashes
should
be
stripped
from
the
URI
when
generating
the
view
name
Default
is
"true"
:end
:start
Set
whether
or
not
trailing
slashes
should
be
stripped
from
the
URI
when
generating
the
view
name
Default
is
"true"
:end
:start
Set
whether
or
not
file
extensions
should
be
stripped
from
the
URI
when
generating
the
view
name
Default
is
"true"
:end
:start
Set
if
URL
lookup
should
always
use
the
full
path
within
the
current
servlet
context
Else,
the
path
within
the
current
servlet
mapping
is
used
if
applicable
(ie
in
the
case
of
a
"/*"
servlet
mapping
in
webxml)
Default
is
"false"
:end
:start
Set
if
the
context
path
and
request
URI
should
be
URL-decoded
Both
are
returned
<i>undecoded</i>
by
the
Servlet
API,
in
contrast
to
the
servlet
path
<p>Uses
either
the
request
encoding
or
the
default
encoding
according
to
the
Servlet
spec
(ISO-8859-1)
:end
:start
Set
if
";"
(semicolon)
content
should
be
stripped
from
the
request
URI
:end
:start
Set
the
orgspringframeworkwebutilUrlPathHelper
to
use
for
the
resolution
of
lookup
paths
<p>Use
this
to
override
the
default
UrlPathHelper
with
a
custom
subclass,
or
to
share
common
UrlPathHelper
settings
across
multiple
web
components
:end
:start
Translates
the
request
URI
of
the
incoming
HttpServletRequest
into
the
view
name
based
on
the
configured
parameters
:end
:start
Transform
the
request
URI
(in
the
context
of
the
webapp)
stripping
slashes
and
extensions,
and
replacing
the
separator
as
required
:end
:start
Convenient
superclass
for
Excel
document
views
Compatible
with
Apache
POI
35
and
higher,
as
of
Spring
40
<p>Properties:
<ul>
<li>url
(optional):
The
url
of
an
existing
Excel
document
to
pick
as
a
starting
point
It
is
done
without
localization
part
nor
the
"xls"
extension
</ul>
<p>The
file
will
be
searched
with
locations
in
the
following
order:
<ul>
<li>[url]_[language]_[country]xls
<li>[url]_[language]xls
<li>[url]xls
</ul>
<p>For
working
with
the
workbook
in
the
subclass,
see
<a
href="http://jakartaapacheorg/poi/indexhtml">Jakarta's
POI
site</a>
<p>As
an
example,
you
can
try
this
snippet:
<pre
class="code">
protected
void
buildExcelDocument(
Map&lt;String,
Object&gt;
model,
HSSFWorkbook
workbook,
HttpServletRequest
request,
HttpServletResponse
response)
//
Go
to
the
first
sheet
//
getSheetAt:
only
if
workbook
is
created
from
an
existing
document
//
HSSFSheet
sheet
=
workbookgetSheetAt(0);
HSSFSheet
sheet
=
workbookcreateSheet("Spring");
sheetsetDefaultColumnWidth(12);
//
Write
a
text
at
A1
HSSFCell
cell
=
getCell(sheet,
0,
0);
setText(cell,
"Spring
POI
test");
//
Write
the
current
date
at
A2
HSSFCellStyle
dateStyle
=
workbookcreateCellStyle();
dateStylesetDataFormat(HSSFDataFormatgetBuiltinFormat("m/d/yy"));
cell
=
getCell(sheet,
1,
0);
cellsetCellValue(new
Date());
cellsetCellStyle(dateStyle);
//
Write
a
number
at
A3
getCell(sheet,
2,
0)setCellValue(458);
//
Write
a
range
of
numbers
HSSFRow
sheetRow
=
sheetcreateRow(3);
for
(short
i
=
0;
i
<
10;
i++)
sheetRowcreateCell(i)setCellValue(i
*
10);

</pre>
This
class
is
similar
to
the
AbstractPdfView
class
in
usage
style
:end
:start
Default
Constructor
Sets
the
content
type
of
the
view
to
"application/vndms-excel"
:end
:start
Set
the
URL
of
the
Excel
workbook
source,
without
localization
part
nor
extension
:end
:start
Renders
the
Excel
view,
given
the
specified
model
:end
:start
Creates
the
workbook
from
an
existing
XLS
document
:end
:start
Subclasses
must
implement
this
method
to
create
an
Excel
HSSFWorkbook
document,
given
the
model
:end
:start
Convenient
method
to
obtain
the
cell
in
the
given
sheet,
row
and
column
<p>Creates
the
row
and
the
cell
if
they
still
doesn't
already
exist
Thus,
the
column
can
be
passed
as
an
int,
the
method
making
the
needed
downcasts
:end
:start
Convenient
method
to
set
a
String
as
text
content
in
a
cell
:end
:start
Convenient
superclass
for
Excel
document
views
<p>This
class
uses
the
<i>JExcelAPI</i>
instead
of
<i>POI</i>
More
information
on
<i>JExcelAPI</i>
can
be
found
on
their
<a
href="http://wwwandykhancom/jexcelapi/"
target="_blank">website</a>
<p>Properties:
<ul>
<li>url
(optional):
The
url
of
an
existing
Excel
document
to
pick
as
a
starting
point
It
is
done
without
localization
part
nor
the
xls
extension
</ul>
<p>The
file
will
be
searched
with
locations
in
the
following
order:
<ul>
<li>[url]_[language]_[country]xls
<li>[url]_[language]xls
<li>[url]xls
</ul>
<p>For
working
with
the
workbook
in
the
subclass,
see
<a
href="http://wwwandykhancom/jexcelapi/">Java
Excel
API
site</a>
<p>As
an
example,
you
can
try
this
snippet:
<pre
class="code">
protected
void
buildExcelDocument(
Map&lt;String,
Object&gt;
model,
WritableWorkbook
workbook,
HttpServletRequest
request,
HttpServletResponse
response)
if
(workbookgetNumberOfSheets()
==
0)
workbookcreateSheet(&quot;Spring&quot;,
0);

WritableSheet
sheet
=
workbookgetSheet(&quot;Spring&quot;);
Label
label
=
new
Label(0,
0,
&quot;This
is
a
nice
label&quot;);
sheetaddCell(label);
</pre>
The
use
of
this
view
is
close
to
the
AbstractExcelView
class,
just
using
the
JExcel
API
instead
of
the
Apache
POI
API
:end
:start
Default
Constructor
Sets
the
content
type
of
the
view
to
"application/vndms-excel"
:end
:start
Set
the
URL
of
the
Excel
workbook
source,
without
localization
part
nor
extension
:end
:start
Renders
the
Excel
view,
given
the
specified
model
:end
:start
Create
the
workbook
from
an
existing
XLS
document
:end
:start
Subclasses
must
implement
this
method
to
create
an
Excel
Workbook
document,
given
the
model
:end
:start
Abstract
superclass
for
PDF
views
that
operate
on
an
existing
document
with
an
AcroForm
Application-specific
view
classes
will
extend
this
class
to
merge
the
PDF
form
with
model
data
<p>Thanks
to
Bryant
Larsen
for
the
suggestion
and
the
original
prototype!
:end
:start
Read
the
raw
PDF
resource
into
an
iText
PdfReader
<p>The
default
implementation
resolve
the
specified
"url"
property
as
ApplicationContext
resource
:end
:start
Subclasses
must
implement
this
method
to
merge
the
PDF
form
with
the
given
model
data
<p>This
is
where
you
are
able
to
set
values
on
the
AcroForm
An
example
of
what
can
be
done
at
this
level
is:
<pre
class="code">
//
get
the
form
from
the
document
AcroFields
form
=
stampergetAcroFields();
//
set
some
values
on
the
form
formsetField("field1",
"value1");
formsetField("field2",
"Vvlue2");
//
set
the
disposition
and
filename
responsesetHeader("Content-disposition",
"attachment;
FILENAME=someNamepdf");</pre>
<p>Note
that
the
passed-in
HTTP
response
is
just
supposed
to
be
used
for
setting
cookies
or
other
HTTP
headers
The
built
PDF
document
itself
will
automatically
get
written
to
the
response
after
this
method
returns
:end
:start
Abstract
superclass
for
PDF
views,
using
Bruno
Lowagie's
<a
href="http://wwwlowagiecom/iText">iText</a>
package
Application-specific
view
classes
will
extend
this
class
The
view
will
be
held
in
the
subclass
itself,
not
in
a
template
<p>Note:
Internet
Explorer
requires
a
"pdf"
extension,
as
it
doesn't
always
respect
the
declared
content
type
:end
:start
This
constructor
sets
the
appropriate
content
type
"application/pdf"
Note
that
IE
won't
take
much
notice
of
this,
but
there's
not
a
lot
we
can
do
about
this
Generated
documents
should
have
a
"pdf"
extension
:end
:start
Create
a
new
document
to
hold
the
PDF
contents
<p>By
default
returns
an
A4
document,
but
the
subclass
can
specify
any
Document,
possibly
parameterized
via
bean
properties
defined
on
the
View
:end
:start
Create
a
new
PdfWriter
for
the
given
iText
Document
:end
:start
Prepare
the
given
PdfWriter
Called
before
building
the
PDF
document,
that
is,
before
the
call
to
Documentopen()
<p>Useful
for
registering
a
page
event
listener,
for
example
The
default
implementation
sets
the
viewer
preferences
as
returned
by
this
class's
getViewerPreferences()
method
:end
:start
Return
the
viewer
preferences
for
the
PDF
file
<p>By
default
returns
AllowPrinting
and
PageLayoutSinglePage,
but
can
be
subclassed
The
subclass
can
either
have
fixed
preferences
or
retrieve
them
from
bean
properties
defined
on
the
View
:end
:start
Populate
the
iText
Document's
meta
fields
(author,
title,
etc)
<br>Default
is
an
empty
implementation
Subclasses
may
override
this
method
to
add
meta
fields
such
as
title,
subject,
author,
creator,
keywords,
etc
This
method
is
called
after
assigning
a
PdfWriter
to
the
Document
and
before
calling
documentopen()
:end
:start
Subclasses
must
implement
this
method
to
build
an
iText
PDF
document,
given
the
model
Called
between
Documentopen()
and
Documentclose()
calls
<p>Note
that
the
passed-in
HTTP
response
is
just
supposed
to
be
used
for
setting
cookies
or
other
HTTP
headers
The
built
PDF
document
itself
will
automatically
get
written
to
the
response
after
this
method
returns
:end
:start
Abstract
superclass
for
Atom
Feed
views,
using
javanet's
<a
href="https://romedevjavanet/">ROME</a>
package
<p>Application-specific
view
classes
will
extend
this
class
The
view
will
be
held
in
the
subclass
itself,
not
in
a
template
<p>Main
entry
points
are
the
#buildFeedMetadata(Map,
WireFeed,
HttpServletRequest)
and
#buildFeedEntries(Map,
HttpServletRequest,
HttpServletResponse)
<p>Thanks
to
Jettro
Coenradie
and
Sergio
Bossa
for
the
original
feed
view
prototype!
:end
:start
Sets
the
Rome
feed
type
to
use
<p>Defaults
to
Atom
10
:end
:start
Create
a
new
Feed
instance
to
hold
the
entries
<p>By
default
returns
an
Atom
10
feed,
but
the
subclass
can
specify
any
Feed
:end
:start
Invokes
#buildFeedEntries(Map,
HttpServletRequest,
HttpServletResponse)
to
get
a
list
of
feed
entries
:end
:start
Subclasses
must
implement
this
method
to
build
feed
entries,
given
the
model
<p>Note
that
the
passed-in
HTTP
response
is
just
supposed
to
be
used
for
setting
cookies
or
other
HTTP
headers
The
built
feed
itself
will
automatically
get
written
to
the
response
after
this
method
returns
:end
:start
Abstract
base
class
for
Atom
and
RSS
Feed
views,
using
javanet's
<a
href="https://romedevjavanet/">ROME</a>
package
<p>Application-specific
view
classes
will
typically
extend
from
either
AbstractRssFeedView
or
AbstractAtomFeedView
instead
of
from
this
class
<p>Thanks
to
Jettro
Coenradie
and
Sergio
Bossa
for
the
original
feed
view
prototype!
:end
:start
Create
a
new
feed
to
hold
the
entries
:end
:start
Populate
the
feed
metadata
(title,
link,
description,
etc)
<p>Default
is
an
empty
implementation
Subclasses
can
override
this
method
to
add
meta
fields
such
as
title,
link
description,
etc
:end
:start
Subclasses
must
implement
this
method
to
build
feed
entries,
given
the
model
<p>Note
that
the
passed-in
HTTP
response
is
just
supposed
to
be
used
for
setting
cookies
or
other
HTTP
headers
The
built
feed
itself
will
automatically
get
written
to
the
response
after
this
method
returns
:end
:start
Abstract
superclass
for
RSS
Feed
views,
using
javanet's
<a
href="https://romedevjavanet/">ROME</a>
package
<p>Application-specific
view
classes
will
extend
this
class
The
view
will
be
held
in
the
subclass
itself,
not
in
a
template
<p>Main
entry
points
are
the
#buildFeedMetadata(Map,
WireFeed
,
HttpServletRequest)
and
#buildFeedItems(Map,
HttpServletRequest,
HttpServletResponse)
<p>Thanks
to
Jettro
Coenradie
and
Sergio
Bossa
for
the
original
feed
view
prototype!
:end
:start
Create
a
new
Channel
instance
to
hold
the
entries
<p>By
default
returns
an
RSS
20
channel,
but
the
subclass
can
specify
any
channel
:end
:start
Invokes
#buildFeedItems(Map,
HttpServletRequest,
HttpServletResponse)
to
get
a
list
of
feed
items
:end
:start
Subclasses
must
implement
this
method
to
build
feed
items,
given
the
model
<p>Note
that
the
passed-in
HTTP
response
is
just
supposed
to
be
used
for
setting
cookies
or
other
HTTP
headers
The
built
feed
itself
will
automatically
get
written
to
the
response
after
this
method
returns
:end
:start
Interface
to
be
implemented
by
objects
that
configure
and
manage
a
FreeMarker
Configuration
object
in
a
web
environment
Detected
and
used
by
FreeMarkerView
:end
:start
Return
the
FreeMarker
Configuration
object
for
the
current
web
application
context
<p>A
FreeMarker
Configuration
object
may
be
used
to
set
FreeMarker
properties
and
shared
objects,
and
allows
to
retrieve
templates
:end
:start
Returns
the
TaglibFactory
used
to
enable
JSP
tags
to
be
accessed
from
FreeMarker
templates
:end
:start
JavaBean
to
configure
FreeMarker
for
web
usage,
via
the
"configLocation"
and/or
"freemarkerSettings"
and/or
"templateLoaderPath"
properties
The
simplest
way
to
use
this
class
is
to
specify
just
a
"templateLoaderPath";
you
do
not
need
any
further
configuration
then
<pre
class="code">
&lt;bean
id="freemarkerConfig"
class="orgspringframeworkwebservletviewfreemarkerFreeMarkerConfigurer"&gt;
&lt;property
name="templateLoaderPath"&gt;&lt;value&gt;/WEB-INF/freemarker/&lt;/value>&lt;/property&gt;
&lt;/bean&gt;</pre>
This
bean
must
be
included
in
the
application
context
of
any
application
using
Spring's
FreeMarkerView
for
web
MVC
It
exists
purely
to
configure
FreeMarker
It
is
not
meant
to
be
referenced
by
application
components
but
just
internally
by
FreeMarkerView
Implements
FreeMarkerConfig
to
be
found
by
FreeMarkerView
without
depending
on
the
bean
name
the
configurer
Each
DispatcherServlet
can
define
its
own
FreeMarkerConfigurer
if
desired
<p>Note
that
you
can
also
refer
to
a
preconfigured
FreeMarker
Configuration
instance,
for
example
one
set
up
by
FreeMarkerConfigurationFactoryBean,
via
the
"configuration"
property
This
allows
to
share
a
FreeMarker
Configuration
for
web
and
email
usage,
for
example
<p>This
configurer
registers
a
template
loader
for
this
package,
allowing
to
reference
the
"springftl"
macro
library
(contained
in
this
package
and
thus
in
springjar)
like
this:
<pre
class="code">
&lt;#import
"/springftl"
as
spring/&gt;
&lt;@springbind
"personage"/&gt;
age
is
${springstatusvalue</pre>
Note:
Spring's
FreeMarker
support
requires
FreeMarker
23
or
higher
:end
:start
Set
a
preconfigured
Configuration
to
use
for
the
FreeMarker
web
config,
eg
a
shared
one
for
web
and
email
usage,
set
up
via
FreeMarkerConfigurationFactoryBean
If
this
is
not
set,
FreeMarkerConfigurationFactory's
properties
(inherited
by
this
class)
have
to
be
specified
:end
:start
Initialize
the
TaglibFactory
for
the
given
ServletContext
:end
:start
Initialize
FreeMarkerConfigurationFactory's
Configuration
if
not
overridden
by
a
preconfigured
FreeMarker
Configuation
<p>Sets
up
a
ClassTemplateLoader
to
use
for
loading
Spring
macros
:end
:start
This
implementation
registers
an
additional
ClassTemplateLoader
for
the
Spring-provided
macros,
added
to
the
end
of
the
list
:end
:start
Return
the
Configuration
object
wrapped
by
this
bean
:end
:start
Return
the
TaglibFactory
object
wrapped
by
this
bean
:end
:start
View
using
the
FreeMarker
template
engine
<p>Exposes
the
following
JavaBean
properties:
<ul>
<li><b>url</b>:
the
location
of
the
FreeMarker
template
to
be
wrapped,
relative
to
the
FreeMarker
template
context
(directory)
<li><b>encoding</b>
(optional,
default
is
determined
by
FreeMarker
configuration):
the
encoding
of
the
FreeMarker
template
file
</ul>
<p>Depends
on
a
single
FreeMarkerConfig
object
such
as
FreeMarkerConfigurer
being
accessible
in
the
current
web
application
context,
with
any
bean
name
Alternatively,
you
can
set
the
FreeMarker
Configuration
object
as
bean
property
See
#setConfiguration
for
more
details
on
the
impacts
of
this
approach
<p>Note:
Spring's
FreeMarker
support
requires
FreeMarker
23
or
higher
:end
:start
Set
the
encoding
of
the
FreeMarker
template
file
Default
is
determined
by
the
FreeMarker
Configuration:
"ISO-8859-1"
if
not
specified
otherwise
<p>Specify
the
encoding
in
the
FreeMarker
Configuration
rather
than
per
template
if
all
your
templates
share
a
common
encoding
:end
:start
Return
the
encoding
for
the
FreeMarker
template
:end
:start
Set
the
FreeMarker
Configuration
to
be
used
by
this
view
<p>If
this
is
not
set,
the
default
lookup
will
occur:
a
single
FreeMarkerConfig
is
expected
in
the
current
web
application
context,
with
any
bean
name
<strong>Note:</strong>
using
this
method
will
cause
a
new
instance
of
TaglibFactory
to
created
for
every
single
FreeMarkerView
instance
This
can
be
quite
expensive
in
terms
of
memory
and
initial
CPU
usage
In
production
it
is
recommended
that
you
use
a
FreeMarkerConfig
which
exposes
a
single
shared
TaglibFactory
:end
:start
Return
the
FreeMarker
configuration
used
by
this
view
:end
:start
Invoked
on
startup
Looks
for
a
single
FreeMarkerConfig
bean
to
find
the
relevant
Configuration
for
this
factory
<p>Checks
that
the
template
for
the
default
Locale
can
be
found:
FreeMarker
will
check
non-Locale-specific
templates
if
a
locale-specific
one
is
not
found
:end
:start
Autodetect
a
FreeMarkerConfig
object
via
the
ApplicationContext
:end
:start
Return
the
configured
FreeMarker
ObjectWrapper,
or
the
ObjectWrapper#DEFAULT_WRAPPER
default
wrapper
if
none
specified
:end
:start
Check
that
the
FreeMarker
template
used
for
this
view
exists
and
is
valid
<p>Can
be
overridden
to
customize
the
behavior,
for
example
in
case
of
multiple
templates
to
be
rendered
into
a
single
view
:end
:start
Process
the
model
map
by
merging
it
with
the
FreeMarker
template
Output
is
directed
to
the
servlet
response
<p>This
method
can
be
overridden
if
custom
behavior
is
needed
:end
:start
Expose
helpers
unique
to
each
rendering
operation
This
is
necessary
so
that
different
rendering
operations
can't
overwrite
each
other's
formats
etc
<p>Called
by
renderMergedTemplateModel
The
default
implementation
is
empty
This
method
can
be
overridden
to
add
custom
helpers
to
the
model
:end
:start
Render
the
FreeMarker
view
to
the
given
response,
using
the
given
model
map
which
contains
the
complete
template
model
to
use
<p>The
default
implementation
renders
the
template
specified
by
the
"url"
bean
property,
retrieved
via
getTemplate
It
delegates
to
the
processTemplate
method
to
merge
the
template
instance
with
the
given
template
model
<p>Adds
the
standard
Freemarker
hash
models
to
the
model:
request
parameters,
request,
session
and
application
(ServletContext),
as
well
as
the
JSP
tag
library
hash
model
<p>Can
be
overridden
to
customize
the
behavior,
for
example
to
render
multiple
templates
into
a
single
view
:end
:start
Build
a
FreeMarker
template
model
for
the
given
model
Map
<p>The
default
implementation
builds
a
AllHttpScopesHashModel
:end
:start
Retrieve
the
FreeMarker
template
for
the
given
locale,
to
be
rendering
by
this
view
<p>By
default,
the
template
specified
by
the
"url"
bean
property
will
be
retrieved
:end
:start
Retrieve
the
FreeMarker
template
specified
by
the
given
name,
using
the
encoding
specified
by
the
"encoding"
bean
property
<p>Can
be
called
by
subclasses
to
retrieve
a
specific
template,
for
example
to
render
multiple
templates
into
a
single
view
:end
:start
Process
the
FreeMarker
template
to
the
servlet
response
<p>Can
be
overridden
to
customize
the
behavior
:end
:start
Convenience
subclass
of
orgspringframeworkwebservletviewUrlBasedViewResolver
that
supports
FreeMarkerView
(ie
FreeMarker
templates)
and
custom
subclasses
of
it
<p>The
view
class
for
all
views
generated
by
this
resolver
can
be
specified
via
the
"viewClass"
property
See
UrlBasedViewResolver's
javadoc
for
details
<p><b>Note:</b>
When
chaining
ViewResolvers,
a
FreeMarkerViewResolver
will
check
for
the
existence
of
the
specified
template
resources
and
only
return
a
non-null
View
object
if
the
template
was
actually
found
:end
:start
Requires
FreeMarkerView
:end
:start
Wrapper
for
a
JSP
or
other
resource
within
the
same
web
application
Exposes
model
objects
as
request
attributes
and
forwards
the
request
to
the
specified
resource
URL
using
a
javaxservletRequestDispatcher
<p>A
URL
for
this
view
is
supposed
to
specify
a
resource
within
the
web
application,
suitable
for
RequestDispatcher's
forward
or
include
method
<p>If
operating
within
an
already
included
request
or
within
a
response
that
has
already
been
committed,
this
view
will
fall
back
to
an
include
instead
of
a
forward
This
can
be
enforced
by
calling
responseflushBuffer()
(which
will
commit
the
response)
before
rendering
the
view
<p>Typical
usage
with
InternalResourceViewResolver
looks
as
follows,
from
the
perspective
of
the
DispatcherServlet
context
definition:
<pre
class="code">&lt;bean
id="viewResolver"
class="orgspringframeworkwebservletviewInternalResourceViewResolver"&gt;
&lt;property
name="prefix"
value="/WEB-INF/jsp/"/&gt;
&lt;property
name="suffix"
value="jsp"/&gt;
&lt;/bean&gt;</pre>
Every
view
name
returned
from
a
handler
will
be
translated
to
a
JSP
resource
(for
example:
"myView"
->
"/WEB-INF/jsp/myViewjsp"),
using
this
view
class
by
default
:end
:start
Constructor
for
use
as
a
bean
:end
:start
Create
a
new
InternalResourceView
with
the
given
URL
:end
:start
Create
a
new
InternalResourceView
with
the
given
URL
:end
:start
Specify
whether
to
always
include
the
view
rather
than
forward
to
it
<p>Default
is
"false"
Switch
this
flag
on
to
enforce
the
use
of
a
Servlet
include,
even
if
a
forward
would
be
possible
:end
:start
Set
whether
to
make
all
Spring
beans
in
the
application
context
accessible
as
request
attributes,
through
lazy
checking
once
an
attribute
gets
accessed
<p>This
will
make
all
such
beans
accessible
in
plain
${
expressions
in
a
JSP
20
page,
as
well
as
in
JSTL's
c:out
value
expressions
<p>Default
is
"false"
Switch
this
flag
on
to
transparently
expose
all
Spring
beans
in
the
request
attribute
namespace
<p><b>NOTE:</b>
Context
beans
will
override
any
custom
request
or
session
attributes
of
the
same
name
that
have
been
manually
added
However,
model
attributes
(as
explicitly
exposed
to
this
view)
of
the
same
name
will
always
override
context
beans
:end
:start
Specify
the
names
of
beans
in
the
context
which
are
supposed
to
be
exposed
If
this
is
non-null,
only
the
specified
beans
are
eligible
for
exposure
as
attributes
<p>If
you'd
like
to
expose
all
Spring
beans
in
the
application
context,
switch
the
#setExposeContextBeansAsAttributes
"exposeContextBeansAsAttributes"
flag
on
but
do
not
list
specific
bean
names
for
this
property
:end
:start
Set
whether
to
explicitly
prevent
dispatching
back
to
the
current
handler
path
<p>Default
is
"false"
Switch
this
to
"true"
for
convention-based
views
where
a
dispatch
back
to
the
current
handler
path
is
a
definitive
error
:end
:start
An
ApplicationContext
is
not
strictly
required
for
InternalResourceView
:end
:start
Render
the
internal
resource
given
the
specified
model
This
includes
setting
the
model
as
request
attributes
:end
:start
Get
the
request
handle
to
expose
to
the
RequestDispatcher,
ie
to
the
view
<p>The
default
implementation
wraps
the
original
request
for
exposure
of
Spring
beans
as
request
attributes
(if
demanded)
:end
:start
Expose
helpers
unique
to
each
rendering
operation
This
is
necessary
so
that
different
rendering
operations
can't
overwrite
each
other's
contexts
etc
<p>Called
by
#renderMergedOutputModel(Map,
HttpServletRequest,
HttpServletResponse)
The
default
implementation
is
empty
This
method
can
be
overridden
to
add
custom
helpers
as
request
attributes
:end
:start
Prepare
for
rendering,
and
determine
the
request
dispatcher
path
to
forward
to
(or
to
include)
<p>This
implementation
simply
returns
the
configured
URL
Subclasses
can
override
this
to
determine
a
resource
to
render,
typically
interpreting
the
URL
in
a
different
manner
:end
:start
Obtain
the
RequestDispatcher
to
use
for
the
forward/include
<p>The
default
implementation
simply
calls
HttpServletRequest#getRequestDispatcher(String)
Can
be
overridden
in
subclasses
:end
:start
Determine
whether
to
use
RequestDispatcher's
include
or
forward
method
<p>Performs
a
check
whether
an
include
URI
attribute
is
found
in
the
request,
indicating
an
include
request,
and
whether
the
response
has
already
been
committed
In
both
cases,
an
include
will
be
performed,
as
a
forward
is
not
possible
anymore
:end
:start
Convenient
subclass
of
UrlBasedViewResolver
that
supports
InternalResourceView
(ie
Servlets
and
JSPs)
and
subclasses
such
as
JstlView
<p>The
view
class
for
all
views
generated
by
this
resolver
can
be
specified
via
#setViewClass
See
UrlBasedViewResolver's
javadoc
for
details
The
default
is
InternalResourceView,
or
JstlView
if
the
JSTL
API
is
present
<p>BTW,
it's
good
practice
to
put
JSP
files
that
just
serve
as
views
under
WEB-INF,
to
hide
them
from
direct
access
(eg
via
a
manually
entered
URL)
Only
controllers
will
be
able
to
access
them
then
<p><b>Note:</b>
When
chaining
ViewResolvers,
an
InternalResourceViewResolver
always
needs
to
be
last,
as
it
will
attempt
to
resolve
any
view
name,
no
matter
whether
the
underlying
resource
actually
exists
:end
:start
Sets
the
default
#setViewClass
view
class
to
#requiredViewClass:
by
default
InternalResourceView,
or
JstlView
if
the
JSTL
API
is
present
:end
:start
This
resolver
requires
InternalResourceView
:end
:start
Specify
whether
to
always
include
the
view
rather
than
forward
to
it
<p>Default
is
"false"
Switch
this
flag
on
to
enforce
the
use
of
a
Servlet
include,
even
if
a
forward
would
be
possible
:end
:start
Set
whether
to
make
all
Spring
beans
in
the
application
context
accessible
as
request
attributes,
through
lazy
checking
once
an
attribute
gets
accessed
<p>This
will
make
all
such
beans
accessible
in
plain
${
expressions
in
a
JSP
20
page,
as
well
as
in
JSTL's
c:out
value
expressions
<p>Default
is
"false"
:end
:start
Specify
the
names
of
beans
in
the
context
which
are
supposed
to
be
exposed
If
this
is
non-null,
only
the
specified
beans
are
eligible
for
exposure
as
attributes
:end
:start
Extends
AbstractJasperReportsView
to
provide
basic
rendering
logic
for
views
that
use
a
fixed
format,
eg
always
PDF
or
always
HTML
<p>Subclasses
need
to
implement
two
template
methods:
createExporter
to
create
a
JasperReports
exporter
for
a
specific
output
format,
and
useWriter
to
determine
whether
to
write
text
or
binary
content
:end
:start
Perform
rendering
for
a
single
Jasper
Reports
exporter,
that
is,
for
a
pre-defined
output
format
:end
:start
We
need
to
write
text
to
the
response
Writer
:end
:start
We
need
to
write
binary
output
to
the
response
OutputStream
:end
:start
Create
a
JasperReports
exporter
for
a
specific
output
format,
which
will
be
used
to
render
the
report
to
the
HTTP
response
<p>The
useWriter
method
determines
whether
the
output
will
be
written
as
text
or
as
binary
content
:end
:start
Return
whether
to
use
a
javaioWriter
to
write
text
content
to
the
HTTP
response
Else,
a
javaioOutputStream
will
be
used,
to
write
binary
content
to
the
response
:end
:start
Base
class
for
all
JasperReports
views
Applies
on-the-fly
compilation
of
report
designs
as
required
and
coordinates
the
rendering
process
The
resource
path
of
the
main
report
needs
to
be
specified
as
url
<p>This
class
is
responsible
for
getting
report
data
from
the
model
that
has
been
provided
to
the
view
The
default
implementation
checks
for
a
model
object
under
the
specified
reportDataKey
first,
then
falls
back
to
looking
for
a
value
of
type
JRDataSource,
javautilCollection,
object
array
(in
that
order)
<p>If
no
JRDataSource
can
be
found
in
the
model,
then
reports
will
be
filled
using
the
configured
javaxsqlDataSource
if
any
If
neither
a
JRDataSource
or
javaxsqlDataSource
is
available
then
an
IllegalArgumentException
is
raised
<p>Provides
support
for
sub-reports
through
the
subReportUrls
and
subReportDataKeys
properties
<p>When
using
sub-reports,
the
master
report
should
be
configured
using
the
url
property
and
the
sub-reports
files
should
be
configured
using
the
subReportUrls
property
Each
entry
in
the
subReportUrls
Map
corresponds
to
an
individual
sub-report
The
key
of
an
entry
must
match
up
to
a
sub-report
parameter
in
your
report
file
of
type
netsfjasperreportsengineJasperReport,
and
the
value
of
an
entry
must
be
the
URL
for
the
sub-report
file
<p>For
sub-reports
that
require
an
instance
of
JRDataSource,
that
is,
they
don't
have
a
hard-coded
query
for
data
retrieval,
you
can
include
the
appropriate
data
in
your
model
as
would
with
the
data
source
for
the
parent
report
However,
you
must
provide
a
List
of
parameter
names
that
need
to
be
converted
to
JRDataSource
instances
for
the
sub-report
via
the
subReportDataKeys
property
When
using
JRDataSource
instances
for
sub-reports,
you
<i>must</i>
specify
a
value
for
the
reportDataKey
property,
indicating
the
data
to
use
for
the
main
report
<p>Allows
for
exporter
parameters
to
be
configured
declatively
using
the
exporterParameters
property
This
is
a
Map
typed
property
where
the
key
of
an
entry
corresponds
to
the
fully-qualified
name
of
the
static
field
for
the
JRExporterParameter
and
the
value
of
an
entry
is
the
value
you
want
to
assign
to
the
exporter
parameter
<p>Response
headers
can
be
controlled
via
the
headers
property
Spring
will
attempt
to
set
the
correct
value
for
the
Content-Diposition
header
so
that
reports
render
correctly
in
Internet
Explorer
However,
you
can
override
this
setting
through
the
headers
property
:end
:start
Constant
that
defines
"Content-Disposition"
header
:end
:start
The
default
Content-Disposition
header
Used
to
make
IE
play
nice
:end
:start
Set
the
name
of
the
model
attribute
that
represents
the
report
data
If
not
specified,
the
model
map
will
be
searched
for
a
matching
value
type
<p>A
JRDataSource
will
be
taken
as-is
For
other
types,
conversion
will
apply:
By
default,
a
javautilCollection
will
be
converted
to
JRBeanCollectionDataSource,
and
an
object
array
to
JRBeanArrayDataSource
<p><b>Note:</b>
If
you
pass
in
a
Collection
or
object
array
in
the
model
map
for
use
as
plain
report
parameter,
rather
than
as
report
data
to
extract
fields
from,
you
need
to
specify
the
key
for
the
actual
report
data
to
use,
to
avoid
mis-detection
of
report
data
by
type
:end
:start
Specify
resource
paths
which
must
be
loaded
as
instances
of
JasperReport
and
passed
to
the
JasperReports
engine
for
rendering
as
sub-reports,
under
the
same
keys
as
in
this
mapping
:end
:start
Set
the
list
of
names
corresponding
to
the
model
parameters
that
will
contain
data
source
objects
for
use
in
sub-reports
Spring
will
convert
these
objects
to
instances
of
JRDataSource
where
applicable
and
will
then
include
the
resulting
JRDataSource
in
the
parameters
passed
into
the
JasperReports
engine
<p>The
name
specified
in
the
list
should
correspond
to
an
attribute
in
the
model
Map,
and
to
a
sub-report
data
source
parameter
in
your
report
file
If
you
pass
in
JRDataSource
objects
as
model
attributes,
specifying
this
list
of
keys
is
not
required
<p>If
you
specify
a
list
of
sub-report
data
keys,
it
is
required
to
also
specify
a
reportDataKey
for
the
main
report,
to
avoid
confusion
between
the
data
source
objects
for
the
various
reports
involved
:end
:start
Specify
the
set
of
headers
that
are
included
in
each
of
response
:end
:start
Set
the
exporter
parameters
that
should
be
used
when
rendering
a
view
:end
:start
Return
the
exporter
parameters
that
this
view
uses,
if
any
:end
:start
Allows
subclasses
to
populate
the
converted
exporter
parameters
:end
:start
Allows
subclasses
to
retrieve
the
converted
exporter
parameters
:end
:start
Specify
the
javaxsqlDataSource
to
use
for
reports
with
embedded
SQL
statements
:end
:start
Return
the
javaxsqlDataSource
that
this
view
uses,
if
any
:end
:start
JasperReports
views
do
not
strictly
required
a
'url'
value
Alternatively,
the
#getReport()
template
method
may
be
overridden
:end
:start
Checks
to
see
that
a
valid
report
file
URL
is
supplied
in
the
configuration
Compiles
the
report
file
is
necessary
<p>Subclasses
can
add
custom
initialization
logic
by
overriding
the
#onInit
method
:end
:start
Subclasses
can
override
this
to
add
some
custom
initialization
logic
Called
by
#initApplicationContext()
as
soon
as
all
standard
initialization
logic
has
finished
executing
:end
:start
Converts
the
exporter
parameters
passed
in
by
the
user
which
may
be
keyed
by
Strings
corresponding
to
the
fully
qualified
name
of
the
JRExporterParameter
into
parameters
which
are
keyed
by
JRExporterParameter
:end
:start
Convert
the
supplied
parameter
value
into
the
actual
type
required
by
the
corresponding
JRExporterParameter
<p>The
default
implementation
simply
converts
the
String
values
"true"
and
"false"
into
corresponding
Boolean
objects,
and
tries
to
convert
String
values
that
start
with
a
digit
into
Integer
objects
(simply
keeping
them
as
String
if
number
conversion
fails)
:end
:start
Return
a
JRExporterParameter
for
the
given
parameter
object,
converting
it
from
a
String
if
necessary
:end
:start
Convert
the
given
fully
qualified
field
name
to
a
corresponding
JRExporterParameter
instance
:end
:start
Load
the
main
JasperReport
from
the
specified
Resource
If
the
Resource
points
to
an
uncompiled
report
design
file
then
the
report
file
is
compiled
dynamically
and
loaded
into
memory
:end
:start
Loads
a
JasperReport
from
the
specified
Resource
If
the
Resource
points
to
an
uncompiled
report
design
file
then
the
report
file
is
compiled
dynamically
and
loaded
into
memory
:end
:start
Finds
the
report
data
to
use
for
rendering
the
report
and
then
invokes
the
#renderReport
method
that
should
be
implemented
by
the
subclass
:end
:start
Expose
current
Spring-managed
Locale
and
MessageSource
to
JasperReports
i18n
($R
expressions
etc)
The
MessageSource
should
only
be
exposed
as
JasperReports
resource
bundle
if
no
such
bundle
is
defined
in
the
report
itself
<p>The
default
implementation
exposes
the
Spring
RequestContext
Locale
and
a
MessageSourceResourceBundle
adapter
for
the
Spring
ApplicationContext,
analogous
to
the
JstlUtilsexposeLocalizationContext
method
:end
:start
Create
a
populated
JasperPrint
instance
from
the
configured
JasperReport
instance
<p>By
default,
this
method
will
use
any
JRDataSource
instance
(or
wrappable
Object)
that
can
be
located
using
#setReportDataKey,
a
lookup
for
type
JRDataSource
in
the
model
Map,
or
a
special
value
retrieved
via
#getReportData
<p>If
no
JRDataSource
can
be
found,
this
method
will
use
a
JDBC
Connection
obtained
from
the
configured
javaxsqlDataSource
(or
a
DataSource
attribute
in
the
model)
If
no
JDBC
DataSource
can
be
found
either,
the
JasperReports
engine
will
be
invoked
with
plain
model
Map,
assuming
that
the
model
contains
parameters
that
identify
the
source
for
report
data
(eg
Hibernate
or
JPA
queries)
:end
:start
Determine
the
JasperReport
to
fill
Called
by
#fillReport
<p>The
default
implementation
returns
the
report
as
statically
configured
through
the
'url'
property
(and
loaded
by
#loadReport())
Can
be
overridden
in
subclasses
in
order
to
dynamically
obtain
a
JasperReport
instance
As
an
alternative,
consider
overriding
the
#fillReport
template
method
itself
:end
:start
Create
an
appropriate
JRDataSource
for
passed-in
report
data
Called
by
#fillReport
when
its
own
lookup
steps
were
not
successful
<p>The
default
implementation
looks
for
a
value
of
type
javautilCollection
or
object
array
(in
that
order)
Can
be
overridden
in
subclasses
:end
:start
Convert
the
given
report
data
value
to
a
JRDataSource
<p>The
default
implementation
delegates
to
JasperReportUtils
unless
the
report
data
value
is
an
instance
of
JRDataSourceProvider
A
JRDataSource,
JRDataSourceProvider,
javautilCollection
or
object
array
is
detected
JRDataSources
are
returned
as
is,
whilst
JRDataSourceProviders
are
used
to
create
an
instance
of
JRDataSource
which
is
then
returned
The
latter
two
are
converted
to
JRBeanCollectionDataSource
or
JRBeanArrayDataSource,
respectively
:end
:start
Create
a
report
using
the
given
provider
:end
:start
Return
the
value
types
that
can
be
converted
to
a
JRDataSource,
in
prioritized
order
Should
only
return
types
that
the
#convertReportData
method
is
actually
able
to
convert
<p>Default
value
types
are:
javautilCollection
and
Object
array
:end
:start
Template
method
to
be
overridden
for
custom
post-processing
of
the
populated
report
Invoked
after
filling
but
before
rendering
<p>The
default
implementation
is
empty
:end
:start
Subclasses
should
implement
this
method
to
perform
the
actual
rendering
process
<p>Note
that
the
content
type
has
not
been
set
yet:
Implementers
should
build
a
content
type
String
and
set
it
via
responsesetContentType
If
necessary,
this
can
include
a
charset
clause
for
a
specific
encoding
The
latter
will
only
be
necessary
for
textual
output
onto
a
Writer,
and
only
in
case
of
the
encoding
being
specified
in
the
JasperReports
exporter
parameters
<p><b>WARNING:</b>
Implementers
should
not
use
responsesetCharacterEncoding
unless
they
are
willing
to
depend
on
Servlet
API
24
or
higher
Prefer
a
concatenated
content
type
String
with
a
charset
clause
instead
:end
:start
Configurable
JasperReports
View,
allowing
to
specify
the
JasperReports
exporter
to
be
specified
through
bean
properties
rather
than
through
the
view
class
name
:end
:start
Set
the
JRExporter
implementation
Class
to
use
Throws
IllegalArgumentException
if
the
Class
doesn't
implement
JRExporter
Required
setting,
as
it
does
not
have
a
default
:end
:start
Specifies
whether
or
not
the
JRExporter
writes
to
the
javaioPrintWriter
of
the
associated
with
the
request
({@code
true)
or
whether
it
writes
directly
to
the
javaioInputStream
of
the
request
({@code
false)
Default
is
true
:end
:start
Checks
that
the
#setExporterClass(Class)
exporterClass
property
is
specified
:end
:start
Returns
a
new
instance
of
the
specified
JRExporter
class
:end
:start
Indicates
how
the
JRExporter
should
render
its
data
:end
:start
Implementation
of
AbstractJasperReportsSingleFormatView
that
renders
report
results
in
CSV
format
:end
:start
Implementation
of
AbstractJasperReportsSingleFormatView
that
renders
report
results
in
HTML
format
:end
:start
Jasper
Reports
view
class
that
allows
for
the
actual
rendering
format
to
be
specified
at
runtime
using
a
parameter
contained
in
the
model
<p>This
view
works
on
the
concept
of
a
format
key
and
a
mapping
key
The
format
key
is
used
to
pass
the
mapping
key
from
your
Controller
to
Spring
through
as
part
of
the
model
and
the
mapping
key
is
used
to
map
a
logical
format
to
an
actual
JasperReports
view
class
For
example
you
might
add
the
following
code
to
your
Controller:
<pre
class="code">
Map<String,
Object>
model
=
new
HashMap<String,
Object>();
modelput("format",
"pdf");</pre>
Here
format
is
the
format
key
and
pdf
is
the
mapping
key
When
rendering
a
report,
this
class
looks
for
a
model
parameter
under
the
format
key,
which
by
default
is
format
It
then
uses
the
value
of
this
parameter
to
lookup
the
actual
View
class
to
use
The
default
mappings
for
this
lookup
are:
<p><ul>
<li>{@code
csv
-
JasperReportsCsvView</li>
<li>{@code
html
-
JasperReportsHtmlView</li>
<li>{@code
pdf
-
JasperReportsPdfView</li>
<li>{@code
xls
-
JasperReportsXlsView</li>
</ul>
<p>The
format
key
can
be
changed
using
the
formatKey
property
and
the
mapping
key
to
view
class
mappings
can
be
changed
using
the
formatMappings
property
:end
:start
Default
value
used
for
format
key:
"format"
:end
:start
Creates
a
new
JasperReportsMultiFormatView
instance
with
a
default
set
of
mappings
:end
:start
Set
the
key
of
the
model
parameter
that
holds
the
format
discriminator
Default
is
"format"
:end
:start
Set
the
mappings
of
format
discriminators
to
view
class
names
The
default
mappings
are:
<p><ul>
<li>{@code
csv
-
JasperReportsCsvView</li>
<li>{@code
html
-
JasperReportsHtmlView</li>
<li>{@code
pdf
-
JasperReportsPdfView</li>
<li>{@code
xls
-
JasperReportsXlsView</li>
</ul>
:end
:start
Set
the
mappings
of
Content-Disposition
header
values
to
mapping
keys
If
specified,
Spring
will
look
at
these
mappings
to
determine
the
value
of
the
Content-Disposition
header
for
a
given
format
mapping
:end
:start
Return
the
mappings
of
Content-Disposition
header
values
to
mapping
keys
Mainly
available
for
configuration
through
property
paths
that
specify
individual
keys
:end
:start
Locates
the
format
key
in
the
model
using
the
configured
discriminator
key
and
uses
this
key
to
lookup
the
appropriate
view
class
from
the
mappings
The
rendering
of
the
report
is
then
delegated
to
an
instance
of
that
view
class
:end
:start
Implementation
of
AbstractJasperReportsSingleFormatView
that
renders
report
results
in
PDF
format
:end
:start
orgspringframeworkwebservletViewResolver
implementation
that
resolves
instances
of
AbstractJasperReportsView
by
translating
the
supplied
view
name
into
the
URL
of
the
report
file
:end
:start
Requires
the
view
class
to
be
a
subclass
of
AbstractJasperReportsView
:end
:start
Set
the
reportDataKey
the
view
class
should
use
:end
:start
Set
the
subReportUrls
the
view
class
should
use
:end
:start
Set
the
subReportDataKeys
the
view
class
should
use
:end
:start
Set
the
headers
the
view
class
should
use
:end
:start
Set
the
exporterParameters
the
view
class
should
use
:end
:start
Set
the
DataSource
the
view
class
should
use
:end
:start
Implementation
of
AbstractJasperReportsSingleFormatView
that
renders
report
results
in
XLS
format
:end
:start
Spring
MVC
View
that
renders
JSON
content
by
serializing
the
model
for
the
current
request
using
<a
href="http://jacksoncodehausorg/">Jackson
2's</a>
ObjectMapper
<p>By
default,
the
entire
contents
of
the
model
map
(with
the
exception
of
framework-specific
classes)
will
be
encoded
as
JSON
If
the
model
contains
only
one
key,
you
can
have
it
extracted
encoded
as
JSON
alone
via
#setExtractValueFromSingleKeyModel
:end
:start
Default
content
type:
"application/json"
Overridable
through
#setContentType
:end
:start
Construct
a
new
MappingJackson2JsonView,
setting
the
content
type
to
application/json
:end
:start
Set
the
ObjectMapper
for
this
view
If
not
set,
a
default
ObjectMapper#ObjectMapper()
ObjectMapper
will
be
used
<p>Setting
a
custom-configured
ObjectMapper
is
one
way
to
take
further
control
of
the
JSON
serialization
process
The
other
option
is
to
use
Jackson's
provided
annotations
on
the
types
to
be
serialized,
in
which
case
a
custom-configured
ObjectMapper
is
unnecessary
:end
:start
Return
the
ObjectMapper
for
this
view
:end
:start
Set
the
JsonEncoding
for
this
view
By
default,
JsonEncoding#UTF8
UTF-8
is
used
:end
:start
Return
the
JsonEncoding
for
this
view
:end
:start
Specify
a
custom
prefix
to
use
for
this
view's
JSON
output
Default
is
none
:end
:start
Indicates
whether
the
JSON
output
by
this
view
should
be
prefixed
with
<tt>"{
&&
"</tt>
Default
is
false
<p>Prefixing
the
JSON
string
in
this
manner
is
used
to
help
prevent
JSON
Hijacking
The
prefix
renders
the
string
syntactically
invalid
as
a
script
so
that
it
cannot
be
hijacked
This
prefix
does
not
affect
the
evaluation
of
JSON,
but
if
JSON
validation
is
performed
on
the
string,
the
prefix
would
need
to
be
ignored
:end
:start
Whether
to
use
the
default
pretty
printer
when
writing
JSON
This
is
a
shortcut
for
setting
up
an
ObjectMapper
as
follows:
<pre
class="code">
ObjectMapper
mapper
=
new
ObjectMapper();
mapperconfigure(SerializationFeatureINDENT_OUTPUT,
true);
</pre>
<p>The
default
value
is
false
:end
:start
Set
the
attribute
in
the
model
that
should
be
rendered
by
this
view
When
set,
all
other
model
attributes
will
be
ignored
:end
:start
Set
the
attributes
in
the
model
that
should
be
rendered
by
this
view
When
set,
all
other
model
attributes
will
be
ignored
:end
:start
Return
the
attributes
in
the
model
that
should
be
rendered
by
this
view
:end
:start
Set
the
attributes
in
the
model
that
should
be
rendered
by
this
view
When
set,
all
other
model
attributes
will
be
ignored
:end
:start
Return
the
attributes
in
the
model
that
should
be
rendered
by
this
view
:end
:start
Set
whether
to
serialize
models
containing
a
single
attribute
as
a
map
or
whether
to
extract
the
single
value
from
the
model
and
serialize
it
directly
<p>The
effect
of
setting
this
flag
is
similar
to
using
MappingJackson2HttpMessageConverter
with
an
@ResponseBody
request-handling
method
<p>Default
is
false
:end
:start
Disables
caching
of
the
generated
JSON
<p>Default
is
true,
which
will
prevent
the
client
from
caching
the
generated
JSON
:end
:start
Whether
to
update
the
'Content-Length'
header
of
the
response
When
set
to
true,
the
response
is
buffered
in
order
to
determine
the
content
length
and
set
the
'Content-Length'
header
of
the
response
<p>The
default
setting
is
false
:end
:start
Filter
out
undesired
attributes
from
the
given
model
The
return
value
can
be
either
another
Map
or
a
single
value
object
<p>The
default
implementation
removes
BindingResult
instances
and
entries
not
included
in
the
#setRenderedAttributes
renderedAttributes
property
:end
:start
Write
the
actual
JSON
content
to
the
stream
:end
:start
Specialization
of
InternalResourceView
for
JSTL
pages,
ie
JSP
pages
that
use
the
JSP
Standard
Tag
Library
<p>Exposes
JSTL-specific
request
attributes
specifying
locale
and
resource
bundle
for
JSTL's
formatting
and
message
tags,
using
Spring's
locale
and
orgspringframeworkcontextMessageSource
<p>Typical
usage
with
InternalResourceViewResolver
would
look
as
follows,
from
the
perspective
of
the
DispatcherServlet
context
definition:
<pre
class="code">
&lt;bean
id="viewResolver"
class="orgspringframeworkwebservletviewInternalResourceViewResolver"&gt;
&lt;property
name="viewClass"
value="orgspringframeworkwebservletviewJstlView"/&gt;
&lt;property
name="prefix"
value="/WEB-INF/jsp/"/&gt;
&lt;property
name="suffix"
value="jsp"/&gt;
&lt;/bean&gt;
&lt;bean
id="messageSource"
class="orgspringframeworkcontextsupportResourceBundleMessageSource"&gt;
&lt;property
name="basename"
value="messages"/&gt;
&lt;/bean&gt;</pre>
Every
view
name
returned
from
a
handler
will
be
translated
to
a
JSP
resource
(for
example:
"myView"
->
"/WEB-INF/jsp/myViewjsp"),
using
this
view
class
to
enable
explicit
JSTL
support
<p>The
specified
MessageSource
loads
messages
from
"messagesproperties"
etc
files
in
the
class
path
This
will
automatically
be
exposed
to
views
as
JSTL
localization
context,
which
the
JSTL
fmt
tags
(message
etc)
will
use
Consider
using
Spring's
ReloadableResourceBundleMessageSource
instead
of
the
standard
ResourceBundleMessageSource
for
more
sophistication
Of
course,
any
other
Spring
components
can
share
the
same
MessageSource
<p>This
is
a
separate
class
mainly
to
avoid
JSTL
dependencies
in
InternalResourceView
itself
JSTL
has
not
been
part
of
standard
J2EE
up
until
J2EE
14,
so
we
can't
assume
the
JSTL
API
jar
to
be
available
on
the
class
path
<p>Hint:
Set
the
#setExposeContextBeansAsAttributes
flag
to
"true"
in
order
to
make
all
Spring
beans
in
the
application
context
accessible
within
JSTL
expressions
(eg
in
a
c:out
value
expression)
This
will
also
make
all
such
beans
accessible
in
plain
${
expressions
in
a
JSP
20
page
:end
:start
Constructor
for
use
as
a
bean
:end
:start
Create
a
new
JstlView
with
the
given
URL
:end
:start
Create
a
new
JstlView
with
the
given
URL
:end
:start
Wraps
the
MessageSource
with
a
JSTL-aware
MessageSource
that
is
aware
of
JSTL's
javaxservletjspjstlfmtlocalizationContext
context-param
:end
:start
Exposes
a
JSTL
LocalizationContext
for
Spring's
locale
and
MessageSource
:end
:start
<p>View
that
redirects
to
an
absolute,
context
relative,
or
current
request
relative
URL
The
URL
may
be
a
URI
template
in
which
case
the
URI
template
variables
will
be
replaced
with
values
available
in
the
model
By
default
all
primitive
model
attributes
(or
collections
thereof)
are
exposed
as
HTTP
query
parameters
(assuming
they've
not
been
used
as
URI
template
variables),
but
this
behavior
can
be
changed
by
overriding
the
#isEligibleProperty(String,
Object)
method
<p>A
URL
for
this
view
is
supposed
to
be
a
HTTP
redirect
URL,
ie
suitable
for
HttpServletResponse's
sendRedirect
method,
which
is
what
actually
does
the
redirect
if
the
HTTP
10
flag
is
on,
or
via
sending
back
an
HTTP
303
code
-
if
the
HTTP
10
compatibility
flag
is
off
<p>Note
that
while
the
default
value
for
the
"contextRelative"
flag
is
off,
you
will
probably
want
to
almost
always
set
it
to
true
With
the
flag
off,
URLs
starting
with
"/"
are
considered
relative
to
the
web
server
root,
while
with
the
flag
on,
they
are
considered
relative
to
the
web
application
root
Since
most
web
applications
will
never
know
or
care
what
their
context
path
actually
is,
they
are
much
better
off
setting
this
flag
to
true,
and
submitting
paths
which
are
to
be
considered
relative
to
the
web
application
root
<p><b>NOTE
when
using
this
redirect
view
in
a
Portlet
environment:</b>
Make
sure
that
your
controller
respects
the
Portlet
sendRedirect
constraints
:end
:start
Constructor
for
use
as
a
bean
:end
:start
Create
a
new
RedirectView
with
the
given
URL
<p>The
given
URL
will
be
considered
as
relative
to
the
web
server,
not
as
relative
to
the
current
ServletContext
:end
:start
Create
a
new
RedirectView
with
the
given
URL
:end
:start
Create
a
new
RedirectView
with
the
given
URL
:end
:start
Create
a
new
RedirectView
with
the
given
URL
:end
:start
Set
whether
to
interpret
a
given
URL
that
starts
with
a
slash
("/")
as
relative
to
the
current
ServletContext,
ie
as
relative
to
the
web
application
root
<p>Default
is
"false":
A
URL
that
starts
with
a
slash
will
be
interpreted
as
absolute,
ie
taken
as-is
If
"true",
the
context
path
will
be
prepended
to
the
URL
in
such
a
case
:end
:start
Set
whether
to
stay
compatible
with
HTTP
10
clients
<p>In
the
default
implementation,
this
will
enforce
HTTP
status
code
302
in
any
case,
ie
delegate
to
HttpServletResponsesendRedirect
Turning
this
off
will
send
HTTP
status
code
303,
which
is
the
correct
code
for
HTTP
11
clients,
but
not
understood
by
HTTP
10
clients
<p>Many
HTTP
11
clients
treat
302
just
like
303,
not
making
any
difference
However,
some
clients
depend
on
303
when
redirecting
after
a
POST
request;
turn
this
flag
off
in
such
a
scenario
:end
:start
Set
the
exposeModelAttributes
flag
which
denotes
whether
or
not
model
attributes
should
be
exposed
as
HTTP
query
parameters
<p>Defaults
to
true
:end
:start
Set
the
encoding
scheme
for
this
view
<p>Default
is
the
request's
encoding
scheme
(which
is
ISO-8859-1
if
not
specified
otherwise)
:end
:start
Set
the
status
code
for
this
view
<p>Default
is
to
send
302/303,
depending
on
the
value
of
the
#setHttp10Compatible(boolean)
http10Compatible
flag
:end
:start
Whether
to
treat
the
redirect
URL
as
a
URI
template
Set
this
flag
to
false
if
the
redirect
URL
contains
open
and
close
curly
braces
"{",
""
and
you
don't
want
them
interpreted
as
URI
variables
<p>Defaults
to
true
:end
:start
Returns
"true"
indicating
this
view
performs
a
redirect
:end
:start
An
ApplicationContext
is
not
strictly
required
for
RedirectView
:end
:start
Convert
model
to
request
parameters
and
redirect
to
the
given
URL
:end
:start
Creates
the
target
URL
by
checking
if
the
redirect
string
is
a
URI
template
first,
expanding
it
with
the
given
model,
and
then
optionally
appending
simple
type
model
attributes
as
query
String
parameters
:end
:start
Replace
URI
template
variables
in
the
target
URL
with
encoded
model
attributes
or
URI
variables
from
the
current
request
Model
attributes
referenced
in
the
URL
are
removed
from
the
model
:end
:start
Append
query
properties
to
the
redirect
URL
Stringifies,
URL-encodes
and
formats
model
attributes
as
query
properties
:end
:start
Determine
name-value
pairs
for
query
strings,
which
will
be
stringified,
URL-encoded
and
formatted
by
#appendQueryProperties
<p>This
implementation
filters
the
model
through
checking
#isEligibleProperty(String,
Object)
for
each
element,
by
default
accepting
Strings,
primitives
and
primitive
wrappers
only
:end
:start
Determine
whether
the
given
model
element
should
be
exposed
as
a
query
property
<p>The
default
implementation
considers
Strings
and
primitives
as
eligible,
and
also
arrays
and
Collections/Iterables
with
corresponding
elements
This
can
be
overridden
in
subclasses
:end
:start
Determine
whether
the
given
model
element
value
is
eligible
for
exposure
<p>The
default
implementation
considers
primitives,
Strings,
Numbers,
Dates,
URIs,
URLs
and
Locale
objects
as
eligible
This
can
be
overridden
in
subclasses
:end
:start
URL-encode
the
given
input
String
with
the
given
encoding
scheme
<p>The
default
implementation
uses
URLEncoderencode(input,
enc)
:end
:start
Find
the
registered
RequestDataValueProcessor,
if
any,
and
allow
it
to
update
the
redirect
target
URL
:end
:start
Send
a
redirect
back
to
the
HTTP
client
:end
:start
Determines
the
status
code
to
use
for
HTTP
11
compatible
requests
<p>The
default
implementation
returns
the
#setStatusCode(HttpStatus)
statusCode
property
if
set,
or
the
value
of
the
#RESPONSE_STATUS_ATTRIBUTE
attribute
If
neither
are
set,
it
defaults
to
HttpStatus#SEE_OTHER
(303)
:end
:start
orgspringframeworkwebservletViewResolver
implementation
that
uses
bean
definitions
in
a
ResourceBundle,
specified
by
the
bundle
basename
<p>The
bundle
is
typically
defined
in
a
properties
file,
located
in
the
class
path
The
default
bundle
basename
is
"views"
<p>This
ViewResolver
supports
localized
view
definitions,
using
the
default
support
of
javautilPropertyResourceBundle
For
example,
the
basename
"views"
will
be
resolved
as
class
path
resources
"views_de_ATproperties",
"views_deproperties",
"viewsproperties"
-
for
a
given
Locale
"de_AT"
<p>Note:
this
ViewResolver
implements
the
Ordered
interface
to
allow
for
flexible
participation
in
ViewResolver
chaining
For
example,
some
special
views
could
be
defined
via
this
ViewResolver
(giving
it
0
as
"order"
value),
while
all
remaining
views
could
be
resolved
by
a
UrlBasedViewResolver
:end
:start
The
default
basename
if
no
other
basename
is
supplied
:end
:start
Set
a
single
basename,
following
javautilResourceBundle
conventions
The
default
is
"views"
<p>{@code
ResourceBundle
supports
different
suffixes
For
example,
a
base
name
of
"views"
might
map
to
ResourceBundle
files
"views",
"views_en_au"
and
"views_de"
<p>Note
that
ResourceBundle
names
are
effectively
classpath
locations:
As
a
consequence,
the
JDK's
standard
ResourceBundle
treats
dots
as
package
separators
This
means
that
"testtheme"
is
effectively
equivalent
to
"test/theme",
just
like
it
is
for
programmatic
javautilResourceBundle
usage
:end
:start
Set
an
array
of
basenames,
each
following
javautilResourceBundle
conventions
The
default
is
a
single
basename
"views"
<p>{@code
ResourceBundle
supports
different
suffixes
For
example,
a
base
name
of
"views"
might
map
to
ResourceBundle
files
"views",
"views_en_au"
and
"views_de"
<p>The
associated
resource
bundles
will
be
checked
sequentially
when
resolving
a
message
code
Note
that
message
definitions
in
a
<i>previous</i>
resource
bundle
will
override
ones
in
a
later
bundle,
due
to
the
sequential
lookup
<p>Note
that
ResourceBundle
names
are
effectively
classpath
locations:
As
a
consequence,
the
JDK's
standard
ResourceBundle
treats
dots
as
package
separators
This
means
that
"testtheme"
is
effectively
equivalent
to
"test/theme",
just
like
it
is
for
programmatic
javautilResourceBundle
usage
:end
:start
Set
the
ClassLoader
to
load
resource
bundles
with
Default
is
the
thread
context
ClassLoader
:end
:start
Return
the
ClassLoader
to
load
resource
bundles
with
<p>Default
is
the
specified
bundle
ClassLoader,
usually
the
thread
context
ClassLoader
:end
:start
Set
the
default
parent
for
views
defined
in
the
ResourceBundle
<p>This
avoids
repeated
"yyy1(parent)=xxx",
"yyy2(parent)=xxx"
definitions
in
the
bundle,
especially
if
all
defined
views
share
the
same
parent
<p>The
parent
will
typically
define
the
view
class
and
common
attributes
Concrete
views
might
simply
consist
of
an
URL
definition
then:
a
la
"yyy1url=/myjsp",
"yyy2url=/yourjsp"
<p>View
definitions
that
define
their
own
parent
or
carry
their
own
class
can
still
override
this
Strictly
speaking,
the
rule
that
a
default
parent
setting
does
not
apply
to
a
bean
definition
that
carries
a
class
is
there
for
backwards
compatibility
reasons
It
still
matches
the
typical
use
case
:end
:start
Specify
Locales
to
initialize
eagerly,
rather
than
lazily
when
actually
accessed
<p>Allows
for
pre-initialization
of
common
Locales,
eagerly
checking
the
view
configuration
for
those
Locales
:end
:start
Eagerly
initialize
Locales
if
necessary
:end
:start
Initialize
the
View
BeanFactory
from
the
ResourceBundle,
for
the
given
Locale
locale
<p>Synchronized
because
of
access
by
parallel
threads
:end
:start
Obtain
the
resource
bundle
for
the
given
basename
and
Locale
:end
:start
Close
the
bundle
View
factories
on
context
shutdown
:end
:start
Abstract
implementation
of
the
Tiles2
orgapachetilespreparerPreparerFactory
interface,
obtaining
the
current
Spring
WebApplicationContext
and
delegating
to
#getPreparer(String,
orgspringframeworkwebcontextWebApplicationContext)
:end
:start
Obtain
a
preparer
instance
for
the
given
preparer
name,
based
on
the
given
Spring
WebApplicationContext
:end
:start
Tiles2
orgapachetilespreparerPreparerFactory
implementation
that
expects
preparer
class
names
and
builds
preparer
instances
for
those,
creating
them
through
the
Spring
ApplicationContext
in
order
to
apply
Spring
container
callbacks
and
configured
Spring
BeanPostProcessors
:end
:start
Tiles2
orgapachetilespreparerPreparerFactory
implementation
that
expects
preparer
bean
names
and
obtains
preparer
beans
from
the
Spring
ApplicationContext
The
full
bean
creation
process
will
be
in
the
control
of
the
Spring
application
context
in
this
case,
allowing
for
the
use
of
scoped
beans
etc
:end
:start
Tiles
LocaleResolver
adapter
that
delegates
to
a
Spring
orgspringframeworkwebservletLocaleResolver,
exposing
the
DispatcherServlet-managed
locale
<p>This
adapter
gets
automatically
registered
by
TilesConfigurer
If
you
are
using
standard
Tiles
bootstrap,
specify
the
name
of
this
class
as
value
for
the
init-param
"orgapachetileslocaleLocaleResolver"
:end
:start
Spring-specific
subclass
of
the
Tiles
ServletTilesApplicationContext
:end
:start
Helper
class
to
configure
Tiles
2x
for
the
Spring
Framework
See
<a
href="http://tilesapacheorg">http://tilesapacheorg</a>
for
more
information
about
Tiles,
which
basically
is
a
templating
mechanism
for
web
applications
using
JSPs
and
other
template
engines
<b>Note:
Spring
40
requires
Tiles
222</b>
Tiles'
EL
support
will
be
activated
by
default
when
the
Tiles
EL
module
is
present
in
the
classpath
<p>The
TilesConfigurer
simply
configures
a
TilesContainer
using
a
set
of
files
containing
definitions,
to
be
accessed
by
TilesView
instances
This
is
a
Spring-based
alternative
(for
usage
in
Spring
configuration)
to
the
Tiles-provided
ServletContextListener
(eg
orgapachetilesextrascompleteCompleteAutoloadTilesListener
for
usage
in
webxml
<p>TilesViews
can
be
managed
by
any
orgspringframeworkwebservletViewResolver
For
simple
convention-based
view
resolution,
consider
using
TilesViewResolver
<p>A
typical
TilesConfigurer
bean
definition
looks
as
follows:
<pre
class="code">
&lt;bean
id="tilesConfigurer"
class="orgspringframeworkwebservletviewtiles2TilesConfigurer">
&lt;property
name="definitions">
&lt;list>
&lt;value>/WEB-INF/defs/generalxml&lt;/value>
&lt;value>/WEB-INF/defs/widgetsxml&lt;/value>
&lt;value>/WEB-INF/defs/administratorxml&lt;/value>
&lt;value>/WEB-INF/defs/customerxml&lt;/value>
&lt;value>/WEB-INF/defs/templatesxml&lt;/value>
&lt;/list>
&lt;/property>
&lt;/bean>
</pre>
The
values
in
the
list
are
the
actual
Tiles
XML
files
containing
the
definitions
If
the
list
is
not
specified,
the
default
is
"/WEB-INF/tilesxml"
:end
:start
Configure
Tiles
using
a
custom
TilesInitializer,
typically
specified
as
an
inner
bean
<p>Default
is
a
variant
of
orgapachetilesstartupDefaultTilesInitializer,
respecting
the
"definitions",
"preparerFactoryClass"
etc
properties
on
this
configurer
<p><b>NOTE:
Specifying
a
custom
TilesInitializer
effectively
disables
all
other
bean
properties
on
this
configurer</b>
The
entire
initialization
procedure
is
then
left
to
the
TilesInitializer
as
specified
:end
:start
Specify
whether
to
apply
Tiles
22's
"complete-autoload"
configuration
<p>See
orgapachetilesextrascompleteCompleteAutoloadTilesContainerFactory
for
details
on
the
complete-autoload
mode
<p><b>NOTE:
Specifying
the
complete-autoload
mode
effectively
disables
all
other
bean
properties
on
this
configurer</b>
The
entire
initialization
procedure
is
then
left
to
orgapachetilesextrascompleteCompleteAutoloadTilesInitializer
:end
:start
Set
the
Tiles
definitions,
ie
the
list
of
files
containing
the
definitions
Default
is
"/WEB-INF/tilesxml"
:end
:start
Set
whether
to
check
Tiles
definition
files
for
a
refresh
at
runtime
Default
is
"false"
:end
:start
Set
whether
to
validate
the
Tiles
XML
definitions
Default
is
"true"
:end
:start
Set
the
orgapachetilesdefinitionDefinitionsFactory
implementation
to
use
Default
is
orgapachetilesdefinitionUnresolvingLocaleDefinitionsFactory,
operating
on
definition
resource
URLs
<p>Specify
a
custom
DefinitionsFactory,
eg
a
UrlDefinitionsFactory
subclass,
to
customize
the
creation
of
Tiles
Definition
objects
Note
that
such
a
DefinitionsFactory
has
to
be
able
to
handle
javanetURL
source
objects,
unless
you
configure
a
different
TilesContainerFactory
:end
:start
Set
the
orgapachetilespreparerPreparerFactory
implementation
to
use
Default
is
orgapachetilespreparerBasicPreparerFactory,
creating
shared
instances
for
specified
preparer
classes
<p>Specify
SimpleSpringPreparerFactory
to
autowire
orgapachetilespreparerViewPreparer
instances
based
on
specified
preparer
classes,
applying
Spring's
container
callbacks
as
well
as
applying
configured
Spring
BeanPostProcessors
If
Spring's
context-wide
annotation-config
has
been
activated,
annotations
in
ViewPreparer
classes
will
be
automatically
detected
and
applied
<p>Specify
SpringBeanPreparerFactory
to
operate
on
specified
preparer
<i>names</i>
instead
of
classes,
obtaining
the
corresponding
Spring
bean
from
the
DispatcherServlet's
application
context
The
full
bean
creation
process
will
be
in
the
control
of
the
Spring
application
context
in
this
case,
allowing
for
the
use
of
scoped
beans
etc
Note
that
you
need
to
define
one
Spring
bean
definition
per
preparer
name
(as
used
in
your
Tiles
definitions)
:end
:start
Set
whether
to
use
a
MutableTilesContainer
(typically
the
CachingTilesContainer
implementation)
for
this
application
Default
is
"false"
:end
:start
Creates
and
exposes
a
TilesContainer
for
this
web
application,
delegating
to
the
TilesInitializer
:end
:start
Creates
a
new
instance
of
SpringTilesInitializer
<p>Override
it
to
use
a
different
initializer
:end
:start
Removes
the
TilesContainer
from
this
web
application
:end
:start
orgspringframeworkwebservletView
implementation
that
retrieves
a
Tiles
definition
The
"url"
property
is
interpreted
as
name
of
a
Tiles
definition
<p>This
class
builds
on
Tiles2,
which
requires
JSP
20
JSTL
support
is
integrated
out
of
the
box
due
to
JSTL's
inclusion
in
JSP
20
<b>Note:
Spring
40
requires
Tiles
222</b>
<p>Depends
on
a
TilesContainer
which
must
be
available
in
the
ServletContext
This
container
is
typically
set
up
via
a
TilesConfigurer
bean
definition
in
the
application
context
:end
:start
Convenience
subclass
of
orgspringframeworkwebservletviewUrlBasedViewResolver
that
supports
TilesView
(ie
Tiles
definitions)
and
custom
subclasses
of
it
<p>The
view
class
for
all
views
generated
by
this
resolver
can
be
specified
via
the
"viewClass"
property
See
UrlBasedViewResolver's
javadoc
for
details
<p><b>Note:</b>
When
chaining
ViewResolvers,
a
TilesViewResolver
will
check
for
the
existence
of
the
specified
template
resources
and
only
return
a
non-null
View
object
if
the
template
was
actually
found
:end
:start
Requires
TilesView
:end
:start
Simple
implementation
of
the
orgspringframeworkwebservletViewResolver
interface,
allowing
for
direct
resolution
of
symbolic
view
names
to
URLs,
without
explicit
mapping
definition
This
is
useful
if
your
symbolic
names
match
the
names
of
your
view
resources
in
a
straightforward
manner
(ie
the
symbolic
name
is
the
unique
part
of
the
resource's
filename),
without
the
need
for
a
dedicated
mapping
to
be
defined
for
each
view
<p>Supports
AbstractUrlBasedView
subclasses
like
InternalResourceView,
orgspringframeworkwebservletviewvelocityVelocityView
and
orgspringframeworkwebservletviewfreemarkerFreeMarkerView
The
view
class
for
all
views
generated
by
this
resolver
can
be
specified
via
the
"viewClass"
property
<p>View
names
can
either
be
resource
URLs
themselves,
or
get
augmented
by
a
specified
prefix
and/or
suffix
Exporting
an
attribute
that
holds
the
RequestContext
to
all
views
is
explicitly
supported
<p>Example:
prefix="/WEB-INF/jsp/",
suffix="jsp",
viewname="test"
->
"/WEB-INF/jsp/testjsp"
<p>As
a
special
feature,
redirect
URLs
can
be
specified
via
the
"redirect:"
prefix
Eg:
"redirect:myActiondo"
will
trigger
a
redirect
to
the
given
URL,
rather
than
resolution
as
standard
view
name
This
is
typically
used
for
redirecting
to
a
controller
URL
after
finishing
a
form
workflow
<p>Furthermore,
forward
URLs
can
be
specified
via
the
"forward:"
prefix
Eg:
"forward:myActiondo"
will
trigger
a
forward
to
the
given
URL,
rather
than
resolution
as
standard
view
name
This
is
typically
used
for
controller
URLs;
it
is
not
supposed
to
be
used
for
JSP
URLs
-
use
logical
view
names
there
<p>Note:
This
class
does
not
support
localized
resolution,
ie
resolving
a
symbolic
view
name
to
different
resources
depending
on
the
current
locale
<p><b>Note:</b>
When
chaining
ViewResolvers,
a
UrlBasedViewResolver
will
check
whether
the
AbstractUrlBasedView#checkResource
specified
resource
actually
exists
However,
with
InternalResourceView,
it
is
not
generally
possible
to
determine
the
existence
of
the
target
resource
upfront
In
such
a
scenario,
a
UrlBasedViewResolver
will
always
return
View
for
any
given
view
name;
as
a
consequence,
it
should
be
configured
as
the
last
ViewResolver
in
the
chain
:end
:start
Prefix
for
special
view
names
that
specify
a
redirect
URL
(usually
to
a
controller
after
a
form
has
been
submitted
and
processed)
Such
view
names
will
not
be
resolved
in
the
configured
default
way
but
rather
be
treated
as
special
shortcut
:end
:start
Prefix
for
special
view
names
that
specify
a
forward
URL
(usually
to
a
controller
after
a
form
has
been
submitted
and
processed)
Such
view
names
will
not
be
resolved
in
the
configured
default
way
but
rather
be
treated
as
special
shortcut
:end
:start
Set
the
view
class
that
should
be
used
to
create
views
:end
:start
Return
the
view
class
to
be
used
to
create
views
:end
:start
Return
the
required
type
of
view
for
this
resolver
This
implementation
returns
AbstractUrlBasedView
:end
:start
Set
the
prefix
that
gets
prepended
to
view
names
when
building
a
URL
:end
:start
Return
the
prefix
that
gets
prepended
to
view
names
when
building
a
URL
:end
:start
Set
the
suffix
that
gets
appended
to
view
names
when
building
a
URL
:end
:start
Return
the
suffix
that
gets
appended
to
view
names
when
building
a
URL
:end
:start
Set
the
content
type
for
all
views
<p>May
be
ignored
by
view
classes
if
the
view
itself
is
assumed
to
set
the
content
type,
eg
in
case
of
JSPs
:end
:start
Return
the
content
type
for
all
views,
if
any
:end
:start
Set
whether
to
interpret
a
given
redirect
URL
that
starts
with
a
slash
("/")
as
relative
to
the
current
ServletContext,
ie
as
relative
to
the
web
application
root
<p>Default
is
"true":
A
redirect
URL
that
starts
with
a
slash
will
be
interpreted
as
relative
to
the
web
application
root,
ie
the
context
path
will
be
prepended
to
the
URL
<p><b>Redirect
URLs
can
be
specified
via
the
"redirect:"
prefix</b>
Eg:
"redirect:myActiondo"
:end
:start
Return
whether
to
interpret
a
given
redirect
URL
that
starts
with
a
slash
("/")
as
relative
to
the
current
ServletContext,
ie
as
relative
to
the
web
application
root
:end
:start
Set
whether
redirects
should
stay
compatible
with
HTTP
10
clients
<p>In
the
default
implementation,
this
will
enforce
HTTP
status
code
302
in
any
case,
ie
delegate
to
HttpServletResponsesendRedirect
Turning
this
off
will
send
HTTP
status
code
303,
which
is
the
correct
code
for
HTTP
11
clients,
but
not
understood
by
HTTP
10
clients
<p>Many
HTTP
11
clients
treat
302
just
like
303,
not
making
any
difference
However,
some
clients
depend
on
303
when
redirecting
after
a
POST
request;
turn
this
flag
off
in
such
a
scenario
<p><b>Redirect
URLs
can
be
specified
via
the
"redirect:"
prefix</b>
Eg:
"redirect:myActiondo"
:end
:start
Return
whether
redirects
should
stay
compatible
with
HTTP
10
clients
:end
:start
Set
the
name
of
the
RequestContext
attribute
for
all
views
:end
:start
Return
the
name
of
the
RequestContext
attribute
for
all
views,
if
any
:end
:start
Set
static
attributes
from
a
javautilProperties
object,
for
all
views
returned
by
this
resolver
<p>This
is
the
most
convenient
way
to
set
static
attributes
Note
that
static
attributes
can
be
overridden
by
dynamic
attributes,
if
a
value
with
the
same
name
is
included
in
the
model
<p>Can
be
populated
with
a
String
"value"
(parsed
via
PropertiesEditor)
or
a
"props"
element
in
XML
bean
definitions
:end
:start
Set
static
attributes
from
a
Map,
for
all
views
returned
by
this
resolver
This
allows
to
set
any
kind
of
attribute
values,
for
example
bean
references
<p>Can
be
populated
with
a
"map"
or
"props"
element
in
XML
bean
definitions
:end
:start
Allow
Map
access
to
the
static
attributes
for
views
returned
by
this
resolver,
with
the
option
to
add
or
override
specific
entries
<p>Useful
for
specifying
entries
directly,
for
example
via
"attributesMap[myKey]"
This
is
particularly
useful
for
adding
or
overriding
entries
in
child
view
definitions
:end
:start
Set
the
view
names
(or
name
patterns)
that
can
be
handled
by
this
orgspringframeworkwebservletViewResolver
View
names
can
contain
simple
wildcards
such
that
'my*',
'*Report'
and
'*Repo*'
will
all
match
the
view
name
'myReport'
:end
:start
Return
the
view
names
(or
name
patterns)
that
can
be
handled
by
this
orgspringframeworkwebservletViewResolver
:end
:start
Set
the
order
in
which
this
orgspringframeworkwebservletViewResolver
is
evaluated
:end
:start
Return
the
order
in
which
this
orgspringframeworkwebservletViewResolver
is
evaluated
:end
:start
Whether
views
resolved
by
this
resolver
should
add
path
variables
the
model
or
not
The
default
setting
is
to
allow
each
View
decide
(see
AbstractView#setExposePathVariables(boolean)
However,
you
can
use
this
property
to
override
that
:end
:start
This
implementation
returns
just
the
view
name,
as
this
ViewResolver
doesn't
support
localized
resolution
:end
:start
Overridden
to
implement
check
for
"redirect:"
prefix
<p>Not
possible
in
loadView,
since
overridden
loadView
versions
in
subclasses
might
rely
on
the
superclass
always
creating
instances
of
the
required
view
class
:end
:start
Indicates
whether
or
not
this
orgspringframeworkwebservletViewResolver
can
handle
the
supplied
view
name
If
not,
#createView(String,
javautilLocale)
will
return
null
The
default
implementation
checks
against
the
configured
#setViewNames
view
names
:end
:start
Delegates
to
buildView
for
creating
a
new
instance
of
the
specified
view
class,
and
applies
the
following
Spring
lifecycle
methods
(as
supported
by
the
generic
Spring
bean
factory):
<ul>
<li>ApplicationContextAware's
setApplicationContext
<li>InitializingBean's
afterPropertiesSet
</ul>
:end
:start
Creates
a
new
View
instance
of
the
specified
view
class
and
configures
it
Does
<i>not</i>
perform
any
lookup
for
pre-defined
View
instances
<p>Spring
lifecycle
methods
as
defined
by
the
bean
container
do
not
have
to
be
called
here;
those
will
be
applied
by
the
loadView
method
after
this
method
returns
<p>Subclasses
will
typically
call
superbuildView(viewName)
first,
before
setting
further
properties
themselves
loadView
will
then
apply
Spring
lifecycle
methods
at
the
end
of
this
process
:end
:start
Interface
to
be
implemented
by
objects
that
configure
and
manage
a
VelocityEngine
for
automatic
lookup
in
a
web
environment
Detected
and
used
by
VelocityView
:end
:start
Return
the
VelocityEngine
for
the
current
web
application
context
May
be
unique
to
one
servlet,
or
shared
in
the
root
context
:end
:start
JavaBean
to
configure
Velocity
for
web
usage,
via
the
"configLocation"
and/or
"velocityProperties"
and/or
"resourceLoaderPath"
bean
properties
The
simplest
way
to
use
this
class
is
to
specify
just
a
"resourceLoaderPath";
you
do
not
need
any
further
configuration
then
<pre
class="code">
&lt;bean
id="velocityConfig"
class="orgspringframeworkwebservletviewvelocityVelocityConfigurer"&gt;
&lt;property
name="resourceLoaderPath">&lt;value&gt;/WEB-INF/velocity/&lt;/value>&lt;/property&gt;
&lt;/bean&gt;</pre>
This
bean
must
be
included
in
the
application
context
of
any
application
using
Spring's
VelocityView
for
web
MVC
It
exists
purely
to
configure
Velocity;
it
is
not
meant
to
be
referenced
by
application
components
(just
internally
by
VelocityView)
This
class
implements
VelocityConfig
in
order
to
be
found
by
VelocityView
without
depending
on
the
bean
name
of
this
configurer
Each
DispatcherServlet
may
define
its
own
VelocityConfigurer
if
desired,
potentially
with
different
template
loader
paths
<p>Note
that
you
can
also
refer
to
a
pre-configured
VelocityEngine
instance
via
the
"velocityEngine"
property,
eg
set
up
by
orgspringframeworkuivelocityVelocityEngineFactoryBean,
This
allows
to
share
a
VelocityEngine
for
web
and
email
usage,
for
example
<p>This
configurer
registers
the
"springvm"
Velocimacro
library
for
web
views
(contained
in
this
package
and
thus
in
springjar),
which
makes
all
of
Spring's
default
Velocity
macros
available
to
the
views
This
allows
for
using
the
Spring-provided
macros
such
as
follows:
<pre
class="code">
#springBind("personage")
age
is
${statusvalue</pre>
:end
:start
Set
a
pre-configured
VelocityEngine
to
use
for
the
Velocity
web
configuration:
eg
a
shared
one
for
web
and
email
usage,
set
up
via
orgspringframeworkuivelocityVelocityEngineFactoryBean
<p>Note
that
the
Spring
macros
will
<i>not</i>
be
enabled
automatically
in
case
of
an
external
VelocityEngine
passed
in
here
Make
sure
to
include
springvm
in
your
template
loader
path
in
such
a
scenario
(if
there
is
an
actual
need
to
use
those
macros)
<p>If
this
is
not
set,
VelocityEngineFactory's
properties
(inherited
by
this
class)
have
to
be
specified
:end
:start
Initialize
VelocityEngineFactory's
VelocityEngine
if
not
overridden
by
a
pre-configured
VelocityEngine
:end
:start
Provides
a
ClasspathResourceLoader
in
addition
to
any
default
or
user-defined
loader
in
order
to
load
the
spring
Velocity
macros
from
the
class
path
:end
:start
VelocityLayoutView
emulates
the
functionality
offered
by
Velocity's
VelocityLayoutServlet
to
ease
page
composition
from
different
templates
<p>The
url
property
should
be
set
to
the
content
template
for
the
view,
and
the
layout
template
location
should
be
specified
as
layoutUrl
property
A
view
can
override
the
configured
layout
template
location
by
setting
the
appropriate
key
(the
default
is
"layout")
in
the
content
template
<p>When
the
view
is
rendered,
the
VelocityContext
is
first
merged
with
the
content
template
(specified
by
the
url
property)
and
then
merged
with
the
layout
template
to
produce
the
final
output
<p>The
layout
template
can
include
the
screen
content
through
a
VelocityContext
variable
(the
default
is
"screen_content")
At
runtime,
this
variable
will
contain
the
rendered
content
template
:end
:start
The
default
#setLayoutUrl(String)
layout
url
:end
:start
The
default
#setLayoutKey(String)
layout
key
:end
:start
The
default
#setScreenContentKey(String)
screen
content
key
:end
:start
Set
the
layout
template
to
use
Default
is
#DEFAULT_LAYOUT_URL
"layoutvm"
:end
:start
Set
the
context
key
used
to
specify
an
alternate
layout
to
be
used
instead
of
the
default
layout
Screen
content
templates
can
override
the
layout
template
that
they
wish
to
be
wrapped
with
by
setting
this
value
in
the
template,
for
example:<br>
#set($layout
=
"MyLayoutvm"
)
<p>Default
key
is
#DEFAULT_LAYOUT_KEY
"layout",
as
illustrated
above
:end
:start
Set
the
name
of
the
context
key
that
will
hold
the
content
of
the
screen
within
the
layout
template
This
key
must
be
present
in
the
layout
template
for
the
current
screen
to
be
rendered
<p>Default
is
#DEFAULT_SCREEN_CONTENT_KEY
"screen_content":
accessed
in
VTL
as
$screen_content
:end
:start
Overrides
VelocityViewcheckTemplate()
to
additionally
check
that
both
the
layout
template
and
the
screen
content
template
can
be
loaded
Note
that
during
rendering
of
the
screen
content,
the
layout
template
can
be
changed
which
may
invalidate
any
early
checking
done
here
:end
:start
Overrides
the
normal
rendering
process
in
order
to
pre-process
the
Context,
merging
it
with
the
screen
template
into
a
single
value
(identified
by
the
value
of
screenContentKey)
The
layout
template
is
then
merged
with
the
modified
Context
in
the
super
class
:end
:start
Convenience
subclass
of
VelocityViewResolver,
adding
support
for
VelocityLayoutView
and
its
properties
<p>See
VelocityViewResolver's
javadoc
for
general
usage
info
:end
:start
Requires
VelocityLayoutView
:end
:start
Set
the
layout
template
to
use
Default
is
"layoutvm"
:end
:start
Set
the
context
key
used
to
specify
an
alternate
layout
to
be
used
instead
of
the
default
layout
Screen
content
templates
can
override
the
layout
template
that
they
wish
to
be
wrapped
with
by
setting
this
value
in
the
template,
for
example:<br>
#set($layout
=
"MyLayoutvm"
)
<p>The
default
key
is
"layout",
as
illustrated
above
:end
:start
Set
the
name
of
the
context
key
that
will
hold
the
content
of
the
screen
within
the
layout
template
This
key
must
be
present
in
the
layout
template
for
the
current
screen
to
be
rendered
<p>Default
is
"screen_content":
accessed
in
VTL
as
$screen_content
:end
:start
VelocityView
subclass
which
adds
support
for
Velocity
Tools
toolboxes
and
Velocity
Tools
ViewTool
callbacks
/
Velocity
Tools
13
init
methods
<p>Specify
a
"toolboxConfigLocation",
for
example
"/WEB-INF/toolboxxml",
to
automatically
load
a
Velocity
Tools
toolbox
definition
file
and
expose
all
defined
tools
in
the
specified
scopes
If
no
config
location
is
specified,
no
toolbox
will
be
loaded
and
exposed
<p>This
view
will
always
create
a
special
Velocity
context,
namely
an
instance
of
the
ChainedContext
class
which
is
part
of
the
view
package
of
Velocity
tools
This
allows
to
use
tools
from
the
view
package
of
Velocity
Tools,
like
LinkTool,
which
need
to
be
initialized
with
a
special
context
that
implements
the
ViewContext
interface
(ie
a
ChainedContext)
<p>This
view
also
checks
tools
that
are
specified
as
"toolAttributes":
If
they
implement
the
ViewTool
interface,
they
will
get
initialized
with
the
Velocity
context
This
allows
tools
from
the
view
package
of
Velocity
Tools,
such
as
LinkTool,
to
be
defined
as
#setToolAttributes
"toolAttributes"
on
a
VelocityToolboxView,
instead
of
in
a
separate
toolbox
XML
file
<p>This
is
a
separate
class
mainly
to
avoid
a
required
dependency
on
the
view
package
of
Velocity
Tools
in
VelocityView
itself
As
of
Spring
30,
this
class
requires
Velocity
Tools
13
or
higher
:end
:start
Set
a
Velocity
Toolbox
config
location,
for
example
"/WEB-INF/toolboxxml",
to
automatically
load
a
Velocity
Tools
toolbox
definition
file
and
expose
all
defined
tools
in
the
specified
scopes
If
no
config
location
is
specified,
no
toolbox
will
be
loaded
and
exposed
<p>The
specified
location
string
needs
to
refer
to
a
ServletContext
resource,
as
expected
by
ServletToolboxManager
which
is
part
of
the
view
package
of
Velocity
Tools
:end
:start
Return
the
Velocity
Toolbox
config
location,
if
any
:end
:start
Overridden
to
create
a
ChainedContext,
which
is
part
of
the
view
package
of
Velocity
Tools,
as
special
context
ChainedContext
is
needed
for
initialization
of
ViewTool
instances
:end
:start
Overridden
to
check
for
the
ViewContext
interface
which
is
part
of
the
view
package
of
Velocity
Tools
This
requires
a
special
Velocity
context,
like
ChainedContext
as
set
up
by
#createVelocityContext
in
this
class
:end
:start
View
using
the
Velocity
template
engine
<p>Exposes
the
following
JavaBean
properties:
<ul>
<li><b>url</b>:
the
location
of
the
Velocity
template
to
be
wrapped,
relative
to
the
Velocity
resource
loader
path
(see
VelocityConfigurer)
<li><b>encoding</b>
(optional,
default
is
determined
by
Velocity
configuration):
the
encoding
of
the
Velocity
template
file
<li><b>velocityFormatterAttribute</b>
(optional,
default=null):
the
name
of
the
VelocityFormatter
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
VelocityFormatter
is
part
of
standard
Velocity
<li><b>dateToolAttribute</b>
(optional,
default=null):
the
name
of
the
DateTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
DateTool
is
part
of
Velocity
Tools
<li><b>numberToolAttribute</b>
(optional,
default=null):
the
name
of
the
NumberTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
NumberTool
is
part
of
Velocity
Tools
<li><b>cacheTemplate</b>
(optional,
default=false):
whether
or
not
the
Velocity
template
should
be
cached
It
should
normally
be
true
in
production,
but
setting
this
to
false
enables
us
to
modify
Velocity
templates
without
restarting
the
application
(similar
to
JSPs)
Note
that
this
is
a
minor
optimization
only,
as
Velocity
itself
caches
templates
in
a
modification-aware
fashion
</ul>
<p>Depends
on
a
VelocityConfig
object
such
as
VelocityConfigurer
being
accessible
in
the
current
web
application
context,
with
any
bean
name
Alternatively,
you
can
set
the
VelocityEngine
object
as
bean
property
<p>Note:
Spring
30's
VelocityView
requires
Velocity
14
or
higher,
and
optionally
Velocity
Tools
11
or
higher
(depending
on
the
use
of
DateTool
and/or
NumberTool)
:end
:start
Set
tool
attributes
to
expose
to
the
view,
as
attribute
name
/
class
name
pairs
An
instance
of
the
given
class
will
be
added
to
the
Velocity
context
for
each
rendering
operation,
under
the
given
attribute
name
<p>For
example,
an
instance
of
MathTool,
which
is
part
of
the
generic
package
of
Velocity
Tools,
can
be
bound
under
the
attribute
name
"math",
specifying
the
fully
qualified
class
name
"orgapachevelocitytoolsgenericMathTool"
as
value
<p>Note
that
VelocityView
can
only
create
simple
generic
tools
or
values,
that
is,
classes
with
a
public
default
constructor
and
no
further
initialization
needs
This
class
does
not
do
any
further
checks,
to
not
introduce
a
required
dependency
on
a
specific
tools
package
<p>For
tools
that
are
part
of
the
view
package
of
Velocity
Tools,
a
special
Velocity
context
and
a
special
init
callback
are
needed
Use
VelocityToolboxView
in
such
a
case,
or
override
createVelocityContext
and
initTool
accordingly
<p>For
a
simple
VelocityFormatter
instance
or
special
locale-aware
instances
of
DateTool/NumberTool,
which
are
part
of
the
generic
package
of
Velocity
Tools,
specify
the
"velocityFormatterAttribute",
"dateToolAttribute"
or
"numberToolAttribute"
properties,
respectively
:end
:start
Set
the
name
of
the
DateTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
The
exposed
DateTool
will
be
aware
of
the
current
locale,
as
determined
by
Spring's
LocaleResolver
<p>DateTool
is
part
of
the
generic
package
of
Velocity
Tools
10
Spring
uses
a
special
locale-aware
subclass
of
DateTool
:end
:start
Set
the
name
of
the
NumberTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
The
exposed
NumberTool
will
be
aware
of
the
current
locale,
as
determined
by
Spring's
LocaleResolver
<p>NumberTool
is
part
of
the
generic
package
of
Velocity
Tools
11
Spring
uses
a
special
locale-aware
subclass
of
NumberTool
:end
:start
Set
the
encoding
of
the
Velocity
template
file
Default
is
determined
by
the
VelocityEngine:
"ISO-8859-1"
if
not
specified
otherwise
<p>Specify
the
encoding
in
the
VelocityEngine
rather
than
per
template
if
all
your
templates
share
a
common
encoding
:end
:start
Return
the
encoding
for
the
Velocity
template
:end
:start
Set
whether
the
Velocity
template
should
be
cached
Default
is
"false"
It
should
normally
be
true
in
production,
but
setting
this
to
false
enables
us
to
modify
Velocity
templates
without
restarting
the
application
(similar
to
JSPs)
<p>Note
that
this
is
a
minor
optimization
only,
as
Velocity
itself
caches
templates
in
a
modification-aware
fashion
:end
:start
Return
whether
the
Velocity
template
should
be
cached
:end
:start
Set
the
VelocityEngine
to
be
used
by
this
view
<p>If
this
is
not
set,
the
default
lookup
will
occur:
A
single
VelocityConfig
is
expected
in
the
current
web
application
context,
with
any
bean
name
:end
:start
Return
the
VelocityEngine
used
by
this
view
:end
:start
Invoked
on
startup
Looks
for
a
single
VelocityConfig
bean
to
find
the
relevant
VelocityEngine
for
this
factory
:end
:start
Autodetect
a
VelocityEngine
via
the
ApplicationContext
Called
if
no
explicit
VelocityEngine
has
been
specified
:end
:start
Check
that
the
Velocity
template
used
for
this
view
exists
and
is
valid
<p>Can
be
overridden
to
customize
the
behavior,
for
example
in
case
of
multiple
templates
to
be
rendered
into
a
single
view
:end
:start
Process
the
model
map
by
merging
it
with
the
Velocity
template
Output
is
directed
to
the
servlet
response
<p>This
method
can
be
overridden
if
custom
behavior
is
needed
:end
:start
Expose
helpers
unique
to
each
rendering
operation
This
is
necessary
so
that
different
rendering
operations
can't
overwrite
each
other's
formats
etc
<p>Called
by
renderMergedTemplateModel
The
default
implementation
is
empty
This
method
can
be
overridden
to
add
custom
helpers
to
the
model
:end
:start
Create
a
Velocity
Context
instance
for
the
given
model,
to
be
passed
to
the
template
for
merging
<p>The
default
implementation
delegates
to
#createVelocityContext(Map)
Can
be
overridden
for
a
special
context
class,
for
example
ChainedContext
which
is
part
of
the
view
package
of
Velocity
Tools
ChainedContext
is
needed
for
initialization
of
ViewTool
instances
<p>Have
a
look
at
VelocityToolboxView,
which
pre-implements
ChainedContext
support
This
is
not
part
of
the
standard
VelocityView
class
in
order
to
avoid
a
required
dependency
on
the
view
package
of
Velocity
Tools
:end
:start
Create
a
Velocity
Context
instance
for
the
given
model,
to
be
passed
to
the
template
for
merging
<p>Default
implementation
creates
an
instance
of
Velocity's
VelocityContext
implementation
class
:end
:start
Expose
helpers
unique
to
each
rendering
operation
This
is
necessary
so
that
different
rendering
operations
can't
overwrite
each
other's
formats
etc
<p>Called
by
renderMergedTemplateModel
Default
implementation
delegates
to
exposeHelpers(velocityContext,
request)
This
method
can
be
overridden
to
add
special
tools
to
the
context,
needing
the
servlet
response
to
initialize
(see
Velocity
Tools,
for
example
LinkTool
and
ViewTool/ChainedContext)
:end
:start
Expose
helpers
unique
to
each
rendering
operation
This
is
necessary
so
that
different
rendering
operations
can't
overwrite
each
other's
formats
etc
<p>Default
implementation
is
empty
This
method
can
be
overridden
to
add
custom
helpers
to
the
Velocity
context
:end
:start
Expose
the
tool
attributes,
according
to
corresponding
bean
property
settings
<p>Do
not
override
this
method
unless
for
further
tools
driven
by
bean
properties
Override
one
of
the
exposeHelpers
methods
to
add
custom
helpers
:end
:start
Initialize
the
given
tool
instance
The
default
implementation
is
empty
<p>Can
be
overridden
to
check
for
special
callback
interfaces,
for
example
the
ViewContext
interface
which
is
part
of
the
view
package
of
Velocity
Tools
In
the
particular
case
of
ViewContext,
you'll
usually
also
need
a
special
Velocity
context,
like
ChainedContext
which
is
part
of
Velocity
Tools
too
<p>Have
a
look
at
VelocityToolboxView,
which
pre-implements
such
a
ViewTool
check
This
is
not
part
of
the
standard
VelocityView
class
in
order
to
avoid
a
required
dependency
on
the
view
package
of
Velocity
Tools
:end
:start
Render
the
Velocity
view
to
the
given
response,
using
the
given
Velocity
context
which
contains
the
complete
template
model
to
use
<p>The
default
implementation
renders
the
template
specified
by
the
"url"
bean
property,
retrieved
via
getTemplate
It
delegates
to
the
mergeTemplate
method
to
merge
the
template
instance
with
the
given
Velocity
context
<p>Can
be
overridden
to
customize
the
behavior,
for
example
to
render
multiple
templates
into
a
single
view
:end
:start
Retrieve
the
Velocity
template
to
be
rendered
by
this
view
<p>By
default,
the
template
specified
by
the
"url"
bean
property
will
be
retrieved:
either
returning
a
cached
template
instance
or
loading
a
fresh
instance
(according
to
the
"cacheTemplate"
bean
property)
:end
:start
Retrieve
the
Velocity
template
specified
by
the
given
name,
using
the
encoding
specified
by
the
"encoding"
bean
property
<p>Can
be
called
by
subclasses
to
retrieve
a
specific
template,
for
example
to
render
multiple
templates
into
a
single
view
:end
:start
Merge
the
template
with
the
context
Can
be
overridden
to
customize
the
behavior
:end
:start
Convenience
subclass
of
orgspringframeworkwebservletviewUrlBasedViewResolver
that
supports
VelocityView
(ie
Velocity
templates)
and
custom
subclasses
of
it
<p>The
view
class
for
all
views
generated
by
this
resolver
can
be
specified
via
the
"viewClass"
property
See
UrlBasedViewResolver's
javadoc
for
details
<p><b>Note:</b>
When
chaining
ViewResolvers,
a
VelocityViewResolver
will
check
for
the
existence
of
the
specified
template
resources
and
only
return
a
non-null
View
object
if
the
template
was
actually
found
:end
:start
Requires
VelocityView
:end
:start
Set
the
name
of
the
DateTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
DateTool
is
part
of
Velocity
Tools
10
:end
:start
Set
the
name
of
the
NumberTool
helper
object
to
expose
in
the
Velocity
context
of
this
view,
or
null
if
not
needed
NumberTool
is
part
of
Velocity
Tools
11
:end
:start
Set
a
Velocity
Toolbox
config
location,
for
example
"/WEB-INF/toolboxxml",
to
automatically
load
a
Velocity
Tools
toolbox
definition
file
and
expose
all
defined
tools
in
the
specified
scopes
If
no
config
location
is
specified,
no
toolbox
will
be
loaded
and
exposed
<p>The
specified
location
string
needs
to
refer
to
a
ServletContext
resource,
as
expected
by
ServletToolboxManager
which
is
part
of
the
view
package
of
Velocity
Tools
<p><b>Note:</b>
Specifying
a
toolbox
config
location
will
lead
to
VelocityToolboxView
instances
being
created
:end
:start
Spring-MVC
View
that
allows
for
response
context
to
be
rendered
as
the
result
of
marshalling
by
a
Marshaller
<p>The
Object
to
be
marshalled
is
supplied
as
a
parameter
in
the
model
and
then
#locateToBeMarshalled(Map)
detected
during
response
rendering
Users
can
either
specify
a
specific
entry
in
the
model
via
the
#setModelKey(String)
sourceKey
property
or
have
Spring
locate
the
Source
object
:end
:start
Default
content
type
Overridable
as
bean
property
:end
:start
Constructs
a
new
MarshallingView
with
no
Marshaller
set
The
marshaller
must
be
set
after
construction
by
invoking
#setMarshaller
:end
:start
Constructs
a
new
MarshallingView
with
the
given
Marshaller
set
:end
:start
Sets
the
Marshaller
to
be
used
by
this
view
:end
:start
Set
the
name
of
the
model
key
that
represents
the
object
to
be
marshalled
If
not
specified,
the
model
map
will
be
searched
for
a
supported
value
type
:end
:start
Locate
the
object
to
be
marshalled
<p>The
default
implementation
first
attempts
to
look
under
the
configured
#setModelKey(String)
model
key,
if
any,
before
attempting
to
locate
an
object
of
Marshaller#supports(Class)
supported
type
:end
:start
Implementation
of
ViewResolver
that
uses
bean
definitions
in
an
XML
file,
specified
by
resource
location
The
file
will
typically
be
located
in
the
WEB-INF
directory;
default
is
"/WEB-INF/viewsxml"
<p>This
ViewResolver
does
not
support
internationalization
Consider
ResourceBundleViewResolver
if
you
need
to
apply
different
view
resources
per
locale
<p>Note:
This
ViewResolver
implements
the
Ordered
interface
to
allow
for
flexible
participation
in
ViewResolver
chaining
For
example,
some
special
views
could
be
defined
via
this
ViewResolver
(giving
it
0
as
"order"
value),
while
all
remaining
views
could
be
resolved
by
a
UrlBasedViewResolver
:end
:start
Default
if
no
other
location
is
supplied
:end
:start
Set
the
location
of
the
XML
file
that
defines
the
view
beans
<p>The
default
is
"/WEB-INF/viewsxml"
:end
:start
Pre-initialize
the
factory
from
the
XML
file
Only
effective
if
caching
is
enabled
:end
:start
This
implementation
returns
just
the
view
name,
as
XmlViewResolver
doesn't
support
localized
resolution
:end
:start
Initialize
the
view
bean
factory
from
the
XML
file
Synchronized
because
of
access
by
parallel
threads
:end
:start
Close
the
view
bean
factory
on
context
shutdown
:end
:start
XSLT-driven
View
that
allows
for
response
context
to
be
rendered
as
the
result
of
an
XSLT
transformation
<p>The
XSLT
Source
object
is
supplied
as
a
parameter
in
the
model
and
then
#locateSource
detected
during
response
rendering
Users
can
either
specify
a
specific
entry
in
the
model
via
the
#setSourceKey
sourceKey
property
or
have
Spring
locate
the
Source
object
This
class
also
provides
basic
conversion
of
objects
into
Source
implementations
See
#getSourceTypes()
here
for
more
details
<p>All
model
parameters
are
passed
to
the
XSLT
Transformer
as
parameters
In
addition
the
user
can
configure
#setOutputProperties
output
properties
to
be
passed
to
the
Transformer
:end
:start
Specify
the
XSLT
TransformerFactory
class
to
use
<p>The
default
constructor
of
the
specified
class
will
be
called
to
build
the
TransformerFactory
for
this
view
:end
:start
Set
the
name
of
the
model
attribute
that
represents
the
XSLT
Source
If
not
specified,
the
model
map
will
be
searched
for
a
matching
value
type
<p>The
following
source
types
are
supported
out
of
the
box:
Source,
Document,
Node,
Reader,
InputStream
and
Resource
:end
:start
Set
the
URIResolver
used
in
the
transform
<p>The
URIResolver
handles
calls
to
the
XSLT
document()
function
:end
:start
Set
an
implementation
of
the
javaxxmltransformErrorListener
interface
for
custom
handling
of
transformation
errors
and
warnings
<p>If
not
set,
a
default
orgspringframeworkutilxmlSimpleTransformErrorListener
is
used
that
simply
logs
warnings
using
the
logger
instance
of
the
view
class,
and
rethrows
errors
to
discontinue
the
XML
transformation
:end
:start
Set
whether
the
XSLT
transformer
may
add
additional
whitespace
when
outputting
the
result
tree
<p>Default
is
true
(on);
set
this
to
false
(off)
to
not
specify
an
"indent"
key,
leaving
the
choice
up
to
the
stylesheet
:end
:start
Set
arbitrary
transformer
output
properties
to
be
applied
to
the
stylesheet
<p>Any
values
specified
here
will
override
defaults
that
this
view
sets
programmatically
:end
:start
Turn
on/off
the
caching
of
the
XSLT
Templates
instance
<p>The
default
value
is
"true"
Only
set
this
to
"false"
in
development,
where
caching
does
not
seriously
impact
performance
:end
:start
Initialize
this
XsltView's
TransformerFactory
:end
:start
Instantiate
a
new
TransformerFactory
for
this
view
<p>The
default
implementation
simply
calls
javaxxmltransformTransformerFactory#newInstance()
If
a
#setTransformerFactoryClass
"transformerFactoryClass"
has
been
specified
explicitly,
the
default
constructor
of
the
specified
class
will
be
called
instead
<p>Can
be
overridden
in
subclasses
:end
:start
Return
the
TransformerFactory
that
this
XsltView
uses
:end
:start
Create
the
XSLT
Result
used
to
render
the
result
of
the
transformation
<p>The
default
implementation
creates
a
StreamResult
wrapping
the
supplied
HttpServletResponse's
HttpServletResponse#getOutputStream()
OutputStream
:end
:start
<p>Locate
the
Source
object
in
the
supplied
model,
converting
objects
as
required
The
default
implementation
first
attempts
to
look
under
the
configured
#setSourceKey
source
key,
if
any,
before
attempting
to
locate
an
object
of
#getSourceTypes()
supported
type
:end
:start
Return
the
array
of
Class
Classes
that
are
supported
when
converting
to
an
XSLT
Source
<p>Currently
supports
Source,
Document,
Node,
Reader,
InputStream
and
Resource
:end
:start
Convert
the
supplied
Object
into
an
XSLT
Source
if
the
Object
type
is
#getSourceTypes()
supported
:end
:start
Configure
the
supplied
Transformer
instance
<p>The
default
implementation
copies
parameters
from
the
model
into
the
Transformer's
Transformer#setParameter
parameter
set
This
implementation
also
copies
the
#setOutputProperties
output
properties
into
the
Transformer
Transformer#setOutputProperty
output
properties
Indentation
properties
are
set
as
well
:end
:start
Configure
the
indentation
settings
for
the
supplied
Transformer
:end
:start
Copy
the
configured
output
Properties,
if
any,
into
the
Transformer#setOutputProperty
output
property
set
of
the
supplied
Transformer
:end
:start
Copy
all
entries
from
the
supplied
Map
into
the
Transformer#setParameter(String,
Object)
parameter
set
of
the
supplied
Transformer
:end
:start
Configure
the
supplied
HttpServletResponse
<p>The
default
implementation
of
this
method
sets
the
HttpServletResponse#setContentType
content
type
and
HttpServletResponse#setCharacterEncoding
encoding
from
the
"media-type"
and
"encoding"
output
properties
specified
in
the
Transformer
:end
:start
Create
the
Transformer
instance
used
to
prefer
the
XSLT
transformation
<p>The
default
implementation
simply
calls
Templates#newTransformer(),
and
configures
the
Transformer
with
the
custom
URIResolver
if
specified
:end
:start
Get
the
XSLT
Source
for
the
XSLT
template
under
the
#setUrl
configured
URL
:end
:start
orgspringframeworkwebservletViewResolver
implementation
that
resolves
instances
of
XsltView
by
translating
the
supplied
view
name
into
the
URL
of
the
XSLT
stylesheet
:end
:start
Set
the
name
of
the
model
attribute
that
represents
the
XSLT
Source
If
not
specified,
the
model
map
will
be
searched
for
a
matching
value
type
<p>The
following
source
types
are
supported
out
of
the
box:
javaxxmltransformSource,
orgw3cdomDocument,
orgw3cdomNode,
javaioReader,
javaioInputStream
and
orgspringframeworkcoreioResource
:end
:start
Set
the
URIResolver
used
in
the
transform
<p>The
URIResolver
handles
calls
to
the
XSLT
document()
function
:end
:start
Set
an
implementation
of
the
javaxxmltransformErrorListener
interface
for
custom
handling
of
transformation
errors
and
warnings
<p>If
not
set,
a
default
orgspringframeworkutilxmlSimpleTransformErrorListener
is
used
that
simply
logs
warnings
using
the
logger
instance
of
the
view
class,
and
rethrows
errors
to
discontinue
the
XML
transformation
:end
:start
Set
whether
the
XSLT
transformer
may
add
additional
whitespace
when
outputting
the
result
tree
<p>Default
is
true
(on);
set
this
to
false
(off)
to
not
specify
an
"indent"
key,
leaving
the
choice
up
to
the
stylesheet
:end
:start
Set
arbitrary
transformer
output
properties
to
be
applied
to
the
stylesheet
<p>Any
values
specified
here
will
override
defaults
that
this
view
sets
programmatically
:end
:start
Turn
on/off
the
caching
of
the
XSLT
templates
<p>The
default
value
is
"true"
Only
set
this
to
"false"
in
development,
where
caching
does
not
seriously
impact
performance
:end
:start
MVC
View
for
a
web
interaction
Implementations
are
responsible
for
rendering
content,
and
exposing
the
model
A
single
view
exposes
multiple
model
attributes
<p>This
class
and
the
MVC
approach
associated
with
it
is
discussed
in
Chapter
12
of
<a
href="http://wwwamazoncom/exec/obidos/tg/detail/-/0764543857/">Expert
One-On-One
J2EE
Design
and
Development</a>
by
Rod
Johnson
(Wrox,
2002)
<p>View
implementations
may
differ
widely
An
obvious
implementation
would
be
JSP-based
Other
implementations
might
be
XSLT-based,
or
use
an
HTML
generation
library
This
interface
is
designed
to
avoid
restricting
the
range
of
possible
implementations
<p>Views
should
be
beans
They
are
likely
to
be
instantiated
as
beans
by
a
ViewResolver
As
this
interface
is
stateless,
view
implementations
should
be
thread-safe
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
the
response
status
code
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
View
implementations
:end
:start
Name
of
the
HttpServletRequest
attribute
that
contains
a
Map
with
path
variables
The
map
consists
of
String-based
URI
template
variable
names
as
keys
and
their
corresponding
Object-based
values
--
extracted
from
segments
of
the
URL
and
type
converted
<p>Note:
This
attribute
is
not
required
to
be
supported
by
all
View
implementations
:end
:start
The
MediaType
selected
during
content
negotiation,
which
may
be
more
specific
than
the
one
the
View
is
configured
with
For
example:
"application/vndexample-v1+xml"
vs
"application/*+xml"
:end
:start
Return
the
content
type
of
the
view,
if
predetermined
<p>Can
be
used
to
check
the
content
type
upfront,
before
the
actual
rendering
process
:end
:start
Render
the
view
given
the
specified
model
<p>The
first
step
will
be
preparing
the
request:
In
the
JSP
case,
this
would
mean
setting
model
objects
as
request
attributes
The
second
step
will
be
the
actual
rendering
of
the
view,
for
example
including
the
JSP
via
a
RequestDispatcher
:end
:start
ViewRendererServlet
is
a
bridge
servlet,
mainly
for
the
Portlet
MVC
support
<p>For
usage
with
Portlets,
this
Servlet
is
necessary
to
force
the
portlet
container
to
convert
the
PortletRequest
to
a
ServletRequest,
which
it
has
to
do
when
including
a
resource
via
the
PortletRequestDispatcher
This
allows
for
reuse
of
the
entire
Servlet-based
View
support
even
in
a
Portlet
environment
<p>The
actual
mapping
of
the
bridge
servlet
is
configurable
in
the
DispatcherPortlet,
via
a
"viewRendererUrl"
property
The
default
is
"/WEB-INF/servlet/view",
which
is
just
available
for
internal
resource
dispatching
:end
:start
Request
attribute
to
hold
current
web
application
context
Otherwise
only
the
global
web
app
context
is
obtainable
by
tags
etc
:end
:start
Name
of
request
attribute
that
holds
the
View
object
:end
:start
Name
of
request
attribute
that
holds
the
model
Map
:end
:start
Process
this
request,
handling
exceptions
The
actually
event
handling
is
performed
by
the
abstract
renderView()
template
method
:end
:start
Retrieve
the
View
instance
and
model
Map
to
render
and
trigger
actual
rendering
:end
:start
Interface
to
be
implemented
by
objects
that
can
resolve
views
by
name
<p>View
state
doesn't
change
during
the
running
of
the
application,
so
implementations
are
free
to
cache
views
<p>Implementations
are
encouraged
to
support
internationalization,
ie
localized
view
resolution
:end
:start
Resolve
the
given
view
by
name
<p>Note:
To
allow
for
ViewResolver
chaining,
a
ViewResolver
should
return
null
if
a
view
with
the
given
name
is
not
defined
in
it
However,
this
is
not
required:
Some
ViewResolvers
will
always
attempt
to
build
View
objects
with
the
given
name,
unable
to
return
null
(rather
throwing
an
exception
when
View
creation
failed)
:end
:start
A
stub
ApplicationListener
:end
:start
Simple
bean
to
test
ApplicationContext
lifecycle
methods
for
beans
:end
:start
Used
for
testing
the
combination
of
ControllerClassNameHandlerMapping/SimpleUrlHandlerMapping
with
@RequestParam
in
ServletAnnotationControllerTests
Implemented
as
a
top-level
class
(rather
than
an
inner
class)
to
make
the
ControllerClassNameHandlerMapping
work
:end
:start
Dummy
request
context
used
for
VTL
and
FTL
macro
tests
:end
:start
Annotation
for
mapping
Portlet
action
requests
onto
handler
methods
:end
:start
The
name
of
the
action,
according
to
the
Portlet
20
"javaxportletaction"
parameter
<p>If
not
specified,
the
method
will
be
used
as
default
handler:
ie
for
action
requests
where
no
specific
action
mapping
was
found
<p>Note
that
all
such
annotated
action
methods
only
apply
within
the
@RequestMapping
constraints
of
the
containing
handler
class
:end
:start
The
parameters
of
the
mapped
request,
narrowing
the
primary
mapping
<p>Same
format
for
any
environment:
a
sequence
of
"myParam=myValue"
style
expressions,
with
a
request
only
mapped
if
each
such
parameter
is
found
to
have
the
given
value
"myParam"
style
expressions
are
also
supported,
with
such
parameters
having
to
be
present
in
the
request
(allowed
to
have
any
value)
Finally,
"!myParam"
style
expressions
indicate
that
the
specified
parameter
is
<i>not</i>
supposed
to
be
present
in
the
request
:end
:start
Annotation
for
mapping
Portlet
event
requests
onto
handler
methods
:end
:start
The
name
of
the
event
to
be
handled
This
name
uniquely
identifies
an
event
within
a
portlet
mode
<p>Typically
the
local
name
of
the
event,
but
fully
qualified
names
with
a
"{"
namespace
part
will
be
mapped
correctly
as
well
<p>If
not
specified,
the
handler
method
will
be
invoked
for
any
event
request
within
its
general
mapping
:end
:start
Annotation
for
mapping
Portlet
render
requests
onto
handler
methods
:end
:start
The
window
state
that
the
annotated
render
method
applies
for
<p>If
not
specified,
the
render
method
will
be
invoked
for
any
window
state
within
its
general
mapping
<p>Standard
Portlet
spec
values:
"NORMAL",
"MAXIMIZED",
"MINIMIZED"
Custom
window
states
can
be
used
as
well,
as
supported
by
the
portal
:end
:start
The
parameters
of
the
mapped
request,
narrowing
the
primary
mapping
<p>Same
format
for
any
environment:
a
sequence
of
"myParam=myValue"
style
expressions,
with
a
request
only
mapped
if
each
such
parameter
is
found
to
have
the
given
value
"myParam"
style
expressions
are
also
supported,
with
such
parameters
having
to
be
present
in
the
request
(allowed
to
have
any
value)
Finally,
"!myParam"
style
expressions
indicate
that
the
specified
parameter
is
<i>not</i>
supposed
to
be
present
in
the
request
:end
:start
Annotation
for
mapping
Portlet
resource
requests
onto
handler
methods
:end
:start
The
id
of
the
resource
to
be
handled
This
id
uniquely
identifies
a
resource
within
a
portlet
mode
<p>If
not
specified,
the
handler
method
will
be
invoked
for
any
resource
request
within
its
general
mapping
:end
:start
PortletRequestBindingException
subclass
that
indicates
a
missing
parameter
:end
:start
Constructor
for
MissingPortletRequestParameterException
:end
:start
Return
the
name
of
the
offending
parameter
:end
:start
Return
the
expected
type
of
the
offending
parameter
:end
:start
Fatal
binding
exception,
thrown
when
we
want
to
treat
binding
exceptions
as
unrecoverable
:end
:start
Constructor
for
PortletRequestBindingException
:end
:start
Constructor
for
PortletRequestBindingException
:end
:start
Special
orgspringframeworkvalidationDataBinder
to
perform
data
binding
from
portlet
request
parameters
to
JavaBeans,
including
support
for
multipart
files
<p>See
the
DataBinder/WebDataBinder
superclasses
for
customization
options,
which
include
specifying
allowed/required
fields,
and
registering
custom
property
editors
<p>Can
also
be
used
for
manual
data
binding
in
custom
web
controllers:
for
example,
in
a
plain
Portlet
Controller
implementation
Simply
instantiate
a
PortletRequestDataBinder
for
each
binding
process,
and
invoke
bind
with
the
current
PortletRequest
as
argument:
<pre
class="code">
MyBean
myBean
=
new
MyBean();
//
apply
binder
to
custom
target
object
PortletRequestDataBinder
binder
=
new
PortletRequestDataBinder(myBean);
//
register
custom
editors,
if
desired
binderregisterCustomEditor();
//
trigger
actual
binding
of
request
parameters
binderbind(request);
//
optionally
evaluate
binding
errors
Errors
errors
=
bindergetErrors();
</pre>
:end
:start
Create
a
new
PortletRequestDataBinder
instance,
with
default
object
name
:end
:start
Create
a
new
PortletRequestDataBinder
instance
:end
:start
Bind
the
parameters
of
the
given
request
to
this
binder's
target,
also
binding
multipart
files
in
case
of
a
multipart
request
<p>This
call
can
create
field
errors,
representing
basic
binding
errors
like
a
required
field
(code
"required"),
or
type
mismatch
between
value
and
bean
property
(code
"typeMismatch")
<p>Multipart
files
are
bound
via
their
parameter
name,
just
like
normal
HTTP
parameters:
ie
"uploadedFile"
to
an
"uploadedFile"
bean
property,
invoking
a
"setUploadedFile"
setter
method
<p>The
type
of
the
target
property
for
a
multipart
file
can
be
MultipartFile,
byte[],
or
String
The
latter
two
receive
the
contents
of
the
uploaded
file;
all
metadata
like
original
file
name,
content
type,
etc
are
lost
in
those
cases
:end
:start
Treats
errors
as
fatal
<p>Use
this
method
only
if
it's
an
error
if
the
input
isn't
valid
This
might
be
appropriate
if
all
input
is
from
dropdowns,
for
example
:end
:start
PropertyValues
implementation
created
from
parameters
in
a
PortletRequest
Can
look
for
all
property
values
beginning
with
a
certain
prefix
and
prefix
separator
(default
is
"_")
<p>For
example,
with
a
prefix
of
"spring",
"spring_param1"
and
"spring_param2"
result
in
a
Map
with
"param1"
and
"param2"
as
keys
<p>This
class
is
not
immutable
to
be
able
to
efficiently
remove
property
values
that
should
be
ignored
for
binding
:end
:start
Default
prefix
separator
:end
:start
Create
new
PortletRequestPropertyValues
using
no
prefix
(and
hence,
no
prefix
separator)
:end
:start
Create
new
PortletRequestPropertyValues
using
the
given
prefix
and
the
default
prefix
separator
(the
underscore
character
"_")
:end
:start
Create
new
PortletRequestPropertyValues
supplying
both
prefix
and
prefix
separator
:end
:start
Parameter
extraction
methods,
for
an
approach
distinct
from
data
binding,
in
which
parameters
of
specific
types
are
required
<p>This
approach
is
very
useful
for
simple
submissions,
where
binding
request
parameters
to
a
command
object
would
be
overkill
:end
:start
Get
an
Integer
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
an
int
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
int
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
an
int
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
int
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Long
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
long
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
long
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
long
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
long
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Float
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
float
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
float
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
float
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
float
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Double
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
number
:end
:start
Get
a
double
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
double
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
double
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
number
:end
:start
Get
an
array
of
double
parameters,
throwing
an
exception
if
not
found
or
one
is
not
a
number
:end
:start
Get
a
Boolean
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
boolean
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
as
default
to
enable
checks
of
whether
it
was
supplied
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
an
array
of
boolean
parameters,
return
an
empty
array
if
not
found
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
boolean
parameter,
throwing
an
exception
if
it
isn't
found
or
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
an
array
of
boolean
parameters,
throwing
an
exception
if
not
found
or
one
isn't
a
boolean
<p>Accepts
"true",
"on",
"yes"
(any
case)
and
"1"
as
values
for
true;
treats
every
other
non-empty
value
as
false
(ie
parses
leniently)
:end
:start
Get
a
String
parameter,
or
null
if
not
present
Throws
an
exception
if
it
the
parameter
value
is
empty
:end
:start
Get
a
String
parameter,
with
a
fallback
value
Never
throws
an
exception
Can
pass
a
distinguished
value
to
default
to
enable
checks
of
whether
it
was
supplied
:end
:start
Get
an
array
of
String
parameters,
return
an
empty
array
if
not
found
:end
:start
Get
a
String
parameter,
throwing
an
exception
if
it
isn't
found
or
is
empty
:end
:start
Get
an
array
of
String
parameters,
throwing
an
exception
if
not
found
or
one
is
empty
:end
:start
orgspringframeworkcontextsupportAbstractRefreshableApplicationContext
subclass
which
implements
the
ConfigurablePortletApplicationContext
interface
for
portlet
environments
Provides
a
"configLocations"
property,
to
be
populated
through
the
ConfigurablePortletApplicationContext
interface
on
portlet
application
startup
<p>This
class
is
as
easy
to
subclass
as
AbstractRefreshableApplicationContext:
All
you
need
to
implements
is
the
#loadBeanDefinitions
method;
see
the
superclass
javadoc
for
details
Note
that
implementations
are
supposed
to
load
bean
definitions
from
the
files
specified
by
the
locations
returned
by
the
#getConfigLocations
method
<p>Interprets
resource
paths
as
servlet
context
resources,
ie
as
paths
beneath
the
web
application
root
Absolute
paths,
eg
for
files
outside
the
web
app
root,
can
be
accessed
via
"file:"
URLs,
as
implemented
by
orgspringframeworkcoreioDefaultResourceLoader
<p><b>This
is
the
portlet
context
to
be
subclassed
for
a
different
bean
definition
format</b>
Such
a
context
implementation
can
be
specified
as
"contextClass"
init-param
for
FrameworkPortlet,
replacing
the
default
XmlPortletApplicationContext
It
will
then
automatically
receive
the
"contextConfigLocation"
init-param
<p>Note
that
Portlet-based
context
implementations
are
generally
supposed
to
configure
themselves
based
on
the
configuration
received
through
the
ConfigurablePortletApplicationContext
interface
In
contrast,
a
standalone
application
context
might
allow
for
configuration
in
custom
startup
code
(for
example,
orgspringframeworkcontextsupportGenericApplicationContext)
:end
:start
<p>The
parent
#getEnvironment()
environment
is
delegated
to
this
(child)
context
if
the
parent
is
a
orgspringframeworkcontextConfigurableApplicationContext
implementation
<p>The
parent
#getServletContext()
servlet
context
is
delegated
to
this
(child)
context
if
the
parent
is
a
WebApplicationContext
implementation
:end
:start
Create
and
return
a
new
StandardPortletEnvironment
:end
:start
Register
request/session
scopes,
a
PortletContextAwareProcessor,
etc
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
PortletContext
:end
:start
This
implementation
supports
pattern
matching
in
unexpanded
WARs
too
:end
:start
Interface
to
be
implemented
by
configurable
portlet
application
contexts
Supported
by
orgspringframeworkwebportletFrameworkPortlet
<p>Note:
The
setters
of
this
interface
need
to
be
called
before
an
invocation
of
the
#refresh
method
inherited
from
orgspringframeworkcontextConfigurableApplicationContext
They
do
not
cause
an
initialization
of
the
context
on
their
own
:end
:start
Prefix
for
ApplicationContext
ids
that
refer
to
portlet
name
:end
:start
Name
of
the
PortletContext
environment
bean
in
the
factory
:end
:start
Name
of
the
PortletConfig
environment
bean
in
the
factory
:end
:start
Set
the
PortletContext
for
this
portlet
application
context
<p>Does
not
cause
an
initialization
of
the
context:
refresh
needs
to
be
called
after
the
setting
of
all
configuration
properties
:end
:start
Return
the
standard
Portlet
API
PortletContext
for
this
application
:end
:start
Set
the
PortletConfig
for
this
portlet
application
context
:end
:start
Return
the
PortletConfig
for
this
portlet
application
context,
if
any
:end
:start
Set
the
namespace
for
this
portlet
application
context,
to
be
used
for
building
a
default
context
config
location
:end
:start
Return
the
namespace
for
this
web
application
context,
if
any
:end
:start
Set
the
config
locations
for
this
portlet
application
context
in
init-param
style,
ie
with
distinct
locations
separated
by
commas,
semicolons
or
whitespace
<p>If
not
set,
the
implementation
is
supposed
to
use
a
default
for
the
given
namespace
:end
:start
Set
the
config
locations
for
this
portlet
application
context
<p>If
not
set,
the
implementation
is
supposed
to
use
a
default
for
the
given
namespace
:end
:start
Return
the
config
locations
for
this
web
application
context,
or
null
if
none
specified
:end
:start
Convenience
methods
for
retrieving
the
root
WebApplicationContext
for
a
given
PortletContext
This
is
useful
for
programmatically
accessing
a
Spring
application
context
from
within
custom
Portlet
implementations
:end
:start
Find
the
root
WebApplicationContext
for
this
portlet
application,
which
is
typically
loaded
via
ContextLoaderListener
or
ContextLoaderServlet
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Find
the
root
WebApplicationContext
for
this
portlet
application,
which
is
typically
loaded
via
ContextLoaderListener
or
ContextLoaderServlet
<p>Will
rethrow
an
exception
that
happened
on
root
context
startup,
to
differentiate
between
a
failed
context
startup
and
no
context
at
all
:end
:start
Replace
Servlet-
and
Portlet-based
orgspringframeworkcoreenvPropertySourceStubPropertySource
stub
property
sources
with
actual
instances
populated
with
the
given
servletContext,
portletContext
and
portletConfig
objects
<p>This
method
is
idempotent
with
respect
to
the
fact
it
may
be
called
any
number
of
times
but
will
perform
replacement
of
stub
property
sources
with
their
corresponding
actual
property
sources
once
and
only
once
:end
:start
Convenient
superclass
for
application
objects
running
in
a
Portlet
ApplicationContext
Provides
getApplicationContext,
getServletContext,
and
getTempDir
methods
:end
:start
Overrides
the
base
class
behavior
to
enforce
running
in
an
ApplicationContext
All
accessors
will
throw
IllegalStateException
if
not
running
in
a
context
:end
:start
Return
the
current
PortletContext
:end
:start
Return
the
temporary
directory
for
the
current
web
application,
as
provided
by
the
servlet
container
:end
:start
Interface
to
be
implemented
by
any
object
that
wishes
to
be
notified
of
the
PortletConfig
(typically
determined
by
the
PortletApplicationContext)
that
it
runs
in
:end
:start
Set
the
PortletConfigthat
this
object
runs
in
<p>Invoked
after
population
of
normal
bean
properties
but
before
an
init
callback
like
InitializingBean's
afterPropertiesSet
or
a
custom
init-method
Invoked
after
ApplicationContextAware's
setApplicationContext
:end
:start
PropertySource
that
reads
init
parameters
from
a
PortletConfig
object
:end
:start
Interface
to
be
implemented
by
any
object
that
wishes
to
be
notified
of
the
PortletContext
(typically
determined
by
the
PortletApplicationContext)
that
it
runs
in
:end
:start
Set
the
PortletContext
that
this
object
runs
in
<p>Invoked
after
population
of
normal
bean
properties
but
before
an
init
callback
like
InitializingBean's
afterPropertiesSet
or
a
custom
init-method
Invoked
after
ApplicationContextAware's
setApplicationContext
:end
:start
orgspringframeworkbeansfactoryconfigBeanPostProcessor
implementation
that
passes
the
PortletContext
to
beans
that
implement
the
PortletContextAware
interface
<p>Portlet
application
contexts
will
automatically
register
this
with
their
underlying
bean
factory
Applications
do
not
use
this
directly
:end
:start
Create
a
new
PortletContextAwareProcessor
for
the
given
context
:end
:start
Create
a
new
PortletContextAwareProcessor
for
the
given
config
:end
:start
Create
a
new
PortletContextAwareProcessor
for
the
given
context
and
config
:end
:start
PropertySource
that
reads
init
parameters
from
a
PortletContext
object
:end
:start
orgspringframeworkcoreioResource
implementation
for
javaxportletPortletContext
resources,
interpreting
relative
paths
within
the
portlet
application
root
directory
<p>Always
supports
stream
access
and
URL
access,
but
only
allows
javaioFile
access
when
the
portlet
application
archive
is
expanded
:end
:start
Create
a
new
PortletContextResource
<p>The
Portlet
spec
requires
that
resource
paths
start
with
a
slash,
even
if
many
containers
accept
paths
without
leading
slash
too
Consequently,
the
given
path
will
be
prepended
with
a
slash
if
it
doesn't
already
start
with
one
:end
:start
Return
the
PortletContext
for
this
resource
:end
:start
Return
the
path
for
this
resource
:end
:start
This
implementation
checks
PortletContextgetResource
:end
:start
This
implementation
delegates
to
PortletContextgetResourceAsStream,
which
returns
null
in
case
of
a
non-readable
resource
(eg
a
directory)
:end
:start
This
implementation
delegates
to
PortletContextgetResourceAsStream,
but
throws
a
FileNotFoundException
if
not
found
:end
:start
This
implementation
delegates
to
PortletContextgetResource,
but
throws
a
FileNotFoundException
if
no
resource
found
:end
:start
This
implementation
resolves
"file:"
URLs
or
alternatively
delegates
to
PortletContextgetRealPath,
throwing
a
FileNotFoundException
if
not
found
or
not
resolvable
:end
:start
ResourceLoader
implementation
that
resolves
paths
as
PortletContext
resources,
for
use
outside
a
Portlet
ApplicationContext
(for
example,
in
a
GenericPortletBean
subclass)
<p>Within
a
WebApplicationContext,
resource
paths
are
automatically
resolved
as
PortletContext
resources
by
the
context
implementation
:end
:start
Create
a
new
PortletContextResourceLoader
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
web
application
:end
:start
PortletContext-aware
subclass
of
PathMatchingResourcePatternResolver,
able
to
find
matching
resources
below
the
web
application
root
directory
via
Portlet
API's
PortletContextgetResourcePaths
Falls
back
to
the
superclass'
file
system
checking
for
other
resources
<p>The
advantage
of
using
PortletContextgetResourcePaths
to
find
matching
files
is
that
it
will
work
in
a
WAR
file
which
has
not
been
expanded
too
:end
:start
Create
a
new
PortletContextResourcePatternResolver
:end
:start
Create
a
new
PortletContextResourcePatternResolver
:end
:start
Overridden
version
which
checks
for
PortletContextResource
and
uses
PortletContextgetResourcePaths
to
find
matching
resources
below
the
web
application
root
directory
In
case
of
other
resources,
delegates
to
the
superclass
version
:end
:start
Recursively
retrieve
PortletContextResources
that
match
the
given
pattern,
adding
them
to
the
given
result
set
:end
:start
Scope
wrapper
for
a
PortletContext,
ie
for
global
web
application
attributes
<p>This
differs
from
traditional
Spring
singletons
in
that
it
exposes
attributes
in
the
PortletContext
Those
attributes
will
get
destroyed
whenever
the
entire
application
shuts
down,
which
might
be
earlier
or
later
than
the
shutdown
of
the
containing
Spring
ApplicationContext
<p>The
associated
destruction
mechanism
relies
on
a
orgspringframeworkwebcontextContextCleanupListener
being
registered
in
webxml
Note
that
orgspringframeworkwebcontextContextLoaderListener
includes
ContextCleanupListener's
functionality
<p>This
scope
is
registered
as
default
scope
with
key
orgspringframeworkwebcontextWebApplicationContext#SCOPE_APPLICATION
"application"
:end
:start
Create
a
new
Scope
wrapper
for
the
given
PortletContext
:end
:start
Invoke
all
registered
destruction
callbacks
To
be
called
on
ServletContext
shutdown
:end
:start
Portlet-based
implementation
of
the
orgspringframeworkwebcontextrequestRequestAttributes
interface
<p>Accesses
objects
from
portlet
request
and
portlet
session
scope,
with
a
distinction
between
"session"
(the
PortletSession's
"portlet
scope")
and
"global
session"
(the
PortletSession's
"application
scope")
:end
:start
Constant
identifying
the
String
prefixed
to
the
name
of
a
destruction
callback
when
it
is
stored
in
a
PortletSession
:end
:start
Create
a
new
PortletRequestAttributes
instance
for
the
given
request
:end
:start
Exposes
the
native
PortletRequest
that
we're
wrapping
:end
:start
Exposes
the
PortletSession
that
we're
wrapping
:end
:start
Update
all
accessed
session
attributes
through
sessionsetAttribute
calls,
explicitly
indicating
to
the
container
that
they
might
have
been
modified
:end
:start
Register
the
given
callback
as
to
be
executed
after
session
termination
<p>Note:
The
callback
object
should
be
serializable
in
order
to
survive
web
app
restarts
:end
:start
Portlet-specific
subclass
of
RequestHandledEvent,
adding
portlet-specific
context
information
:end
:start
Create
a
new
PortletRequestHandledEvent
:end
:start
Create
a
new
PortletRequestHandledEvent
:end
:start
Return
the
name
of
the
portlet
that
handled
the
request
:end
:start
Return
the
mode
of
the
portlet
request
(usually
'view',
'edit',
or
'help')
:end
:start
Return
the
the
type
of
Portlet
Request
('action'
or
'render')
:end
:start
orgspringframeworkwebcontextrequestWebRequest
adapter
for
a
javaxportletPortletRequest
:end
:start
Create
a
new
PortletWebRequest
instance
for
the
given
request
:end
:start
Create
a
new
PortletWebRequest
instance
for
the
given
request/response
pair
:end
:start
Exposes
the
native
PortletResponse
that
we're
wrapping
(if
any)
:end
:start
Last-modified
handling
not
supported
for
portlet
requests:
As
a
consequence,
this
method
always
returns
false
:end
:start
Last-modified
handling
not
supported
for
portlet
requests:
As
a
consequence,
this
method
always
returns
false
:end
:start
Environment
implementation
to
be
used
by
Servlet-based
web
applications
All
Portlet-related
ApplicationContext
classes
initialize
an
instance
by
default
<p>Contributes
ServletContext,
PortletContext,
PortletConfig
and
JNDI-based
PropertySource
instances
See
the
#customizePropertySources
method
for
details
:end
:start
Portlet
context
init
parameters
property
source
name:
:end
:start
Portlet
config
init
parameters
property
source
name:
:end
:start
Customize
the
set
of
property
sources
with
those
contributed
by
superclasses
as
well
as
those
appropriate
for
standard
portlet-based
environments:
<ul>
<li>{@value
#PORTLET_CONFIG_PROPERTY_SOURCE_NAME
<li>{@value
#PORTLET_CONTEXT_PROPERTY_SOURCE_NAME
<li>{@linkplain
StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME
"servletContextInitParams"
<li>{@linkplain
StandardServletEnvironment#JNDI_PROPERTY_SOURCE_NAME
"jndiProperties"
</ul>
<p>Properties
present
in
#PORTLET_CONFIG_PROPERTY_SOURCE_NAME
will
take
precedence
over
those
in
#PORTLET_CONTEXT_PROPERTY_SOURCE_NAME,
which
takes
precedence
over
those
in
StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME
"servletContextInitParams"
and
so
on
<p>Properties
in
any
of
the
above
will
take
precedence
over
system
properties
and
environment
variables
contributed
by
the
StandardEnvironment
superclass
<p>The
property
sources
are
added
as
stubs
for
now,
and
will
be
PortletApplicationContextUtils#initPortletPropertySources
fully
initialized
once
the
actual
PortletConfig,
PortletContext,
and
ServletContext
objects
are
available
:end
:start
Static
Portlet-based
orgspringframeworkcontextApplicationContext
implementation
for
testing
Not
intended
for
use
in
production
applications
<p>Implements
the
orgspringframeworkwebportletcontextConfigurablePortletApplicationContext
interface
to
allow
for
direct
replacement
of
an
XmlPortletApplicationContext,
despite
not
actually
supporting
external
configuration
files
<p>Interprets
resource
paths
as
portlet
context
resources,
that
is,
as
paths
beneath
the
portlet
application
root
Absolute
paths,
for
example
for
files
outside
the
portlet
app
root,
can
be
accessed
via
"file:"
URLs,
as
implemented
by
orgspringframeworkcoreioDefaultResourceLoader
:end
:start
Return
a
new
StandardPortletEnvironment
:end
:start
<p>Replace
Portlet-
and
Servlet-related
property
sources
:end
:start
<p>The
parent
#getEnvironment()
environment
is
delegated
to
this
(child)
context
if
the
parent
is
a
orgspringframeworkcontextConfigurableApplicationContext
implementation
<p>The
parent
#getServletContext()
servlet
context
is
delegated
to
this
(child)
context
if
the
parent
is
a
WebApplicationContext
implementation
:end
:start
The
StaticPortletApplicationContext
class
does
not
support
this
method
:end
:start
The
StaticPortletApplicationContext
class
does
not
support
this
method
:end
:start
Register
request/session
scopes,
a
PortletContextAwareProcessor,
etc
:end
:start
This
implementation
supports
file
paths
beneath
the
root
of
the
PortletContext
:end
:start
This
implementation
supports
pattern
matching
in
unexpanded
WARs
too
:end
:start
Portlet-based
orgspringframeworkwebcontextWebApplicationContext
implementation
which
takes
its
configuration
from
XML
documents,
understood
by
an
orgspringframeworkbeansfactoryxmlXmlBeanDefinitionReader
This
is
essentially
the
equivalent
of
orgspringframeworkcontextsupportAbstractXmlApplicationContext
for
a
portlet
environment
<p>By
default,
the
configuration
will
be
taken
from
"/WEB-INF/applicationContextxml"
for
the
root
context,
and
"/WEB-INF/test-portletxml"
for
a
context
with
the
namespace
"test-portlet"
(like
for
a
DispatcherPortlet
instance
with
the
portlet-name
"test")
<p>The
config
location
defaults
can
be
overridden
via
the
"contextConfigLocation"
portlet
init-param
of
orgspringframeworkwebportletFrameworkPortlet
Config
locations
can
either
denote
concrete
files
like
"/WEB-INF/contextxml"
or
Ant-style
patterns
like
"/WEB-INF/*-contextxml"
(see
orgspringframeworkutilPathMatcher
javadoc
for
pattern
details)
<p>Note:
In
case
of
multiple
config
locations,
later
bean
definitions
will
override
ones
defined
in
earlier
loaded
files
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
XML
file
<p><b>For
a
Portlet-based
context
that
reads
in
a
different
bean
definition
format,
create
an
analogous
subclass
of
AbstractRefreshablePortletApplicationContext</b>
Such
a
context
implementation
can
be
specified
as
"contextClass"
init-param
for
a
FrameworkPortlet
instance
:end
:start
Default
config
location
for
the
root
context
:end
:start
Default
prefix
for
building
a
config
location
for
a
namespace
:end
:start
Default
suffix
for
building
a
config
location
for
a
namespace
:end
:start
Loads
the
bean
definitions
via
an
XmlBeanDefinitionReader
:end
:start
Initialize
the
bean
definition
reader
used
for
loading
the
bean
definitions
of
this
context
Default
implementation
is
empty
<p>Can
be
overridden
in
subclasses,
eg
for
turning
off
XML
validation
or
using
a
different
XmlBeanDefinitionParser
implementation
:end
:start
Load
the
bean
definitions
with
the
given
XmlBeanDefinitionReader
<p>The
lifecycle
of
the
bean
factory
is
handled
by
the
refreshBeanFactory
method;
therefore
this
method
is
just
supposed
to
load
and/or
register
bean
definitions
<p>Delegates
to
a
ResourcePatternResolver
for
resolving
location
patterns
into
Resource
instances
:end
:start
The
default
location
for
the
root
context
is
"/WEB-INF/applicationContextxml",
and
"/WEB-INF/test-portletxml"
for
a
context
with
the
namespace
"test-portlet"
(like
for
a
DispatcherPortlet
instance
with
the
portlet-name
"test")
:end
:start
Central
dispatcher
for
use
within
the
Portlet
MVC
framework,
eg
for
web
UI
controllers
Dispatches
to
registered
handlers
for
processing
a
portlet
request
<p>This
portlet
is
very
flexible:
It
can
be
used
with
just
about
any
workflow,
with
the
installation
of
the
appropriate
adapter
classes
It
offers
the
following
functionality
that
distinguishes
it
from
other
request-driven
portlet
MVC
frameworks:
<ul>
<li>It
is
based
around
a
JavaBeans
configuration
mechanism
<li>It
can
use
any
HandlerMapping
implementation
-
pre-built
or
provided
as
part
of
an
application
-
to
control
the
routing
of
requests
to
handler
objects
Default
is
a
orgspringframeworkwebportletmvcannotationDefaultAnnotationHandlerMapping
HandlerMapping
objects
can
be
defined
as
beans
in
the
portlet's
application
context,
implementing
the
HandlerMapping
interface,
overriding
the
default
HandlerMapping
if
present
HandlerMappings
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>It
can
use
any
HandlerAdapter;
this
allows
for
using
any
handler
interface
The
default
adapter
is
orgspringframeworkwebportletmvcSimpleControllerHandlerAdapter
for
Spring's
orgspringframeworkwebportletmvcController
interface
A
default
orgspringframeworkwebservletmvcannotationAnnotationMethodHandlerAdapter
will
be
registered
as
well
HandlerAdapter
objects
can
be
added
as
beans
in
the
application
context,
overriding
the
default
HandlerAdapter
Like
HandlerMappings,
HandlerAdapters
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>The
dispatcher's
exception
resolution
strategy
can
be
specified
via
a
HandlerExceptionResolver,
for
example
mapping
certain
exceptions
to
error
pages
Default
is
none
Additional
HandlerExceptionResolvers
can
be
added
through
the
application
context
HandlerExceptionResolver
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>Its
view
resolution
strategy
can
be
specified
via
a
ViewResolver
implementation,
resolving
symbolic
view
names
into
View
objects
Default
is
orgspringframeworkwebservletviewInternalResourceViewResolver
ViewResolver
objects
can
be
added
as
beans
in
the
application
context,
overriding
the
default
ViewResolver
ViewResolvers
can
be
given
any
bean
name
(they
are
tested
by
type)
<li>The
dispatcher's
strategy
for
resolving
multipart
requests
is
determined
by
a
orgspringframeworkwebportletmultipartPortletMultipartResolver
implementation
An
implementations
for
Jakarta
Commons
FileUpload
is
included:
orgspringframeworkwebportletmultipartCommonsPortletMultipartResolver
The
MultipartResolver
bean
name
is
"portletMultipartResolver";
default
is
none
</ul>
<p><b>NOTE:
The
@RequestMapping
annotation
will
only
be
processed
if
a
corresponding
HandlerMapping
(for
type
level
annotations)
and/or
HandlerAdapter
(for
method
level
annotations)
is
present
in
the
dispatcher</b>
This
is
the
case
by
default
However,
if
you
are
defining
custom
HandlerMappings
or
HandlerAdapters,
then
you
need
to
make
sure
that
a
corresponding
custom
DefaultAnnotationHandlerMapping
and/or
AnnotationMethodHandlerAdapter
is
defined
as
well
-
provided
that
you
intend
to
use
@RequestMapping
<p><b>A
web
application
can
define
any
number
of
DispatcherPortlets</b>
Each
portlet
will
operate
in
its
own
namespace,
loading
its
own
application
context
with
mappings,
handlers,
etc
Only
the
root
application
context
as
loaded
by
orgspringframeworkwebcontextContextLoaderListener,
if
any,
will
be
shared
<p>Thanks
to
Rainer
Schmitz,
Nick
Lothian
and
Eric
Dalquist
for
their
suggestions!
:end
:start
Well-known
name
for
the
PortletMultipartResolver
object
in
the
bean
factory
for
this
namespace
:end
:start
Well-known
name
for
the
HandlerMapping
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerMappings"
is
turned
off
:end
:start
Well-known
name
for
the
HandlerAdapter
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerAdapters"
is
turned
off
:end
:start
Well-known
name
for
the
HandlerExceptionResolver
object
in
the
bean
factory
for
this
namespace
Only
used
when
"detectAllHandlerExceptionResolvers"
is
turned
off
:end
:start
Well-known
name
for
the
ViewResolver
object
in
the
bean
factory
for
this
namespace
:end
:start
Default
URL
to
ViewRendererServlet
This
bridge
servlet
is
used
to
convert
portlet
render
requests
to
servlet
requests
in
order
to
leverage
the
view
support
in
the
orgspringframeworkwebview
package
:end
:start
Unlike
the
Servlet
version
of
this
class,
we
have
to
deal
with
the
two-phase
nature
of
the
portlet
request
To
do
this,
we
need
to
pass
forward
any
exception
that
occurs
during
the
action
phase,
so
that
it
can
be
displayed
in
the
render
phase
The
only
direct
way
to
pass
things
forward
and
preserve
them
for
each
render
request
is
through
render
parameters,
but
these
are
limited
to
String
objects
and
we
need
to
pass
the
Exception
itself
The
only
other
way
to
do
this
is
in
the
session
The
bad
thing
about
using
the
session
is
that
we
have
no
way
of
knowing
when
we
are
done
re-rendering
the
request
and
so
we
don't
know
when
we
can
remove
the
objects
from
the
session
So
we
will
end
up
polluting
the
session
with
an
old
exception
when
we
finally
leave
the
render
phase
of
one
request
and
move
on
to
something
else
:end
:start
This
render
parameter
is
used
to
indicate
forward
to
the
render
phase
that
an
exception
occurred
during
the
action
phase
:end
:start
Log
category
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Additional
logger
to
use
when
no
mapped
handler
is
found
for
a
request
:end
:start
Set
whether
to
detect
all
HandlerMapping
beans
in
this
portlet's
context
Else,
just
a
single
bean
with
name
"handlerMapping"
will
be
expected
<p>Default
is
true
Turn
this
off
if
you
want
this
portlet
to
use
a
single
HandlerMapping,
despite
multiple
HandlerMapping
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
HandlerAdapter
beans
in
this
portlet's
context
Else,
just
a
single
bean
with
name
"handlerAdapter"
will
be
expected
<p>Default
is
"true"
Turn
this
off
if
you
want
this
portlet
to
use
a
single
HandlerAdapter,
despite
multiple
HandlerAdapter
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
HandlerExceptionResolver
beans
in
this
portlet's
context
Else,
just
a
single
bean
with
name
"handlerExceptionResolver"
will
be
expected
<p>Default
is
true
Turn
this
off
if
you
want
this
portlet
to
use
a
single
HandlerExceptionResolver,
despite
multiple
HandlerExceptionResolver
beans
being
defined
in
the
context
:end
:start
Set
whether
to
detect
all
ViewResolver
beans
in
this
portlet's
context
Else,
just
a
single
bean
with
name
"viewResolver"
will
be
expected
<p>Default
is
true
Turn
this
off
if
you
want
this
portlet
to
use
a
single
ViewResolver,
despite
multiple
ViewResolver
beans
being
defined
in
the
context
:end
:start
Set
whether
to
forward
exceptions
thrown
during
the
action
phase
to
the
render
phase
via
a
session
attribute
<p>Default
is
true
Turn
this
off
if
you
want
the
portlet
container
to
provide
immediate
exception
handling
for
action
requests
:end
:start
Set
whether
to
forward
exceptions
thrown
during
the
event
phase
to
the
render
phase
via
a
session
attribute
<p>Default
is
false
Turn
this
on
if
you
want
the
DispatcherPortlet
to
forward
the
exception
to
the
render
phase,
similar
to
what
it
does
for
#setForwardActionException
action
exceptions
by
default
:end
:start
Set
the
URL
to
the
ViewRendererServlet
That
servlet
is
used
to
ultimately
render
all
views
in
the
portlet
application
:end
:start
This
implementation
calls
#initStrategies
:end
:start
Refresh
the
strategy
objects
that
this
portlet
uses
<p>May
be
overridden
in
subclasses
in
order
to
initialize
further
strategy
objects
:end
:start
Return
the
default
strategy
object
for
the
given
strategy
interface
<p>The
default
implementation
delegates
to
#getDefaultStrategies,
expecting
a
single
object
in
the
list
:end
:start
Create
a
List
of
default
strategy
objects
for
the
given
strategy
interface
<p>The
default
implementation
uses
the
"DispatcherPortletproperties"
file
(in
the
same
package
as
the
DispatcherPortlet
class)
to
determine
the
class
names
It
instantiates
the
strategy
objects
and
satisifies
ApplicationContextAware
if
necessary
:end
:start
Create
a
default
strategy
<p>The
default
implementation
uses
orgspringframeworkbeansfactoryconfigAutowireCapableBeanFactory#createBean
:end
:start
Obtain
this
portlet's
PortletMultipartResolver,
if
any
:end
:start
Processes
the
actual
dispatching
to
the
handler
for
action
requests
<p>The
handler
will
be
obtained
by
applying
the
portlet's
HandlerMappings
in
order
The
HandlerAdapter
will
be
obtained
by
querying
the
portlet's
installed
HandlerAdapters
to
find
the
first
that
supports
the
handler
class
:end
:start
Processes
the
actual
dispatching
to
the
handler
for
render
requests
<p>The
handler
will
be
obtained
by
applying
the
portlet's
HandlerMappings
in
order
The
HandlerAdapter
will
be
obtained
by
querying
the
portlet's
installed
HandlerAdapters
to
find
the
first
that
supports
the
handler
class
:end
:start
Processes
the
actual
dispatching
to
the
handler
for
resource
requests
<p>The
handler
will
be
obtained
by
applying
the
portlet's
HandlerMappings
in
order
The
HandlerAdapter
will
be
obtained
by
querying
the
portlet's
installed
HandlerAdapters
to
find
the
first
that
supports
the
handler
class
:end
:start
Processes
the
actual
dispatching
to
the
handler
for
event
requests
<p>The
handler
will
be
obtained
by
applying
the
portlet's
HandlerMappings
in
order
The
HandlerAdapter
will
be
obtained
by
querying
the
portlet's
installed
HandlerAdapters
to
find
the
first
that
supports
the
handler
class
:end
:start
Convert
the
request
into
a
multipart
request,
and
make
multipart
resolver
available
If
no
multipart
resolver
is
set,
simply
use
the
existing
request
:end
:start
Return
the
HandlerExecutionChain
for
this
request
Try
all
handler
mappings
in
order
:end
:start
No
handler
found
->
throw
appropriate
exception
:end
:start
Return
the
HandlerAdapter
for
this
handler
object
:end
:start
Expose
the
given
action
exception
to
the
given
response
:end
:start
Render
the
given
ModelAndView
This
is
the
last
stage
in
handling
a
request
It
may
involve
resolving
the
view
by
name
:end
:start
Resolve
the
given
view
name
into
a
View
object
(to
be
rendered)
<p>Default
implementations
asks
all
ViewResolvers
of
this
dispatcher
Can
be
overridden
for
custom
resolution
strategies,
potentially
based
on
specific
model
attributes
or
request
parameters
:end
:start
Actually
render
the
given
view
<p>The
default
implementation
delegates
to
orgspringframeworkwebservletViewRendererServlet
:end
:start
Perform
a
dispatch
on
the
given
PortletRequestDispatcher
<p>The
default
implementation
uses
a
forward
for
resource
requests
and
an
include
for
render
requests
:end
:start
Determine
an
error
ModelAndView
via
the
registered
HandlerExceptionResolvers
:end
:start
Determine
an
error
ModelAndView
via
the
registered
HandlerExceptionResolvers
:end
:start
Base
portlet
for
Spring's
portlet
framework
Provides
integration
with
a
Spring
application
context,
in
a
JavaBean-based
overall
solution
<p>This
class
offers
the
following
functionality:
<ul>
<li>Manages
a
Portlet
orgspringframeworkcontextApplicationContext
instance
per
portlet
The
portlet's
configuration
is
determined
by
beans
in
the
portlet's
namespace
<li>Publishes
events
on
request
processing,
whether
or
not
a
request
is
successfully
handled
</ul>
<p>Subclasses
must
implement
#doActionService
and
#doRenderService
to
handle
action
and
render
requests
Because
this
extends
GenericPortletBean
rather
than
Portlet
directly,
bean
properties
are
mapped
onto
it
Subclasses
can
override
#initFrameworkPortlet()
for
custom
initialization
<p>Regards
a
"contextClass"
parameter
at
the
portlet
init-param
level,
falling
back
to
the
default
context
class
({@link
orgspringframeworkwebportletcontextXmlPortletApplicationContext)
if
not
found
Note
that,
with
the
default
FrameworkPortlet,
a
context
class
needs
to
implement
the
orgspringframeworkwebportletcontextConfigurablePortletApplicationContext
SPI
<p>Passes
a
"contextConfigLocation"
portlet
init-param
to
the
context
instance,
parsing
it
into
potentially
multiple
file
paths
which
can
be
separated
by
any
number
of
commas
and
spaces,
like
"test-portletxml,
myPortletxml"
If
not
explicitly
specified,
the
context
implementation
is
supposed
to
build
a
default
location
from
the
namespace
of
the
portlet
<p>Note:
In
case
of
multiple
config
locations,
later
bean
definitions
will
override
ones
defined
in
earlier
loaded
files,
at
least
when
using
one
of
Spring's
default
ApplicationContext
implementations
This
can
be
leveraged
to
deliberately
override
certain
bean
definitions
via
an
extra
XML
file
<p>The
default
namespace
is
"'portlet-name'-portlet",
eg
"test-portlet"
for
a
portlet-name
"test"
(leading
to
a
"/WEB-INF/test-portletxml"
default
location
with
XmlPortletApplicationContext)
The
namespace
can
also
be
set
explicitly
via
the
"namespace"
portlet
init-param
:end
:start
Default
context
class
for
FrameworkPortlet
:end
:start
Suffix
for
Portlet
ApplicationContext
namespaces
If
a
portlet
of
this
class
is
given
the
name
"test"
in
a
context,
the
namespace
used
by
the
portlet
will
resolve
to
"test-portlet"
:end
:start
Prefix
for
the
PortletContext
attribute
for
the
Portlet
ApplicationContext
The
completion
is
the
portlet
name
:end
:start
Default
USER_INFO
attribute
names
to
search
for
the
current
username:
"userloginid",
"username"
:end
:start
Set
a
custom
context
class
This
class
must
be
of
type
ApplicationContext;
when
using
the
default
FrameworkPortlet
implementation,
the
context
class
must
also
implement
ConfigurablePortletApplicationContext
:end
:start
Return
the
custom
context
class
:end
:start
Set
a
custom
namespace
for
this
portlet,
to
be
used
for
building
a
default
context
config
location
:end
:start
Return
the
namespace
for
this
portlet,
falling
back
to
default
scheme
if
no
custom
namespace
was
set
(eg
"test-portlet"
for
a
portlet
named
"test")
:end
:start
Set
the
context
config
location
explicitly,
instead
of
relying
on
the
default
location
built
from
the
namespace
This
location
string
can
consist
of
multiple
locations
separated
by
any
number
of
commas
and
spaces
:end
:start
Return
the
explicit
context
config
location,
if
any
:end
:start
Set
whether
to
publish
this
portlet's
context
as
a
PortletContext
attribute,
available
to
all
objects
in
the
web
container
Default
is
true
<p>This
is
especially
handy
during
testing,
although
it
is
debatable
whether
it's
good
practice
to
let
other
application
objects
access
the
context
this
way
:end
:start
Set
whether
this
portlet
should
publish
a
PortletRequestHandledEvent
at
the
end
of
each
request
Default
is
true;
can
be
turned
off
for
a
slight
performance
improvement,
provided
that
no
ApplicationListeners
rely
on
such
events
:end
:start
Set
whether
to
expose
the
LocaleContext
and
RequestAttributes
as
inheritable
for
child
threads
(using
an
javalangInheritableThreadLocal)
<p>Default
is
"false",
to
avoid
side
effects
on
spawned
background
threads
Switch
this
to
"true"
to
enable
inheritance
for
custom
child
threads
which
are
spawned
during
request
processing
and
only
used
for
this
request
(that
is,
ending
after
their
initial
task,
without
reuse
of
the
thread)
<p><b>WARNING:</b>
Do
not
use
inheritance
for
child
threads
if
you
are
accessing
a
thread
pool
which
is
configured
to
potentially
add
new
threads
on
demand
(eg
a
JDK
javautilconcurrentThreadPoolExecutor),
since
this
will
expose
the
inherited
context
to
such
a
pooled
thread
:end
:start
Set
the
list
of
attributes
to
search
in
the
USER_INFO
map
when
trying
to
find
the
username
of
the
current
user
:end
:start
Overridden
method
of
GenericPortletBean,
invoked
after
any
bean
properties
have
been
set
Creates
this
portlet's
ApplicationContext
:end
:start
Initialize
and
publish
the
Portlet
ApplicationContext
for
this
portlet
<p>Delegates
to
#createPortletApplicationContext
for
actual
creation
Can
be
overridden
in
subclasses
:end
:start
Instantiate
the
Portlet
ApplicationContext
for
this
portlet,
either
a
default
XmlPortletApplicationContext
or
a
custom
context
class
if
set
<p>This
implementation
expects
custom
contexts
to
implement
ConfigurablePortletApplicationContext
Can
be
overridden
in
subclasses
:end
:start
Post-process
the
given
Portlet
ApplicationContext
before
it
is
refreshed
and
activated
as
context
for
this
portlet
<p>The
default
implementation
is
empty
refresh()
will
be
called
automatically
after
this
method
returns
:end
:start
Return
the
PortletContext
attribute
name
for
this
portlets's
ApplicationContext
<p>The
default
implementation
returns
PORTLET_CONTEXT_PREFIX
+
portlet
name
:end
:start
Return
this
portlet's
ApplicationContext
:end
:start
This
method
will
be
invoked
after
any
bean
properties
have
been
set
and
the
ApplicationContext
has
been
loaded
<p>The
default
implementation
is
empty;
subclasses
may
override
this
method
to
perform
any
initialization
they
require
:end
:start
Refresh
this
portlet's
application
context,
as
well
as
the
dependent
state
of
the
portlet
:end
:start
ApplicationListener
endpoint
that
receives
events
from
this
servlet's
WebApplicationContext
<p>The
default
implementation
calls
#onRefresh
in
case
of
a
orgspringframeworkcontexteventContextRefreshedEvent,
triggering
a
refresh
of
this
servlet's
context-dependent
state
:end
:start
Template
method
which
can
be
overridden
to
add
portlet-specific
refresh
work
Called
after
successful
context
refresh
<p>This
implementation
is
empty
:end
:start
Overridden
for
friendlier
behavior
in
unit
tests
:end
:start
Delegate
action
requests
to
processRequest/doActionService
:end
:start
Delegate
render
requests
to
processRequest/doRenderService
:end
:start
Process
this
request,
publishing
an
event
regardless
of
the
outcome
The
actual
event
handling
is
performed
by
the
abstract
doActionService()
and
doRenderService()
template
methods
:end
:start
Build
a
LocaleContext
for
the
given
request,
exposing
the
request's
primary
locale
as
current
locale
:end
:start
Determine
the
username
for
the
given
request
<p>The
default
implementation
first
tries
the
UserPrincipal
If
that
does
not
exist,
then
it
checks
the
USER_INFO
map
Can
be
overridden
in
subclasses
:end
:start
Subclasses
must
implement
this
method
to
do
the
work
of
action
request
handling
<p>The
contract
is
essentially
the
same
as
that
for
the
processAction
method
of
GenericPortlet
<p>This
class
intercepts
calls
to
ensure
that
exception
handling
and
event
publication
takes
place
:end
:start
Subclasses
must
implement
this
method
to
do
the
work
of
render
request
handling
<p>The
contract
is
essentially
the
same
as
that
for
the
doDispatch
method
of
GenericPortlet
<p>This
class
intercepts
calls
to
ensure
that
exception
handling
and
event
publication
takes
place
:end
:start
Subclasses
must
implement
this
method
to
do
the
work
of
resource
request
handling
<p>The
contract
is
essentially
the
same
as
that
for
the
serveResource
method
of
GenericPortlet
<p>This
class
intercepts
calls
to
ensure
that
exception
handling
and
event
publication
takes
place
:end
:start
Subclasses
must
implement
this
method
to
do
the
work
of
event
request
handling
<p>The
contract
is
essentially
the
same
as
that
for
the
processEvent
method
of
GenericPortlet
<p>This
class
intercepts
calls
to
ensure
that
exception
handling
and
event
publication
takes
place
:end
:start
Close
the
ApplicationContext
of
this
portlet
:end
:start
Simple
extension
of
javaxportletGenericPortlet
that
treats
its
config
parameters
as
bean
properties
<p>A
very
handy
superclass
for
any
type
of
portlet
Type
conversion
is
automatic
It
is
also
possible
for
subclasses
to
specify
required
properties
<p>This
portlet
leaves
request
handling
to
subclasses,
inheriting
the
default
behaviour
of
GenericPortlet
({@code
doDispatch,
processAction,
etc)
<p>This
portlet
superclass
has
no
dependency
on
a
Spring
application
context,
in
contrast
to
the
FrameworkPortlet
class
which
loads
its
own
context
:end
:start
Logger
available
to
subclasses
:end
:start
Subclasses
can
invoke
this
method
to
specify
that
this
property
(which
must
match
a
JavaBean
property
they
expose)
is
mandatory,
and
must
be
supplied
as
a
config
parameter
This
method
would
normally
be
called
from
a
subclass
constructor
:end
:start
Map
config
parameters
onto
bean
properties
of
this
portlet,
and
invoke
subclass
initialization
:end
:start
Initialize
the
BeanWrapper
for
this
GenericPortletBean,
possibly
with
custom
editors
:end
:start
Overridden
method
that
simply
returns
null
when
no
PortletConfig
set
yet
:end
:start
Overridden
method
that
simply
returns
null
when
no
PortletConfig
set
yet
:end
:start
Subclasses
may
override
this
to
perform
custom
initialization
All
bean
properties
of
this
portlet
will
have
been
set
before
this
method
is
invoked
This
default
implementation
does
nothing
:end
:start
:end
:start
<p>If
null,
a
new
environment
will
be
initialized
via
#createEnvironment()
:end
:start
Create
and
return
a
new
StandardPortletEnvironment
Subclasses
may
override
in
order
to
configure
the
environment
or
specialize
the
environment
type
returned
:end
:start
Abstract
base
class
for
HandlerExceptionResolver
implementations
<p>Provides
a
set
of
mapped
handlers
that
the
resolver
should
map
to,
and
the
Ordered
implementation
:end
:start
Logger
available
to
subclasses
:end
:start
Specify
the
set
of
handlers
that
this
exception
resolver
should
map
The
exception
mappings
and
the
default
error
view
will
only
apply
to
the
specified
handlers
<p>If
no
handlers
set,
both
the
exception
mappings
and
the
default
error
view
will
apply
to
all
handlers
This
means
that
a
specified
default
error
view
will
be
used
as
fallback
for
all
exceptions;
any
further
HandlerExceptionResolvers
in
the
chain
will
be
ignored
in
this
case
:end
:start
Specify
the
set
of
classes
that
this
exception
resolver
should
apply
to
The
exception
mappings
and
the
default
error
view
will
only
apply
to
handlers
of
the
specified
type;
the
specified
types
may
be
interfaces
and
superclasses
of
handlers
as
well
<p>If
no
handlers
and
handler
classes
are
set,
the
exception
mappings
and
the
default
error
view
will
apply
to
all
handlers
This
means
that
a
specified
default
error
view
will
be
used
as
fallback
for
all
exceptions;
any
further
HandlerExceptionResolvers
in
the
chain
will
be
ignored
in
this
case
:end
:start
Set
the
log
category
for
warn
logging
The
name
will
be
passed
to
the
underlying
logger
implementation
through
Commons
Logging,
getting
interpreted
as
log
category
according
to
the
logger's
configuration
<p>Default
is
no
warn
logging
Specify
this
setting
to
activate
warn
logging
into
a
specific
category
Alternatively,
override
the
#logException
method
for
custom
logging
:end
:start
Set
if
the
resolver
should
render
a
view
when
the
portlet
is
in
a
minimized
window
The
default
is
"false"
:end
:start
Checks
whether
this
resolver
is
supposed
to
apply
(ie
the
handler
matches
in
case
of
"mappedHandlers"
having
been
specified),
then
delegates
to
the
#doResolveException
template
method
:end
:start
Check
whether
this
resolver
is
supposed
to
apply
to
the
given
handler
<p>The
default
implementation
checks
against
the
specified
mapped
handlers
and
handler
classes,
if
any,
and
also
checks
the
window
state
(according
to
the
"renderWhenMinimize"
property)
:end
:start
Log
the
given
exception
at
warn
level,
provided
that
warn
logging
has
been
activated
through
the
#setWarnLogCategory
"warnLogCategory"
property
<p>Calls
#buildLogMessage
in
order
to
determine
the
concrete
message
to
log
Always
passes
the
full
exception
to
the
logger
:end
:start
Build
a
log
message
for
the
given
exception,
occured
during
processing
the
given
request
:end
:start
Actually
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
<p>Must
be
overridden
in
subclasses,
in
order
to
apply
specific
exception
checks
Note
that
this
template
method
will
be
invoked
<i>after</i>
checking
whether
this
resolved
applies
("mappedHandlers"
etc),
so
an
implementation
may
simply
proceed
with
its
actual
exception
handling
:end
:start
Abstract
base
class
for
orgspringframeworkwebportletHandlerMapping
implementations
Supports
ordering,
a
default
handler,
and
handler
interceptors
:end
:start
Specify
the
order
value
for
this
HandlerMapping
bean
<p>Default
value
is
IntegerMAX_VALUE,
meaning
that
it's
non-ordered
:end
:start
Set
the
default
handler
for
this
handler
mapping
This
handler
will
be
returned
if
no
specific
mapping
was
found
<p>Default
is
null,
indicating
no
default
handler
:end
:start
Return
the
default
handler
for
this
handler
mapping,
or
null
if
none
:end
:start
Set
the
interceptors
to
apply
for
all
handlers
mapped
by
this
handler
mapping
<p>Supported
interceptor
types
are
HandlerInterceptor
and
WebRequestInterceptor
Each
given
WebRequestInterceptor
will
be
wrapped
in
a
WebRequestHandlerInterceptorAdapter
:end
:start
Specify
whether
to
apply
WebRequestInterceptors
to
the
Portlet
render
phase
only
("true",
or
whether
to
apply
them
to
the
Portlet
action
phase
as
well
("false")
<p>Default
is
"true",
since
WebRequestInterceptors
are
usually
built
for
MVC-style
handler
execution
plus
rendering
process
(which
is,
for
example,
the
primary
target
scenario
for
"Open
Session
in
View"
interceptors,
offering
lazy
loading
of
persistent
objects
during
view
rendering)
Set
this
to
"false"
to
have
WebRequestInterceptors
apply
to
the
action
phase
as
well
(for
example,
in
case
of
an
"Open
Session
in
View"
interceptor,
to
allow
for
lazy
loading
outside
of
a
transaction
during
the
action
phase)
:end
:start
Initializes
the
interceptors
:end
:start
Extension
hook
that
subclasses
can
override
to
register
additional
interceptors,
given
the
configured
interceptors
(see
#setInterceptors)
<p>Will
be
invoked
before
#initInterceptors()
adapts
the
specified
interceptors
into
HandlerInterceptor
instances
<p>The
default
implementation
is
empty
:end
:start
Initialize
the
specified
interceptors,
adapting
them
where
necessary
:end
:start
Adapt
the
given
interceptor
object
to
the
HandlerInterceptor
interface
<p>Supported
interceptor
types
are
HandlerInterceptor
and
WebRequestInterceptor
Each
given
WebRequestInterceptor
will
be
wrapped
in
a
WebRequestHandlerInterceptorAdapter
Can
be
overridden
in
subclasses
:end
:start
Return
the
adapted
interceptors
as
HandlerInterceptor
array
:end
:start
Look
up
a
handler
for
the
given
request,
falling
back
to
the
default
handler
if
no
specific
one
is
found
:end
:start
Look
up
a
handler
for
the
given
request,
returning
null
if
no
specific
one
is
found
This
method
is
called
by
#getHandler;
a
null
return
value
will
lead
to
the
default
handler,
if
one
is
set
<p>Note:
This
method
may
also
return
a
pre-built
HandlerExecutionChain,
combining
a
handler
object
with
dynamically
determined
interceptors
Statically
specified
interceptors
will
get
merged
into
such
an
existing
chain
:end
:start
Build
a
HandlerExecutionChain
for
the
given
handler,
including
applicable
interceptors
<p>The
default
implementation
simply
builds
a
standard
HandlerExecutionChain
with
the
given
handler
and
this
handler
mapping's
common
interceptors
Subclasses
may
override
this
in
order
to
extend/rearrange
the
list
of
interceptors
<p><b>NOTE:</b>
The
passed-in
handler
object
may
be
a
raw
handler
or
a
pre-built
HandlerExecutionChain
This
method
should
handle
those
two
cases
explicitly,
either
building
a
new
HandlerExecutionChain
or
extending
the
existing
chain
<p>For
simply
adding
an
interceptor,
consider
calling
supergetHandlerExecutionChain
and
invoking
HandlerExecutionChain#addInterceptor
on
the
returned
chain
object
:end
:start
Abstract
base
class
for
orgspringframeworkwebportletHandlerMapping
implementations
that
rely
on
a
map
which
caches
handler
objects
per
lookup
key
Supports
arbitrary
lookup
keys,
and
automatically
resolves
handler
bean
names
into
handler
bean
instances
:end
:start
Set
whether
to
lazily
initialize
handlers
Only
applicable
to
singleton
handlers,
as
prototypes
are
always
lazily
initialized
Default
is
false,
as
eager
initialization
allows
for
more
efficiency
through
referencing
the
handler
objects
directly
<p>If
you
want
to
allow
your
handlers
to
be
lazily
initialized,
make
them
"lazy-init"
and
set
this
flag
to
true
Just
making
them
"lazy-init"
will
not
work,
as
they
are
initialized
through
the
references
from
the
handler
mapping
in
this
case
:end
:start
Determines
a
handler
for
the
computed
lookup
key
for
the
given
request
:end
:start
Build
a
lookup
key
for
the
given
request
:end
:start
Register
all
handlers
specified
in
the
Portlet
mode
map
for
the
corresponding
modes
:end
:start
Register
the
given
handler
instance
for
the
given
parameter
value
:end
:start
Register
the
given
handler
instance
for
the
given
parameter
value
:end
:start
Predicate
interface
for
determining
a
match
with
a
given
request
:end
:start
Determine
whether
the
given
request
matches
this
predicate
:end
:start
Validate
this
predicate's
mapping
against
the
current
request
:end
:start
Predicate
interface
for
determining
a
match
with
a
given
request
:end
:start
Determine
whether
the
given
request
matches
this
predicate
:end
:start
Validate
this
predicate's
mapping
against
the
current
request
:end
:start
Abstract
adapter
class
for
the
HandlerInterceptor
interface,
for
simplified
implementation
of
pre-only/post-only
interceptors
:end
:start
This
implementation
delegates
to
#preHandle
:end
:start
This
implementation
delegates
to
#afterCompletion
:end
:start
This
implementation
delegates
to
#preHandle
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
delegates
to
#afterCompletion
:end
:start
This
implementation
delegates
to
#preHandle
:end
:start
This
implementation
is
empty
:end
:start
This
implementation
delegates
to
#afterCompletion
:end
:start
This
implementation
delegates
to
#preHandle
:end
:start
This
implementation
delegates
to
#afterCompletion
:end
:start
Default
callback
that
all
"pre*"
methods
delegate
to
<p>This
implementation
always
returns
true
:end
:start
Default
callback
that
all
"after*"
methods
delegate
to
<p>This
implementation
is
empty
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerMapping
to
map
from
a
request
parameter
to
request
handler
beans
<p>The
default
name
of
the
parameter
is
"action",
but
can
be
changed
using
#setParameterName
setParameterName()
<p>The
bean
configuration
for
this
mapping
will
look
somthing
like
this:
<pre
class="code">
&lt;bean
id="parameterHandlerMapping"
class="orgspringframeworkwebportlethandlerParameterHandlerMapping"&gt;
&lt;property
name="parameterMap"&gt;
&lt;map&gt;
&lt;entry
key="add"&gt;&lt;ref
bean="addItemHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="edit"&gt;&lt;ref
bean="editItemHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="delete"&gt;&lt;ref
bean="deleteItemHandler"/&gt;&lt;/entry&gt;
&lt;/map&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
Thanks
to
Rainer
Schmitz
for
suggesting
this
mapping
strategy!
:end
:start
Default
request
parameter
name
to
use
for
mapping
to
handlers:
"action"
:end
:start
Set
the
name
of
the
parameter
used
for
mapping
to
handlers
<p>Default
is
"action"
:end
:start
Set
a
Map
with
parameters
as
keys
and
handler
beans
or
bean
names
as
values
Convenient
for
population
with
bean
references
:end
:start
Calls
the
registerHandlers
method
in
addition
to
the
superclass's
initialization
:end
:start
Uses
the
value
of
the
specified
parameter
as
lookup
key
:end
:start
Interceptor
to
forward
a
request
parameter
from
the
ActionRequest
to
the
RenderRequest
<p>This
can
be
useful
when
using
ParameterHandlerMapping
ParameterHandlerMapping
or
PortletModeParameterHandlerMapping
PortletModeParameterHandlerMapping
It
will
ensure
that
the
parameter
that
was
used
to
map
the
ActionRequest
to
a
handler
will
be
forwarded
to
the
RenderRequest
so
that
it
will
also
be
mapped
the
same
way
<p>When
using
this
Interceptor,
you
can
still
change
the
value
of
the
mapping
parameter
in
your
handler
in
order
to
change
where
the
render
request
will
get
mapped
<p>Be
aware
that
this
Interceptor
does
call
ActionResponsesetRenderParameter,
which
means
that
you
will
not
be
able
to
call
ActionResponsesendRedirect
in
your
handler
If
you
may
need
to
issue
a
redirect,
then
you
should
avoid
this
Interceptor
and
either
write
a
different
one
that
does
this
in
a
different
way,
or
manually
forward
the
parameter
from
within
your
handler(s)
<p>Thanks
to
Rainer
Schmitz
for
suggesting
this
mapping
strategy!
:end
:start
Request
parameter
name
to
use
for
mapping
to
handlers
:end
:start
Set
the
name
of
the
parameter
used
for
mapping
:end
:start
If
request
is
an
javaxportletActionRequest
ActionRequest,
get
handler
mapping
parameter
and
add
it
to
the
ActionResponse
:end
:start
Convenient
superclass
for
any
kind
of
web
content
generator,
like
orgspringframeworkwebportletmvcAbstractController
Can
also
be
used
for
custom
handlers
that
have
their
own
orgspringframeworkwebportletHandlerAdapter
<p>Supports
portlet
cache
control
options
:end
:start
Set
whether
a
session
should
be
required
to
handle
requests
:end
:start
Return
whether
a
session
is
required
to
handle
requests
:end
:start
Cache
content
for
the
given
number
of
seconds
Default
is
-1,
indicating
no
override
of
portlet
content
caching
<p>Only
if
this
is
set
to
0
(no
cache)
or
a
positive
value
(cache
for
this
many
seconds)
will
this
class
override
the
portlet
settings
<p>The
cache
setting
can
be
overwritten
by
subclasses,
before
content
is
generated
:end
:start
Return
the
number
of
seconds
that
content
is
cached
:end
:start
Check
and
prepare
the
given
request
and
response
according
to
the
settings
of
this
generator
Checks
for
a
required
session,
and
applies
the
number
of
cache
seconds
configured
for
this
generator
(if
it
is
a
render
request/response)
:end
:start
Check
and
prepare
the
given
request
and
response
according
to
the
settings
of
this
generator
Checks
for
a
required
session,
and
applies
the
number
of
cache
seconds
configured
for
this
generator
(if
it
is
a
render
request/response)
:end
:start
Check
and
prepare
the
given
request
and
response
according
to
the
settings
of
this
generator
Checks
for
a
required
session,
and
applies
the
given
number
of
cache
seconds
(if
it
is
a
render
request/response)
:end
:start
Prevent
the
render
response
from
being
cached
:end
:start
Set
portlet
response
to
allow
caching
for
the
given
number
of
seconds
:end
:start
Apply
the
given
cache
seconds
to
the
render
response
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerMapping
interface
to
map
from
the
current
PortletMode
to
request
handler
beans
<p>The
bean
configuration
for
this
mapping
will
look
something
like
this:
<pre
class="code">
&lt;bean
id="portletModeHandlerMapping"
class="orgspringframeworkwebportlethandlerPortletModeHandlerMapping"&gt;
&lt;property
name="portletModeMap"&gt;
&lt;map&gt;
&lt;entry
key="view"&gt;&lt;ref
bean="viewHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="edit"&gt;&lt;ref
bean="editHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="help"&gt;&lt;ref
bean="helpHandler"/&gt;&lt;/entry&gt;
&lt;/map&gt;
&lt;/property&gt;
&lt;/bean&gt;
</pre>
:end
:start
Set
PortletMode
to
handler
bean
name
mappings
from
a
Properties
object
:end
:start
Set
a
Map
with
PortletModes
as
keys
and
handler
beans
as
values
Convenient
for
population
with
bean
references
:end
:start
Calls
the
registerHandlers
method
in
addition
to
the
superclass's
initialization
:end
:start
Register
all
handlers
specified
in
the
Portlet
mode
map
for
the
corresponding
modes
:end
:start
Uses
the
current
PortletMode
as
lookup
key
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerMapping
interface
to
map
from
the
current
PortletMode
and
a
request
parameter
to
request
handler
beans
The
mapping
consists
of
two
levels:
first
the
PortletMode
and
then
the
parameter
value
In
order
to
be
mapped,
both
elements
must
match
the
mapping
definition
<p>This
is
a
combination
of
the
methods
used
in
PortletModeHandlerMapping
PortletModeHandlerMapping
and
ParameterHandlerMapping
ParameterHandlerMapping
Unlike
those
two
classes,
this
mapping
cannot
be
initialized
with
properties
since
it
requires
a
two-level
map
<p>The
default
name
of
the
parameter
is
"action",
but
can
be
changed
using
#setParameterName
setParameterName()
<p>By
default,
the
same
parameter
value
may
not
be
used
in
two
different
portlet
modes
This
is
so
that
if
the
portal
itself
changes
the
portlet
mode,
the
request
will
no
longer
be
valid
in
the
mapping
This
behavior
can
be
changed
with
#setAllowDuplicateParameters
setAllowDupParameters()
<p>The
bean
configuration
for
this
mapping
will
look
somthing
like
this:
<pre
class="code">
&lt;bean
id="portletModeParameterHandlerMapping"
class="orgspringframeworkwebportlethandlerPortletModeParameterHandlerMapping"&gt;
&lt;property
name="portletModeParameterMap"&gt;
&lt;map&gt;
&lt;entry
key="view"&gt;
&lt;!--
portlet
mode:
view
--&gt;
&lt;map&gt;
&lt;entry
key="add"&gt;&lt;ref
bean="addItemHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="edit"&gt;&lt;ref
bean="editItemHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="delete"&gt;&lt;ref
bean="deleteItemHandler"/&gt;&lt;/entry&gt;
&lt;/map&gt;
&lt;/entry&gt;
&lt;entry
key="edit"&gt;
&lt;!--
portlet
mode:
edit
--&gt;
&lt;map&gt;
&lt;entry
key="prefs"&gt;&lt;ref
bean="preferencesHandler"/&gt;&lt;/entry&gt;
&lt;entry
key="resetPrefs"&gt;&lt;ref
bean="resetPreferencesHandler"/&gt;&lt;/entry&gt;
&lt;/map&gt;
&lt;/entry&gt;
&lt;/map&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
<p>This
mapping
can
be
chained
ahead
of
a
PortletModeHandlerMapping
PortletModeHandlerMapping,
which
can
then
provide
defaults
for
each
mode
and
an
overall
default
as
well
<p>Thanks
to
Rainer
Schmitz
and
Yujin
Kim
for
suggesting
this
mapping
strategy!
:end
:start
Default
request
parameter
name
to
use
for
mapping
to
handlers:
"action"
:end
:start
Set
the
name
of
the
parameter
used
for
mapping
to
handlers
<p>Default
is
"action"
:end
:start
Set
a
Map
with
portlet
mode
names
as
keys
and
another
Map
as
values
The
sub-map
has
parameter
names
as
keys
and
handler
bean
or
bean
names
as
values
<p>Convenient
for
population
with
bean
references
:end
:start
Set
whether
to
allow
duplicate
parameter
values
across
different
portlet
modes
Default
is
"false"
<p>Doing
this
is
dangerous
because
the
portlet
mode
can
be
changed
by
the
portal
itself
and
the
only
way
to
see
that
is
a
rerender
of
the
portlet
If
the
same
parameter
value
is
legal
in
multiple
modes,
then
a
change
in
mode
could
result
in
a
matched
mapping
that
is
not
intended
and
the
user
could
end
up
in
a
strange
place
in
the
application
:end
:start
Calls
the
registerHandlers
method
in
addition
to
the
superclass's
initialization
:end
:start
Register
all
handlers
specified
in
the
Portlet
mode
map
for
the
corresponding
modes
:end
:start
Register
all
handlers
specified
in
the
given
parameter
map
:end
:start
Register
the
given
handler
instance
for
the
given
PortletMode
and
parameter
value,
under
an
appropriate
lookup
key
:end
:start
Returns
a
lookup
key
that
combines
the
current
PortletMode
and
the
current
value
of
the
specified
parameter
:end
:start
Exception
thrown
when
a
request
handler
does
not
support
a
specific
request
method
:end
:start
Create
a
new
PortletRequestMethodNotSupportedException
:end
:start
Create
a
new
PortletRequestMethodNotSupportedException
:end
:start
Create
a
new
PortletRequestMethodNotSupportedException
:end
:start
Return
the
HTTP
request
method
that
caused
the
failure
:end
:start
Return
the
actually
supported
HTTP
methods,
if
known
:end
:start
Exception
thrown
when
a
portlet
content
generator
requires
a
pre-existing
session
:end
:start
Create
a
new
PortletSessionRequiredException
:end
:start
orgspringframeworkwebportletHandlerExceptionResolver
implementation
that
allows
for
mapping
exception
class
names
to
view
names,
either
for
a
set
of
given
handlers
or
for
all
handlers
in
the
DispatcherPortlet
<p>Error
views
are
analogous
to
error
page
JSPs,
but
can
be
used
with
any
kind
of
exception
including
any
checked
one,
with
fine-granular
mappings
for
specific
handlers
:end
:start
The
default
name
of
the
exception
attribute:
"exception"
:end
:start
Set
the
mappings
between
exception
class
names
and
error
view
names
The
exception
class
name
can
be
a
substring,
with
no
wildcard
support
at
present
A
value
of
"PortletException"
would
match
javaxportetPortletException
and
subclasses,
for
example
<p><b>NB:</b>
Consider
carefully
how
specific
the
pattern
is,
and
whether
to
include
package
information
(which
isn't
mandatory)
For
example,
"Exception"
will
match
nearly
anything,
and
will
probably
hide
other
rules
"javalangException"
would
be
correct
if
"Exception"
was
meant
to
define
a
rule
for
all
checked
exceptions
With
more
unusual
exception
names
such
as
"BaseBusinessException"
there's
no
need
to
use
a
FQN
<p>Follows
the
same
matching
algorithm
as
RuleBasedTransactionAttribute
and
RollbackRuleAttribute
:end
:start
Set
the
name
of
the
default
error
view
This
view
will
be
returned
if
no
specific
mapping
was
found
<p>Default
is
none
:end
:start
Set
the
name
of
the
model
attribute
as
which
the
exception
should
be
exposed
Default
is
"exception"
:end
:start
Actually
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
:end
:start
Determine
the
view
name
for
the
given
exception,
searching
the
#setExceptionMappings
"exceptionMappings",
using
the
#setDefaultErrorView
"defaultErrorView"
as
fallback
:end
:start
Find
a
matching
view
name
in
the
given
exception
mappings
:end
:start
Return
the
depth
to
the
superclass
matching
<p>0
means
ex
matches
exactly
Returns
-1
if
there's
no
match
Otherwise,
returns
depth
Lowest
depth
wins
<p>Follows
the
same
algorithm
as
orgspringframeworktransactioninterceptorRollbackRuleAttribute
:end
:start
Return
a
ModelAndView
for
the
given
request,
view
name
and
exception
Default
implementation
delegates
to
getModelAndView(viewName,
ex)
:end
:start
Return
a
ModelAndView
for
the
given
view
name
and
exception
Default
implementation
adds
the
specified
exception
attribute
Can
be
overridden
in
subclasses
:end
:start
Adapter
to
use
the
Portlet
interface
with
the
generic
DispatcherPortlet
Calls
the
Portlet's
render
and
processAction
methods
to
handle
a
request
<p>This
adapter
is
not
activated
by
default;
it
needs
to
be
defined
as
a
bean
in
the
DispatcherPortlet
context
It
will
automatically
apply
to
mapped
handler
beans
that
implement
the
Portlet
interface
then
<p>Note
that
Portlet
instances
defined
as
bean
will
not
receive
initialization
and
destruction
callbacks,
unless
a
special
post-processor
such
as
SimplePortletPostProcessor
is
defined
in
the
DispatcherPortlet
context
<p><b>Alternatively,
consider
wrapping
a
Portlet
with
Spring's
PortletWrappingController</b>
This
is
particularly
appropriate
for
existing
Portlet
classes,
allowing
to
specify
Portlet
initialization
parameters,
etc
:end
:start
Bean
post-processor
that
applies
initialization
and
destruction
callbacks
to
beans
that
implement
the
Portlet
interface
<p>After
initialization
of
the
bean
instance,
the
Portlet
init
method
will
be
called
with
a
PortletConfig
that
contains
the
bean
name
of
the
Portlet
and
the
PortletContext
that
it
is
running
in
<p>Before
destruction
of
the
bean
instance,
the
Portlet
destroy
will
be
called
<p><b>Note
that
this
post-processor
does
not
support
Portlet
initialization
parameters</b>
Bean
instances
that
implement
the
Portlet
interface
are
supposed
to
be
configured
like
any
other
Spring
bean,
that
is,
through
constructor
arguments
or
bean
properties
<p>For
reuse
of
a
Portlet
implementation
in
a
plain
Portlet
container
and
as
a
bean
in
a
Spring
context,
consider
deriving
from
Spring's
GenericPortletBean
base
class
that
applies
Portlet
initialization
parameters
as
bean
properties,
supporting
both
initialization
styles
<p><b>Alternatively,
consider
wrapping
a
Portlet
with
Spring's
PortletWrappingController</b>
This
is
particularly
appropriate
for
existing
Portlet
classes,
allowing
to
specify
Portlet
initialization
parameters
etc
:end
:start
Set
whether
to
use
the
shared
PortletConfig
object
passed
in
through
setPortletConfig,
if
available
<p>Default
is
"true"
Turn
this
setting
to
"false"
to
pass
in
a
mock
PortletConfig
object
with
the
bean
name
as
portlet
name,
holding
the
current
PortletContext
:end
:start
Interceptor
that
checks
the
authorization
of
the
current
user
via
the
user's
roles,
as
evaluated
by
PortletRequest's
isUserInRole
method
:end
:start
Set
the
roles
that
this
interceptor
should
treat
as
authorized
:end
:start
Handle
a
request
that
is
not
authorized
according
to
this
interceptor
Default
implementation
throws
a
new
PortletSecurityException
<p>This
method
can
be
overridden
to
write
a
custom
message,
forward
or
redirect
to
some
error
page
or
login
page,
or
throw
a
PortletException
:end
:start
Adapter
that
implements
the
Portlet
HandlerInterceptor
interface
and
wraps
an
underlying
WebRequestInterceptor
<p><b>NOTE:</b>
The
WebRequestInterceptor
is
by
default
only
applied
to
the
Portlet
<b>render</b>
phase,
which
is
dealing
with
preparing
and
rendering
a
Portlet
view
The
Portlet
action
phase
will
only
be
intercepted
with
WebRequestInterceptor
calls
if
the
renderPhaseOnly
flag
is
explicitly
set
to
false
In
general,
it
is
recommended
to
use
the
Portlet-specific
HandlerInterceptor
mechanism
for
differentiating
between
action
and
render
interception
:end
:start
Create
a
new
WebRequestHandlerInterceptorAdapter
for
the
given
WebRequestInterceptor,
applying
to
the
render
phase
only
:end
:start
Create
a
new
WebRequestHandlerInterceptorAdapter
for
the
given
WebRequestInterceptor
:end
:start
Portlet
MVC
framework
SPI
interface,
allowing
parameterization
of
core
MVC
workflow
<p>Interface
that
must
be
implemented
for
each
handler
type
to
handle
a
request
This
interface
is
used
to
allow
the
DispatcherPortlet
to
be
indefinitely
extensible
The
DispatcherPortlet
accesses
all
installed
handlers
through
this
interface,
meaning
that
it
does
not
contain
code
specific
to
any
handler
type
<p>Note
that
a
handler
can
be
of
type
Object
This
is
to
enable
handlers
from
other
frameworks
to
be
integrated
with
this
framework
without
custom
coding
<p>This
interface
is
not
intended
for
application
developers
It
is
available
to
handlers
who
want
to
develop
their
own
web
workflow
<p>Note:
Implementations
can
implement
the
Ordered
interface
to
be
able
to
specify
a
sorting
order
and
thus
a
priority
for
getting
applied
by
DispatcherPortlet
Non-Ordered
instances
get
treated
as
lowest
priority
:end
:start
Given
a
handler
instance,
return
whether
or
not
this
HandlerAdapter
can
support
it
Typical
HandlerAdapters
will
base
the
decision
on
the
handler
type
HandlerAdapters
will
usually
only
support
one
handler
type
each
<p>A
typical
implementation:
<p>{@code
return
(handler
instanceof
MyHandler);

:end
:start
Use
the
given
handler
to
handle
this
action
request
The
workflow
that
is
required
may
vary
widely
:end
:start
Use
the
given
handler
to
handle
this
render
request
The
workflow
that
is
required
may
vary
widely
:end
:start
Use
the
given
handler
to
handle
this
resource
request
The
workflow
that
is
required
may
vary
widely
:end
:start
Use
the
given
handler
to
handle
this
event
request
The
workflow
that
is
required
may
vary
widely
:end
:start
Interface
to
be
implemented
by
objects
than
can
resolve
exceptions
thrown
during
handler
mapping
or
execution,
in
the
typical
case
to
error
views
Implementors
are
typically
registered
as
beans
in
the
application
context
<p>Error
views
are
analogous
to
the
error
page
JSPs,
but
can
be
used
with
any
kind
of
exception
including
any
checked
exception,
with
potentially
fine-granular
mappings
for
specific
handlers
:end
:start
Try
to
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
:end
:start
Try
to
resolve
the
given
exception
that
got
thrown
during
on
handler
execution,
returning
a
ModelAndView
that
represents
a
specific
error
page
if
appropriate
:end
:start
Handler
execution
chain,
consisting
of
handler
object
and
any
handler
interceptors
Returned
by
HandlerMapping's
HandlerMapping#getHandler
method
:end
:start
Create
a
new
HandlerExecutionChain
:end
:start
Create
a
new
HandlerExecutionChain
:end
:start
Return
the
handler
object
to
execute
:end
:start
Return
the
array
of
interceptors
to
apply
(in
the
given
order)
:end
:start
Delegates
to
the
handler's
toString()
:end
:start
Workflow
interface
that
allows
for
customized
handler
execution
chains
Applications
can
register
any
number
of
existing
or
custom
interceptors
for
certain
groups
of
handlers,
to
add
common
pre-processing
behavior
without
needing
to
modify
each
handler
implementation
<p>A
HandlerInterceptor
gets
called
before
the
appropriate
HandlerAdapter
triggers
the
execution
of
the
handler
itself
This
mechanism
can
be
used
for
a
large
field
of
preprocessing
aspects,
eg
for
authorization
checks,
or
common
handler
behavior
like
locale
or
theme
changes
Its
main
purpose
is
to
permit
the
factoring
out
of
otherwise
repetitive
handler
code
<p>Typically
an
interceptor
chain
is
defined
per
HandlerMapping
bean,
sharing
its
granularity
To
be
able
to
apply
a
certain
interceptor
chain
to
a
group
of
handlers,
one
needs
to
map
the
desired
handlers
via
one
HandlerMapping
bean
The
interceptors
themselves
are
defined
as
beans
in
the
application
context,
referenced
by
the
mapping
bean
definition
via
its
orgspringframeworkwebportlethandlerAbstractHandlerMapping#setInterceptors
"interceptors"
property
(in
XML:
a
&lt;list&gt;
of
&lt;ref&gt;
elements)
<p>A
HandlerInterceptor
is
basically
similar
to
a
Servlet
javaxservletFilter,
but
in
contrast
to
the
latter
it
allows
custom
pre-processing
with
the
option
to
prohibit
the
execution
of
the
handler
itself,
and
custom
post-processing
Filters
are
more
powerful;
for
example
they
allow
for
exchanging
the
request
and
response
objects
that
are
handed
down
the
chain
Note
that
a
filter
gets
configured
in
webxml,
a
HandlerInterceptor
in
the
application
context
<p>As
a
basic
guideline,
fine-grained
handler-related
pre-processing
tasks
are
candidates
for
HandlerInterceptor
implementations,
especially
factored-out
common
handler
code
and
authorization
checks
On
the
other
hand,
a
Filter
is
well-suited
for
request
content
and
view
content
handling,
like
multipart
forms
and
GZIP
compression
This
typically
shows
when
one
needs
to
map
the
filter
to
certain
content
types
(eg
images),
or
to
all
requests
<p>Be
aware
that
filters
cannot
be
applied
to
portlet
requests
(they
only
operate
on
servlet
requests),
so
for
portlet
requests
interceptors
are
essential
<p>If
we
assume
a
"sunny
day"
request
cycle
(ie
a
request
where
nothing
goes
wrong
and
all
is
well),
the
workflow
of
a
HandlerInterceptor
will
be
as
follows:
<p><b>Action
Request:</b><p>
<ol>
<li>{@code
DispatcherPortlet
maps
the
action
request
to
a
particular
handler
and
assembles
a
handler
execution
chain
consisting
of
the
handler
that
is
to
be
invoked
and
all
of
the
HandlerInterceptor
instances
that
apply
to
the
request</li>
<li>{@link
HandlerInterceptor#preHandleAction(javaxportletActionRequest,
javaxportletActionResponse,
Object)
preHandleAction()
is
called;
if
the
invocation
of
this
method
returns
true
then
this
workflow
continues</li>
<li>The
target
handler
handles
the
action
request
(via
HandlerAdapter#handleAction(javaxportletActionRequest,
javaxportletActionResponse,
Object)
HandlerAdapterhandleAction())</li>
<li>{@link
HandlerInterceptor#afterActionCompletion(javaxportletActionRequest,
javaxportletActionResponse,
Object,
Exception)
afterActionCompletion()
is
called</li>
</ol>
<p><b>Render
Request:</b><p>
<ol>
<li>{@code
DispatcherPortlet
maps
the
render
request
to
a
particular
handler
and
assembles
a
handler
execution
chain
consisting
of
the
handler
that
is
to
be
invoked
and
all
of
the
HandlerInterceptor
instances
that
apply
to
the
request</li>
<li>{@link
HandlerInterceptor#preHandleRender(javaxportletRenderRequest,
javaxportletRenderResponse,
Object)
preHandleRender()
is
called;
if
the
invocation
of
this
method
returns
true
then
this
workflow
continues</li>
<li>The
target
handler
handles
the
render
request
(via
HandlerAdapter#handleRender(javaxportletRenderRequest,
javaxportletRenderResponse,
Object)
HandlerAdapterhandleRender())</li>
<li>{@link
HandlerInterceptor#postHandleRender(javaxportletRenderRequest,
javaxportletRenderResponse,
Object,
ModelAndView)
postHandleRender()
is
called</li>
<li>If
the
HandlerAdapter
returned
a
ModelAndView,
then
DispatcherPortlet
renders
the
view
accordingly
<li>{@link
HandlerInterceptor#afterRenderCompletion(javaxportletRenderRequest,
javaxportletRenderResponse,
Object,
Exception)
afterRenderCompletion()
is
called</li>
</ol>
:end
:start
Intercept
the
execution
of
a
handler
in
the
action
phase
<p>Called
after
a
HandlerMapping
determines
an
appropriate
handler
object
to
handle
an
ActionRequest,
but
before
said
HandlerAdapter
actually
invokes
the
handler
<p>{@link
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
decide
to
abort
the
execution
chain,
typically
throwing
an
exception
or
writing
a
custom
response
:end
:start
Callback
after
completion
of
request
processing
in
the
action
phase,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allowing
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
#preHandleAction(javaxportletActionRequest,
javaxportletActionResponse,
Object)
method
has
successfully
completed
and
returned
true!
:end
:start
Intercept
the
execution
of
a
handler
in
the
render
phase
<p>Called
after
a
HandlerMapping
determines
an
appropriate
handler
object
to
handle
a
RenderRequest,
but
before
said
HandlerAdapter
actually
invokes
the
handler
<p>{@link
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
decide
to
abort
the
execution
chain,
typically
throwing
an
exception
or
writing
a
custom
response
:end
:start
Intercept
the
execution
of
a
handler
in
the
render
phase
<p>Called
after
a
HandlerAdapter
actually
invoked
the
handler,
but
before
the
DispatcherPortlet
renders
the
view
Can
thus
expose
additional
model
objects
to
the
view
via
the
given
ModelAndView
<p>{@code
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
post-process
an
execution,
getting
applied
in
inverse
order
of
the
execution
chain
:end
:start
Callback
after
completion
of
request
processing,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allowing
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
#preHandleRender(javaxportletRenderRequest,
javaxportletRenderResponse,
Object)
method
has
successfully
completed
and
returned
true!
:end
:start
Intercept
the
execution
of
a
handler
in
the
render
phase
<p>Called
after
a
HandlerMapping
determines
an
appropriate
handler
object
to
handle
a
RenderRequest,
but
before
said
HandlerAdapter
actually
invokes
the
handler
<p>{@link
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
decide
to
abort
the
execution
chain,
typically
throwing
an
exception
or
writing
a
custom
response
:end
:start
Intercept
the
execution
of
a
handler
in
the
render
phase
<p>Called
after
a
HandlerAdapter
actually
invoked
the
handler,
but
before
the
DispatcherPortlet
renders
the
view
Can
thus
expose
additional
model
objects
to
the
view
via
the
given
ModelAndView
<p>{@code
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
post-process
an
execution,
getting
applied
in
inverse
order
of
the
execution
chain
:end
:start
Callback
after
completion
of
request
processing,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allowing
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
#preHandleRender(javaxportletRenderRequest,
javaxportletRenderResponse,
Object)
method
has
successfully
completed
and
returned
true!
:end
:start
Intercept
the
execution
of
a
handler
in
the
action
phase
<p>Called
after
a
HandlerMapping
determines
an
appropriate
handler
object
to
handle
an
ActionRequest,
but
before
said
HandlerAdapter
actually
invokes
the
handler
<p>{@link
DispatcherPortlet
processes
a
handler
in
an
execution
chain,
consisting
of
any
number
of
interceptors,
with
the
handler
itself
at
the
end
With
this
method,
each
interceptor
can
decide
to
abort
the
execution
chain,
typically
throwing
an
exception
or
writing
a
custom
response
:end
:start
Callback
after
completion
of
request
processing
in
the
action
phase,
that
is,
after
rendering
the
view
Will
be
called
on
any
outcome
of
handler
execution,
thus
allowing
for
proper
resource
cleanup
<p>Note:
Will
only
be
called
if
this
interceptor's
#preHandleAction(javaxportletActionRequest,
javaxportletActionResponse,
Object)
method
has
successfully
completed
and
returned
true!
:end
:start
Interface
to
be
implemented
by
objects
that
define
a
mapping
between
requests
and
handler
objects
<p>This
class
can
be
implemented
by
application
developers,
although
this
is
not
necessary,
as
orgspringframeworkwebportlethandlerPortletModeHandlerMapping,
orgspringframeworkwebportlethandlerParameterHandlerMapping
and
orgspringframeworkwebportlethandlerPortletModeParameterHandlerMapping
are
included
in
the
framework
The
first
is
the
default
if
no
HandlerMapping
bean
is
registered
in
the
portlet
application
context
<p>HandlerMapping
implementations
can
support
mapped
interceptors
but
do
not
have
to
A
handler
will
always
be
wrapped
in
a
HandlerExecutionChain
instance,
optionally
accompanied
by
some
HandlerInterceptor
instances
The
DispatcherPortlet
will
first
call
each
HandlerInterceptor's
preHandle
method
in
the
given
order,
finally
invoking
the
handler
itself
if
all
preHandle
methods
have
returned
true
<p>The
ability
to
parameterize
this
mapping
is
a
powerful
and
unusual
capability
of
this
Portlet
MVC
framework
For
example,
it
is
possible
to
write
a
custom
mapping
based
on
session
state,
cookie
state
or
many
other
variables
No
other
MVC
framework
seems
to
be
equally
flexible
<p>Note:
Implementations
can
implement
the
orgspringframeworkcoreOrdered
interface
to
be
able
to
specify
a
sorting
order
and
thus
a
priority
for
getting
applied
by
DispatcherPortlet
Non-Ordered
instances
get
treated
as
lowest
priority
:end
:start
Return
a
handler
and
any
interceptors
for
this
request
The
choice
may
be
made
on
portlet
mode,
session
state,
or
any
factor
the
implementing
class
chooses
<p>The
returned
HandlerExecutionChain
contains
a
handler
Object,
rather
than
even
a
tag
interface,
so
that
handlers
are
not
constrained
in
any
way
For
example,
a
HandlerAdapter
could
be
written
to
allow
another
framework's
handler
objects
to
be
used
<p>Returns
null
if
no
match
was
found
This
is
not
an
error
The
DispatcherPortlet
will
query
all
registered
HandlerMapping
beans
to
find
a
match,
and
only
decide
there
is
an
error
if
none
can
find
a
handler
:end
:start
Holder
for
both
Model
and
View
in
the
web
MVC
framework
Note
that
these
are
entirely
distinct
This
class
merely
holds
both
to
make
it
possible
for
a
controller
to
return
both
model
and
view
in
a
single
return
value
<p>Represents
a
model
and
view
returned
by
a
handler,
to
be
resolved
by
a
DispatcherPortlet
The
view
can
take
the
form
of
a
String
view
name
which
will
need
to
be
resolved
by
a
ViewResolver
object;
alternatively
a
view
object
can
be
specified
directly
The
model
is
a
Map,
allowing
the
use
of
multiple
objects
keyed
by
name
:end
:start
Default
constructor
for
bean-style
usage:
populating
bean
properties
instead
of
passing
in
constructor
arguments
:end
:start
Convenient
constructor
when
there
is
no
model
data
to
expose
Can
also
be
used
in
conjunction
with
addObject
:end
:start
Convenient
constructor
when
there
is
no
model
data
to
expose
Can
also
be
used
in
conjunction
with
addObject
:end
:start
Create
a
new
ModelAndView
given
a
view
name
and
a
model
:end
:start
Create
a
new
ModelAndView
given
a
View
object
and
a
model
:end
:start
Convenient
constructor
to
take
a
single
model
object
:end
:start
Convenient
constructor
to
take
a
single
model
object
:end
:start
Set
a
view
name
for
this
ModelAndView,
to
be
resolved
by
the
DispatcherPortlet
via
a
ViewResolver
Will
override
any
pre-existing
view
name
or
View
:end
:start
Return
the
view
name
to
be
resolved
by
the
DispatcherPortlet
via
a
ViewResolver,
or
null
if
we
are
using
a
view
object
:end
:start
Set
a
View
object
for
this
ModelAndView
Will
override
any
pre-existing
view
name
or
View
<p>The
given
View
object
will
usually
be
a
Servlet
MVC
View
object
This
is
nevertheless
typed
as
Object
to
avoid
a
Servlet
API
dependency
in
the
Portlet
ModelAndView
class
:end
:start
Return
the
View
object,
or
null
if
we
are
using
a
view
name
to
be
resolved
by
the
DispatcherPortlet
via
a
ViewResolver
:end
:start
Indicate
whether
or
not
this
ModelAndView
has
a
view,
either
as
a
view
name
or
as
a
direct
view
instance
:end
:start
Return
whether
we
use
a
view
reference,
ie
true
if
the
view
has
been
specified
via
a
name
to
be
resolved
by
the
DispatcherPortlet
via
a
ViewResolver
:end
:start
Return
the
model
map
May
return
null
Called
by
DispatcherPortlet
for
evaluation
of
the
model
:end
:start
Return
the
underlying
ModelMap
instance
(never
null)
:end
:start
Return
the
model
map
Never
returns
null
To
be
called
by
application
code
for
modifying
the
model
:end
:start
Add
an
attribute
to
the
model
:end
:start
Add
an
attribute
to
the
model
using
parameter
name
generation
:end
:start
Add
all
attributes
contained
in
the
provided
Map
to
the
model
:end
:start
Clear
the
state
of
this
ModelAndView
object
The
object
will
be
empty
afterwards
<p>Can
be
used
to
suppress
rendering
of
a
given
ModelAndView
object
in
the
postHandleRender
method
of
a
HandlerInterceptor
:end
:start
Return
whether
this
ModelAndView
object
is
empty,
ie
whether
it
does
not
hold
any
view
and
does
not
contain
a
model
:end
:start
Return
whether
this
ModelAndView
object
is
empty
as
a
result
of
a
call
to
#clear
ie
whether
it
does
not
hold
any
view
and
does
not
contain
a
model
Returns
false
if
any
additional
state
was
added
to
the
instance
<strong>after</strong>
the
call
to
#clear
:end
:start
Return
diagnostic
information
about
this
model
and
view
:end
:start
Exception
to
be
thrown
on
error
conditions
that
should
forward
to
a
specific
view
with
a
specific
model
<p>Can
be
thrown
at
any
time
during
handler
processing
This
includes
any
template
methods
of
pre-built
controllers
For
example,
a
form
controller
might
abort
to
a
specific
error
page
if
certain
parameters
do
not
allow
to
proceed
with
the
normal
workflow
:end
:start
Create
new
ModelAndViewDefiningException
with
the
given
ModelAndView,
typically
representing
a
specific
error
page
:end
:start
Return
the
ModelAndView
that
this
exception
contains
for
forwarding
to
:end
:start
PortletMultipartResolver
implementation
for
<a
href="http://jakartaapacheorg/commons/fileupload">Jakarta
Commons
FileUpload</a>
12
or
above
<p>Provides
"maxUploadSize",
"maxInMemorySize"
and
"defaultEncoding"
settings
as
bean
properties
(inherited
from
CommonsFileUploadSupport)
See
corresponding
PortletFileUpload
/
DiskFileItemFactory
properties
("sizeMax",
"sizeThreshold",
"headerEncoding")
for
details
in
terms
of
defaults
and
accepted
values
<p>Saves
temporary
files
to
the
portlet
container's
temporary
directory
Needs
to
be
initialized
<i>either</i>
by
an
application
context
<i>or</i>
via
the
constructor
that
takes
a
PortletContext
(for
standalone
usage)
:end
:start
Constructor
for
use
as
bean
Determines
the
portlet
container's
temporary
directory
via
the
PortletContext
passed
in
as
through
the
PortletContextAware
interface
(typically
by
an
ApplicationContext)
:end
:start
Constructor
for
standalone
usage
Determines
the
portlet
container's
temporary
directory
via
the
given
PortletContext
:end
:start
Set
whether
to
resolve
the
multipart
request
lazily
at
the
time
of
file
or
parameter
access
<p>Default
is
"false",
resolving
the
multipart
elements
immediately,
throwing
corresponding
exceptions
at
the
time
of
the
#resolveMultipart
call
Switch
this
to
"true"
for
lazy
multipart
parsing,
throwing
parse
exceptions
once
the
application
attempts
to
obtain
multipart
files
or
parameters
:end
:start
Initialize
the
underlying
orgapachecommonsfileuploadportletPortletFileUpload
instance
Can
be
overridden
to
use
a
custom
subclass,
eg
for
testing
purposes
:end
:start
Parse
the
given
portlet
request,
resolving
its
multipart
elements
:end
:start
Determine
the
encoding
for
the
given
request
Can
be
overridden
in
subclasses
<p>The
default
implementation
checks
the
request
encoding,
falling
back
to
the
default
encoding
specified
for
this
resolver
:end
:start
Default
implementation
of
the
MultipartActionRequest
interface
Provides
management
of
pre-generated
parameter
values
:end
:start
Wrap
the
given
Portlet
ActionRequest
in
a
MultipartActionRequest
:end
:start
Wrap
the
given
Portlet
ActionRequest
in
a
MultipartActionRequest
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
list
of
MultipartFile
objects
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
MultipartFile
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
String
array
objects
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
multipart
parameter
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Set
a
Map
with
parameter
names
as
keys
and
content
type
Strings
as
values
To
be
invoked
by
subclasses
on
initialization
:end
:start
Obtain
the
multipart
parameter
content
type
Map
for
retrieval,
lazily
initializing
it
if
necessary
:end
:start
Lazily
initialize
the
multipart
request,
if
possible
Only
called
if
not
already
eagerly
initialized
:end
:start
Interface
which
provides
additional
methods
for
dealing
with
multipart
content
within
a
portlet
request,
allowing
to
access
uploaded
files
Implementations
also
need
to
override
the
standard
ActionRequest
methods
for
parameter
access,
making
multipart
parameters
available
<p>A
concrete
implementation
is
DefaultMultipartActionRequest
:end
:start
Portlet
version
of
Spring's
multipart
resolution
strategy
for
file
uploads
as
defined
in
<a
href="http://wwwietforg/rfc/rfc1867txt">RFC
1867</a>
<p>Implementations
are
typically
usable
both
within
any
application
context
and
standalone
<p>There
is
one
concrete
implementation
included
in
Spring:
<ul>
<li>{@link
orgspringframeworkwebmultipartcommonsCommonsMultipartResolver
for
Jakarta
Commons
FileUpload
</ul>
<p>There
is
no
default
resolver
implementation
used
for
Spring
orgspringframeworkwebportletDispatcherPortlet
DispatcherPortlets,
as
an
application
might
choose
to
parse
its
multipart
requests
itself
To
define
an
implementation,
create
a
bean
with
the
id
orgspringframeworkwebportletDispatcherPortlet#MULTIPART_RESOLVER_BEAN_NAME
"portletMultipartResolver"
in
a
DispatcherPortlet's
application
context
Such
a
resolver
gets
applied
to
all
requests
handled
by
that
DispatcherPortlet
<p>If
a
DispatcherPortlet
detects
a
multipart
request,
it
will
resolve
it
via
the
configured
orgspringframeworkwebmultipartMultipartResolver
and
pass
on
a
wrapped
Portlet
ActionRequest
orgspringframeworkwebportletmvcController
Controllers
can
then
cast
their
given
request
to
the
MultipartActionRequest
interface,
being
able
to
access
MultipartFiles
Note
that
this
cast
is
only
supported
in
case
of
an
actual
multipart
request
<pre
class="code">
public
void
handleActionRequest(ActionRequest
request,
ActionResponse
response)
MultipartActionRequest
multipartRequest
=
(MultipartActionRequest)
request;
MultipartFile
multipartFile
=
multipartRequestgetFile("image");

</pre>
Instead
of
direct
access,
command
or
form
controllers
can
register
a
orgspringframeworkwebmultipartsupportByteArrayMultipartFileEditor
or
orgspringframeworkwebmultipartsupportStringMultipartFileEditor
with
their
data
binder,
to
automatically
apply
multipart
content
to
command
bean
properties
<p>Note:
There
is
hardly
ever
a
need
to
access
the
MultipartResolver
itself
from
application
code
It
will
simply
do
its
work
behind
the
scenes,
making
MultipartActionRequests
available
to
controllers
:end
:start
Determine
if
the
given
request
contains
multipart
content
<p>Will
typically
check
for
content
type
"{@code
multipart/form-data",
but
the
actually
accepted
requests
might
depend
on
the
capabilities
of
the
resolver
implementation
:end
:start
Parse
the
given
portlet
request
into
multipart
files
and
parameters,
and
wrap
the
request
inside
a
MultipartActionRequest
object
that
provides
access
to
file
descriptors
and
makes
contained
parameters
accessible
via
the
standard
PortletRequest
methods
:end
:start
Cleanup
any
resources
used
for
the
multipart
handling,
such
as
storage
for
any
uploaded
file(s)
:end
:start
Convenient
superclass
for
controller
implementations,
using
the
Template
Method
design
pattern
<p>As
stated
in
the
Controller
Controller
interface,
a
lot
of
functionality
is
already
provided
by
certain
abstract
base
controllers
The
AbstractController
is
one
of
the
most
important
abstract
base
controller
providing
basic
features
such
controlling
if
a
session
is
required
and
render
caching
<p><b><a
name="workflow">Workflow
(<a
href="Controllerhtml#workflow">and
that
defined
by
interface</a>):</b><br>
<ol>
<li>If
this
is
an
action
request,
#handleActionRequest
handleActionRequest
will
be
called
by
the
DispatcherPortlet
once
to
perform
the
action
defined
by
this
controller</li>
<li>If
a
session
is
required,
try
to
get
it
(PortletException
if
not
found)</li>
<li>Call
method
#handleActionRequestInternal
handleActionRequestInternal,
(optionally
synchronizing
around
the
call
on
the
PortletSession),
which
should
be
overridden
by
extending
classes
to
provide
actual
functionality
to
perform
the
desired
action
of
the
controller
This
will
be
executed
only
once</li>
<li>For
a
straight
render
request,
or
the
render
phase
of
an
action
request
(assuming
the
same
controller
is
called
for
the
render
phase
--
see
tip
below),
#handleRenderRequest
handleRenderRequest
will
be
called
by
the
DispatcherPortlet
repeatedly
to
render
the
display
defined
by
this
controller</li>
<li>If
a
session
is
required,
try
to
get
it
(PortletException
if
none
found)</li>
<li>It
will
control
caching
as
defined
by
the
cacheSeconds
property</li>
<li>Call
method
#handleRenderRequestInternal
handleRenderRequestInternal,
(optionally
synchronizing
around
the
call
on
the
PortletSession),
which
should
be
overridden
by
extending
classes
to
provide
actual
functionality
to
return
orgspringframeworkwebportletModelAndView
ModelAndView
objects
This
will
be
executed
repeatedly
as
the
portal
updates
the
current
displayed
page</li>
</ol>
<p><b><a
name="config">Exposed
configuration
properties</a>
(<a
href="Controllerhtml#config">and
those
defined
by
interface</a>):</b><br>
<table
border="1">
<tr>
<td><b>name</b></th>
<td><b>default</b></td>
<td><b>description</b></td>
</tr>
<tr>
<td>requireSession</td>
<td>false</td>
<td>whether
a
session
should
be
required
for
requests
to
be
able
to
be
handled
by
this
controller
This
ensures,
derived
controller
can
-
without
fear
of
Nullpointers
-
call
requestgetSession()
to
retrieve
a
session
If
no
session
can
be
found
while
processing
the
request,
a
PortletException
will
be
thrown</td>
</tr>
<tr>
<td>synchronizeOnSession</td>
<td>false</td>
<td>whether
the
calls
to
handleRenderRequestInternal
and
handleRenderRequestInternal
should
be
synchronized
around
the
PortletSession,
to
serialize
invocations
from
the
same
client
No
effect
if
there
is
no
PortletSession
</td>
</tr>
<tr>
<td>cacheSeconds</td>
<td>-1</td>
<td>indicates
the
amount
of
seconds
to
specify
caching
is
allowed
in
the
render
response
generatedby
this
request
0
(zero)
will
indicate
no
caching
is
allowed
at
all,
-1
(the
default)
will
not
override
the
portlet
configuration
and
any
positive
number
will
cause
the
render
response
to
declare
the
amount
indicated
as
seconds
to
cache
the
content</td>
</tr>
<tr>
<td>renderWhenMinimized</td>
<td>false</td>
<td>whether
should
be
rendered
when
the
portlet
is
in
a
minimized
state
--
will
return
null
for
the
ModelandView
when
the
portlet
is
minimized
and
this
is
false</td>
</tr>
</table>
<p><b>TIP:</b>
The
controller
mapping
will
be
run
twice
by
the
PortletDispatcher
for
action
requests
--
once
for
the
action
phase
and
again
for
the
render
phase
You
can
reach
the
render
phase
of
a
different
controller
by
simply
changing
the
values
for
the
criteria
your
mapping
is
using,
such
as
portlet
mode
or
a
request
parameter,
during
the
action
phase
of
your
controller
This
is
very
handy
since
redirects
within
the
portlet
are
apparently
impossible
Before
doing
this,
it
is
usually
wise
to
call
clearAllRenderParameters
and
then
explicitly
set
all
the
parameters
that
you
want
the
new
controller
to
see
This
avoids
unexpected
parameters
from
being
passed
to
the
render
phase
of
the
second
controller,
such
as
the
parameter
indicating
a
form
submit
ocurred
in
an
AbstractFormController
<p>Thanks
to
Rainer
Schmitz
and
Nick
Lothian
for
their
suggestions!
:end
:start
Set
if
controller
execution
should
be
synchronized
on
the
session,
to
serialize
parallel
invocations
from
the
same
client
<p>More
specifically,
the
execution
of
the
handleActionRequestInternal
method
will
get
synchronized
if
this
flag
is
"true"
The
best
available
session
mutex
will
be
used
for
the
synchronization;
ideally,
this
will
be
a
mutex
exposed
by
HttpSessionMutexListener
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
PortletSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Return
whether
controller
execution
should
be
synchronized
on
the
session
:end
:start
Set
if
the
controller
should
render
an
view
when
the
portlet
is
in
a
minimized
window
The
default
is
false
:end
:start
Return
whether
controller
will
render
when
portlet
is
minimized
:end
:start
Subclasses
are
meant
to
override
this
method
if
the
controller
is
expected
to
handle
action
requests
The
contract
is
the
same
as
for
handleActionRequest
<p>The
default
implementation
throws
a
PortletException
:end
:start
Subclasses
are
meant
to
override
this
method
if
the
controller
is
expected
to
handle
render
requests
The
contract
is
the
same
as
for
handleRenderRequest
<p>The
default
implementation
throws
a
PortletException
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerAdapter
interface
that
maps
handler
methods
based
on
portlet
modes,
action/render
phases
and
request
parameters
expressed
through
the
RequestMapping
annotation
<p>Supports
request
parameter
binding
through
the
RequestParam
annotation
Also
supports
the
ModelAttribute
annotation
for
exposing
model
attribute
values
to
the
view,
as
well
as
InitBinder
for
binder
initialization
methods
and
SessionAttributes
for
automatic
session
management
of
specific
attributes
<p>This
adapter
can
be
customized
through
various
bean
properties
A
common
use
case
is
to
apply
shared
binder
initialization
logic
through
a
custom
#setWebBindingInitializer
WebBindingInitializer
:end
:start
Specify
a
WebBindingInitializer
which
will
apply
pre-configured
configuration
to
every
DataBinder
that
this
controller
uses
:end
:start
Specify
the
strategy
to
store
session
attributes
with
<p>Default
is
orgspringframeworkwebbindsupportDefaultSessionAttributeStore,
storing
session
attributes
in
the
PortletSession,
using
the
same
attribute
name
as
in
the
model
:end
:start
Cache
content
produced
by
@SessionAttributes
annotated
handlers
for
the
given
number
of
seconds
Default
is
0,
preventing
caching
completely
<p>In
contrast
to
the
"cacheSeconds"
property
which
will
apply
to
all
general
handlers
(but
not
to
@SessionAttributes
annotated
handlers),
this
setting
will
apply
to
@SessionAttributes
annotated
handlers
only
:end
:start
Set
if
controller
execution
should
be
synchronized
on
the
session,
to
serialize
parallel
invocations
from
the
same
client
<p>More
specifically,
the
execution
of
each
handler
method
will
get
synchronized
if
this
flag
is
"true"
The
best
available
session
mutex
will
be
used
for
the
synchronization;
ideally,
this
will
be
a
mutex
exposed
by
HttpSessionMutexListener
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
PortletSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Set
the
ParameterNameDiscoverer
to
use
for
resolving
method
parameter
names
if
needed
(eg
for
default
attribute
names)
<p>Default
is
a
orgspringframeworkcoreDefaultParameterNameDiscoverer
:end
:start
Set
a
custom
WebArgumentResolver
to
use
for
special
method
parameter
types
Such
a
custom
WebArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
one
or
more
custom
WebArgumentResolvers
to
use
for
special
method
parameter
types
Any
such
custom
WebArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
a
custom
ModelAndViewResolvers
to
use
for
special
method
return
types
Such
a
custom
ModelAndViewResolver
will
kick
in
first,
having
a
chance
to
resolve
an
return
value
before
the
standard
ModelAndView
handling
kicks
in
:end
:start
Set
one
or
more
custom
ModelAndViewResolvers
to
use
for
special
method
return
types
Any
such
custom
ModelAndViewResolver
will
kick
in
first,
having
a
chance
to
resolve
an
return
value
before
the
standard
ModelAndView
handling
kicks
in
:end
:start
Specify
the
order
value
for
this
HandlerAdapter
bean
<p>Default
value
is
IntegerMAX_VALUE,
meaning
that
it's
non-ordered
:end
:start
Template
method
for
creating
a
new
PortletRequestDataBinder
instance
<p>The
default
implementation
creates
a
standard
PortletRequestDataBinder
This
can
be
overridden
for
custom
PortletRequestDataBinder
subclasses
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerExceptionResolver
interface
that
handles
exceptions
through
the
ExceptionHandler
annotation
<p>This
exception
resolver
is
enabled
by
default
in
the
orgspringframeworkwebportletDispatcherPortlet
:end
:start
Set
a
custom
ArgumentResolvers
to
use
for
special
method
parameter
types
<p>Such
a
custom
ArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Set
one
or
more
custom
ArgumentResolvers
to
use
for
special
method
parameter
types
<p>Any
such
custom
ArgumentResolver
will
kick
in
first,
having
a
chance
to
resolve
an
argument
value
before
the
standard
argument
handling
kicks
in
:end
:start
Returns
all
the
exception
classes
handled
by
the
given
method
<p>Default
implementation
looks
for
exceptions
in
the
ExceptionHandler#value()
annotation,
or
-
if
that
annotation
element
is
empty
-
any
exceptions
listed
in
the
method
parameters
if
the
method
is
annotated
with
@ExceptionHandler
:end
:start
Resolves
common
method
arguments
Delegates
to
registered
#setCustomArgumentResolver
argumentResolvers
first,
then
checking
#resolveStandardArgument
:end
:start
Resolves
standard
method
arguments
The
default
implementation
handles
NativeWebRequest,
ServletRequest,
ServletResponse,
HttpSession,
Principal,
Locale,
request
InputStream,
request
Reader,
response
OutputStream,
response
Writer,
and
the
given
thrownException
:end
:start
Implementation
of
the
orgspringframeworkwebportletHandlerMapping
interface
that
maps
handlers
based
on
portlet
modes
expressed
through
the
RequestMapping
annotation
at
the
type
or
method
level
<p>Registered
by
default
in
orgspringframeworkwebportletDispatcherPortlet
<b>NOTE:</b>
If
you
define
custom
HandlerMapping
beans
in
your
DispatcherPortlet
context,
you
need
to
add
a
DefaultAnnotationHandlerMapping
bean
explicitly,
since
custom
HandlerMapping
beans
replace
the
default
mapping
strategies
Defining
a
DefaultAnnotationHandlerMapping
also
allows
for
registering
custom
interceptors:
<pre
class="code">
&lt;bean
class="orgspringframeworkwebportletmvcannotationDefaultAnnotationHandlerMapping"&gt;
&lt;property
name="interceptors"&gt;

&lt;/property&gt;
&lt;/bean&gt;</pre>
Annotated
controllers
are
usually
marked
with
the
Controller
stereotype
at
the
type
level
This
is
not
strictly
necessary
when
RequestMapping
is
applied
at
the
type
level
(since
such
a
handler
usually
implements
the
orgspringframeworkwebportletmvcController
interface)
However,
Controller
is
required
for
detecting
RequestMapping
annotations
at
the
method
level
<p><b>NOTE:</b>
Method-level
mappings
are
only
allowed
to
narrow
the
mapping
expressed
at
the
class
level
(if
any)
A
portlet
mode
in
combination
with
specific
parameter
conditions
needs
to
uniquely
map
onto
one
specific
handler
bean,
not
spread
across
multiple
handler
beans
It
is
strongly
recommended
to
co-locate
related
handler
methods
into
the
same
bean
<p>The
AnnotationMethodHandlerAdapter
is
responsible
for
processing
annotated
handler
methods,
as
mapped
by
this
HandlerMapping
For
RequestMapping
at
the
type
level,
specific
HandlerAdapters
such
as
orgspringframeworkwebportletmvcSimpleControllerHandlerAdapter
apply
:end
:start
Calls
the
registerHandlers
method
in
addition
to
the
superclass's
initialization
:end
:start
Register
all
handlers
specified
in
the
Portlet
mode
map
for
the
corresponding
modes
:end
:start
Derive
portlet
mode
mappings
from
the
handler's
method-level
mappings
:end
:start
Uses
the
current
PortletMode
as
lookup
key
:end
:start
Base
portlet
Controller
interface,
representing
a
component
that
receives
RenderRequest/RenderResponse
and
ActionRequest/ActionResponse
like
a
Portlet
but
is
able
to
participate
in
an
MVC
workflow
<p>Any
implementation
of
the
portlet
Controller
interface
should
be
a
<i>reusable,
threadsafe</i>
class,
capable
of
handling
multiple
portlet
requests
throughout
the
lifecycle
of
an
application
To
be
able
to
configure
Controller(s)
in
an
easy
way,
Controllers
are
usually
JavaBeans</p>
<p><b><a
name="workflow">Workflow</a>:</b></p>
<p>After
the
DispatcherPortlet
has
received
a
request
and
has
done
its
work
to
resolve
locales,
themes
and
suchlike,
it
tries
to
resolve
a
Controller
to
handle
that
request,
using
a
orgspringframeworkwebportletHandlerMapping
HandlerMapping
When
a
Controller
has
been
found,
the
#handleRenderRequest
handleRenderRequest
or
#handleActionRequest
handleActionRequest
method
will
be
invoked,
which
is
responsible
for
handling
the
actual
request
and
-
if
applicable
-
returning
an
appropriate
ModelAndView
So
actually,
these
method
are
the
main
entrypoint
for
the
orgspringframeworkwebportletDispatcherPortlet
DispatcherPortlet
which
delegates
requests
to
controllers</p>
<p>So
basically
any
<i>direct</i>
implementation
of
the
Controller
interface
just
handles
RenderRequests/ActionRequests
and
should
return
a
ModelAndView,
to
be
further
used
by
the
DispatcherPortlet
Any
additional
functionality
such
as
optional
validation,
form
handling,
etc
should
be
obtained
through
extending
one
of
the
abstract
controller
classes
mentioned
above</p>
:end
:start
Process
the
action
request
There
is
nothing
to
return
:end
:start
Process
the
render
request
and
return
a
ModelAndView
object
which
the
DispatcherPortlet
will
render
A
null
return
value
is
not
an
error:
It
indicates
that
this
object
completed
request
processing
itself,
thus
there
is
no
ModelAndView
to
render
:end
:start
Extension
of
the
Portlet
Controller
interface
that
allows
for
handling
Portlet
20
event
requests
as
well
Can
also
be
implemented
by
AbstractController
subclasses
:end
:start
Process
the
event
request
There
is
nothing
to
return
:end
:start
<p>Trivial
controller
that
always
returns
a
named
view
The
view
can
be
configured
using
an
exposed
configuration
property
This
controller
offers
an
alternative
to
sending
a
request
straight
to
a
view
such
as
a
JSP
The
advantage
here
is
that
the
client
is
not
exposed
to
the
concrete
view
technology
but
rather
just
to
the
controller
URL;
the
concrete
view
will
be
determined
by
the
ViewResolver</p>
<p><b><a
name="workflow">Workflow
(<a
href="AbstractControllerhtml#workflow">and
that
defined
by
superclass</a>):</b><br>
<ol>
<li>Render
request
is
received
by
the
controller</li>
<li>call
to
#handleRenderRequestInternal
handleRenderRequestInternal
which
just
returns
the
view,
named
by
the
configuration
property
viewName
Nothing
more,
nothing
less</li>
</ol>
</p>
<p>This
controller
does
not
handle
action
requests</p>
<p><b><a
name="config">Exposed
configuration
properties</a>
(<a
href="AbstractControllerhtml#config">and
those
defined
by
superclass</a>):</b><br>
<table
border="1">
<tr>
<td><b>name</b></td>
<td><b>default</b></td>
<td><b>description</b></td>
</tr>
<tr>
<td>viewName</td>
<td><i>null</i></td>
<td>the
name
of
the
view
the
viewResolver
will
use
to
forward
to
(if
this
property
is
not
set,
an
exception
will
be
thrown
during
initialization)</td>
</tr>
</table>
</p>
:end
:start
Set
the
name
of
the
view
to
delegate
to
:end
:start
Return
the
name
of
the
view
to
delegate
to
:end
:start
Return
a
ModelAndView
object
with
the
specified
view
name
:end
:start
<p>Trivial
controller
that
transforms
the
PortletMode
to
a
view
name
The
advantage
here
is
that
the
client
is
not
exposed
to
the
concrete
view
technology
but
rather
just
to
the
controller
URL;
the
concrete
view
will
be
determined
by
the
ViewResolver</p>
<p>Example:
PortletModeVIEW
->
"view"</p>
<p>This
controller
does
not
handle
action
requests</p>
:end
:start
Controller
implementation
that
wraps
a
portlet
instance
which
it
manages
internally
Such
a
wrapped
portlet
is
not
known
outside
of
this
controller;
its
entire
lifecycle
is
covered
here
<p>Useful
to
invoke
an
existing
portlet
via
Spring's
dispatching
infrastructure,
for
example
to
apply
Spring
orgspringframeworkwebportletHandlerInterceptor
HandlerInterceptors
to
its
requests
<p><b>Example:</b>
<pre
class="code">&lt;bean
id="wrappingController"
class="orgspringframeworkwebportletmvcPortletWrappingController"&gt;
&lt;property
name="portletClass"&gt;
&lt;value&gt;orgspringframeworkwebportletsampleHelloWorldPortlet&lt;/value&gt;
&lt;/property&gt;
&lt;property
name="portletName"&gt;
&lt;value&gt;hello-world&lt;/value&gt;
&lt;/property&gt;
&lt;property
name="initParameters"&gt;
&lt;props&gt;
&lt;prop
key="config"&gt;/WEB-INF/hello-world-portlet-configxml&lt;/prop&gt;
&lt;/props&gt;
&lt;/property&gt;
&lt;/bean&gt;</pre>
:end
:start
Set
whether
to
use
the
shared
PortletConfig
object
passed
in
through
setPortletConfig,
if
available
<p>Default
is
"true"
Turn
this
setting
to
"false"
to
pass
in
a
mock
PortletConfig
object
with
the
bean
name
as
portlet
name,
holding
the
current
PortletContext
:end
:start
Set
the
class
of
the
Portlet
to
wrap
Needs
to
implement
javaxportletPortlet
:end
:start
Set
the
name
of
the
Portlet
to
wrap
Default
is
the
bean
name
of
this
controller
:end
:start
Specify
init
parameters
for
the
portlet
to
wrap,
as
name-value
pairs
:end
:start
Extension
of
the
Portlet
Controller
interface
that
allows
for
handling
Portlet
20
resource
requests
as
well
Can
also
be
implemented
by
AbstractController
subclasses
:end
:start
Process
the
resource
request
and
return
a
ModelAndView
object
which
the
DispatcherPortlet
will
render
A
null
return
value
is
not
an
error:
It
indicates
that
this
object
completed
request
processing
itself,
thus
there
is
no
ModelAndView
to
render
:end
:start
Adapter
to
use
the
Controller
workflow
interface
with
the
generic
DispatcherPortlet
<p>This
is
an
SPI
class,
not
used
directly
by
application
code
:end
:start
Exception
to
be
thrown
if
DispatcherPortlet
is
unable
to
determine
a
corresponding
handler
for
an
incoming
portlet
request
:end
:start
Constructor
for
NoHandlerFoundException
:end
:start
Constructor
for
NoHandlerFoundException
:end
:start
Miscellaneous
utilities
for
portlet
applications
Used
by
various
framework
classes
:end
:start
Return
the
temporary
directory
for
the
current
web
application,
as
provided
by
the
portlet
container
:end
:start
Return
the
real
path
of
the
given
path
within
the
web
application,
as
provided
by
the
portlet
container
<p>Prepends
a
slash
if
the
path
does
not
already
start
with
a
slash,
and
throws
a
javaioFileNotFoundException
if
the
path
cannot
be
resolved
to
a
resource
(in
contrast
to
javaxportletPortletContext#getRealPath
PortletContext's
getRealPath,
which
simply
returns
null)
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
under
the
javaxportletPortletSession#PORTLET_SCOPE
Returns
null
if
there
is
no
session
or
if
the
session
has
no
such
attribute
in
that
scope
Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
in
the
given
scope
Returns
null
if
there
is
no
session
or
if
the
session
has
no
such
attribute
in
that
scope
Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
under
the
javaxportletPortletSession#PORTLET_SCOPE
Throws
an
exception
if
there
is
no
session
or
if
the
session
has
no
such
attribute
in
that
scope
<p>Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Check
the
given
request
for
a
session
attribute
of
the
given
name
in
the
given
scope
Throws
an
exception
if
there
is
no
session
or
if
the
session
has
no
such
attribute
in
that
scope
<p>Does
not
create
a
new
session
if
none
has
existed
before!
:end
:start
Set
the
session
attribute
with
the
given
name
to
the
given
value
under
the
javaxportletPortletSession#PORTLET_SCOPE
Removes
the
session
attribute
if
value
is
null,
if
a
session
existed
at
all
Does
not
create
a
new
session
if
not
necessary!
:end
:start
Set
the
session
attribute
with
the
given
name
to
the
given
value
in
the
given
scope
Removes
the
session
attribute
if
value
is
null,
if
a
session
existed
at
all
Does
not
create
a
new
session
if
not
necessary!
:end
:start
Get
the
specified
session
attribute
under
the
javaxportletPortletSession#PORTLET_SCOPE,
creating
and
setting
a
new
attribute
if
no
existing
found
The
given
class
needs
to
have
a
public
no-arg
constructor
Useful
for
on-demand
state
objects
in
a
web
tier,
like
shopping
carts
:end
:start
Get
the
specified
session
attribute
in
the
given
scope,
creating
and
setting
a
new
attribute
if
no
existing
found
The
given
class
needs
to
have
a
public
no-arg
constructor
Useful
for
on-demand
state
objects
in
a
web
tier,
like
shopping
carts
:end
:start
Return
the
best
available
mutex
for
the
given
session:
that
is,
an
object
to
synchronize
on
for
the
given
session
<p>Returns
the
session
mutex
attribute
if
available;
usually,
this
means
that
the
orgspringframeworkwebutilHttpSessionMutexListener
needs
to
be
defined
in
webxml
Falls
back
to
the
javaxportletPortletSession
itself
if
no
mutex
attribute
found
<p>The
session
mutex
is
guaranteed
to
be
the
same
object
during
the
entire
lifetime
of
the
session,
available
under
the
key
defined
by
the
orgspringframeworkwebutilWebUtils#SESSION_MUTEX_ATTRIBUTE
constant
It
serves
as
a
safe
reference
to
synchronize
on
for
locking
on
the
current
session
<p>In
many
cases,
the
javaxportletPortletSession
reference
itself
is
a
safe
mutex
as
well,
since
it
will
always
be
the
same
object
reference
for
the
same
active
logical
session
However,
this
is
not
guaranteed
across
different
servlet
containers;
the
only
100%
safe
way
is
a
session
mutex
:end
:start
Return
an
appropriate
request
object
of
the
specified
type,
if
available,
unwrapping
the
given
request
as
far
as
necessary
:end
:start
Return
an
appropriate
response
object
of
the
specified
type,
if
available,
unwrapping
the
given
response
as
far
as
necessary
:end
:start
Expose
the
given
Map
as
request
attributes,
using
the
keys
as
attribute
names
and
the
values
as
corresponding
attribute
values
Keys
must
be
Strings
:end
:start
Retrieve
the
first
cookie
with
the
given
name
Note
that
multiple
cookies
can
have
the
same
name
but
different
paths
or
domains
:end
:start
Check
if
a
specific
input
type="submit"
parameter
was
sent
in
the
request,
either
via
a
button
(directly
with
name)
or
via
an
image
(name
+
"x"
or
name
+
"y")
:end
:start
Return
the
full
name
of
a
specific
input
type="submit"
parameter
if
it
was
sent
in
the
request,
either
via
a
button
(directly
with
name)
or
via
an
image
(name
+
"x"
or
name
+
"y")
:end
:start
Return
a
map
containing
all
parameters
with
the
given
prefix
Maps
single
values
to
String
and
multiple
values
to
String
array
<p>For
example,
with
a
prefix
of
"spring_",
"spring_param1"
and
"spring_param2"
result
in
a
Map
with
"param1"
and
"param2"
as
keys
<p>Similar
to
portlet
javaxportletPortletRequest#getParameterMap(),
but
more
flexible
:end
:start
Return
the
target
page
specified
in
the
request
:end
:start
Pass
all
the
action
request
parameters
to
the
render
phase
by
putting
them
into
the
action
response
object
This
may
not
be
called
when
the
action
will
call
javaxportletActionResponse#sendRedirect
sendRedirect
:end
:start
Clear
all
the
render
parameters
from
the
javaxportletActionResponse
This
may
not
be
called
when
the
action
will
call
ActionResponse#sendRedirect
sendRedirect
:end
:start
Serve
the
resource
as
specified
in
the
given
request
to
the
given
response,
using
the
PortletContext's
request
dispatcher
<p>This
is
roughly
equivalent
to
Portlet
20
GenericPortlet
:end
:start
A
stub
ApplicationListener
:end
:start
Simple
bean
to
test
ApplicationContext
lifecycle
methods
for
beans
:end
:start
Mock
implementation
of
the
javaxportletActionRequest
interface
:end
:start
Create
a
new
MockActionRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockActionRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockActionRequest
with
a
default
MockPortalContext
and
a
default
MockPortletContext
:end
:start
Create
a
new
MockActionRequest
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockActionRequest
:end
:start
Mock
implementation
of
the
javaxportletActionResponse
interface
:end
:start
Create
a
new
MockActionResponse
with
a
default
MockPortalContext
:end
:start
Create
a
new
MockActionResponse
:end
:start
Mock
implementation
of
the
javaxportletBaseURL
interface
:end
:start
Mock
implementation
of
the
javaxportletCacheControl
interface
:end
:start
Mock
implementation
of
the
javaxportletClientDataRequest
interface
:end
:start
Mock
implementation
of
the
javaxportletEvent
interface
:end
:start
Mock
implementation
of
the
javaxportletEventRequest
interface
:end
:start
Mock
implementation
of
the
javaxportletEventResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletMimeResponse
interface
:end
:start
Mock
implementation
of
the
orgspringframeworkwebportletmultipartMultipartActionRequest
interface
<p>Useful
for
testing
application
controllers
that
access
multipart
uploads
The
orgspringframeworkmockwebMockMultipartFile
can
be
used
to
populate
these
mock
requests
with
files
:end
:start
Mock
implementation
of
the
javaxportletPortalContext
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletConfig
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletContext
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletPreferences
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletRequest
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletRequestDispatcher
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletSession
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletURL
interface
:end
:start
Mock
implementation
of
the
javaxportletRenderRequest
interface
:end
:start
Mock
implementation
of
the
javaxportletRenderResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletResourceRequest
interface
:end
:start
Mock
implementation
of
the
javaxportletResourceResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletResourceURL
interface
:end
:start
Mock
implementation
of
the
javaxportletStateAwareResponse
interface
:end
:start
Mock
implementation
of
the
javaxportletPortletContext
interface,
wrapping
an
underlying
javaxservletServletContext
:end
:start
Abstract
implementation
of
the
Tiles3
orgapachetilespreparerPreparerFactory
interface,
obtaining
the
current
Spring
WebApplicationContext
and
delegating
to
#getPreparer(String,
orgspringframeworkwebcontextWebApplicationContext)
:end
:start
Obtain
a
preparer
instance
for
the
given
preparer
name,
based
on
the
given
Spring
WebApplicationContext
:end
:start
Tiles3
orgapachetilespreparerPreparerFactory
implementation
that
expects
preparer
class
names
and
builds
preparer
instances
for
those,
creating
them
through
the
Spring
ApplicationContext
in
order
to
apply
Spring
container
callbacks
and
configured
Spring
BeanPostProcessors
:end
:start
Tiles3
orgapachetilespreparerPreparerFactory
implementation
that
expects
preparer
bean
names
and
obtains
preparer
beans
from
the
Spring
ApplicationContext
The
full
bean
creation
process
will
be
in
the
control
of
the
Spring
application
context
in
this
case,
allowing
for
the
use
of
scoped
beans
etc
:end
:start
Tiles
LocaleResolver
adapter
that
delegates
to
a
Spring
orgspringframeworkwebservletLocaleResolver,
exposing
the
DispatcherServlet-managed
locale
<p>This
adapter
gets
automatically
registered
by
TilesConfigurer
:end
:start
Spring-specific
subclass
of
the
Tiles
ServletApplicationContext
:end
:start
Helper
class
to
configure
Tiles
3x
for
the
Spring
Framework
See
<a
href="http://tilesapacheorg">http://tilesapacheorg</a>
for
more
information
about
Tiles,
which
basically
is
a
templating
mechanism
for
web
applications
using
JSPs
and
other
template
engines
<p>The
TilesConfigurer
simply
configures
a
TilesContainer
using
a
set
of
files
containing
definitions,
to
be
accessed
by
TilesView
instances
This
is
a
Spring-based
alternative
(for
usage
in
Spring
configuration)
to
the
Tiles-provided
ServletContextListener
(eg
orgapachetilesextrascompleteCompleteAutoloadTilesListener
for
usage
in
webxml
<p>TilesViews
can
be
managed
by
any
orgspringframeworkwebservletViewResolver
For
simple
convention-based
view
resolution,
consider
using
TilesViewResolver
<p>A
typical
TilesConfigurer
bean
definition
looks
as
follows:
<pre
class="code">
&lt;bean
id="tilesConfigurer"
class="orgspringframeworkwebservletviewtiles3TilesConfigurer">
&lt;property
name="definitions">
&lt;list>
&lt;value>/WEB-INF/defs/generalxml&lt;/value>
&lt;value>/WEB-INF/defs/widgetsxml&lt;/value>
&lt;value>/WEB-INF/defs/administratorxml&lt;/value>
&lt;value>/WEB-INF/defs/customerxml&lt;/value>
&lt;value>/WEB-INF/defs/templatesxml&lt;/value>
&lt;/list>
&lt;/property>
&lt;/bean>
</pre>
The
values
in
the
list
are
the
actual
Tiles
XML
files
containing
the
definitions
If
the
list
is
not
specified,
the
default
is
"/WEB-INF/tilesxml"
<p>Note
that
in
Tiles
3
an
underscore
in
the
name
of
a
file
containing
Tiles
definitions
is
used
to
indicate
locale
information,
for
example:
<pre
class="code">
&lt;bean
id="tilesConfigurer"
class="orgspringframeworkwebservletviewtiles3TilesConfigurer">
&lt;property
name="definitions">
&lt;list>
&lt;value>/WEB-INF/defs/tilesxml&lt;/value>
&lt;value>/WEB-INF/defs/tiles_fr_FRxml&lt;/value>
&lt;/list>
&lt;/property>
&lt;/bean>
</pre>
:end
:start
Configure
Tiles
using
a
custom
TilesInitializer,
typically
specified
as
an
inner
bean
<p>Default
is
a
variant
of
orgapachetilesstartupDefaultTilesInitializer,
respecting
the
"definitions",
"preparerFactoryClass"
etc
properties
on
this
configurer
<p><b>NOTE:
Specifying
a
custom
TilesInitializer
effectively
disables
all
other
bean
properties
on
this
configurer</b>
The
entire
initialization
procedure
is
then
left
to
the
TilesInitializer
as
specified
:end
:start
Specify
whether
to
apply
Tiles
30's
"complete-autoload"
configuration
<p>See
orgapachetilesextrascompleteCompleteAutoloadTilesContainerFactory
for
details
on
the
complete-autoload
mode
<p><b>NOTE:
Specifying
the
complete-autoload
mode
effectively
disables
all
other
bean
properties
on
this
configurer</b>
The
entire
initialization
procedure
is
then
left
to
orgapachetilesextrascompleteCompleteAutoloadTilesInitializer
:end
:start
Set
the
Tiles
definitions,
ie
the
list
of
files
containing
the
definitions
Default
is
"/WEB-INF/tilesxml"
:end
:start
Set
whether
to
check
Tiles
definition
files
for
a
refresh
at
runtime
Default
is
"false"
:end
:start
Set
whether
to
validate
the
Tiles
XML
definitions
Default
is
"true"
:end
:start
Set
the
orgapachetilesdefinitionDefinitionsFactory
implementation
to
use
Default
is
orgapachetilesdefinitionUnresolvingLocaleDefinitionsFactory,
operating
on
definition
resource
URLs
<p>Specify
a
custom
DefinitionsFactory,
eg
a
UrlDefinitionsFactory
subclass,
to
customize
the
creation
of
Tiles
Definition
objects
Note
that
such
a
DefinitionsFactory
has
to
be
able
to
handle
javanetURL
source
objects,
unless
you
configure
a
different
TilesContainerFactory
:end
:start
Set
the
orgapachetilespreparerfactoryPreparerFactory
implementation
to
use
Default
is
orgapachetilespreparerfactoryBasicPreparerFactory,
creating
shared
instances
for
specified
preparer
classes
<p>Specify
SimpleSpringPreparerFactory
to
autowire
orgapachetilespreparerViewPreparer
instances
based
on
specified
preparer
classes,
applying
Spring's
container
callbacks
as
well
as
applying
configured
Spring
BeanPostProcessors
If
Spring's
context-wide
annotation-config
has
been
activated,
annotations
in
ViewPreparer
classes
will
be
automatically
detected
and
applied
<p>Specify
SpringBeanPreparerFactory
to
operate
on
specified
preparer
<i>names</i>
instead
of
classes,
obtaining
the
corresponding
Spring
bean
from
the
DispatcherServlet's
application
context
The
full
bean
creation
process
will
be
in
the
control
of
the
Spring
application
context
in
this
case,
allowing
for
the
use
of
scoped
beans
etc
Note
that
you
need
to
define
one
Spring
bean
definition
per
preparer
name
(as
used
in
your
Tiles
definitions)
:end
:start
Set
whether
to
use
a
MutableTilesContainer
(typically
the
CachingTilesContainer
implementation)
for
this
application
Default
is
"false"
:end
:start
Creates
and
exposes
a
TilesContainer
for
this
web
application,
delegating
to
the
TilesInitializer
:end
:start
Removes
the
TilesContainer
from
this
web
application
:end
:start
orgspringframeworkwebservletView
implementation
that
renders
through
the
Tiles
Request
API
The
"url"
property
is
interpreted
as
name
of
a
Tiles
definition
:end
:start
Set
the
Renderer
to
use
If
not
set,
by
default
DefinitionRenderer
is
used
:end
:start
Whether
to
expose
JSTL
attributes
By
default
set
to
true
:end
:start
Create
a
Tiles
Request
<p>This
implementation
creates
a
ServletRequest
:end
:start
Convenience
subclass
of
UrlBasedViewResolver
that
supports
TilesView
(ie
Tiles
definitions)
and
custom
subclasses
of
it
:end
:start
Set
the
Renderer
to
use
If
not
set,
by
default
orgapachetilesrendererDefinitionRenderer
is
used
:end
:start
A
message
that
can
be
handled
or
sent
on
a
WebSocket
connection
:end
:start
Return
the
message
payload,
never
be
null
:end
:start
Whether
this
is
the
last
part
of
a
message
sent
as
a
series
of
partial
messages
:end
:start
An
abstract
base
class
for
implementations
of
WebSocketSession
:end
:start
Create
a
new
instance
and
associate
the
given
attributes
with
it
:end
:start
Adapts
WebSocketHandler
to
the
Jetty
9
WebSocket
API
:end
:start
A
WebSocketSession
for
use
with
the
Jetty
9
WebSocket
API
:end
:start
Create
a
new
JettyWebSocketSession
instance
:end
:start
Create
a
new
JettyWebSocketSession
instance
associated
with
the
given
user
:end
:start
A
WebSocketSession
that
exposes
the
underlying,
native
WebSocketSession
through
a
getter
:end
:start
Return
the
underlying
native
WebSocketSession,
if
available
:end
:start
Return
the
underlying
native
WebSocketSession,
if
available
:end
:start
Base
class
that
can
be
used
to
implement
a
standard
javaxwebsocketEncoder
and/or
javaxwebsocketDecoder
It
provides
encode
and
decode
method
implementations
that
delegate
to
a
Spring
ConversionService
<p>By
default,
this
class
looks
up
a
ConversionService
registered
in
the
#getApplicationContext()
active
ApplicationContext
under
the
name
'webSocketConversionService'
This
works
fine
for
both
client
and
server
endpoints,
in
a
Servlet
container
environment
If
not
running
in
a
Servlet
container,
subclasses
will
need
to
override
the
#getConversionService()
method
to
provide
an
alternative
lookup
strategy
<p>Subclasses
can
extend
this
class
and
should
also
implement
one
or
both
of
javaxwebsocketEncoder
and
javaxwebsocketDecoder
For
convenience
ConvertingEncoderDecoderSupportBinaryEncoder,
ConvertingEncoderDecoderSupportBinaryDecoder,
ConvertingEncoderDecoderSupportTextEncoder
and
ConvertingEncoderDecoderSupportTextDecoder
subclasses
are
provided
<p>Since
JSR-356
only
allows
Encoder/Decoder
to
be
registered
by
type,
instances
of
this
class
are
therefore
managed
by
the
WebSocket
runtime,
and
do
not
need
to
be
registered
as
Spring
Beans
They
can,
however,
by
injected
with
Spring-managed
dependencies
via
Autowired
@Autowire
<p>Converters
to
convert
between
the
#getType()
type
and
String
or
ByteBuffer
should
be
registered
:end
:start
Strategy
method
used
to
obtain
the
ConversionService
By
default
this
method
expects
a
bean
named
'webSocketConversionService'
in
the
#getApplicationContext()
active
ApplicationContext
:end
:start
Returns
the
active
ApplicationContext
Be
default
this
method
obtains
the
context
via
ContextLoader#getCurrentWebApplicationContext(),
which
finds
the
ApplicationContext
loaded
via
ContextLoader
typically
in
a
Servlet
container
environment
When
not
running
in
a
Servlet
container
and
not
using
ContextLoader,
this
method
should
be
overridden
:end
:start
Returns
the
type
being
converted
By
default
the
type
is
resolved
using
the
generic
arguments
of
the
class
:end
:start
Returns
the
websocket
message
type
By
default
the
type
is
resolved
using
the
generic
arguments
of
the
class
:end
:start
A
binary
javaxwebsocketEncoderBinary
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
binary
javaxwebsocketEncoderBinary
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
text
javaxwebsocketEncoderText
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
Text
javaxwebsocketEncoderText
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
binary
javaxwebsocketEncoderBinary
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
binary
javaxwebsocketEncoderBinary
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
text
javaxwebsocketEncoderText
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
A
Text
javaxwebsocketEncoderText
javaxwebsocketEncoder
that
delegates
to
Spring's
conversion
service
See
ConvertingEncoderDecoderSupport
for
details
:end
:start
Adapts
a
WebSocketHandler
to
the
standard
WebSocket
for
Java
API
:end
:start
A
WebSocketSession
for
use
with
the
standard
WebSocket
for
Java
API
:end
:start
Class
constructor
:end
:start
Class
constructor
that
associates
a
user
with
the
WebSocket
session
:end
:start
A
binary
WebSocket
message
:end
:start
Create
a
new
binary
WebSocket
message
with
the
given
ByteBuffer
payload
:end
:start
Create
a
new
binary
WebSocket
message
with
the
given
payload
representing
the
full
or
partial
message
content
When
the
isLast
boolean
flag
is
set
to
false
the
message
is
sent
as
partial
content
and
more
partial
messages
will
be
expected
until
the
boolean
flag
is
set
to
true
:end
:start
Create
a
new
binary
WebSocket
message
with
the
given
byte[]
payload
:end
:start
Create
a
new
binary
WebSocket
message
with
the
given
byte[]
payload
representing
the
full
or
partial
message
content
When
the
isLast
boolean
flag
is
set
to
false
the
message
is
sent
as
partial
content
and
more
partial
messages
will
be
expected
until
the
boolean
flag
is
set
to
true
:end
:start
Create
a
new
binary
WebSocket
message
by
wrapping
an
existing
byte
array
:end
:start
Abstract
base
class
for
WebSocketClient
implementations
:end
:start
Perform
the
actual
handshake
to
establish
a
connection
to
the
server
:end
:start
A
base
class
for
WebSocket
connection
managers
Provides
a
declarative
style
of
connecting
to
a
WebSocket
server
given
a
URI
to
connect
to
The
connection
occurs
when
the
Spring
ApplicationContext
is
refreshed,
if
the
#autoStartup
property
is
set
to
true,
or
if
set
to
false,
the
#start()
and
#stop
methods
can
be
invoked
manually
:end
:start
Set
whether
to
auto-connect
to
the
remote
endpoint
after
this
connection
manager
has
been
initialized
and
the
Spring
context
has
been
refreshed
<p>Default
is
"false"
:end
:start
Return
the
value
for
the
'autoStartup'
property
If
"true",
this
endpoint
connection
manager
will
connect
to
the
remote
endpoint
upon
a
ContextRefreshedEvent
:end
:start
Specify
the
phase
in
which
a
connection
should
be
established
to
the
remote
endpoint
and
subsequently
closed
The
startup
order
proceeds
from
lowest
to
highest,
and
the
shutdown
order
is
the
reverse
of
that
By
default
this
value
is
IntegerMAX_VALUE
meaning
that
this
endpoint
connection
factory
connects
as
late
as
possible
and
is
closed
as
soon
as
possible
:end
:start
Return
the
phase
in
which
this
endpoint
connection
factory
will
be
auto-connected
and
stopped
:end
:start
Return
whether
this
ConnectionManager
has
been
started
:end
:start
Start
the
websocket
connection
If
already
connected,
the
method
has
no
impact
:end
:start
Initiates
WebSocket
requests
to
a
WebSocket
server
programmatically
through
the
Jetty
WebSocket
API
:end
:start
Default
constructor
that
creates
an
instance
of
orgeclipsejettywebsocketclientWebSocketClient
:end
:start
Constructor
that
accepts
an
existing
orgeclipsejettywebsocketclientWebSocketClient
instance
:end
:start
Set
an
AsyncListenableTaskExecutor
to
use
when
opening
connections
<p>If
this
property
is
not
configured,
calls
to
any
of
the
doHandshake
methods
will
block
until
the
connection
is
established
:end
:start
Return
the
configured
TaskExecutor
:end
:start
A
WebSocket
connection
manager
that
is
given
a
URI,
a
ServerEndpoint-annotated
endpoint,
connects
to
a
WebSocket
server
through
the
#start()
and
#stop()
methods
If
#setAutoStartup(boolean)
is
set
to
true
this
will
be
done
automatically
when
the
Spring
ApplicationContext
is
refreshed
:end
:start
Set
a
TaskExecutor
to
use
to
open
the
connection
By
default
SimpleAsyncTaskExecutor
is
used
:end
:start
Return
the
configured
TaskExecutor
:end
:start
A
WebSocket
connection
manager
that
is
given
a
URI,
an
Endpoint,
connects
to
a
WebSocket
server
through
the
#start()
and
#stop()
methods
If
#setAutoStartup(boolean)
is
set
to
true
this
will
be
done
automatically
when
the
Spring
ApplicationContext
is
refreshed
:end
:start
Set
a
TaskExecutor
to
use
to
open
connections
By
default
SimpleAsyncTaskExecutor
is
used
:end
:start
Return
the
configured
TaskExecutor
:end
:start
Initiates
WebSocket
requests
to
a
WebSocket
server
programmatically
through
the
standard
Java
WebSocket
API
:end
:start
Default
constructor
that
calls
ContainerProvidergetWebSocketContainer()
to
obtain
a
(new)
WebSocketContainer
instance
Also
see
constructor
accepting
existing
WebSocketContainer
instance
:end
:start
Constructor
accepting
an
existing
WebSocketContainer
instance
<p>For
XML
configuration
see
WebSocketContainerFactoryBean
For
Java
configuration
use
ContainerProvidergetWebSocketContainer()
to
obtain
the
WebSocketContainer
instance
:end
:start
Set
an
AsyncListenableTaskExecutor
to
use
when
opening
connections
<p>If
this
property
is
not
configured,
calls
to
any
of
the
doHandshake
methods
will
block
until
the
connection
is
established
:end
:start
Return
the
configured
TaskExecutor
:end
:start
A
FactoryBean
for
creating
and
configuring
a
javaxwebsocketWebSocketContainer
through
Spring
XML
configuration
In
Java
configuration,
ignore
this
class
and
use
ContainerProvidergetWebSocketContainer()
instead
:end
:start
Contract
for
initiating
a
WebSocket
request
As
an
alternative
considering
using
the
declarative
style
WebSocketConnectionManager
that
starts
a
WebSocket
connection
to
a
pre-configured
URI
when
the
application
starts
:end
:start
A
WebSocket
connection
manager
that
is
given
a
URI,
a
WebSocketClient,
and
a
WebSocketHandler,
connects
to
a
WebSocket
server
through
#start()
and
#stop()
methods
If
#setAutoStartup(boolean)
is
set
to
true
this
will
be
done
automatically
when
the
Spring
ApplicationContext
is
refreshed
:end
:start
Decorate
the
WebSocketHandler
provided
to
the
class
constructor
<p>By
default
LoggingWebSocketHandlerDecorator
is
added
:end
:start
Set
the
sub-protocols
to
use
If
configured,
specified
sub-protocols
will
be
requested
in
the
handshake
through
the
Sec-WebSocket-Protocol
header
The
resulting
WebSocket
session
will
contain
the
protocol
accepted
by
the
server,
if
any
:end
:start
Return
the
configured
sub-protocols
to
use
:end
:start
Set
the
origin
to
use
:end
:start
Provide
default
headers
to
add
to
the
WebSocket
handshake
request
:end
:start
Return
the
default
headers
for
the
WebSocket
handshake
request
:end
:start
Represents
a
WebSocket
close
status
code
and
reason
Status
codes
in
the
1xxx
range
are
pre-defined
by
the
protocol
Optionally,
a
status
code
may
be
sent
with
a
reason
<p>
See
<a
href="https://toolsietforg/html/rfc6455#section-741">RFC
6455,
Section
741
"Defined
Status
Codes"</a>
:end
:start
"1000
indicates
a
normal
closure,
meaning
that
the
purpose
for
which
the
connection
was
established
has
been
fulfilled"
:end
:start
"1001
indicates
that
an
endpoint
is
"going
away",
such
as
a
server
going
down
or
a
browser
having
navigated
away
from
a
page"
:end
:start
"1002
indicates
that
an
endpoint
is
terminating
the
connection
due
to
a
protocol
error"
:end
:start
"1003
indicates
that
an
endpoint
is
terminating
the
connection
because
it
has
received
a
type
of
data
it
cannot
accept
(eg,
an
endpoint
that
understands
only
text
data
MAY
send
this
if
it
receives
a
binary
message)"
:end
:start
"1005
is
a
reserved
value
and
MUST
NOT
be
set
as
a
status
code
in
a
Close
control
frame
by
an
endpoint
It
is
designated
for
use
in
applications
expecting
a
status
code
to
indicate
that
no
status
code
was
actually
present"
:end
:start
"1006
is
a
reserved
value
and
MUST
NOT
be
set
as
a
status
code
in
a
Close
control
frame
by
an
endpoint
It
is
designated
for
use
in
applications
expecting
a
status
code
to
indicate
that
the
connection
was
closed
abnormally,
eg,
without
sending
or
receiving
a
Close
control
frame"
:end
:start
"1007
indicates
that
an
endpoint
is
terminating
the
connection
because
it
has
received
data
within
a
message
that
was
not
consistent
with
the
type
of
the
message
(eg,
non-UTF-8
[RFC3629]
data
within
a
text
message)"
:end
:start
"1008
indicates
that
an
endpoint
is
terminating
the
connection
because
it
has
received
a
message
that
violates
its
policy
This
is
a
generic
status
code
that
can
be
returned
when
there
is
no
other
more
suitable
status
code
(eg,
1003
or
1009)
or
if
there
is
a
need
to
hide
specific
details
about
the
policy"
:end
:start
"1009
indicates
that
an
endpoint
is
terminating
the
connection
because
it
has
received
a
message
that
is
too
big
for
it
to
process"
:end
:start
"1010
indicates
that
an
endpoint
(client)
is
terminating
the
connection
because
it
has
expected
the
server
to
negotiate
one
or
more
extension,
but
the
server
didn't
return
them
in
the
response
message
of
the
WebSocket
handshake
The
list
of
extensions
that
are
needed
SHOULD
appear
in
the
/reason/
part
of
the
Close
frame
Note
that
this
status
code
is
not
used
by
the
server,
because
it
can
fail
the
WebSocket
handshake
instead"
:end
:start
"1011
indicates
that
a
server
is
terminating
the
connection
because
it
encountered
an
unexpected
condition
that
prevented
it
from
fulfilling
the
request"
:end
:start
"1012
indicates
that
the
service
is
restarted
A
client
may
reconnect,
and
if
it
chooses
to
do,
should
reconnect
using
a
randomized
delay
of
5
-
30s"
:end
:start
"1013
indicates
that
the
service
is
experiencing
overload
A
client
should
only
connect
to
a
different
IP
(when
there
are
multiple
for
the
target)
or
reconnect
to
the
same
IP
upon
user
action"
:end
:start
"1015
is
a
reserved
value
and
MUST
NOT
be
set
as
a
status
code
in
a
Close
control
frame
by
an
endpoint
It
is
designated
for
use
in
applications
expecting
a
status
code
to
indicate
that
the
connection
was
closed
due
to
a
failure
to
perform
a
TLS
handshake
(eg,
the
server
certificate
can't
be
verified)"
:end
:start
Indicates
that
a
session
has
become
unreliable
(eg
timed
out
while
sending
a
message)
and
extra
care
should
be
exercised
while
closing
the
session
in
order
to
avoid
locking
additional
threads
<p><strong>NOTE:</strong>
Spring
Framework
specific
status
code
:end
:start
Create
a
new
CloseStatus
instance
:end
:start
Create
a
new
CloseStatus
instance
:end
:start
Returns
the
status
code
:end
:start
Returns
the
reason
or
null
:end
:start
Crate
a
new
CloseStatus
from
this
one
with
the
specified
reason
:end
:start
Base
class
for
WebSocketHandlerRegistrations
that
gathers
all
the
configuration
options
but
allows
sub-classes
to
put
together
the
actual
HTTP
request
mappings
:end
:start
A
convenient
abstract
base
class
for
WebSocketMessageBrokerConfigurer
implementations
providing
empty
method
implementations
for
optional
methods
:end
:start
A
variation
of
WebSocketConfigurationSupport
that
detects
implementations
of
WebSocketConfigurer
in
Spring
configuration
and
invokes
them
in
order
to
configure
WebSocket
request
handling
:end
:start
A
WebSocketMessageBrokerConfigurationSupport
extension
that
detects
beans
of
type
WebSocketMessageBrokerConfigurer
and
delegates
to
all
of
them
allowing
callback
style
customization
of
the
configuration
provided
in
WebSocketMessageBrokerConfigurationSupport
<p>This
class
is
typically
imported
via
EnableWebSocketMessageBroker
:end
:start
Add
this
annotation
to
an
@Configuration
class
to
configure
processing
WebSocket
requests:
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocket
public
class
MyWebSocketConfig

</pre>
<p>Customize
the
imported
configuration
by
implementing
the
WebSocketConfigurer
interface:
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocket
public
class
MyConfiguration
implements
WebSocketConfigurer
&#064;Override
public
void
registerWebSocketHandlers(WebSocketHandlerRegistry
registry)
registryaddHandler(echoWebSocketHandler(),
"/echo")withSockJS();

&#064;Bean
public
WebSocketHandler
echoWebSocketHandler()
return
new
EchoWebSocketHandler();


</pre>
:end
:start
Add
this
annotation
to
an
@Configuration
class
to
enable
broker-backed
messaging
over
WebSocket
using
a
higher-level
messaging
sub-protocol
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocketMessageBroker
public
class
MyWebSocketConfig

</pre>
<p>
Customize
the
imported
configuration
by
implementing
the
WebSocketMessageBrokerConfigurer
interface
or
more
likely
the
convenient
base
class
AbstractWebSocketMessageBrokerConfigurer:
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocketMessageBroker
public
class
MyConfiguration
implements
extends
AbstractWebSocketMessageBrokerConfigurer
&#064;Override
public
void
registerStompEndpoints(StompEndpointRegistry
registry)
registryaddEndpoint("/portfolio")withSockJS();

&#064;Bean
public
void
configureMessageBroker(MessageBrokerRegistry
registry)
registryenableStompBrokerRelay("/queue/",
"/topic/");
registrysetApplicationDestinationPrefixes("/app/");


</pre>
:end
:start
A
helper
class
for
configuring
WebSocketHandler
request
handling
including
SockJS
fallback
options
:end
:start
A
WebSocketHandlerRegistry
that
maps
WebSocketHandlers
to
URLs
for
use
in
a
Servlet
container
:end
:start
Return
a
HandlerMapping
with
mapped
HttpRequestHandlers
:end
:start
A
helper
class
for
configuring
SockJS
fallback
options,
typically
used
indirectly,
in
conjunction
with
orgspringframeworkwebsocketconfigannotationEnableWebSocket
@EnableWebSocket
and
WebSocketConfigurer
:end
:start
Transports
which
don't
support
cross-domain
communication
natively
(eg
"eventsource",
"htmlfile")
rely
on
serving
a
simple
page
(using
the
"foreign"
domain)
from
an
invisible
iframe
Code
run
from
this
iframe
doesn't
need
to
worry
about
cross-domain
issues
since
it
is
running
from
a
domain
local
to
the
SockJS
server
The
iframe
does
need
to
load
the
SockJS
javascript
client
library
and
this
option
allows
configuring
its
url
See
the
reference
documentation
for
more
details
on
this
<p>By
default
this
is
set
to
point
to
"https://d1fxtkz8shb9d2cloudfrontnet/sockjs-034minjs"
:end
:start
Streaming
transports
save
responses
on
the
client
side
and
don't
free
memory
used
by
delivered
messages
Such
transports
need
to
recycle
the
connection
once
in
a
while
This
property
sets
a
minimum
number
of
bytes
that
can
be
send
over
a
single
HTTP
streaming
request
before
it
will
be
closed
After
that
client
will
open
a
new
request
Setting
this
value
to
one
effectively
disables
streaming
and
will
make
streaming
transports
to
behave
like
polling
transports
<p>The
default
value
is
128K
(ie
128
*
1024)
:end
:start
The
SockJS
protocol
requires
a
server
to
respond
to
the
initial
"/info"
request
from
clients
with
a
"cookie_needed"
boolean
property
that
indicates
whether
the
use
of
a
JSESSIONID
cookie
is
required
for
the
application
to
function
correctly,
eg
for
load
balancing
or
in
Java
Servlet
containers
for
the
use
of
an
HTTP
session
<p>This
is
especially
important
for
IE
8,9
that
support
XDomainRequest
--
a
modified
AJAX/XHR
--
that
can
do
requests
across
domains
but
does
not
send
any
cookies
In
those
cases,
the
SockJS
client
prefers
the
"iframe-htmlfile"
transport
over
"xdr-streaming"
in
order
to
be
able
to
send
cookies
<p>The
default
value
is
"true"
to
maximize
the
chance
for
applications
to
work
correctly
in
IE
8,9
with
support
for
cookies
(and
the
JSESSIONID
cookie
in
particular)
However,
an
application
can
choose
to
set
this
to
"false"
if
the
use
of
cookies
(and
HTTP
session)
is
not
required
:end
:start
The
amount
of
time
in
milliseconds
when
the
server
has
not
sent
any
messages
and
after
which
the
server
should
send
a
heartbeat
frame
to
the
client
in
order
to
keep
the
connection
from
breaking
<p>The
default
value
is
25,000
(25
seconds)
:end
:start
The
amount
of
time
in
milliseconds
before
a
client
is
considered
disconnected
after
not
having
a
receiving
connection,
ie
an
active
connection
over
which
the
server
can
send
data
to
the
client
<p>The
default
value
is
5000
:end
:start
The
number
of
server-to-client
messages
that
a
session
can
cache
while
waiting
for
the
next
HTTP
polling
request
from
the
client
All
HTTP
transports
use
this
property
since
even
streaming
transports
recycle
HTTP
requests
periodically
<p>The
amount
of
time
between
HTTP
requests
should
be
relatively
brief
and
will
not
exceed
the
allows
disconnect
delay
(see
#setDisconnectDelay(long)),
5
seconds
by
default
<p>The
default
size
is
100
:end
:start
Some
load
balancers
don't
support
WebSocket
This
option
can
be
used
to
disable
the
WebSocket
transport
on
the
server
side
<p>The
default
value
is
"true"
:end
:start
A
contract
for
registering
STOMP
over
WebSocket
endpoints
:end
:start
Register
a
STOMP
over
WebSocket
endpoint
at
the
given
mapping
path
:end
:start
A
contract
for
configuring
a
STOMP
over
WebSocket
endpoint
:end
:start
Enable
SockJS
fallback
options
:end
:start
Configure
the
HandshakeHandler
to
use
:end
:start
A
registry
for
STOMP
over
WebSocket
endpoints
that
maps
the
endpoints
with
a
SimpleUrlHandlerMapping
for
use
in
Spring
MVC
:end
:start
Set
the
order
for
the
resulting
SimpleUrlHandlerMapping
relative
to
other
handler
mappings
configured
in
Spring
MVC
<p>The
default
value
is
1
:end
:start
Return
a
handler
mapping
with
the
mapped
ViewControllers;
or
null
in
case
of
no
registrations
:end
:start
An
abstract
base
class
class
for
configuring
STOMP
over
WebSocket/SockJS
endpoints
:end
:start
Provide
a
custom
or
pre-configured
HandshakeHandler
:end
:start
Enable
SockJS
fallback
options
:end
:start
Configuration
support
for
WebSocket
request
handling
:end
:start
The
default
TaskScheduler
to
use
if
none
is
configured
via
SockJsServiceRegistration#setTaskScheduler,
ie
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocket
public
class
WebSocketConfig
implements
WebSocketConfigurer
public
void
registerWebSocketHandlers(WebSocketHandlerRegistry
registry)
registryaddHandler(myWsHandler(),
"/echo")withSockJS()setTaskScheduler(myScheduler());

//


</pre>
:end
:start
Defines
callback
methods
to
configure
the
WebSocket
request
handling
via
orgspringframeworkwebsocketconfigannotationEnableWebSocket
@EnableWebSocket
:end
:start
Register
WebSocketHandlers
including
SockJS
fallback
options
if
desired
:end
:start
Provides
methods
for
configuring
a
WebSocket
handler
:end
:start
Add
more
handlers
that
will
share
the
same
configuration
(interceptors,
SockJS
config,
etc)
:end
:start
Configure
interceptors
for
the
handshake
request
:end
:start
Configure
the
HandshakeHandler
to
use
:end
:start
Enable
SockJS
fallback
options
:end
:start
Provides
methods
for
configuring
WebSocketHandler
request
mappings
:end
:start
Configure
a
WebSocketHandler
at
the
specified
URL
paths
:end
:start
Extends
AbstractMessageBrokerConfiguration
and
adds
configuration
for
receiving
and
responding
to
STOMP
messages
from
WebSocket
clients
<p>
Typically
used
in
conjunction
with
EnableWebSocketMessageBroker
@EnableWebSocketMessageBroker
but
can
also
be
extended
directly
:end
:start
The
default
TaskScheduler
to
use
if
none
is
configured
via
SockJsServiceRegistration#setTaskScheduler(orgspringframeworkschedulingTaskScheduler),
ie
<pre
class="code">
&#064;Configuration
&#064;EnableWebSocketMessageBroker
public
class
WebSocketConfig
implements
WebSocketMessageBrokerConfigurer
public
void
registerStompEndpoints(StompEndpointRegistry
registry)
registryaddEndpoint("/stomp")withSockJS()setTaskScheduler(myScheduler());

//


</pre>
:end
:start
Defines
methods
for
configuring
message
handling
with
simple
messaging
protocols
(eg
STOMP)
from
WebSocket
clients
Typically
used
to
customize
the
configuration
provided
via
orgspringframeworkwebsocketconfigannotationEnableWebSocketMessageBroker
@EnableWebSocketMessageBroker
:end
:start
Register
STOMP
endpoints
mapping
each
to
a
specific
URL
and
(optionally)
enabling
and
configuring
SockJS
fallback
options
:end
:start
Configure
options
related
to
the
processing
of
messages
received
from
and
sent
to
WebSocket
clients
:end
:start
Configure
the
orgspringframeworkmessagingMessageChannel
used
for
incoming
messages
from
WebSocket
clients
By
default
the
channel
is
backed
by
a
thread
pool
of
size
1
It
is
recommended
to
customize
thread
pool
settings
for
production
use
:end
:start
Configure
the
orgspringframeworkmessagingMessageChannel
used
for
incoming
messages
from
WebSocket
clients
By
default
the
channel
is
backed
by
a
thread
pool
of
size
1
It
is
recommended
to
customize
thread
pool
settings
for
production
use
:end
:start
Configure
the
message
converters
to
use
when
extracting
the
payload
of
messages
in
annotated
methods
and
when
sending
messages
(eg
through
the
"broker"
SimpMessagingTemplate)
<p>
The
provided
list,
initially
empty,
can
be
used
to
add
message
converters
while
the
boolean
return
value
is
used
to
determine
if
default
message
should
be
added
as
well
:end
:start
Configure
message
broker
options
:end
:start
Configure
the
processing
of
messages
received
from
and
sent
to
WebSocket
clients
:end
:start
Configure
the
maximum
size
for
an
incoming
sub-protocol
message
For
example
a
STOMP
message
may
be
received
as
multiple
WebSocket
messages
or
multiple
HTTP
POST
requests
when
SockJS
fallback
options
are
in
use
<p>In
theory
a
WebSocket
message
can
be
almost
unlimited
in
size
In
practice
WebSocket
servers
impose
limits
on
incoming
message
size
STOMP
clients
for
example
tend
to
split
large
messages
around
16K
boundaries
Therefore
a
server
must
be
able
to
buffer
partial
content
and
decode
when
enough
data
is
received
Use
this
property
to
configure
the
max
size
of
the
buffer
to
use
<p>The
default
value
is
64K
(ie
64
*
1024)
<p><strong>NOTE</strong>
that
the
current
version
12
of
the
STOMP
spec
does
not
specifically
discuss
how
to
send
STOMP
messages
over
WebSocket
Version
2
of
the
spec
will
but
in
the
mean
time
existing
client
libraries
have
already
established
a
practice
that
servers
must
handle
:end
:start
Protected
accessor
for
internal
use
:end
:start
Configure
a
time
limit
(in
milliseconds)
for
the
maximum
amount
of
a
time
allowed
when
sending
messages
to
a
WebSocket
session
or
writing
to
an
HTTP
response
when
SockJS
fallback
option
are
in
use
<p>In
general
WebSocket
servers
expect
that
messages
to
a
single
WebSocket
session
are
sent
from
a
single
thread
at
a
time
This
is
automatically
guaranteed
when
using
@EnableWebSocketMessageBroker
configuration
If
message
sending
is
slow,
or
at
least
slower
than
rate
of
messages
sending,
subsequent
messages
are
buffered
until
either
the
sendTimeLimit
or
the
sendBufferSizeLimit
are
reached
at
which
point
the
session
state
is
cleared
and
an
attempt
is
made
to
close
the
session
<p><strong>NOTE</strong>
that
the
session
time
limit
is
checked
only
on
attempts
to
send
additional
messages
So
if
only
a
single
message
is
sent
and
it
hangs,
the
session
will
not
time
out
until
another
message
is
sent
or
the
underlying
physical
socket
times
out
So
this
is
not
a
replacement
for
WebSocket
server
or
HTTP
connection
timeout
but
is
rather
intended
to
control
the
extent
of
buffering
of
unsent
messages
<p><strong>NOTE</strong>
that
closing
the
session
may
not
succeed
in
actually
closing
the
physical
socket
and
may
also
hang
This
is
true
especially
when
using
blocking
IO
such
as
the
BIO
connector
in
Tomcat
that
is
used
by
default
on
Tomcat
7
Therefore
it
is
recommended
to
ensure
the
server
is
using
non-blocking
IO
such
as
Tomcat's
NIO
connector
that
is
used
by
default
on
Tomcat
8
If
you
must
use
blocking
IO
consider
customizing
OS-level
TCP
settings,
for
example
/proc/sys/net/ipv4/tcp_retries2
on
Linux
<p>The
default
value
is
10
seconds
(ie
10
*
10000)
:end
:start
Protected
accessor
for
internal
use
:end
:start
Configure
the
maximum
amount
of
data
to
buffer
when
sending
messages
to
a
WebSocket
session,
or
an
HTTP
response
when
SockJS
fallback
option
are
in
use
<p>In
general
WebSocket
servers
expect
that
messages
to
a
single
WebSocket
session
are
sent
from
a
single
thread
at
a
time
This
is
automatically
guaranteed
when
using
@EnableWebSocketMessageBroker
configuration
If
message
sending
is
slow,
or
at
least
slower
than
rate
of
messages
sending,
subsequent
messages
are
buffered
until
either
the
sendTimeLimit
or
the
sendBufferSizeLimit
are
reached
at
which
point
the
session
state
is
cleared
and
an
attempt
is
made
to
close
the
session
<p><strong>NOTE</strong>
that
closing
the
session
may
not
succeed
in
actually
closing
the
physical
socket
and
may
also
hang
This
is
true
especially
when
using
blocking
IO
such
as
the
BIO
connector
in
Tomcat
configured
by
default
on
Tomcat
7
Therefore
it
is
recommended
to
ensure
the
server
is
using
non-blocking
IO
such
as
Tomcat's
NIO
connector
used
by
default
on
Tomcat
8
If
you
must
use
blocking
IO
consider
customizing
OS-level
TCP
settings,
for
example
/proc/sys/net/ipv4/tcp_retries2
on
Linux
<p>The
default
value
is
512K
(ie
512
*
1024)
:end
:start
Protected
accessor
for
internal
use
:end
:start
orgspringframeworkbeansfactoryxmlNamespaceHandler
for
Spring
WebSocket
configuration
namespace
:end
:start
A
convenient
base
class
for
WebSocketHandler
implementation
with
empty
methods
:end
:start
Instantiates
a
target
handler
through
a
Spring
BeanFactory
and
also
provides
an
equivalent
destroy
method
Mainly
for
internal
use
to
assist
with
initializing
and
destroying
handlers
with
per-connection
lifecycle
:end
:start
A
convenient
base
class
for
WebSocketHandler
implementation
that
process
binary
messages
only
Text
messages
are
rejected
with
CloseStatus#NOT_ACCEPTABLE
All
other
methods
have
empty
implementations
:end
:start
Wraps
a
orgspringframeworkwebsocketWebSocketSession
and
guarantees
only
one
thread
can
send
messages
at
a
time
<p>If
a
send
is
slow,
subsequent
attempts
to
send
more
messages
from
a
different
thread
will
fail
to
acquire
the
flushLock
and
the
messages
will
be
buffered
instead
--
at
that
time
the
specified
buffer
size
limit
and
send
time
limit
will
be
checked
and
the
session
closed
if
the
limits
are
exceeded
:end
:start
An
exception
handling
WebSocketHandlerDecorator
Traps
all
Throwable
instances
that
escape
from
the
decorated
handler
and
closes
the
session
with
CloseStatus#SERVER_ERROR
:end
:start
A
WebSocketHandlerDecorator
that
adds
logging
to
WebSocket
lifecycle
events
:end
:start
A
WebSocketHandler
that
initializes
and
destroys
a
WebSocketHandler
instance
for
each
WebSocket
connection
and
delegates
all
other
methods
to
it
<p>Essentially
create
an
instance
of
this
class
once,
providing
the
type
of
WebSocketHandler
class
to
create
for
each
connection,
and
then
pass
it
to
any
API
method
that
expects
a
WebSocketHandler
<p>If
initializing
the
target
WebSocketHandler
type
requires
a
Spring
BeanFctory,
then
the
#setBeanFactory(BeanFactory)
property
accordingly
Simply
declaring
this
class
as
a
Spring
bean
will
do
that
Otherwise,
WebSocketHandler
instances
of
the
target
type
will
be
created
using
the
default
constructor
:end
:start
Raised
when
a
WebSocket
session
has
exceeded
limits
it
has
been
configured
for,
eg
timeout,
buffer
size,
etc
:end
:start
A
convenient
base
class
for
WebSocketHandler
implementation
that
process
text
messages
only
Binary
messages
are
rejected
with
CloseStatus#NOT_ACCEPTABLE
All
other
methods
have
empty
implementations
:end
:start
Wraps
another
orgspringframeworkwebsocketWebSocketHandler
instance
and
delegates
to
it
<p>Also
provides
a
#getDelegate()
method
to
return
the
decorated
handler
as
well
as
a
#getLastHandler()
method
to
go
through
all
nested
delegates
and
return
the
"last"
handler
:end
:start
Wraps
another
orgspringframeworkwebsocketWebSocketSession
instance
and
delegates
to
it
<p>Also
provides
a
#getDelegate()
method
to
return
the
decorated
session
as
well
as
a
#getLastSession()
method
to
go
through
all
nested
delegates
and
return
the
"last"
session
:end
:start
A
connected
event
represents
the
server
response
to
a
client's
connect
request
See
orgspringframeworkwebsocketmessagingSessionConnectEvent
:end
:start
Create
a
new
event
:end
:start
Return
the
connected
message
:end
:start
Event
raised
when
a
new
WebSocket
client
using
a
Simple
Messaging
Protocol
(eg
STOMP)
as
the
WebSocket
sub-protocol
issues
a
connect
request
<p>Note
that
this
is
not
the
same
as
the
WebSocket
session
getting
established
but
rather
the
client's
first
attempt
to
connect
within
the
the
sub-protocol,
for
example
sending
the
STOMP
CONNECT
frame
<p>The
provided
#getMessage()
message
can
be
examined
to
check
information
about
the
connected
user,
The
session
id,
and
any
headers
sent
by
the
client,
for
STOMP
check
the
class
orgspringframeworkmessagingsimpstompStompHeaderAccessor
For
example:
<pre
class="code">
StompHeaderAccessor
headers
=
StompHeaderAccessorwrap(message);
headersgetSessionId();
headersgetSessionAttributes();
headersgetPrincipal();
</pre>
:end
:start
Create
a
new
SessionConnectEvent
:end
:start
Return
the
connect
message
:end
:start
Event
raised
when
the
session
of
a
WebSocket
client
using
a
Simple
Messaging
Protocol
(eg
STOMP)
as
the
WebSocket
sub-protocol
is
closed
<p>Note
that
this
event
may
be
raised
more
than
once
for
a
single
session
and
therefore
event
consumers
should
be
idempotent
and
ignore
a
duplicate
event
:end
:start
Create
a
new
event
:end
:start
Return
the
session
id
:end
:start
Return
the
status
with
which
the
session
was
closed
:end
:start
A
SubProtocolHandler
for
STOMP
that
supports
versions
10,
11,
and
12
of
the
STOMP
specification
:end
:start
This
handler
supports
assembling
large
STOMP
messages
split
into
multiple
WebSocket
messages
and
STOMP
clients
(like
stompjs)
indeed
split
large
STOMP
messages
at
16K
boundaries
Therefore
the
WebSocket
server
input
message
buffer
size
must
allow
16K
at
least
plus
a
little
extra
for
SockJS
framing
:end
:start
The
name
of
the
header
set
on
the
CONNECTED
frame
indicating
the
name
of
the
user
authenticated
on
the
WebSocket
session
:end
:start
Configure
the
maximum
size
allowed
for
an
incoming
STOMP
message
Since
a
STOMP
message
can
be
received
in
multiple
WebSocket
messages,
buffering
may
be
required
and
therefore
it
is
necessary
to
know
the
maximum
allowed
message
size
<p>By
default
this
property
is
set
to
64K
:end
:start
Get
the
configured
message
buffer
size
limit
in
bytes
:end
:start
Provide
a
registry
with
which
to
register
active
user
session
ids
:end
:start
Handle
incoming
WebSocket
messages
from
clients
:end
:start
Handle
STOMP
messages
going
back
out
to
WebSocket
clients
:end
:start
A
contract
for
handling
WebSocket
messages
as
part
of
a
higher
level
protocol,
referred
to
as
"sub-protocol"
in
the
WebSocket
RFC
specification
Handles
both
WebSocketMessages
from
a
client
as
well
as
Messages
to
a
client
<p>
Implementations
of
this
interface
can
be
configured
on
a
SubProtocolWebSocketHandler
which
selects
a
sub-protocol
handler
to
delegate
messages
to
based
on
the
sub-protocol
requested
by
the
client
through
the
Sec-WebSocket-Protocol
request
header
:end
:start
Return
the
list
of
sub-protocols
supported
by
this
handler,
never
null
:end
:start
Handle
the
given
WebSocketMessage
received
from
a
client
:end
:start
Handle
the
given
Message
to
the
client
associated
with
the
given
WebSocket
session
:end
:start
Resolve
the
session
id
from
the
given
message
or
return
null
:end
:start
Invoked
after
a
WebSocketSession
has
started
:end
:start
Invoked
after
a
WebSocketSession
has
ended
:end
:start
An
implementation
of
WebSocketHandler
that
delegates
incoming
WebSocket
messages
to
a
SubProtocolHandler
along
with
a
MessageChannel
to
which
the
sub-protocol
handler
can
send
messages
from
WebSocket
clients
to
the
application
<p>
Also
an
implementation
of
MessageHandler
that
finds
the
WebSocket
session
associated
with
the
Message
and
passes
it,
along
with
the
message,
to
the
sub-protocol
handler
to
send
messages
from
the
application
back
to
the
client
:end
:start
Configure
one
or
more
handlers
to
use
depending
on
the
sub-protocol
requested
by
the
client
in
the
WebSocket
handshake
request
:end
:start
Register
a
sub-protocol
handler
:end
:start
Return
the
sub-protocols
keyed
by
protocol
name
:end
:start
Set
the
SubProtocolHandler
to
use
when
the
client
did
not
request
a
sub-protocol
:end
:start
Return
all
supported
protocols
:end
:start
A
WebSocket
ping
message
:end
:start
Create
a
new
ping
message
with
an
empty
payload
:end
:start
Create
a
new
ping
message
with
the
given
ByteBuffer
payload
:end
:start
A
WebSocket
pong
message
:end
:start
Create
a
new
pong
message
with
an
empty
payload
:end
:start
Create
a
new
pong
message
with
the
given
ByteBuffer
payload
:end
:start
Thrown
when
handshake
processing
failed
to
complete
due
to
an
internal,
unrecoverable
error
This
implies
a
server
error
(HTTP
status
code
500)
as
opposed
to
a
failure
in
the
handshake
negotiation
<p>By
contrast,
when
handshake
negotiation
fails,
the
response
status
code
will
be
200
and
the
response
headers
and
body
will
have
been
updated
to
reflect
the
cause
for
the
failure
A
HandshakeHandler
implementation
will
have
protected
methods
to
customize
updates
to
the
response
in
those
cases
:end
:start
Constructor
with
message
and
root
cause
:end
:start
Constructor
without
a
message
:end
:start
Contract
for
processing
a
WebSocket
handshake
request
:end
:start
Initiate
the
handshake
:end
:start
Interceptor
for
WebSocket
handshake
requests
Can
be
used
to
inspect
the
handshake
request
and
response
as
well
as
to
pass
attributes
to
the
target
WebSocketHandler
:end
:start
Invoked
before
the
handshake
is
processed
:end
:start
Invoked
after
the
handshake
is
done
The
response
status
and
headers
indicate
the
results
of
the
handshake,
ie
whether
it
was
successful
or
not
:end
:start
RequestUpgradeStrategy
for
use
with
Jetty
9
Based
on
Jetty's
internal
orgeclipsejettywebsocketserverWebSocketHandler
class
:end
:start
Default
constructor
that
creates
WebSocketServerFactory
through
its
default
constructor
thus
using
a
default
WebSocketPolicy
:end
:start
A
constructor
accepting
a
WebSocketServerFactory
This
may
be
useful
for
modifying
the
factory's
WebSocketPolicy
via
WebSocketServerFactory#getPolicy()
:end
:start
A
server-specific
strategy
for
performing
the
actual
upgrade
to
a
WebSocket
exchange
:end
:start
Return
the
supported
WebSocket
protocol
versions
:end
:start
Perform
runtime
specific
steps
to
complete
the
upgrade
Invoked
after
successful
negotiation
of
the
handshake
request
:end
:start
A
base
class
for
RequestUpgradeStrategy
implementations
that
build
on
the
standard
WebSocket
API
for
Java
(JSR-356)
:end
:start
RequestUpgradeStrategy
that
provides
support
for
GlassFish
4
and
beyond
:end
:start
Detects
beans
of
type
javaxwebsocketserverServerEndpointConfig
and
registers
with
the
standard
Java
WebSocket
runtime
Also
detects
beans
annotated
with
ServerEndpoint
and
registers
them
as
well
Although
not
required,
it
is
likely
annotated
endpoints
should
have
their
configurator
property
set
to
SpringConfigurator
<p>When
this
class
is
used,
by
declaring
it
in
Spring
configuration,
it
should
be
possible
to
turn
off
a
Servlet
container's
scan
for
WebSocket
endpoints
This
can
be
done
with
the
help
of
the
<absolute-ordering>
element
in
webxml
:end
:start
Explicitly
list
annotated
endpoint
types
that
should
be
registered
on
startup
This
can
be
done
if
you
wish
to
turn
off
a
Servlet
container's
scan
for
endpoints,
which
goes
through
all
3rd
party
jars
in
the,
and
rely
on
Spring
configuration
instead
:end
:start
An
implementation
of
javaxwebsocketserverServerEndpointConfig
for
use
in
Spring
applications
A
ServerEndpointRegistration
bean
is
detected
by
ServerEndpointExporter
and
registered
with
a
Java
WebSocket
runtime
at
startup
<p>Class
constructors
accept
a
singleton
javaxwebsocketEndpoint
instance
or
an
Endpoint
specified
by
type
Class
When
specified
by
type,
the
endpoint
will
be
instantiated
and
initialized
through
the
Spring
ApplicationContext
before
each
client
WebSocket
connection
<p>This
class
also
extends
javaxwebsocketserverServerEndpointConfigConfigurator
to
make
it
easier
to
override
methods
for
customizing
the
handshake
process
:end
:start
Create
a
new
ServerEndpointRegistration
instance
from
an
javaxwebscoketEndpoint
class
:end
:start
Create
a
new
ServerEndpointRegistration
instance
from
an
javaxwebsocketEndpoint
instance
:end
:start
A
FactoryBean
for
configuring
javaxwebsocketserverServerContainer
Since
there
is
only
one
ServerContainer
instance
accessible
under
a
well-known
javaxservletServletContext
attribute,
simply
declaring
this
FactoryBean
and
using
its
setters
allows
configuring
the
ServerContainer
through
Spring
configuration
<p>This
is
useful
even
if
the
ServerContainer
is
not
injected
into
any
other
bean
For
example,
an
application
can
configure
a
orgspringframeworkwebsocketserversupportDefaultHandshakeHandler,
a
orgspringframeworkwebsocketsockjsSockJsService,
or
ServerEndpointExporter,
and
separately
declare
this
FactoryBean
in
order
to
customize
the
properties
of
the
(one
and
only)
ServerContainer
instance
:end
:start
A
javaxwebsocketserverServerEndpointConfigConfigurator
for
initializing
ServerEndpoint-annotated
classes
through
Spring
<p>
<pre
class="code">
&#064;ServerEndpoint(value
=
"/echo",
configurator
=
SpringConfiguratorclass)
public
class
EchoEndpoint
//


</pre>
:end
:start
Tomcat
support
for
upgrading
an
HttpServletRequest
during
a
WebSocket
handshake
To
modify
properties
of
the
underlying
javaxwebsocketserverServerContainer
you
can
use
ServletServerContainerFactoryBean
in
XML
configuration
or
if
using
Java
configuration,
access
the
container
instance
through
the
"javaxwebsocketserverServerContainer"
ServletContext
attribute
:end
:start
A
orgspringframeworkwebsocketserverRequestUpgradeStrategy
for
use
with
WildFly
and
its
underlying
Undertow
web
server
:end
:start
A
default
orgspringframeworkwebsocketserverHandshakeHandler
implementation
Performs
initial
validation
of
the
WebSocket
handshake
request
--
possibly
rejecting
it
through
the
appropriate
HTTP
status
code
--
while
also
allowing
sub-classes
to
override
various
parts
of
the
negotiation
process
(eg
origin
validation,
sub-protocol
negotiation,
extensions
negotiation,
etc)
<p>If
the
negotiation
succeeds,
the
actual
upgrade
is
delegated
to
a
server-specific
orgspringframeworkwebsocketserverRequestUpgradeStrategy,
which
will
update
the
response
as
necessary
and
initialize
the
WebSocket
Currently
supported
servers
are
Tomcat
7
and
8,
Jetty
9,
and
GlassFish
4
:end
:start
Default
constructor
that
autodetects
and
instantiates
a
RequestUpgradeStrategy
suitable
for
the
runtime
container
:end
:start
A
constructor
that
accepts
a
runtime-specific
RequestUpgradeStrategy
:end
:start
Use
this
property
to
configure
the
list
of
supported
sub-protocols
The
first
configured
sub-protocol
that
matches
a
client-requested
sub-protocol
is
accepted
If
there
are
no
matches
the
response
will
not
contain
a
Sec-WebSocket-Protocol
header
<p>Note
that
if
the
WebSocketHandler
passed
in
at
runtime
is
an
instance
of
SubProtocolCapable
then
there
is
not
need
to
explicitly
configure
this
property
That
is
certainly
the
case
with
the
built-in
STOMP
over
WebSocket
support
Therefore
this
property
should
be
configured
explicitly
only
if
the
WebSocketHandler
does
not
implement
SubProtocolCapable
:end
:start
Return
the
list
of
supported
sub-protocols
:end
:start
Perform
the
sub-protocol
negotiation
based
on
requested
and
supported
sub-protocols
For
the
list
of
supported
sub-protocols,
this
method
first
checks
if
the
target
WebSocketHandler
is
a
SubProtocolCapable
and
then
also
checks
if
any
sub-protocols
have
been
explicitly
configured
with
#setSupportedProtocols(String)
:end
:start
Determine
the
sub-protocols
supported
by
the
given
WebSocketHandler
by
checking
whether
it
is
an
instance
of
SubProtocolCapable
:end
:start
Filter
the
list
of
requested
WebSocket
extensions
<p>By
default
all
request
extensions
are
returned
The
WebSocket
server
will
further
compare
the
requested
extensions
against
the
list
of
supported
extensions
and
return
only
the
ones
that
are
both
requested
and
supported
:end
:start
A
method
that
can
be
used
to
associate
a
user
with
the
WebSocket
session
in
the
process
of
being
established
The
default
implementation
calls
orgspringframeworkhttpserverServerHttpRequest#getPrincipal()
<p>
Sub-classes
can
provide
custom
logic
for
associating
a
user
with
a
session,
for
example
for
assigning
a
name
to
anonymous
users
(ie
not
fully
authenticated)
:end
:start
A
helper
class
that
assists
with
invoking
a
list
of
handshake
interceptors
:end
:start
An
interceptor
to
copy
HTTP
session
attributes
into
the
map
of
"handshake
attributes"
made
available
through
WebSocketSession#getAttributes()
:end
:start
A
constructor
for
copying
all
available
HTTP
session
attributes
:end
:start
A
constructor
for
copying
a
subset
of
HTTP
session
attributes
:end
:start
A
HttpRequestHandler
for
processing
WebSocket
handshake
requests
<p>This
is
the
main
class
to
use
when
configuring
a
server
WebSocket
at
a
specific
URL
It
is
a
very
thin
wrapper
around
a
HandshakeHandler
and
a
WebSocketHandler
instance
also
adapting
the
HttpServletRequest
and
HttpServletResponse
to
ServerHttpRequest
and
ServerHttpResponse
respectively
:end
:start
Return
the
WebSocketHandler
:end
:start
Return
the
HandshakeHandler
:end
:start
Configure
one
or
more
WebSocket
handshake
request
interceptors
:end
:start
Return
the
configured
WebSocket
handshake
request
interceptors
:end
:start
An
base
class
for
SockJS
message
codec
that
provides
an
implementation
of
#encode(String[])
:end
:start
Apply
standard
JSON
string
quoting
(see
http://wwwjsonorg/)
:end
:start
A
Jackson
2x
codec
for
encoding
and
decoding
SockJS
messages
:end
:start
Represents
a
SockJS
frame
and
provides
factory
methods
for
creating
SockJS
frames
:end
:start
Encode
and
decode
messages
to
and
from
a
SockJS
message
frame,
essentially
an
array
of
JSON-encoded
messages
For
example:
<pre>
a["message1","message2"]
</pre>
:end
:start
Encode
the
given
messages
as
a
SockJS
message
frame
Aside
from
applying
standard
JSON
quoting
to
each
message,
there
are
some
additional
JSON
Unicode
escaping
rules
See
the
"JSON
Unicode
Encoding"
section
of
SockJS
protocol
(ie
the
protocol
test
suite)
:end
:start
Decode
the
given
SockJS
message
frame
:end
:start
Decode
the
given
SockJS
message
frame
:end
:start
Base
class
for
exceptions
raised
while
processing
SockJS
HTTP
requests
:end
:start
An
exception
thrown
when
a
message
frame
was
successfully
received
over
an
HTTP
POST
and
parsed
but
one
or
more
of
the
messages
it
contained
could
not
be
delivered
to
the
WebSocketHandler
either
because
the
handler
failed
or
because
the
connection
got
closed
<p>The
SockJS
session
is
not
automatically
closed
after
this
exception
:end
:start
The
main
entry
point
for
processing
HTTP
requests
from
SockJS
clients
<p>In
a
Servlet
3+
container,
orgspringframeworkwebsocketsockjssupportSockJsHttpRequestHandler
can
be
used
to
invoke
this
service
The
processing
servlet,
as
well
as
all
filters
involved,
must
have
asynchronous
support
enabled
through
the
ServletContext
API
or
by
adding
an
<async-support>true</async-support>
element
to
servlet
and
filter
declarations
in
webxml
:end
:start
Process
a
SockJS
HTTP
request
<p>See
the
"Base
URL",
"Static
URLs",
and
"Session
URLs"
sections
of
the
<a
href="http://sockjsgithubio/sockjs-protocol/sockjs-protocol-033html">SockJS
protocol</a>
for
details
on
the
types
of
URLs
expected
:end
:start
Indicates
a
serious
failure
that
occurred
in
the
SockJS
implementation
as
opposed
to
in
user
code
(eg
IOException
while
writing
to
the
response)
When
this
exception
is
raised,
the
SockJS
session
is
typically
closed
:end
:start
An
abstract
base
class
for
SockJsService
implementations
that
provides
SockJS
path
resolution
and
handling
of
static
SockJS
requests
(eg
"/info",
"/iframehtml",
etc)
Sub-classes
must
handle
session
URLs
(ie
transport-specific
requests)
:end
:start
A
unique
name
for
the
service
mainly
for
logging
purposes
:end
:start
Transports
which
don't
support
cross-domain
communication
natively
(eg
"eventsource",
"htmlfile")
rely
on
serving
a
simple
page
(using
the
"foreign"
domain)
from
an
invisible
iframe
Code
run
from
this
iframe
doesn't
need
to
worry
about
cross-domain
issues
since
it
is
running
from
a
domain
local
to
the
SockJS
server
The
iframe
does
need
to
load
the
SockJS
javascript
client
library
and
this
option
allows
configuring
that
url
For
more
details
see
the
reference
documentation
<p>By
default
this
is
set
to
point
to
"https://d1fxtkz8shb9d2cloudfrontnet/sockjs-034minjs"
:end
:start
The
URL
to
the
SockJS
JavaScript
client
library
:end
:start
Streaming
transports
save
responses
on
the
client
side
and
don't
free
memory
used
by
delivered
messages
Such
transports
need
to
recycle
the
connection
once
in
a
while
This
property
sets
a
minimum
number
of
bytes
that
can
be
send
over
a
single
HTTP
streaming
request
before
it
will
be
closed
After
that
client
will
open
a
new
request
Setting
this
value
to
one
effectively
disables
streaming
and
will
make
streaming
transports
to
behave
like
polling
transports
<p>The
default
value
is
128K
(ie
128
*
1024)
:end
:start
The
SockJS
protocol
requires
a
server
to
respond
to
an
initial
"/info"
request
from
clients
with
a
"cookie_needed"
boolean
property
that
indicates
whether
the
use
of
a
JSESSIONID
cookie
is
required
for
the
application
to
function
correctly,
eg
for
load
balancing
or
in
Java
Servlet
containers
for
the
use
of
an
HTTP
session
<p>This
is
especially
important
for
IE
8,9
that
support
XDomainRequest
--
a
modified
AJAX/XHR
--
that
can
do
requests
across
domains
but
does
not
send
any
cookies
In
those
cases,
the
SockJS
client
prefers
the
"iframe-htmlfile"
transport
over
"xdr-streaming"
in
order
to
be
able
to
send
cookies
<p>The
SockJS
protocol
also
expects
a
SockJS
service
to
echo
back
the
JSESSIONID
cookie
when
this
property
is
set
to
true
However,
when
running
in
a
Servlet
container
this
is
not
necessary
since
the
container
takes
care
of
it
<p>The
default
value
is
"true"
to
maximize
the
chance
for
applications
to
work
correctly
in
IE
8,9
with
support
for
cookies
(and
the
JSESSIONID
cookie
in
particular)
However,
an
application
can
choose
to
set
this
to
"false"
if
the
use
of
cookies
(and
HTTP
session)
is
not
required
:end
:start
Whether
JSESSIONID
cookie
is
required
for
the
application
to
function
For
more
detail
see
#setSessionCookieNeeded(boolean)
:end
:start
The
amount
of
time
in
milliseconds
when
the
server
has
not
sent
any
messages
and
after
which
the
server
should
send
a
heartbeat
frame
to
the
client
in
order
to
keep
the
connection
from
breaking
<p>The
default
value
is
25,000
(25
seconds)
:end
:start
A
scheduler
instance
to
use
for
scheduling
heart-beat
messages
:end
:start
The
amount
of
time
in
milliseconds
before
a
client
is
considered
disconnected
after
not
having
a
receiving
connection,
ie
an
active
connection
over
which
the
server
can
send
data
to
the
client
<p>The
default
value
is
5000
:end
:start
Return
the
amount
of
time
in
milliseconds
before
a
client
is
considered
disconnected
:end
:start
The
number
of
server-to-client
messages
that
a
session
can
cache
while
waiting
for
the
next
HTTP
polling
request
from
the
client
All
HTTP
transports
use
this
property
since
even
streaming
transports
recycle
HTTP
requests
periodically
<p>The
amount
of
time
between
HTTP
requests
should
be
relatively
brief
and
will
not
exceed
the
allows
disconnect
delay
(see
#setDisconnectDelay(long)),
5
seconds
by
default
<p>The
default
size
is
100
:end
:start
Return
the
size
of
the
HTTP
message
cache
:end
:start
Some
load
balancers
don't
support
WebSocket
This
option
can
be
used
to
disable
the
WebSocket
transport
on
the
server
side
<p>The
default
value
is
"true"
:end
:start
Whether
WebSocket
transport
is
enabled
:end
:start
<p>This
method
determines
the
SockJS
path
and
handles
SockJS
static
URLs
Session
URLs
and
raw
WebSocket
requests
are
delegated
to
abstract
methods
:end
:start
Handle
request
for
raw
WebSocket
communication,
ie
without
any
SockJS
message
framing
:end
:start
Handle
a
SockJS
session
URL
(ie
transport-specific
request)
:end
:start
An
HttpRequestHandler
that
allows
mapping
a
SockJsService
to
requests
in
a
Servlet
container
:end
:start
Create
a
new
SockJsHttpRequestHandler
:end
:start
Return
the
SockJsService
:end
:start
Return
the
WebSocketHandler
:end
:start
Base
class
for
HTTP
transport
handlers
that
receive
messages
via
HTTP
POST
:end
:start
Base
class
for
HTTP
transport
handlers
that
push
messages
to
connected
clients
:end
:start
A
default
implementation
of
orgspringframeworkwebsocketsockjsSockJsService
with
all
default
TransportHandler
implementations
pre-registered
:end
:start
Create
a
DefaultSockJsService
with
default
TransportHandler
handler
types
:end
:start
Create
a
DefaultSockJsService
with
overridden
TransportHandler
handler
types
replacing
the
corresponding
default
handler
implementation
:end
:start
Create
a
DefaultSockJsService
with
overridden
TransportHandler
handler
types
replacing
the
corresponding
default
handler
implementation
:end
:start
A
TransportHandler
for
sending
messages
via
Server-Sent
events:
<a
href="http://devw3org/html5/eventsource/">http://devw3org/html5/eventsource/</a>
:end
:start
An
HTTP
TransportHandler
that
uses
a
famous
browsder
documentdomain
technique:
<a
href="http://stackoverflowcom/questions/1481251/what-does-document-domain-document-domain-do">
http://stackoverflowcom/questions/1481251/what-does-document-domain-document-domain-do</a>
:end
:start
A
TransportHandler
that
sends
messages
via
JSONP
polling
:end
:start
A
TransportHandler
that
receives
messages
over
HTTP
:end
:start
An
implementation
of
WebSocketHandler
that
adds
SockJS
messages
frames,
sends
SockJS
heartbeat
messages,
and
delegates
lifecycle
events
and
messages
to
a
target
WebSocketHandler
<p>Methods
in
this
class
allow
exceptions
from
the
wrapped
WebSocketHandler
to
propagate
However,
any
exceptions
resulting
from
SockJS
message
handling
(eg
while
sending
SockJS
frames
or
heartbeat
messages)
are
caught
and
treated
as
transport
errors,
ie
routed
to
the
WebSocketHandler#handleTransportError(WebSocketSession,
Throwable)
handleTransportError
method
of
the
wrapped
handler
and
the
session
closed
:end
:start
WebSocket-based
TransportHandler
Uses
SockJsWebSocketHandler
and
WebSocketServerSockJsSession
to
add
SockJS
processing
<p>Also
implements
HandshakeHandler
to
support
raw
WebSocket
communication
at
SockJS
URL
"/websocket"
:end
:start
A
TransportHandler
based
on
XHR
(long)
polling
:end
:start
A
TransportHandler
that
receives
messages
over
HTTP
:end
:start
A
TransportHandler
that
sends
messages
over
an
HTTP
streaming
request
:end
:start
An
abstract
base
class
for
use
with
HTTP
transport
based
SockJS
sessions
:end
:start
Unlike
WebSocket
where
sub-protocol
negotiation
is
part
of
the
initial
handshake,
in
HTTP
transports
the
same
negotiation
must
be
emulated
and
the
selected
protocol
set
through
this
setter
:end
:start
Return
the
selected
sub-protocol
to
use
:end
:start
Return
response
for
the
current
request,
or
null
if
between
requests
:end
:start
Return
the
SockJS
buffer
for
messages
stored
transparently
between
polling
requests
If
the
polling
request
takes
longer
than
5
seconds,
the
session
will
be
closed
:end
:start
Handle
the
first
HTTP
request,
ie
the
one
that
starts
a
SockJS
session
Write
a
prelude
to
the
response
(if
needed),
send
the
SockJS
"open"
frame
to
indicate
to
the
client
the
session
is
opened,
and
invoke
the
delegate
WebSocketHandler
to
provide
it
with
the
newly
opened
session
<p>
The
"xhr"
and
"jsonp"
(polling-based)
transports
completes
the
initial
request
as
soon
as
the
open
frame
is
sent
Following
that
the
client
should
start
a
successive
polling
request
within
the
same
SockJS
session
<p>
The
"xhr_streaming",
"eventsource",
and
"htmlfile"
transports
are
streaming
based
and
will
leave
the
initial
request
open
in
order
to
stream
one
or
more
messages
However,
even
streaming
based
transports
eventually
recycle
the
long
running
request,
after
a
certain
number
of
bytes
have
been
streamed
(128K
by
default),
and
allow
the
client
to
start
a
successive
request
within
the
same
SockJS
session
:end
:start
Handle
all
HTTP
requests
part
of
the
same
SockJS
session
except
for
the
very
first,
initial
request
Write
a
prelude
(if
needed)
and
keep
the
request
open
and
ready
to
send
a
message
from
the
server
to
the
client
<p>
The
"xhr"
and
"jsonp"
(polling-based)
transports
completes
the
request
when
the
next
message
is
sent,
which
could
be
an
array
of
messages
cached
during
the
time
between
successive
requests,
or
it
could
be
a
heartbeat
message
sent
if
no
other
messages
were
sent
(by
default
within
25
seconds)
<p>
The
"xhr_streaming",
"eventsource",
and
"htmlfile"
transports
are
streaming
based
and
will
leave
the
request
open
longer
in
order
to
stream
messages
over
a
period
of
time
However,
even
streaming
based
transports
eventually
recycle
the
long
running
request,
after
a
certain
number
of
bytes
have
been
streamed
(128K
by
default),
and
allow
the
client
to
start
a
successive
request
within
the
same
SockJS
session
:end
:start
Only
called
if
the
connection
is
currently
active
:end
:start
An
abstract
base
class
for
SockJS
sessions
implementing
SockJsSession
:end
:start
Log
category
to
use
on
network
IO
exceptions
after
a
client
has
gone
away
<p>The
Servlet
API
does
not
provide
notifications
when
a
client
disconnects;
see
<a
href="https://javanet/jira/browse/SERVLET_SPEC-44">SERVLET_SPEC-44</a>
Therefore
network
IO
failures
may
occur
simply
because
a
client
has
gone
away,
and
that
can
fill
the
logs
with
unnecessary
stack
traces
<p>We
make
a
best
effort
to
identify
such
network
failures,
on
a
per-server
basis,
and
log
them
under
a
separate
log
category
A
simple
one-line
message
is
logged
at
DEBUG
level,
while
a
full
stack
trace
is
shown
at
TRACE
level
:end
:start
Separate
logger
to
use
on
network
IO
failure
after
a
client
has
gone
away
:end
:start
Create
a
new
instance
:end
:start
Polling
and
Streaming
sessions
periodically
close
the
current
HTTP
request
and
wait
for
the
next
request
to
come
through
During
this
"downtime"
the
session
is
still
open
but
inactive
and
unable
to
send
messages
and
therefore
has
to
buffer
them
temporarily
A
WebSocket
session
by
contrast
is
stateful
and
remain
active
until
closed
:end
:start
Should
be
invoked
whenever
the
session
becomes
inactive
:end
:start
Invoked
in
reaction
to
the
underlying
connection
being
closed
by
the
remote
side
(or
the
WebSocket
container)
in
order
to
perform
cleanup
and
notify
the
WebSocketHandler
This
is
in
contrast
to
#close()
that
pro-actively
closes
the
connection
:end
:start
<p>Performs
cleanup
and
notifies
the
WebSocketHandler
:end
:start
<p>Performs
cleanup
and
notifies
the
WebSocketHandler
:end
:start
Actually
close
the
underlying
WebSocket
session
or
in
the
case
of
HTTP
transports
complete
the
underlying
request
:end
:start
Close
due
to
error
arising
from
SockJS
transport
handling
:end
:start
For
internal
use
within
a
TransportHandler
and
the
(TransportHandler-specific)
session
class
:end
:start
A
SockJS
session
for
use
with
polling
HTTP
transports
:end
:start
A
SockJS
session
for
use
with
streaming
HTTP
transports
:end
:start
A
SockJS
session
for
use
with
the
WebSocket
transport
:end
:start
Provides
transport
handling
code
with
access
to
the
SockJsService
configuration
options
they
need
to
have
access
to
Mainly
for
internal
use
:end
:start
A
scheduler
instance
to
use
for
scheduling
heart-beat
messages
:end
:start
Streaming
transports
save
responses
on
the
client
side
and
don't
free
memory
used
by
delivered
messages
Such
transports
need
to
recycle
the
connection
once
in
a
while
This
property
sets
a
minimum
number
of
bytes
that
can
be
send
over
a
single
HTTP
streaming
request
before
it
will
be
closed
After
that
client
will
open
a
new
request
Setting
this
value
to
one
effectively
disables
streaming
and
will
make
streaming
transports
to
behave
like
polling
transports
<p>The
default
value
is
128K
(ie
128
*
1024)
:end
:start
The
amount
of
time
in
milliseconds
when
the
server
has
not
sent
any
messages
and
after
which
the
server
should
send
a
heartbeat
frame
to
the
client
in
order
to
keep
the
connection
from
breaking
<p>The
default
value
is
25,000
(25
seconds)
:end
:start
The
number
of
server-to-client
messages
that
a
session
can
cache
while
waiting
for
the
next
HTTP
polling
request
from
the
client
All
HTTP
transports
use
this
property
since
even
streaming
transports
recycle
HTTP
requests
periodically
<p>The
amount
of
time
between
HTTP
requests
should
be
relatively
brief
and
will
not
exceed
the
allows
disconnect
delay
(see
orgspringframeworkwebsocketsockjssupportAbstractSockJsService#setDisconnectDelay(long),
5
seconds
by
default
<p>The
default
size
is
100
:end
:start
The
codec
to
use
for
encoding
and
decoding
SockJS
messages
:end
:start
SockJS
extension
of
Spring's
standard
WebSocketSession
:end
:start
Return
the
time
(in
ms)
since
the
session
was
last
active,
or
otherwise
if
the
session
is
new,
then
the
time
since
the
session
was
created
:end
:start
Disable
SockJS
heartbeat,
presumably
because
a
higher
level
protocol
has
heartbeats
enabled
for
the
session
It
is
not
recommended
to
disable
this
otherwise
as
it
helps
proxies
to
know
the
connection
is
not
hanging
:end
:start
A
factory
for
creating
a
SockJS
session
TransportHandlers
typically
also
serve
as
SockJS
session
factories
:end
:start
Create
a
new
SockJS
session
:end
:start
Handle
a
SockJS
session
URL,
ie
transport-specific
request
:end
:start
Initialize
this
handler
with
the
given
configuration
:end
:start
Return
the
transport
type
supported
by
this
handler
:end
:start
Handle
the
given
request
and
delegate
messages
to
the
provided
WebSocketHandler
:end
:start
A
basic
implementation
of
orgspringframeworkwebsocketsockjsSockJsService
with
support
for
SPI-based
transport
handling
and
session
management
<p>Based
on
the
TransportHandler
SPI
TransportHandlers
may
additionally
implement
the
SockJsSessionFactory
and
HandshakeHandler
interfaces
<p>See
the
AbstractSockJsService
base
class
for
important
details
on
request
mapping
:end
:start
Create
a
TransportHandlingSockJsService
with
given
TransportHandler
handler
types
:end
:start
Create
a
TransportHandlingSockJsService
with
given
TransportHandler
handler
types
:end
:start
Return
the
registered
handlers
per
transport
type
:end
:start
The
codec
to
use
for
encoding
and
decoding
SockJS
messages
:end
:start
Configure
one
or
more
WebSocket
handshake
request
interceptors
:end
:start
Return
the
configured
WebSocket
handshake
request
interceptors
:end
:start
SockJS
transport
types
:end
:start
The
HTTP
method
for
this
transport
:end
:start
An
interface
for
WebSocket
handlers
that
support
sub-protocols
as
defined
in
RFC
6455
:end
:start
Return
the
list
of
supported
sub-protocols
:end
:start
A
text
WebSocket
message
:end
:start
Create
a
new
text
WebSocket
message
from
the
given
CharSequence
payload
:end
:start
Create
a
new
text
WebSocket
message
from
the
given
byte[]
It
is
assumed
the
byte
array
can
be
encoded
into
an
UTF-8
String
:end
:start
Create
a
new
text
WebSocket
message
with
the
given
payload
representing
the
full
or
partial
message
content
When
the
isLast
boolean
flag
is
set
to
false
the
message
is
sent
as
partial
content
and
more
partial
messages
will
be
expected
until
the
boolean
flag
is
set
to
true
:end
:start
Represents
a
WebSocket
extension
as
defined
in
the
RFC
6455
WebSocket
extensions
add
protocol
features
to
the
WebSocket
protocol
The
extensions
used
within
a
session
are
negotiated
during
the
handshake
phase
as
follows:
<ul>
<li>the
client
may
ask
for
specific
extensions
in
the
HTTP
handshake
request</li>
<li>the
server
responds
with
the
final
list
of
extensions
to
use
in
the
current
session</li>
</ul>
<p>WebSocket
Extension
HTTP
headers
may
include
parameters
and
follow
<a
href="https://toolsietforg/html/rfc2616#section-42">RFC
2616
Section
42</a></p>
<p>Note
that
the
order
of
extensions
in
HTTP
headers
defines
their
order
of
execution,
eg
extensions
"foo,
bar"
will
be
executed
as
"bar(foo(message))"</p>
:end
:start
Create
a
WebSocketExtension
with
the
given
name
:end
:start
Create
a
WebSocketExtension
with
the
given
name
and
parameters
:end
:start
Parse
the
given,
comma-separated
string
into
a
list
of
WebSocketExtension
objects
<p>This
method
can
be
used
to
parse
a
"Sec-WebSocket-Extension"
extensions
:end
:start
A
handler
for
WebSocket
messages
and
lifecycle
events
<p>Implementations
of
this
interface
are
encouraged
to
handle
exceptions
locally
where
it
makes
sense
or
alternatively
let
the
exception
bubble
up
in
which
case
by
default
the
exception
is
logged
and
the
session
closed
with
CloseStatus#SERVER_ERROR
SERVER_ERROR(1011)
The
exception
handling
strategy
is
provided
by
orgspringframeworkwebsockethandlerExceptionWebSocketHandlerDecorator
ExceptionWebSocketHandlerDecorator
and
it
can
be
customized
or
replaced
by
decorating
the
WebSocketHandler
with
a
different
decorator
:end
:start
Invoked
after
WebSocket
negotiation
has
succeeded
and
the
WebSocket
connection
is
opened
and
ready
for
use
:end
:start
Invoked
when
a
new
WebSocket
message
arrives
:end
:start
Handle
an
error
from
the
underlying
WebSocket
message
transport
:end
:start
Invoked
after
the
WebSocket
connection
has
been
closed
by
either
side,
or
after
a
transport
error
has
occurred
Although
the
session
may
technically
still
be
open,
depending
on
the
underlying
implementation,
sending
messages
at
this
point
is
discouraged
and
most
likely
will
not
succeed
:end
:start
Whether
the
WebSocketHandler
handles
partial
messages
If
this
flag
is
set
to
true
and
the
underlying
WebSocket
server
supports
partial
messages,
then
a
large
WebSocket
message,
or
one
of
an
unknown
size
may
be
split
and
maybe
received
over
multiple
calls
to
#handleMessage(WebSocketSession,
WebSocketMessage)
The
flag
orgspringframeworkwebsocketWebSocketMessage#isLast()
indicates
if
the
message
is
partial
and
whether
it
is
the
last
part
:end
:start
An
orgspringframeworkhttpHttpHeaders
variant
that
adds
support
for
the
HTTP
headers
defined
by
the
WebSocket
specification
RFC
6455
:end
:start
Create
a
new
instance
:end
:start
Create
an
instance
that
wraps
the
given
pre-existing
HttpHeaders
and
also
propagate
all
changes
to
it
:end
:start
Returns
WebSocketHttpHeaders
object
that
can
only
be
read,
not
written
to
:end
:start
Sets
the
(new)
value
of
the
Sec-WebSocket-Accept
header
:end
:start
Returns
the
value
of
the
Sec-WebSocket-Accept
header
:end
:start
Returns
the
value
of
the
Sec-WebSocket-Extensions
header
:end
:start
Sets
the
(new)
value(s)
of
the
Sec-WebSocket-Extensions
header
:end
:start
Sets
the
(new)
value
of
the
Sec-WebSocket-Key
header
:end
:start
Returns
the
value
of
the
Sec-WebSocket-Key
header
:end
:start
Sets
the
(new)
value
of
the
Sec-WebSocket-Protocol
header
:end
:start
Sets
the
(new)
value
of
the
Sec-WebSocket-Protocol
header
:end
:start
Returns
the
value
of
the
Sec-WebSocket-Key
header
:end
:start
Sets
the
(new)
value
of
the
Sec-WebSocket-Version
header
:end
:start
Returns
the
value
of
the
Sec-WebSocket-Version
header
:end
:start
Return
the
first
header
value
for
the
given
header
name,
if
any
:end
:start
Add
the
given,
single
header
value
under
the
given
name
:end
:start
Set
the
given,
single
header
value
under
the
given
name
:end
:start
A
message
that
can
be
handled
or
sent
on
a
WebSocket
connection
:end
:start
Returns
the
message
payload
This
will
never
be
null
:end
:start
Return
the
number
of
bytes
contained
in
the
message
:end
:start
When
partial
message
support
is
available
and
requested
via
orgspringframeworkwebsocketWebSocketHandler#supportsPartialMessages(),
this
method
returns
true
if
the
current
message
is
the
last
part
of
the
complete
WebSocket
message
sent
by
the
client
Otherwise
false
is
returned
if
partial
message
support
is
either
not
available
or
not
enabled
:end
:start
A
WebSocket
session
abstraction
Allows
sending
messages
over
a
WebSocket
connection
and
closing
it
:end
:start
Return
a
unique
session
identifier
:end
:start
Return
the
URI
used
to
open
the
WebSocket
connection
:end
:start
Return
the
headers
used
in
the
handshake
request
:end
:start
Return
the
map
with
attributes
associated
with
the
WebSocket
session
<p>When
the
WebSocketSession
is
created,
on
the
server
side,
the
map
can
be
through
a
orgspringframeworkwebsocketserverHandshakeInterceptor
On
the
client
side,
the
map
can
be
populated
by
passing
attributes
to
the
orgspringframeworkwebsocketclientWebSocketClient
handshake
methods
:end
:start
Return
a
javasecurityPrincipal
instance
containing
the
name
of
the
authenticated
user
If
the
user
has
not
been
authenticated,
the
method
returns
<code>null</code>
:end
:start
Return
the
address
on
which
the
request
was
received
:end
:start
Return
the
address
of
the
remote
client
:end
:start
Return
the
negotiated
sub-protocol
or
null
if
none
was
specified
or
negotiated
successfully
:end
:start
Configure
the
maximum
size
for
an
incoming
text
message
:end
:start
Get
the
configured
maximum
size
for
an
incoming
text
message
:end
:start
Configure
the
maximum
size
for
an
incoming
binary
message
:end
:start
Get
the
configured
maximum
size
for
an
incoming
binary
message
:end
:start
Return
the
negotiated
extensions
or
null
if
none
was
specified
or
negotiated
successfully
:end
:start
Return
whether
the
connection
is
still
open
:end
:start
Send
a
WebSocket
message
either
TextMessage
or
BinaryMessage
:end
:start
Close
the
WebSocket
connection
with
status
1000,
ie
equivalent
to:
<pre
class="code">
sessionclose(CloseStatusNORMAL);
</pre>
:end
:start
Close
the
WebSocket
connection
with
the
given
close
status
:end
:start
A
builder
for
creating
WebSocket
messages
with
STOMP
frame
content
:end
